import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-Dg7YJ3hy.js";const l={},n=e(`<h2 id="ienumerable" tabindex="-1"><a class="header-anchor" href="#ienumerable"><span>IEnumerable</span></a></h2><p>最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该<code>IEnumerable&lt;T&gt;</code>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。 设置默认值</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> IEnumerable</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">AddTimePeriodDto</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> TimePeriod</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Enumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">AddTimePeriodDto</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="iqueryable" tabindex="-1"><a class="header-anchor" href="#iqueryable"><span>IQueryable</span></a></h2><p>实现了<code>IEnumerable&lt;T&gt;</code>，包含<code>IEnumerable&lt;T&gt;</code>的全部功能，在System.Linq的命名空间中，通过下面的代码来比较IQueryable和IEnumerable</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 当遇到 ToList() 等方法后，在数据库中执行，执行的 SQL 语句会是 \`TOP(3)\` 这种，只查前3条 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IQueryable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">persons</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> _dbContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Persons</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Where</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">......</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">persons</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> persons</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Take</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 将所有符合 Where() 条件的数据都查到内存中，再取 3 条</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">persons</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> _dbContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Persons</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Where</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">......</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">persons</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> persons</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Take</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在数据源上执行linq操作来提高效率，那么就使用IQueryable，如果想将一些处理在内存中处理，那么这个时候就需要使用到IEnumerable</p><h2 id="icollection-t" tabindex="-1"><a class="header-anchor" href="#icollection-t"><span><code>ICollection&lt;T&gt;</code></span></a></h2><p>继承了<code>IEnumerable&lt;T&gt;</code>, IEnumerable，包含<code>IEnumerable&lt;T&gt;</code>的全部功能，还支持添加、删除集合中的元素，使用Add()和Remove()等方法。</p><h3 id="数组t" tabindex="-1"><a class="header-anchor" href="#数组t"><span>数组T[]</span></a></h3><p>继承自<code>ICollection&lt;T&gt;</code></p><h3 id="ilist-t" tabindex="-1"><a class="header-anchor" href="#ilist-t"><span><code>IList&lt;T&gt;</code></span></a></h3><p>继承自<code>ICollection&lt;T&gt;</code>,<code>IEnumerable&lt;T&gt;</code>，在原来的基础上增加了IndexOf、Insert、RemoveAt等方法</p><h3 id="list-t" tabindex="-1"><a class="header-anchor" href="#list-t"><span><code>List&lt;T&gt;</code></span></a></h3><p>继承自<code>ICollection&lt;T&gt;</code>, <code>IEnumerable&lt;T&gt;</code>, <code>IEnumerable</code>, <code>IList&lt;T&gt;</code>, <code>IReadOnlyCollection&lt;T&gt;</code>, <code>IReadOnlyList&lt;T&gt;</code>, <code>ICollection</code>, <code>IList</code>在原有的基础上增加了不少方法</p><h2 id="ireadonlycollection" tabindex="-1"><a class="header-anchor" href="#ireadonlycollection"><span>IReadonlyCollection</span></a></h2><p>不可变集合，增加了count属性</p><h3 id="ireadonlylist-t" tabindex="-1"><a class="header-anchor" href="#ireadonlylist-t"><span><code>IReadOnlyList&lt;T&gt;</code></span></a></h3><p>继承自：<code>IEnumerable&lt;T&gt;</code>, <code>IEnumerable</code>, <code>IReadOnlyCollection&lt;T&gt;</code>，在原有的基础上增加了通过索引获取值的方法。</p><h2 id="blockingcollection" tabindex="-1"><a class="header-anchor" href="#blockingcollection"><span>BlockingCollection</span></a></h2><p><a href="https://www.cnblogs.com/baibaomen-org/p/17162795.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/baibaomen-org/p/17162795.html</a></p><p>如果你想玩转C## 里面多线程，工厂模式，生产者/消费者,队列等高级操作，就可以和我一起探索这个强大的线程安全提供阻塞和限制功能的.Net神器类</p><h2 id="collectionsmarshal" tabindex="-1"><a class="header-anchor" href="#collectionsmarshal"><span>CollectionsMarshal</span></a></h2><p>基础使用示例</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">var list = new List&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">var aaa = CollectionsMarshal.AsSpan(list);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合选择" tabindex="-1"><a class="header-anchor" href="#集合选择"><span>集合选择</span></a></h2><p>只考虑各种集合类型的功能，得出的初步但不完全合适的规则：</p><ol><li>当需要添加和删除集合中的元素时，用 <code>ICollection&lt;T&gt;</code>；</li><li>当需要在数据源上执行 LINQ 操作以提升效率时，选择 <code>IQueryable&lt;T&gt;</code>，典型场景是使用 EF Core 等 ORM 框架时；</li><li>其他情况选择 <code>IEnumerable&lt;T&gt;</code>。</li></ol><p>进一步考虑可维护性等元素，得出的规则：</p><ol><li>当你的方法需要一个集合类型的输入参数时，可以选择 <code>IEnumerable&lt;T&gt;</code>；</li><li>返回集合类型时选择 <code>IReadOnlyCollection&lt;T&gt;</code> 或它的子类。</li></ol><p>促使我们不把 <code>IEnumerable&lt;T&gt;</code> 作为返回集合类型实际上还有一个原因。就是 <code>IEnumerable&lt;T&gt;</code> 有“延迟评估”的特性。 资料：<a href="https://cat.aiursoft.cn/post/2023/3/10/a-guide-to-ienumerable-iqueryable-and-icollection" target="_blank" rel="noopener noreferrer">https://cat.aiursoft.cn/post/2023/3/10/a-guide-to-ienumerable-iqueryable-and-icollection</a></p><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><h3 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct"><span>Distinct</span></a></h3><p>自定义去重</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserInfo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> UserName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> Password</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CustomerComparer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">IEqualityComparer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Equals</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">UserName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">UserName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> GetHashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserInfo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">UserName</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">GetHashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> list</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">UserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {  </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">UserName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Password</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {  </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">UserName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">Password</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> distinctList</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToList</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 2条</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> customerDistinctList</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> CustomerComparer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToList</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 1条</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="orderby" tabindex="-1"><a class="header-anchor" href="#orderby"><span>OrderBy</span></a></h3><p>自定义排序支持，通过安装nuget包：NaturalSort.Extension 更新日志：<a href="https://dotnet.libhunt.com/naturalsort-extension-changelog" target="_blank" rel="noopener noreferrer">https://dotnet.libhunt.com/naturalsort-extension-changelog</a></p><h3 id="yield" tabindex="-1"><a class="header-anchor" href="#yield"><span>Yield</span></a></h3><p>关于 yield 关键字（C#）<a href="https://www.cnblogs.com/czzj/p/yield.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/czzj/p/yield.html</a></p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/iJKWQ7Zfv3QLBSLE3kA-_A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/iJKWQ7Zfv3QLBSLE3kA-_A</a> | .NET性能优化之快速遍历List集合</p>`,43),t=[n];function h(k,p){return a(),s("div",null,t)}const c=i(l,[["render",h],["__file","ienumerable.html.vue"]]),o=JSON.parse('{"path":"/dotnet/csharp/jigecaozuo/ienumerable.html","title":"IEnumerable","lang":"zh-CN","frontmatter":{"title":"IEnumerable","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"ienumerable","slug":"gynli5","docsId":"49851115","description":"IEnumerable 最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该IEnumerable<T>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。 设置默认值 IQueryable 实现了IEnumerable<T>，包含IEnumerable<T>的全部功能，在System.L...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/jigecaozuo/ienumerable.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"IEnumerable"}],["meta",{"property":"og:description","content":"IEnumerable 最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该IEnumerable<T>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。 设置默认值 IQueryable 实现了IEnumerable<T>，包含IEnumerable<T>的全部功能，在System.L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T15:44:14.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T15:44:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IEnumerable\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T15:44:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"IEnumerable","slug":"ienumerable","link":"#ienumerable","children":[]},{"level":2,"title":"IQueryable","slug":"iqueryable","link":"#iqueryable","children":[]},{"level":2,"title":"ICollection<T>","slug":"icollection-t","link":"#icollection-t","children":[{"level":3,"title":"数组T[]","slug":"数组t","link":"#数组t","children":[]},{"level":3,"title":"IList<T>","slug":"ilist-t","link":"#ilist-t","children":[]},{"level":3,"title":"List<T>","slug":"list-t","link":"#list-t","children":[]}]},{"level":2,"title":"IReadonlyCollection","slug":"ireadonlycollection","link":"#ireadonlycollection","children":[{"level":3,"title":"IReadOnlyList<T>","slug":"ireadonlylist-t","link":"#ireadonlylist-t","children":[]}]},{"level":2,"title":"BlockingCollection","slug":"blockingcollection","link":"#blockingcollection","children":[]},{"level":2,"title":"CollectionsMarshal","slug":"collectionsmarshal","link":"#collectionsmarshal","children":[]},{"level":2,"title":"集合选择","slug":"集合选择","link":"#集合选择","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[{"level":3,"title":"Distinct","slug":"distinct","link":"#distinct","children":[]},{"level":3,"title":"OrderBy","slug":"orderby","link":"#orderby","children":[]},{"level":3,"title":"Yield","slug":"yield","link":"#yield","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700235854000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.88,"words":865},"filePathRelative":"dotnet/csharp/jigecaozuo/ienumerable.md","localizedDate":"2023年10月22日","excerpt":"<h2>IEnumerable</h2>\\n<p>最常用的接口，它可以标识任何类型的集合，包括数组、列表、集合、字典、文件、网络流等，实现该<code>IEnumerable&lt;T&gt;</code>的类型或者接口可以使用foreach进行遍历，还可以使用yield语句返回值。\\n设置默认值</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" data-title=\\"csharp\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> IEnumerable</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&lt;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">AddTimePeriodDto</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">&gt;</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> TimePeriod</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">get</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">set</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">; } </span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\"> Enumerable</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Empty</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&lt;</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\">AddTimePeriodDto</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">&gt;();</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,o as data};
