import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-DMmdIwn0.js";const t="/kbms/common/1620114697921-ec54ae34-14f7-494a-8838-1e02508354de.png",o="/kbms/common/1620113847152-b27a4e87-8ccf-4527-94a9-de6786468dde.png",p="/kbms/common/1620114885227-ae67bc3b-34e6-432d-b62c-8ef1575cbb97.png",c="/kbms/common/1620114980256-a86bd9cb-359f-4ca7-aa3b-9bad47194332.png",i="/kbms/common/1620125723376-4c9d566d-96ab-4efc-946f-5e0a8f8c1880.png",l="/kbms/common/1620126200751-8af1177d-27a2-4e0a-af9c-5b775bc5d897.png",r="/kbms/common/1620126343906-3c39dff8-efbc-4923-b0be-e4e3c708bc36.png",u="/kbms/common/1620126434943-262542b9-3891-4176-a902-969110ecdbef.png",d="/kbms/common/1620126753488-31720434-e70e-4786-b066-a945f799514f.png",k="/kbms/common/1620126993761-4b491825-c995-428d-8b70-73cca1f61e50.png",m="/kbms/common/1620127336787-2035f32c-1ee8-43cf-9f98-1365a01f939f.png",g="/kbms/common/1620127500213-09647065-50fa-4f69-a6dd-ba1d55139118.png",b="/kbms/common/1620128138104-9e5826f4-d51d-48f8-892d-332f30e05540.png",h="/kbms/common/1620127732462-86f9b796-901c-48ad-b4fe-50e1e7e0329c.png",v="/kbms/common/1620127757485-a736e466-acf6-4bba-9e41-142896f6c372.png",f="/kbms/common/1620127785048-7e6a416c-2cdd-4168-a9af-03949f8046cb.png",y={},q=e('<h2 id="开篇语" tabindex="-1"><a class="header-anchor" href="#开篇语"><span>开篇语</span></a></h2><p>自己从头开始走一遍docker部署.net的流程，作为一种学习总结，以及后续会写一些在该基础之上的文章。</p><blockquote><p>本次示例环境：vs2019、net5、docker、postman</p></blockquote><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目"><span>创建项目</span></a></h2><p>本次事例代码是用过vs2019创建的ASP.NET Core Web API项目 <img src="'+t+'" alt="image.png" loading="lazy"> 目标框架是.Net5，无需身份验证，不配置HTTPS(根据个人需求勾选)，启动Docker(我习惯于后期添加)，启用OpenAPI支持(添加swagger文档) <img src="'+o+'" alt="image.png" loading="lazy"></p><h3 id="默认配置" tabindex="-1"><a class="header-anchor" href="#默认配置"><span>默认配置</span></a></h3><p>创建完成后，我们查看项目目录为下 <img src="'+p+'" alt="image.png" loading="lazy"> 我们直接F5启动项目，发现直接跳转一个API文档页面 <img src="'+c+`" alt="image.png" loading="lazy"></p><blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p></blockquote><h3 id="修改配置" tabindex="-1"><a class="header-anchor" href="#修改配置"><span>修改配置</span></a></h3><p>我基于个人习惯，我修改launchSettings.json文件，删除IIS配置，删除后如下所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;$schema&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http://json.schemastore.org/launchsettings.json&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;profiles&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;Net5ByDocker&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;commandName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Project&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;launchBrowser&quot;</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token string">&quot;launchUrl&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;swagger&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;environmentVariables&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Development&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token string">&quot;dotnetRunMessages&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;applicationUrl&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;http://localhost:5000&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除默认控制器，添加新的控制器UserController，在里面添加默认一些方法操作，如下</p><blockquote><p>基于个人习惯的操作，也可以不删除默认控制器</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]/[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> userInfo<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromBody</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                userInfo<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> userInfo<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpDelete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
                userInfo<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> userInfo<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他配置保持默认，启动项目 <img src="`+i+'" alt="image.png" loading="lazy"></p><h2 id="生成镜像" tabindex="-1"><a class="header-anchor" href="#生成镜像"><span>生成镜像</span></a></h2><h3 id="添加dockerfile" tabindex="-1"><a class="header-anchor" href="#添加dockerfile"><span>添加dockerfile</span></a></h3><p>选中项目右键添加docker支持，本次部署在windows平台 <img src="'+l+'" alt="image.png" loading="lazy"></p><blockquote><p>拉取基础镜像和sdk，还原nuget包，重新生成，发布</p></blockquote><p>此时项目的目录结构为 <img src="'+r+'" alt="image.png" loading="lazy"></p><h3 id="运行命令" tabindex="-1"><a class="header-anchor" href="#运行命令"><span>运行命令</span></a></h3><p>在文件资源管理器打开文件 <img src="'+u+`" alt="image.png" loading="lazy"> 在上层目录下运行cmd输入命令</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker build <span class="token operator">-</span>f <span class="token punctuation">.</span>\\Net5ByDocker\\Dockerfile <span class="token operator">-</span>t net5sample <span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>在不同的目录下命令有些许差异，这点非常感谢我的朋友<strong>王老师</strong></p></blockquote><figure><img src="`+d+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>注意：可能部分朋友在这一步会拉取官方镜像比较慢，可以配置docker加速器使用</p></blockquote><p>通过docker客户端查看我们已经生成的镜像 <img src="'+k+`" alt="image.png" loading="lazy"></p><h2 id="生成容器" tabindex="-1"><a class="header-anchor" href="#生成容器"><span>生成容器</span></a></h2><p>本文通过<strong>Terminal</strong>软件执行命令</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker run <span class="token operator">--</span>name net5sampleone <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8060</span><span class="token punctuation">:</span><span class="token number">80</span> net5sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>命令简述： -d 后台运行 --name 容器名称 -p 端口映射</p></blockquote><p>截至到这，我们已经把刚才的项目生成了容器，下面我们可以直接通过容器方法上面的项目</p><h2 id="验证项目" tabindex="-1"><a class="header-anchor" href="#验证项目"><span>验证项目</span></a></h2><p>通过浏览器访问地址：localhost:8060/swagger <img src="`+m+'" alt="image.png" loading="lazy"> 懵逼！！！这个时候不是应该出来swagger文档的界面吗？难道我们部署的方式有问题？ 让我们访问下项目的接口 <img src="'+g+'" alt="image.png" loading="lazy"> 说明我们的项目运行是正常的，仔细查看swagger配置后发现，因为为了安全默认不允许发布后出来swagger文档 <img src="'+b+'" alt="image.png" loading="lazy"></p><blockquote><p>如果是测试环境或者特殊情况可以通过调整swagger配置位置来显示文档</p></blockquote><h3 id="通过postman访问" tabindex="-1"><a class="header-anchor" href="#通过postman访问"><span>通过Postman访问</span></a></h3><h4 id="添加用户" tabindex="-1"><a class="header-anchor" href="#添加用户"><span>添加用户</span></a></h4><figure><img src="'+h+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="查询用户" tabindex="-1"><a class="header-anchor" href="#查询用户"><span>查询用户</span></a></h4><figure><img src="'+v+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="删除用户" tabindex="-1"><a class="header-anchor" href="#删除用户"><span>删除用户</span></a></h4><p><img src="'+f+'" alt="image.png" loading="lazy"> 再次运行查询接口数据已经为空了。</p>',42),_=[q];function z(w,N){return s(),a("div",null,_)}const P=n(y,[["render",z],["__file","dockerReleaseNetCore.html.vue"]]),I=JSON.parse('{"path":"/dotnet/buildAndRelease/release/dockerReleaseNetCore.html","title":"docker部署netcore全流程","lang":"zh-CN","frontmatter":{"title":"docker部署netcore全流程","lang":"zh-CN","date":"2023-09-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"dockerbushunetcorequanliucheng","slug":"iqxvgp","docsId":"44702943","description":"开篇语 自己从头开始走一遍docker部署.net的流程，作为一种学习总结，以及后续会写一些在该基础之上的文章。 本次示例环境：vs2019、net5、docker、postman 创建项目 本次事例代码是用过vs2019创建的ASP.NET Core Web API项目 image.png 目标框架是.Net5，无需身份验证，不配置HTTPS(根据个...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/buildAndRelease/release/dockerReleaseNetCore.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"docker部署netcore全流程"}],["meta",{"property":"og:description","content":"开篇语 自己从头开始走一遍docker部署.net的流程，作为一种学习总结，以及后续会写一些在该基础之上的文章。 本次示例环境：vs2019、net5、docker、postman 创建项目 本次事例代码是用过vs2019创建的ASP.NET Core Web API项目 image.png 目标框架是.Net5，无需身份验证，不配置HTTPS(根据个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1620114697921-ec54ae34-14f7-494a-8838-1e02508354de.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T15:31:40.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T15:31:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker部署netcore全流程\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1620114697921-ec54ae34-14f7-494a-8838-1e02508354de.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620113847152-b27a4e87-8ccf-4527-94a9-de6786468dde.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620114885227-ae67bc3b-34e6-432d-b62c-8ef1575cbb97.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620114980256-a86bd9cb-359f-4ca7-aa3b-9bad47194332.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620125723376-4c9d566d-96ab-4efc-946f-5e0a8f8c1880.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620126200751-8af1177d-27a2-4e0a-af9c-5b775bc5d897.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620126343906-3c39dff8-efbc-4923-b0be-e4e3c708bc36.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620126434943-262542b9-3891-4176-a902-969110ecdbef.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620126753488-31720434-e70e-4786-b066-a945f799514f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620126993761-4b491825-c995-428d-8b70-73cca1f61e50.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620127336787-2035f32c-1ee8-43cf-9f98-1365a01f939f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620127500213-09647065-50fa-4f69-a6dd-ba1d55139118.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620128138104-9e5826f4-d51d-48f8-892d-332f30e05540.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620127732462-86f9b796-901c-48ad-b4fe-50e1e7e0329c.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620127757485-a736e466-acf6-4bba-9e41-142896f6c372.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620127785048-7e6a416c-2cdd-4168-a9af-03949f8046cb.png\\"],\\"datePublished\\":\\"2023-09-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T15:31:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"开篇语","slug":"开篇语","link":"#开篇语","children":[]},{"level":2,"title":"创建项目","slug":"创建项目","link":"#创建项目","children":[{"level":3,"title":"默认配置","slug":"默认配置","link":"#默认配置","children":[]},{"level":3,"title":"修改配置","slug":"修改配置","link":"#修改配置","children":[]}]},{"level":2,"title":"生成镜像","slug":"生成镜像","link":"#生成镜像","children":[{"level":3,"title":"添加dockerfile","slug":"添加dockerfile","link":"#添加dockerfile","children":[]},{"level":3,"title":"运行命令","slug":"运行命令","link":"#运行命令","children":[]}]},{"level":2,"title":"生成容器","slug":"生成容器","link":"#生成容器","children":[]},{"level":2,"title":"验证项目","slug":"验证项目","link":"#验证项目","children":[{"level":3,"title":"通过Postman访问","slug":"通过postman访问","link":"#通过postman访问","children":[{"level":4,"title":"添加用户","slug":"添加用户","link":"#添加用户","children":[]},{"level":4,"title":"查询用户","slug":"查询用户","link":"#查询用户","children":[]},{"level":4,"title":"删除用户","slug":"删除用户","link":"#删除用户","children":[]}]}]}],"git":{"createdTime":1697962303000,"updatedTime":1708875100000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.05,"words":914},"filePathRelative":"dotnet/buildAndRelease/release/dockerReleaseNetCore.md","localizedDate":"2023年9月29日","excerpt":"<h2>开篇语</h2>\\n<p>自己从头开始走一遍docker部署.net的流程，作为一种学习总结，以及后续会写一些在该基础之上的文章。</p>\\n<blockquote>\\n<p>本次示例环境：vs2019、net5、docker、postman</p>\\n</blockquote>\\n<h2>创建项目</h2>\\n<p>本次事例代码是用过vs2019创建的ASP.NET Core Web API项目\\n<img src=\\"/common/1620114697921-ec54ae34-14f7-494a-8838-1e02508354de.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n目标框架是.Net5，无需身份验证，不配置HTTPS(根据个人需求勾选)，启动Docker(我习惯于后期添加)，启用OpenAPI支持(添加swagger文档)\\n<img src=\\"/common/1620113847152-b27a4e87-8ccf-4527-94a9-de6786468dde.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{P as comp,I as data};
