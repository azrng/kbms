import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-S-drW72G.js";const n="/kbms/common/1644063003069-a7a550c1-c987-45ad-bed2-74aa7cd9b6fd.webp",l="/kbms/common/1644063061682-66c65d9f-c361-4326-a444-e87d1ec2b7e1.webp",t="/kbms/common/1644063096645-6b0f1af1-c541-42a9-885b-3fbafd112378.webp",h="/kbms/common/1644063137407-a192a536-8b58-4c91-a8e9-8358f056e677.webp",p={},r=e(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>新建一个ASP.NET Core Web API项目，使用命令行方式启动，连续发送多次请求。 第一次执行（116ms）比后面的（2ms）慢了很多。</p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><p>为了更好定位Web API执行情况，示例Controller代码如下：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">HttpGet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> now</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Now</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> now</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TotalMilliseconds</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> HttpContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TraceIdentifier</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Thread.Sleep用于将框架代码和业务执行代码执行时间分开</li><li>while循环用于延长业务执行时间，方便找到业务代码</li></ul><h2 id="perfview" tabindex="-1"><a class="header-anchor" href="#perfview"><span>PerfView</span></a></h2><p>PerfView是一款免费的性能分析工具，可帮助排查CPU和内存相关的性能问题。 从https://github.com/Microsoft/perfview/releases下载最新版本PerfView并启动。</p><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><p>点击主界面上的“Collect data machine wide”链接，打开收集数据窗口： <img src="`+n+'" alt="" loading="lazy">为了记录所有操作，需要设置“CPU Sample Interval”为较小值（0.125）。</p><h3 id="收集" tabindex="-1"><a class="header-anchor" href="#收集"><span>收集</span></a></h3><ul><li>使用命令行方式启动Web API</li><li>点击收集数据窗口的“Start Collection”按钮</li><li>执行Web API请求</li><li>再点击“Stop Collection”按钮。</li></ul><p>收集完成后，会生成.etl.zip文件： <img src="'+l+'" alt="" loading="lazy"> 双击“CPU Stacks”，会打开“Select Process Window”（选择进程窗口），因为PerfView实际收集了所有进程的性能数据。 选择Web API对应的进程，点击“OK”按钮。</p><h3 id="火焰图" tabindex="-1"><a class="header-anchor" href="#火焰图"><span>火焰图</span></a></h3><p>在打开的窗口中选择“Flame Graph”(火焰图)选项卡,上方的“GroupPats”选择“[group class entries] {%!}.%(=&gt;class $1;{%!}::=&gt;class $1”，可以看到如下效果： <img src="'+t+'" alt="" loading="lazy"> 火焰图是用来展示CPU的调用栈的图形：</p><ul><li>y轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。</li><li>x轴表示每个函数相对执行的时间长短。</li></ul><h3 id="speedscore" tabindex="-1"><a class="header-anchor" href="#speedscore"><span>SpeedScore</span></a></h3><p>由于调用的函数较多，火焰图并不能很清晰地反映。 这时，我们可以使用speedscope，一个交互式火焰图可视化工具，帮助我们分析。 选择菜单&quot;File&quot;-&gt;&quot;Save View As&quot;，文件类型选择“speed scope”。 打开网站https://www.speedscope.app/，将刚才保存的文件导入，效果如下图： <img src="'+h+'" alt="" loading="lazy"> 顶部是线程列表，下面是所选线程对应的火焰图，可以看到它的堆栈顺序与PerfView相反，是从上到下的。 很容易定位到Web API执行的线程，因为可以看到Thread.Sleep留出的2段空白。</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><p>图中相同的颜色块表示同一函数，我们只需要找到和业务代码同一行颜色不同的位置，就表示处于不同方法调用中。 先看业务代码执行前，从上往下看，很快就定位到一个运行时间较长的位置。 执行的是Http1Connection.TryParseRequest方法，耗时11.85ms，<strong>可见重用连接是非常有必要的</strong>。 下面是找到的部分耗时比较大的方法：</p><ul><li>执行前 <ul><li>Microsoft.AspNetCore.Routing.Matching.DfaMatcherFactory.CreateMatcher - 22.73ms</li><li>Microsoft.AspNetCore.Mvc.Infrastructure.ActionInvokerFactory.CreateInvoker - 30.15ms</li></ul></li><li>执行后 <ul><li>Microsoft.AspNetCore.Mvc.Formatters.TextOutputFormatter.WriteAsync - 5.79ms</li></ul></li></ul><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>后面请求快的原因也可以解释了，<strong>比如重用Http连接，方法内部缓存了结果（DfaMatcherFactory调用了DataSourceDependentCache）</strong>，这也为提高我们自己程序的性能指明了思路。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/lgE4aueTwnHX7lEarDb4kQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/lgE4aueTwnHX7lEarDb4kQ</a> | 差距50倍！为什么Web API第一次执行这么慢？</p>',25),k=[r];function d(c,g){return a(),s("div",null,k)}const m=i(p,[["render",d],["__file","diyicizhihangmanxingnengfenxi.html.vue"]]),y=JSON.parse('{"path":"/dotnet/debugging/jibendiaoshigongju/diyicizhihangmanxingnengfenxi.html","title":"第一次执行慢性能分析","lang":"zh-CN","frontmatter":{"title":"第一次执行慢性能分析","lang":"zh-CN","date":"2023-09-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"diyicizhihangmanxingnengfenxi","slug":"oztygk","docsId":"66024743","description":"前言 新建一个ASP.NET Core Web API项目，使用命令行方式启动，连续发送多次请求。 第一次执行（116ms）比后面的（2ms）慢了很多。 示例代码 为了更好定位Web API执行情况，示例Controller代码如下： Thread.Sleep用于将框架代码和业务执行代码执行时间分开 while循环用于延长业务执行时间，方便找到业务代码...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/debugging/jibendiaoshigongju/diyicizhihangmanxingnengfenxi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"第一次执行慢性能分析"}],["meta",{"property":"og:description","content":"前言 新建一个ASP.NET Core Web API项目，使用命令行方式启动，连续发送多次请求。 第一次执行（116ms）比后面的（2ms）慢了很多。 示例代码 为了更好定位Web API执行情况，示例Controller代码如下： Thread.Sleep用于将框架代码和业务执行代码执行时间分开 while循环用于延长业务执行时间，方便找到业务代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1644063003069-a7a550c1-c987-45ad-bed2-74aa7cd9b6fd.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-18T04:27:19.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-18T04:27:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第一次执行慢性能分析\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1644063003069-a7a550c1-c987-45ad-bed2-74aa7cd9b6fd.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1644063061682-66c65d9f-c361-4326-a444-e87d1ec2b7e1.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1644063096645-6b0f1af1-c541-42a9-885b-3fbafd112378.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1644063137407-a192a536-8b58-4c91-a8e9-8358f056e677.webp\\"],\\"datePublished\\":\\"2023-09-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-18T04:27:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]},{"level":2,"title":"PerfView","slug":"perfview","link":"#perfview","children":[{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"收集","slug":"收集","link":"#收集","children":[]},{"level":3,"title":"火焰图","slug":"火焰图","link":"#火焰图","children":[]},{"level":3,"title":"SpeedScore","slug":"speedscore","link":"#speedscore","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1702873639000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":2.86,"words":858},"filePathRelative":"dotnet/debugging/jibendiaoshigongju/diyicizhihangmanxingnengfenxi.md","localizedDate":"2023年9月20日","excerpt":"<h2>前言</h2>\\n<p>新建一个ASP.NET Core Web API项目，使用命令行方式启动，连续发送多次请求。\\n第一次执行（116ms）比后面的（2ms）慢了很多。</p>\\n<h2>示例代码</h2>\\n<p>为了更好定位Web API执行情况，示例Controller代码如下：</p>\\n<div class=\\"language-csharp line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"csharp\\" data-title=\\"csharp\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E5C07B\\">HttpGet</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\"> string</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\"> Get</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">    Thread</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Sleep</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">10</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    var</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\"> now</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\"> DateTime</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">Now</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    while</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> ((</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">DateTime</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">Now</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> -</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> now</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">).</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">TotalMilliseconds</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> &lt;</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> 10</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">        </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    var</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#E06C75\\"> result</span><span style=\\"--shiki-light:#D73A49;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\"> HttpContext</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">TraceIdentifier</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">    Thread</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">Sleep</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\">10</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#D73A49;--shiki-dark:#C678DD\\">    return</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\"> result</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{m as comp,y as data};
