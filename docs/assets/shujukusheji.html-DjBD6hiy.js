import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as r,c as i,b as e,e as t,f as s}from"./app-Bfb6-vFH.js";const p={},c={href:"http://wubx.net/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8E%9F%E5%88%99/",target:"_blank",rel:"noopener noreferrer"};function u(l,m){const n=o("ExternalLinkIcon");return r(),i("div",null,[e("p",null,[t("任何数据库设计都不应该一一对应UI，UI只是你设计的参考而已，只是很多情况下业务模型正好和UI对应而已。   一个业务的成败在于产品设计，一个系统设计的好坏，成败在于程序员，在业务正确的情况下，请先消化业务在开始设计系统，UI只是你消化业务的参考，UI只是你业务的具体可视化体现。   1.不应该针对整个系统去设计数据库，而要将整个系统划分开成不同的组件，针对组件设置数据库；不同组件所对应的数据库表之前的关联应该尽可能的少，确保组件之间的独立性，为系统或者表结构重构提供可能性。 2.根据职责定义对象，对象要符合封装特性，确保与职责相关的数据项被定义在一个对象之内，这些数据项能够描述该职责，不会出现职责描述缺失。并且一个对象有且只有一项职责，如果一个对象负责两个以上的职责，应进行拆分。 3.针对所有表的主键和外键建立索引，对常用的检索方式上面创建组合索引，提高检索的效率。 4.设计出的表尽可能的减少数据冗余，确保数据的准确性。 "),e("a",c,[t("参考地址"),s(n)])])])}const d=a(p,[["render",u],["__file","shujukusheji.html.vue"]]),g=JSON.parse('{"path":"/dataBase/gongyoubufen/shujukusheji.html","title":"数据库设计","lang":"zh-CN","frontmatter":{"title":"数据库设计","lang":"zh-CN","date":"2023-07-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"shujukusheji","slug":"pphagm","docsId":"29711551","description":"任何数据库设计都不应该一一对应UI，UI只是你设计的参考而已，只是很多情况下业务模型正好和UI对应而已。 一个业务的成败在于产品设计，一个系统设计的好坏，成败在于程序员，在业务正确的情况下，请先消化业务在开始设计系统，UI只是你消化业务的参考，UI只是你业务的具体可视化体现。 1.不应该针对整个系统去设计数据库，而要将整个系统划分开成不同的组件，针对组...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/gongyoubufen/shujukusheji.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据库设计"}],["meta",{"property":"og:description","content":"任何数据库设计都不应该一一对应UI，UI只是你设计的参考而已，只是很多情况下业务模型正好和UI对应而已。 一个业务的成败在于产品设计，一个系统设计的好坏，成败在于程序员，在业务正确的情况下，请先消化业务在开始设计系统，UI只是你消化业务的参考，UI只是你业务的具体可视化体现。 1.不应该针对整个系统去设计数据库，而要将整个系统划分开成不同的组件，针对组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-23T15:53:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-23T15:53:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库设计\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-23T15:53:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1695484404000,"updatedTime":1695484404000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.48,"words":444},"filePathRelative":"dataBase/gongyoubufen/shujukusheji.md","localizedDate":"2023年7月29日","excerpt":"<p>任何数据库设计都不应该一一对应UI，UI只是你设计的参考而已，只是很多情况下业务模型正好和UI对应而已。\\n&nbsp;\\n一个业务的成败在于产品设计，一个系统设计的好坏，成败在于程序员，在业务正确的情况下，请先消化业务在开始设计系统，UI只是你消化业务的参考，UI只是你业务的具体可视化体现。\\n&nbsp;\\n1.不应该针对整个系统去设计数据库，而要将整个系统划分开成不同的组件，针对组件设置数据库；不同组件所对应的数据库表之前的关联应该尽可能的少，确保组件之间的独立性，为系统或者表结构重构提供可能性。\\n2.根据职责定义对象，对象要符合封装特性，确保与职责相关的数据项被定义在一个对象之内，这些数据项能够描述该职责，不会出现职责描述缺失。并且一个对象有且只有一项职责，如果一个对象负责两个以上的职责，应进行拆分。\\n3.针对所有表的主键和外键建立索引，对常用的检索方式上面创建组合索引，提高检索的效率。\\n4.设计出的表尽可能的减少数据冗余，确保数据的准确性。\\n<a href=\\"http://wubx.net/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8E%9F%E5%88%99/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考地址</a></p>","autoDesc":true}');export{d as comp,g as data};
