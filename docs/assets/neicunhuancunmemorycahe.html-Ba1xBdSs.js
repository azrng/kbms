import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as n,e as s,f as t,d as i}from"./app-Bfb6-vFH.js";const l="/kbms/common/1619011217302-f7c961c7-35d2-4ab8-a976-f440a86cf8ab.png",u="/kbms/common/1619012068314-c59f28a0-d9a1-4961-b91a-2e63d739c113.png",k="/kbms/common/1614392140126-43623db8-f997-4d49-9594-4fb2bfc977b1.png",r={},d=i(`<h2 id="_1-memorycahe" tabindex="-1"><a class="header-anchor" href="#_1-memorycahe"><span>1. MemoryCahe</span></a></h2><p>NetCore中的缓存和System.Runtime.Caching很相似，但是在功能上做了增强，缓存的key支持object类型，提供了泛型支持；可以读缓存和单个缓存项的大小做限定，可以设置缓存的压缩比例。</p><h3 id="_1-1-简单入门" tabindex="-1"><a class="header-anchor" href="#_1-1-简单入门"><span>1.1 简单入门</span></a></h3><p>netcore中缓存相关的类库都在 Microsoft.Extensions.Caching ，使用MemoryCache首先安装包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Caching.Memory&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注入到容器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//添加缓存配置</span>
	services<span class="token punctuation">.</span><span class="token function">AddMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMemoryCache</span> _cache<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">HomeController</span><span class="token punctuation">(</span><span class="token class-name">IMemoryCache</span> cache<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	_cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//写</span>
	_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4545478244&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//读</span>
	<span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> _cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-过期时间" tabindex="-1"><a class="header-anchor" href="#_1-2-过期时间"><span>1.2 过期时间</span></a></h3><p>分为绝对过期时间(到某一个时间点一定过期)和滑动过期时间(有访问就一直续期)以及这两种的组合使用(设置绝对过期时间大于滑动过期时间，有访问就一直续期，直到续期到绝对过期时间点，就直接过期，)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//1.最简单使用方式</span>
_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;mykey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myvalue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.绝对过期时间，3秒后过期</span>
_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeOffset</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.绝对过期时间，效果同上</span>
_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4.滑动过期时间，3秒后,即三秒钟内被访问，则重新刷新缓存时间为3秒后</span>
<span class="token comment">//滑动过期：如果一个缓存项一直被频繁访问，那么这个缓存就会一直被续期而不会过期。</span>
_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value3&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheEntryOptions</span>
<span class="token punctuation">{</span>
	SlidingExpiration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;-----------暂停2秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//暂停2秒</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key1的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;key1被清除&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key2的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;key2被清除&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key3的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;key3被清除&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;-----------暂停2秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再次暂停2秒</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key1的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;key1被清除&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key2的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;key2被清除&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;key3的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;key3被清除&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在例子中key1,key2都是使用的绝对过期时间，key3使用的相对过期时间，2秒后第一次访问key1、key2、key3都没过期，其中key3的过期时间刷新了，重新设置为3秒后，所以再次暂停2秒后，key1、key2都过期了，key3仍然存在。</p></blockquote><p>程序运行结果如下： <img src="`+l+`" alt="image.png" loading="lazy"></p><h3 id="_1-2-常用配置" tabindex="-1"><a class="header-anchor" href="#_1-2-常用配置"><span>1.2 常用配置</span></a></h3><p>下边的例子介绍netcore中缓存的常用配置，直接看代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	services<span class="token punctuation">.</span><span class="token function">AddMemoryCache</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//缓存大小</span>
		options<span class="token punctuation">.</span>SizeLimit <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//如果设置了该值，那么每个set都必须设置size，并且超过了这个值的大小的会自动销毁 </span>
		<span class="token comment">//缓存满了时，压缩20%（即删除20份优先级低的缓存项）</span>
		options<span class="token punctuation">.</span>CompactionPercentage <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
		<span class="token comment">//两秒钟查找一次过期项</span>
		options<span class="token punctuation">.</span>ExpirationScanFrequency <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">TestSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//SizeLimit配置3</span>
	_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;item1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;11111&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheEntryOptions</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//这次缓存占有容量</span>
		Size <span class="token operator">=</span> <span class="token number">2</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;item2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;22222&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheEntryOptions</span>
	<span class="token punctuation">{</span>
		Size <span class="token operator">=</span> <span class="token number">2</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> item1 <span class="token operator">=</span> _cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;item1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 11111</span>
	<span class="token class-name"><span class="token keyword">var</span></span> item2 <span class="token operator">=</span> _cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;item2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出 null</span>

	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">TestOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//单个缓存项的配置</span>
	<span class="token class-name">MemoryCacheEntryOptions</span> cacheEntityOps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheEntryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">//绝对过期时间1</span>
		<span class="token comment">//AbsoluteExpiration = new DateTimeOffset(DateTime.Now.AddSeconds(2)),</span>
		<span class="token comment">//间隔少于3秒内一直有访问，则30秒过期</span>
		<span class="token comment">//AbsoluteExpirationRelativeToNow=TimeSpan.FromSeconds(3),</span>
		<span class="token comment">//相对过期时间 3s内不访问过期</span>
		SlidingExpiration <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token comment">//优先级，当缓存压缩时会优先清除优先级低的缓存项</span>
		Priority <span class="token operator">=</span> CacheItemPriority<span class="token punctuation">.</span>Low<span class="token punctuation">,</span><span class="token comment">//优先级等级：Low,Normal,High,NeverRemove</span>
		<span class="token comment">//缓存大小占1份</span>
		Size <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">//注册缓存项被清除时的回调，可以注册多个回调</span>
	cacheEntityOps<span class="token punctuation">.</span><span class="token function">RegisterPostEvictionCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">,</span> reason<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
	<span class="token punctuation">{</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;回调函数输出【键:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">key</span><span class="token punctuation">}</span></span><span class="token string">,值:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">value</span></span><span class="token punctuation">}</span></span><span class="token string">,被清除的原因:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">reason</span><span class="token punctuation">}</span></span><span class="token string">】&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	_cache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;mykey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myvalue&quot;</span><span class="token punctuation">,</span> cacheEntityOps<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;mykey的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;mykey&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;mykey缓存被清除了&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;------------------暂停3秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;mykey的值：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_cache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;mykey&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;mykey缓存被清除了&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意netcore中设置缓存和缓存项大小是没有单位的 缓存被清空的回调函数可以注册多个（System.Runtime.Caching清除缓存的回调只能是一个）。</p></blockquote><p>程序执行结果： <img src="`+u+`" alt="image.png" loading="lazy"></p><h3 id="_1-3-ichangetoken" tabindex="-1"><a class="header-anchor" href="#_1-3-ichangetoken"><span>1.3 IChangeToken</span></a></h3><p>上边我们已经简单了解了通过滑动过期时间和绝对过期时间来控制缓存的有效性，但是有时缓存的过期与否和时间没有联系，比如我们缓存一个文件的内容，不管缓存多久只要文件没有发生变化缓存都是有效的。在net framework中我们可以通过CacheDependency来控制，在net core中怎么控制呢？net core中我们可以使用IChangeToken接口轻松实现缓存的过期策略。先看一下IChangeToken接口：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IChangeToken</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 是否有变化发生</span>
	<span class="token return-type class-name"><span class="token keyword">bool</span></span> HasChanged <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token comment">// token是否会调用回调函数，为true时才会有效 </span>
	<span class="token return-type class-name"><span class="token keyword">bool</span></span> ActiveChangeCallbacks <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
	<span class="token comment">// 注册一个回调函数，当有变化时触发回调</span>
	<span class="token return-type class-name">IDisposable</span> <span class="token function">RegisterChangeCallback</span><span class="token punctuation">(</span><span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下IChangeToken实现缓存过期策略的两个例子：</p><h4 id="_1-3-1-监控文件" tabindex="-1"><a class="header-anchor" href="#_1-3-1-监控文件"><span>1.3.1 监控文件</span></a></h4><p>需要安装组件：Microsoft.Extensions.FileProviders.Physical</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name"><span class="token keyword">string</span></span> fileName <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>CurrentDirectory<span class="token punctuation">,</span> <span class="token string">&quot;someCacheData.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">MemoryCache</span> myCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCache</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">MemoryCacheEntryOptions</span> cacheEntityOps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheEntryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//PollingFileChangeToken是IChangeToken的实现类，通过轮询监控文件变化</span>
		cacheEntityOps<span class="token punctuation">.</span><span class="token function">AddExpirationToken</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>FileProviders<span class="token punctuation">.</span>Physical<span class="token punctuation">.</span>PollingFileChangeToken</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//缓存失效时，回调函数</span>
		cacheEntityOps<span class="token punctuation">.</span><span class="token function">RegisterPostEvictionCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">,</span> reason<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;文件【</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">key</span><span class="token punctuation">}</span></span><span class="token string">】改动了&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//添加缓存，key为文件名，value为文件内容</span>
		myCache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">,</span> cacheEntityOps<span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myCache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>PollingFileChangeToken通过轮询来监控文件有没有发生变化，如果文件中的内容发生改变，缓存就会自动过期。</p></blockquote><h4 id="_1-3-2-通过代码控制缓存过期" tabindex="-1"><a class="header-anchor" href="#_1-3-2-通过代码控制缓存过期"><span>1.3.2 通过代码控制缓存过期</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">MemoryCache</span> memoryCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCache</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">MemoryCacheEntryOptions</span> cacheEntityOps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryCacheEntryOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//使用CancellationChangeToken控制缓存过期</span>
		<span class="token class-name">CancellationTokenSource</span> tokenSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		cacheEntityOps<span class="token punctuation">.</span><span class="token function">AddExpirationToken</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationChangeToken</span><span class="token punctuation">(</span>tokenSource<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//设置缓存</span>
		memoryCache<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;mykey&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myvalue&quot;</span><span class="token punctuation">,</span> cacheEntityOps<span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>memoryCache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;mykey&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;缓存被清除了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//通过代码清除缓存</span>
		tokenSource<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>memoryCache<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;mykey&quot;</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">&quot;缓存被清除了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>tokenSource.Cancel方法发送取消信号，这个方法会触发缓存过期，基于此我们可以通过Cancel方法灵活的实现自定义的缓存策略。</p></blockquote><p>程序执行结果如下： <img src="`+k+`" alt="image.png" loading="lazy"></p><h3 id="_1-4-引用nuget包" tabindex="-1"><a class="header-anchor" href="#_1-4-引用nuget包"><span>1.4 引用Nuget包</span></a></h3><p>直接引用我自己简单封装的一个Nuget包(简单封装自己用，不要嘲笑)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Common.Cache.MemoryCache&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.1.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注入到容器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//注入</span>
	services<span class="token punctuation">.</span><span class="token function">AddMemoryCacheExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要使用的地方进行注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMemoryCachimg</span>  _cache<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">HomeController</span><span class="token punctuation">(</span><span class="token class-name">IMemoryCachimg</span> cache<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	_cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-lazycache" tabindex="-1"><a class="header-anchor" href="#_2-lazycache"><span>2. LazyCache</span></a></h2><blockquote><p>注意：很久不更新了</p></blockquote><h3 id="_2-1-描述" tabindex="-1"><a class="header-anchor" href="#_2-1-描述"><span>2.1 描述</span></a></h3><p>是一个基于内存的易于使用并且线程安全的缓存组件。Lazy的意思是LazyCache永远不会再缓存未命中的时候触发一次以上的缓存委托函数，因为使用了MemoryCache并且使用了懒锁来确保只会执行一次。 内置Lazy锁并且底层使用MemoryCache。     安装组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;LazyCache&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.1.3&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;LazyCache.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.1.3&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//ConfigureServices中注入服务</span>
services<span class="token punctuation">.</span><span class="token function">AddLazyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//控制器中使用构造函数注入IAppCache</span>

<span class="token comment">//操作实例</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> _appCache<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;yanshi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
_appCache<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;yanshi&quot;</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fasterkv" tabindex="-1"><a class="header-anchor" href="#fasterkv"><span>FasterKv</span></a></h2><p>FasterKv.Cache是一个基于微软FasterKv封装的进程内混合缓存库(内存+磁盘)。FasterKv它可以承载大于机器内存的Key-Value数据库，并且有着远超其它内存+磁盘数据库的性能。不过使用起来比较繁琐，对新人不友好，于是FasterKv.Cache在它的基础上进行了一层封装，让我们能更简单的处理缓存。</p><p>仓库地址：https://github.com/InCerryGit/FasterKvCache</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,49),m={href:"https://www.cnblogs.com/wyy1234/p/10519681.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.microsoft.com/zh-cn/aspnet/core/performance/caching/memory?view=aspnetcore-5.0",target:"_blank",rel:"noopener noreferrer"};function g(h,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[d,n("blockquote",null,[n("p",null,[s("作者：捞月亮的猴子 "),n("a",m,[s("https://www.cnblogs.com/wyy1234/p/10519681.html"),t(a)]),s(" 官方教程："),n("a",v,[s("https://docs.microsoft.com/zh-cn/aspnet/core/performance/caching/memory?view=aspnetcore-5.0"),t(a)])])])])}const q=e(r,[["render",g],["__file","neicunhuancunmemorycahe.html.vue"]]),C=JSON.parse('{"path":"/dotnet/base/huancun/neicunhuancunmemorycahe.html","title":"内存缓存MemoryCahe","lang":"zh-CN","frontmatter":{"title":"内存缓存MemoryCahe","lang":"zh-CN","date":"2023-08-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"neicunhuancunmemorycahe","slug":"gg83im","docsId":"72311515","description":"1. MemoryCahe NetCore中的缓存和System.Runtime.Caching很相似，但是在功能上做了增强，缓存的key支持object类型，提供了泛型支持；可以读缓存和单个缓存项的大小做限定，可以设置缓存的压缩比例。 1.1 简单入门 netcore中缓存相关的类库都在 Microsoft.Extensions.Caching ，使...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/huancun/neicunhuancunmemorycahe.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"内存缓存MemoryCahe"}],["meta",{"property":"og:description","content":"1. MemoryCahe NetCore中的缓存和System.Runtime.Caching很相似，但是在功能上做了增强，缓存的key支持object类型，提供了泛型支持；可以读缓存和单个缓存项的大小做限定，可以设置缓存的压缩比例。 1.1 简单入门 netcore中缓存相关的类库都在 Microsoft.Extensions.Caching ，使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1619011217302-f7c961c7-35d2-4ab8-a976-f440a86cf8ab.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-07T02:59:06.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-07T02:59:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内存缓存MemoryCahe\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1619011217302-f7c961c7-35d2-4ab8-a976-f440a86cf8ab.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1619012068314-c59f28a0-d9a1-4961-b91a-2e63d739c113.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1614392140126-43623db8-f997-4d49-9594-4fb2bfc977b1.png\\"],\\"datePublished\\":\\"2023-08-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-07T02:59:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"1. MemoryCahe","slug":"_1-memorycahe","link":"#_1-memorycahe","children":[{"level":3,"title":"1.1 简单入门","slug":"_1-1-简单入门","link":"#_1-1-简单入门","children":[]},{"level":3,"title":"1.2 过期时间","slug":"_1-2-过期时间","link":"#_1-2-过期时间","children":[]},{"level":3,"title":"1.2 常用配置","slug":"_1-2-常用配置","link":"#_1-2-常用配置","children":[]},{"level":3,"title":"1.3 IChangeToken","slug":"_1-3-ichangetoken","link":"#_1-3-ichangetoken","children":[{"level":4,"title":"1.3.1 监控文件","slug":"_1-3-1-监控文件","link":"#_1-3-1-监控文件","children":[]},{"level":4,"title":"1.3.2 通过代码控制缓存过期","slug":"_1-3-2-通过代码控制缓存过期","link":"#_1-3-2-通过代码控制缓存过期","children":[]}]},{"level":3,"title":"1.4 引用Nuget包","slug":"_1-4-引用nuget包","link":"#_1-4-引用nuget包","children":[]}]},{"level":2,"title":"2. LazyCache","slug":"_2-lazycache","link":"#_2-lazycache","children":[{"level":3,"title":"2.1 描述","slug":"_2-1-描述","link":"#_2-1-描述","children":[]}]},{"level":2,"title":"FasterKv","slug":"fasterkv","link":"#fasterkv","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1712458746000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":6.3,"words":1891},"filePathRelative":"dotnet/base/huancun/neicunhuancunmemorycahe.md","localizedDate":"2023年8月20日","excerpt":"<h2>1. MemoryCahe</h2>\\n<p>NetCore中的缓存和System.Runtime.Caching很相似，但是在功能上做了增强，缓存的key支持object类型，提供了泛型支持；可以读缓存和单个缓存项的大小做限定，可以设置缓存的压缩比例。</p>\\n<h3>1.1 简单入门</h3>\\n<p>netcore中缓存相关的类库都在&nbsp;Microsoft.Extensions.Caching&nbsp;，使用MemoryCache首先安装包</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Microsoft.Extensions.Caching.Memory\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"5.0.0\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{q as comp,C as data};
