import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as r,e as o}from"./app-BY9DQv5u.js";const n={},s=o('<p><strong>1、nginx是如何实现高并发的？</strong></p><p>答：一个主进程，多个工作进程，每个工作进程可以处理多个请求，每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，worker才会来接手，这个request才会接着往下走。由于web server的工作性质决定了每个request的大部份生命都是在网络传输中，实际上花费在server机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即@skoo所说的webserver刚好属于网络io密集型应用，不算是计算密集型。</p><p><strong>2、Nginx如何处理HTTP请求？</strong></p><p>答：Nginx使用反应器模式。主事件循环等待操作系统发出准备事件的信号，这样数据就可以从套接字读取，在该实例中读取到缓冲区并进行处理。单个线程可以提供数万个并发连接。</p><p><strong>3、使用“反向代理服务器”的优点是什么?</strong></p><p>答：反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。</p><p><strong>4、列举Nginx服务器的最佳用途。</strong></p><p>答：Nginx服务器的最佳用法是在网络上部署动态HTTP内容，使用SCGI、WSGI应用程序服务器、用于脚本的FastCGI处理程序。它还可以作为负载均衡器。</p><p><strong>5、Nginx服务器上的Master和Worker进程分别是什么?</strong></p><p>答：Master进程：读取及评估配置和维持 ；Worker进程：处理请求。</p><p><strong>6、什么是C10K问题?</strong></p><p>答：C10K问题是指无法同时处理大量客户端(10,000)的网络套接字。</p><p><strong>7、请陈述stub_status和sub_filter指令的作用是什么?</strong></p><p>答：（1）Stub_status指令：该指令用于了解Nginx当前状态的当前状态，如当前的活动连接，接受和处理当前读/写/等待连接的总数 ；（2）Sub_filter指令：它用于搜索和替换响应中的内容，并快速修复陈旧的数据</p><p><strong>8、为什么不使用多线程？</strong></p><p>答：Nginx:采用单线程来异步非阻塞处理请求（管理员可以配置Nginx主进程的工作进程的数量），不会为每个请求分配cpu和内存资源，节省了大量资源，同时也减少了大量的CPU的上下文切换，所以才使得Nginx支持更高的并发。</p><p><strong>9、为什么要做动、静分离？</strong></p><p>答：在我们的软件开发中，有些请求是需要后台处理的（如：.jsp,.do等等），有些请求是不需要经过后台处理的（如：css、html、jpg、js等等），这些不需要经过后台处理的文件称为静态文件，否则动态文件。因此我们后台处理忽略静态文件，但是如果直接忽略静态文件的话，后台的请求次数就明显增多了。在我们对资源的响应速度有要求的时候，应该使用这种动静分离的策略去解决动、静分离将网站静态资源（HTML，JavaScript，CSS等）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问。这里将静态资源放到nginx中，动态资源转发到<a href="https://www.wkcto.com/courses/tomcat.html" target="_blank" rel="noopener noreferrer">tomcat</a>服务器中,毕竟Tomcat的优势是处理动态请求。</p><p><strong>10、ngx_http_upstream_module的作用是什么?</strong></p><p>答：要在URL中保留双斜线，就必须使用merge_slashes_off；语法:merge_slashes [on/off] ； 默认值: merge_slashes on ；环境: http，server</p>',20),p=[s];function i(a,g){return r(),t("div",null,p)}const l=e(n,[["render",i],["__file","nginx.html.vue"]]),u=JSON.parse('{"path":"/interview/nginx.html","title":"Nginx面试题","lang":"zh-CN","frontmatter":{"title":"Nginx面试题","date":"2023-03-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"order":200,"category":["面试"],"tag":["面试题"],"article":false,"description":"1、nginx是如何实现高并发的？ 答：一个主进程，多个工作进程，每个工作进程可以处理多个请求，每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，work...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/interview/nginx.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Nginx面试题"}],["meta",{"property":"og:description","content":"1、nginx是如何实现高并发的？ 答：一个主进程，多个工作进程，每个工作进程可以处理多个请求，每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，work..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-12T15:44:42.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2023-03-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-12T15:44:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Nginx面试题\\",\\"description\\":\\"1、nginx是如何实现高并发的？ 答：一个主进程，多个工作进程，每个工作进程可以处理多个请求，每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，work...\\"}"]]},"headers":[],"git":{"createdTime":1679813969000,"updatedTime":1691855082000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":4}]},"readingTime":{"minutes":3.44,"words":1033},"filePathRelative":"interview/nginx.md","localizedDate":"2023年3月24日","excerpt":"<p><strong>1、nginx是如何实现高并发的？</strong></p>\\n<p>答：一个主进程，多个工作进程，每个工作进程可以处理多个请求，每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，worker才会来接手，这个request才会接着往下走。由于web server的工作性质决定了每个request的大部份生命都是在网络传输中，实际上花费在server机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即@skoo所说的webserver刚好属于网络io密集型应用，不算是计算密集型。</p>","autoDesc":true}');export{l as comp,u as data};
