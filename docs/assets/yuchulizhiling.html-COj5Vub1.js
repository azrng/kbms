import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,b as s}from"./app-DMmdIwn0.js";const i={},r=s(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>C#还有许多名为“预处理器指令”的命令。这些命令从来不会转化为可执行代码中的命令，但会影响编译过程的各个方面。例如，使用预处理器指令可以禁止编译器编译代码的某一部分。如果计划发布两个版本的代码，即基本版本和拥有更多功能的企业版本，就可以使用这些预处理器指令。在编译软件的基本版本时，使用预处理器指令可以禁止编译器编译与附加功能相关的代码。另外，在编写提供调试信息的代码时，也可以使用预处理器指令。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="define-和-undef" tabindex="-1"><a class="header-anchor" href="#define-和-undef"><span><code>#define</code> 和 <code>#undef</code></span></a></h3><p>在C#中，<code>#define</code>指令用于定义一个符号（Symbol）。这个符号实际上是一个标识符，它不代表任何具体的值，只是一个占位符，用于条件编译中的判断。当你使用<code>#define</code>指令定义了一个符号，编译器会将这个符号视为已经定义，然后你可以在代码中使用条件编译指令来根据是否定义了这个符号来包含或排除某些代码块。例如：</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>#define DEBUG
#if DEBUG
    // 调试模式下的代码
#else
    // 发布模式下的代码
#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="if、-elif、-else和-endif" tabindex="-1"><a class="header-anchor" href="#if、-elif、-else和-endif"><span><code>#if</code>、<code>#elif</code>、<code>#else</code>和<code>#endif</code></span></a></h3><p>这组指令使得我们能够根据条件编译不同的代码块，这对于调试bug比较方便。例如：这些指令告诉编译器是否要编译代码块。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">DoSomeWork</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">double</span></span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token preprocessor property">#<span class="token directive keyword">if</span> </span><span class="token return-type class-name">DEBUG</span>
        <span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;x is </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>


<span class="token preprocessor property">#<span class="token directive keyword">if</span> DEBUG</span>
    <span class="token comment">// 调试模式下的代码</span>
<span class="token preprocessor property">#<span class="token directive keyword">elif</span> RELEASE</span>
    <span class="token comment">// 发布模式下的代码</span>
<span class="token preprocessor property">#<span class="token directive keyword">else</span></span>
    <span class="token comment">// 默认的代码</span>
<span class="token preprocessor property">#<span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="warning-和-error" tabindex="-1"><a class="header-anchor" href="#warning-和-error"><span><code>#warning</code> 和 <code>#error</code></span></a></h3><p><code>warning</code>用于生成编译时警告，而<code>#error</code>用于生成编译时错误。这对于确保代码质量和可维护性非常有帮助：</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>#warning This code needs review#error This code is not supported
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="region和-endregion" tabindex="-1"><a class="header-anchor" href="#region和-endregion"><span><code>#region</code>和 <code>#endregion</code></span></a></h3><p><code>#region</code>用于定义代码折叠区域，使得代码结构更加清晰，这是比较常用的C#预处理指令：</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>#region MyRegion    // 你写的一些代码 #endregion
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="pragma" tabindex="-1"><a class="header-anchor" href="#pragma"><span><code>#pragma</code></span></a></h3><p><code>#pragma</code>用于向编译器发送特定的指令，例如禁用或启用特定的警告，这个必须在逻辑代码第一行：</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>#pragma warning disable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>c#中的预定义类型：https://mp.weixin.qq.com/s/gEiyDNs9J7tbbLayUXPPWA</p>`,20),t=[r];function c(d,o){return n(),a("div",null,t)}const u=e(i,[["render",c],["__file","yuchulizhiling.html.vue"]]),h=JSON.parse('{"path":"/dotnet/csharp/hexincsharp/yuchulizhiling.html","title":"预处理指令","lang":"zh-CN","frontmatter":{"title":"预处理指令","lang":"zh-CN","date":"2023-10-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"yuchulizhiling","slug":"xndh325k9g57p5l8","docsId":"144664892","description":"概述 C#还有许多名为“预处理器指令”的命令。这些命令从来不会转化为可执行代码中的命令，但会影响编译过程的各个方面。例如，使用预处理器指令可以禁止编译器编译代码的某一部分。如果计划发布两个版本的代码，即基本版本和拥有更多功能的企业版本，就可以使用这些预处理器指令。在编译软件的基本版本时，使用预处理器指令可以禁止编译器编译与附加功能相关的代码。另外，在编...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/hexincsharp/yuchulizhiling.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"预处理指令"}],["meta",{"property":"og:description","content":"概述 C#还有许多名为“预处理器指令”的命令。这些命令从来不会转化为可执行代码中的命令，但会影响编译过程的各个方面。例如，使用预处理器指令可以禁止编译器编译代码的某一部分。如果计划发布两个版本的代码，即基本版本和拥有更多功能的企业版本，就可以使用这些预处理器指令。在编译软件的基本版本时，使用预处理器指令可以禁止编译器编译与附加功能相关的代码。另外，在编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-16T13:35:23.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-16T13:35:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"预处理指令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-16T13:35:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"#define 和 #undef","slug":"define-和-undef","link":"#define-和-undef","children":[]},{"level":3,"title":"#if、#elif、#else和#endif","slug":"if、-elif、-else和-endif","link":"#if、-elif、-else和-endif","children":[]},{"level":3,"title":"#warning 和 #error","slug":"warning-和-error","link":"#warning-和-error","children":[]},{"level":3,"title":"#region和 #endregion","slug":"region和-endregion","link":"#region和-endregion","children":[]},{"level":3,"title":"#pragma","slug":"pragma","link":"#pragma","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1705412123000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.09,"words":626},"filePathRelative":"dotnet/csharp/hexincsharp/yuchulizhiling.md","localizedDate":"2023年10月25日","excerpt":"<h2>概述</h2>\\n<p>C#还有许多名为“预处理器指令”的命令。这些命令从来不会转化为可执行代码中的命令，但会影响编译过程的各个方面。例如，使用预处理器指令可以禁止编译器编译代码的某一部分。如果计划发布两个版本的代码，即基本版本和拥有更多功能的企业版本，就可以使用这些预处理器指令。在编译软件的基本版本时，使用预处理器指令可以禁止编译器编译与附加功能相关的代码。另外，在编写提供调试信息的代码时，也可以使用预处理器指令。</p>\\n<h2>操作</h2>\\n<h3><code>#define</code> 和 <code>#undef</code></h3>\\n<p>在C#中，<code>#define</code>指令用于定义一个符号（Symbol）。这个符号实际上是一个标识符，它不代表任何具体的值，只是一个占位符，用于条件编译中的判断。当你使用<code>#define</code>指令定义了一个符号，编译器会将这个符号视为已经定义，然后你可以在代码中使用条件编译指令来根据是否定义了这个符号来包含或排除某些代码块。例如：</p>","autoDesc":true}');export{u as comp,h as data};
