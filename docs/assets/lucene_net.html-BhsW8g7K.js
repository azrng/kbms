import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as o,a as s,d as n,e as t,b as l}from"./app-DMmdIwn0.js";const i={},u=l(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>Lucene是apache软件基金会发布的一个开放源代码的全文检索引擎工具包，是一个全文检索引擎架构，提供了完整的创建索引和查询索引，以及部分文本分析的引擎。Lucene.net是Apache软件基金会赞助的开源项目，基于Apache License协议。</p><p>Lucene是根据关健字来搜索的文本搜索工具，只能在某个网站内部搜索文本内容，不能跨网站搜索。</p><p>Lucene.net并不是一个爬行搜索引擎，也不会自动地索引内容。我们得先将要索引的文档中的文本抽取出来，然后再将其加到Lucene.net索引中。标准的步骤是先初始化一个Analyzer、打开一个IndexWriter、然后再将文档一个接一个地加进去。一旦完成这些步骤，索引就可以在关闭前得到优化，同时所做的改变也会生效。这个过程可能比开发者习惯的方式更加手工化一些，但却在数据的索引上给予你更多的灵活性，而且其效率也很高。</p><blockquote><p>注意：不支持分布式</p></blockquote><h3 id="为什么要用lucence" tabindex="-1"><a class="header-anchor" href="#为什么要用lucence"><span>为什么要用Lucence</span></a></h3><p>Lucene又不是搜索引擎，仅仅是在网站内部进行文本的搜索。那我们为什么要学他呢？？？并且通过SQL也可以实现站内搜索，那么为什么要学Lucence？ （1）SQL只能针对数据库表搜索，不能直接针对硬盘上的文本搜索 （2）SQL没有相关度排名 （3）SQL搜索结果没有关健字高亮显示 （4）SQL需要数据库的支持，数据库本身需要内存开销较大，例如：Oracle （5）SQL搜索有时较慢，尤其是数据库不在本地时，超慢，例如：Oracle</p><h2 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门"><span>快速入门</span></a></h2><p>我们的SQL使用的是数据库中的内存，在硬盘中为DBF文件...那么我们Lucene内部又是什么东西呢？？Lucene中存的就是一系列的二进制压缩文件和一些控制文件，它们位于计算机的硬盘上，这些内容统称为索引库，索引库有二部份组成：</p><ul><li>原始记录 <ul><li>存入到索引库中的原始文本，例如：我是张三</li></ul></li><li>词汇表 <ul><li>按照一定的拆分策略（即分词器）将原始记录中的每个字符拆开后，存入一个供将来搜索的表</li></ul></li></ul><p>Lucene存放数据的地方我们通常称之为索引库，索引库又分为两部分组成：原始记录和词汇表。</p><h3 id="原始记录和词汇表" tabindex="-1"><a class="header-anchor" href="#原始记录和词汇表"><span>原始记录和词汇表</span></a></h3><p>当我们想要把数据存到索引库的时候，我们首先存入的是将数据存到原始记录上面去.... 又由于我们给用户使用的时候，用户使用的是关键字来进行查询我们的具体记录。因此，我们需要把我们原始存进的数据进行拆分！将拆分出来的数据存进词汇表中。 词汇表就是类似于我们在学Oracle中的索引表，拆分的时候会给出对应的索引值。 一旦用户根据关键字来进行搜索，那么程序就先去查询词汇表中有没有该关键字，如果有该关键字就定位到原始记录表中，将符合条件的原始记录返回给用户查看。</p><p>关于词汇表关键字的来源是如何从原始记录表拆分的，可以指定用哪种算法来将数据拆分，比如标准分词算法，一个一个汉字进行拆分。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="获取索引目录" tabindex="-1"><a class="header-anchor" href="#获取索引目录"><span>获取索引目录</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 获取索引目录</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>索引类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>索引目录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name">LcStore<span class="token punctuation">.</span>Directory</span> <span class="token function">GetLuceneDirectory</span><span class="token punctuation">(</span><span class="token class-name">IndexType</span> index<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> indexPath <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dirPath <span class="token operator">=</span> ConfigHelper<span class="token punctuation">.</span><span class="token function">GetAppSetting</span><span class="token punctuation">(</span><span class="token string">&quot;LuceneIndexPath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> indexName <span class="token operator">=</span> Enum<span class="token punctuation">.</span>EnumHelper<span class="token punctuation">.</span><span class="token function">GetEnumDescription</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

        indexPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">,</span> indexName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> LcStore<span class="token punctuation">.</span>FSDirectory<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>indexPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NLogger<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;获取索引目录失败&quot;</span></span> <span class="token operator">+</span> Environment<span class="token punctuation">.</span>NewLine <span class="token operator">+</span>
                      <span class="token interpolation-string"><span class="token string">$&quot;路径：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">indexPath</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token operator">+</span> Environment<span class="token punctuation">.</span>NewLine <span class="token operator">+</span>
                      <span class="token interpolation-string"><span class="token string">$&quot;异常信息：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
                     <span class="token string">&quot;Lucene&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span>
                     CustomException<span class="token punctuation">.</span>UnknownError<span class="token punctuation">,</span> CustomLogLevel<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;获取索引目录异常，详情请查看相关日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="盘古分词" tabindex="-1"><a class="header-anchor" href="#盘古分词"><span>盘古分词</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 盘古分词</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyword<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>语句<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>词组集合<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GetSplitKeywords</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> keyword<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringReader</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> ts <span class="token operator">=</span> PanguAnalyzer<span class="token punctuation">.</span><span class="token function">TokenStream</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> hasNext <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">IncrementToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Lucene<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Analysis<span class="token punctuation">.</span>Tokenattributes<span class="token punctuation">.</span>ITermAttribute</span> ita<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>hasNext<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ita <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Lucene<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Analysis<span class="token punctuation">.</span>Tokenattributes<span class="token punctuation">.</span>ITermAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ret <span class="token operator">+=</span> ita<span class="token punctuation">.</span>Term <span class="token operator">+</span> <span class="token string">&quot;|&quot;</span><span class="token punctuation">;</span>
            hasNext <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">IncrementToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ts<span class="token punctuation">.</span><span class="token function">CloneAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PanguAnalyzer<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        ret <span class="token operator">=</span> ret<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;|&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        NLogger<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;分词异常&quot;</span> <span class="token operator">+</span> Environment<span class="token punctuation">.</span>NewLine <span class="token operator">+</span>
                      <span class="token interpolation-string"><span class="token string">$&quot;关键词：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">keyword</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token operator">+</span> Environment<span class="token punctuation">.</span>NewLine <span class="token operator">+</span>
                      <span class="token interpolation-string"><span class="token string">$&quot;异常信息：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span>
                     <span class="token string">&quot;Lucene&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span>
                     CustomException<span class="token punctuation">.</span>UnknownError<span class="token punctuation">,</span> CustomLogLevel<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;分词出现异常，详情请查看相关日志&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建索引或者追加索引" tabindex="-1"><a class="header-anchor" href="#创建索引或者追加索引"><span>创建索引或者追加索引</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 创建索引或追加索引</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>数据集合<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>索引类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateOrAppendIndexes</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>Document<span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">,</span> <span class="token class-name">IndexType</span> index<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dataList <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> dataList<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>

            <span class="token class-name">IndexWriter</span> writer<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> directory <span class="token operator">=</span> <span class="token function">GetLuceneDirectory</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//false表示追加（true表示删除之前的重新写入）</span>
                writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> PanguAnalyzer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> IndexWriter<span class="token punctuation">.</span>MaxFieldLength<span class="token punctuation">.</span>LIMITED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//false表示追加（true表示删除之前的重新写入）</span>
                writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IndexWriter</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> PanguAnalyzer<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> IndexWriter<span class="token punctuation">.</span>MaxFieldLength<span class="token punctuation">.</span>LIMITED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            writer<span class="token punctuation">.</span>MergeFactor <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
            <span class="token comment">//writer.SetMaxBufferedDocs(1000);</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> doc <span class="token keyword">in</span> dataList<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                writer<span class="token punctuation">.</span><span class="token function">AddDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            writer<span class="token punctuation">.</span><span class="token function">Optimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            writer<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            directory<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,22),r={href:"https://mp.weixin.qq.com/s/lLz2tq4xQTjDb9PtjaHKlw",target:"_blank",rel:"noopener noreferrer"},k={href:"https://segmentfault.com/a/1190000013822385",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[s("a",r,[n("https://mp.weixin.qq.com/s/lLz2tq4xQTjDb9PtjaHKlw"),t(a)]),n(" | 使用Lucene.Net实现全文检索 "),s("a",k,[n("https://segmentfault.com/a/1190000013822385"),t(a)]),n(" | Lucene就是这么简单 - SegmentFault 思否")])])}const h=e(i,[["render",d],["__file","lucene_net.html.vue"]]),y=JSON.parse('{"path":"/middleware/fullTextSearch/lucene/lucene_net.html","title":"Lucene.net","lang":"zh-CN","frontmatter":{"title":"Lucene.net","lang":"zh-CN","date":"2023-10-04T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"lucene_net","slug":"fhty12","docsId":"66006395","description":"介绍 Lucene是apache软件基金会发布的一个开放源代码的全文检索引擎工具包，是一个全文检索引擎架构，提供了完整的创建索引和查询索引，以及部分文本分析的引擎。Lucene.net是Apache软件基金会赞助的开源项目，基于Apache License协议。 Lucene是根据关健字来搜索的文本搜索工具，只能在某个网站内部搜索文本内容，不能跨网站搜...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/fullTextSearch/lucene/lucene_net.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Lucene.net"}],["meta",{"property":"og:description","content":"介绍 Lucene是apache软件基金会发布的一个开放源代码的全文检索引擎工具包，是一个全文检索引擎架构，提供了完整的创建索引和查询索引，以及部分文本分析的引擎。Lucene.net是Apache软件基金会赞助的开源项目，基于Apache License协议。 Lucene是根据关健字来搜索的文本搜索工具，只能在某个网站内部搜索文本内容，不能跨网站搜..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-13T14:11:27.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-13T14:11:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Lucene.net\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-13T14:11:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"为什么要用Lucence","slug":"为什么要用lucence","link":"#为什么要用lucence","children":[]}]},{"level":2,"title":"快速入门","slug":"快速入门","link":"#快速入门","children":[{"level":3,"title":"原始记录和词汇表","slug":"原始记录和词汇表","link":"#原始记录和词汇表","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"获取索引目录","slug":"获取索引目录","link":"#获取索引目录","children":[]},{"level":3,"title":"盘古分词","slug":"盘古分词","link":"#盘古分词","children":[]},{"level":3,"title":"创建索引或者追加索引","slug":"创建索引或者追加索引","link":"#创建索引或者追加索引","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1710339087000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.44,"words":1332},"filePathRelative":"middleware/fullTextSearch/lucene/lucene_net.md","localizedDate":"2023年10月4日","excerpt":"<h2>介绍</h2>\\n<p>Lucene是apache软件基金会发布的一个开放源代码的全文检索引擎工具包，是一个全文检索引擎架构，提供了完整的创建索引和查询索引，以及部分文本分析的引擎。Lucene.net是Apache软件基金会赞助的开源项目，基于Apache License协议。</p>\\n<p>Lucene是根据关健字来搜索的文本搜索工具，只能在某个网站内部搜索文本内容，不能跨网站搜索。</p>\\n<p>Lucene.net并不是一个爬行搜索引擎，也不会自动地索引内容。我们得先将要索引的文档中的文本抽取出来，然后再将其加到Lucene.net索引中。标准的步骤是先初始化一个Analyzer、打开一个IndexWriter、然后再将文档一个接一个地加进去。一旦完成这些步骤，索引就可以在关闭前得到优化，同时所做的改变也会生效。这个过程可能比开发者习惯的方式更加手工化一些，但却在数据的索引上给予你更多的灵活性，而且其效率也很高。</p>","autoDesc":true}');export{h as comp,y as data};
