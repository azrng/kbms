import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as c,c as a,b as t}from"./app-Bw62I61B.js";const h={},n=t('<h3 id="cache-是怎么样工作的" tabindex="-1"><a class="header-anchor" href="#cache-是怎么样工作的"><span>Cache 是怎么样工作的?</span></a></h3><p>Cache 是分配在服务器上的一个公共的内存片。 所谓公共指的cache只要一创建是任何一个客户端浏览器都可以通过后台代码访问到它，它面向的是所有用户，相对而言session也是服务器上的一 段内存，但他面向的是单个用户。它是服务器的一段内存块，也就是说每个cache一经创建就占用了服务器资源的。所以从这点来说我们就可以说：并不是 cache越多越好。 cache 是有时间限制的，超过了服务器设定的过期时间，它就会被服务器回收。 cache 可以存放任何对象</p><h3 id="创建cache" tabindex="-1"><a class="header-anchor" href="#创建cache"><span>创建cache</span></a></h3><p>_Cache.Insert(string key,object o)_方法创建。 其中key 代表cache的ID,o代表存到cache里的对象。</p><h3 id="销毁cache" tabindex="-1"><a class="header-anchor" href="#销毁cache"><span>销毁cache</span></a></h3><p>通过方法  Cache.Remove(string key)  其中key 代表cache的 ID.</p><h3 id="调用cache" tabindex="-1"><a class="header-anchor" href="#调用cache"><span>调用cache</span></a></h3><p>Cache支持装箱/拆箱操作。如你可以把一个DataSet对象ds通过_Cache.Insert(“dsCache”,ds)_的方式存到Cache中，可以通过拆箱操作 _DataSet ds = (DataSet)Cache[“dsCache”]_来访问它。 Cache 一般用于数据较固定，用的较频繁的地方。例如可以把进销存系统中可以把产品信息存入cache,在用户调用产品信息时通过调用cache即可，这样从很大 程度上减少了用户与数据库的交互，提高了系统的性能。反之，cache不适合用在数据变动快，使用范围很窄的地方。例如把一个具体采购单存入 cache中。 注意事项： Cache是有时间限制的。超过了服务器设置的过期时间，就会被服务器回收。当cache被回收后对应的内存块就会被清空，再次通过cache[“cachekey”]访问对象时返回的就是null值。所以调用之前要判断是否为null</p>',8),o=[n];function r(s,i){return c(),a("div",null,o)}const d=e(h,[["render",r],["__file","cache.html.vue"]]),m=JSON.parse('{"path":"/dotnet/base/huancun/cache.html","title":"Cache","lang":"zh-CN","frontmatter":{"title":"Cache","lang":"zh-CN","date":"2021-01-28T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"cache","slug":"lfmdzo","docsId":"29633935","description":"Cache 是怎么样工作的? Cache 是分配在服务器上的一个公共的内存片。 所谓公共指的cache只要一创建是任何一个客户端浏览器都可以通过后台代码访问到它，它面向的是所有用户，相对而言session也是服务器上的一 段内存，但他面向的是单个用户。它是服务器的一段内存块，也就是说每个cache一经创建就占用了服务器资源的。所以从这点来说我们就可以说...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/huancun/cache.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Cache"}],["meta",{"property":"og:description","content":"Cache 是怎么样工作的? Cache 是分配在服务器上的一个公共的内存片。 所谓公共指的cache只要一创建是任何一个客户端浏览器都可以通过后台代码访问到它，它面向的是所有用户，相对而言session也是服务器上的一 段内存，但他面向的是单个用户。它是服务器的一段内存块，也就是说每个cache一经创建就占用了服务器资源的。所以从这点来说我们就可以说..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-01-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cache\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"Cache 是怎么样工作的?","slug":"cache-是怎么样工作的","link":"#cache-是怎么样工作的","children":[]},{"level":3,"title":"创建cache","slug":"创建cache","link":"#创建cache","children":[]},{"level":3,"title":"销毁cache","slug":"销毁cache","link":"#销毁cache","children":[]},{"level":3,"title":"调用cache","slug":"调用cache","link":"#调用cache","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.73,"words":519},"filePathRelative":"dotnet/base/huancun/cache.md","localizedDate":"2021年1月28日","excerpt":"<h3>Cache 是怎么样工作的?</h3>\\n<p>Cache 是分配在服务器上的一个公共的内存片。\\n所谓公共指的cache只要一创建是任何一个客户端浏览器都可以通过后台代码访问到它，它面向的是所有用户，相对而言session也是服务器上的一 段内存，但他面向的是单个用户。它是服务器的一段内存块，也就是说每个cache一经创建就占用了服务器资源的。所以从这点来说我们就可以说：并不是 cache越多越好。\\ncache 是有时间限制的，超过了服务器设定的过期时间，它就会被服务器回收。\\ncache 可以存放任何对象</p>\\n<h3>创建cache</h3>\\n<p>_Cache.Insert(string key,object o)_方法创建。\\n其中key 代表cache的ID,o代表存到cache里的对象。</p>","autoDesc":true}');export{d as comp,m as data};
