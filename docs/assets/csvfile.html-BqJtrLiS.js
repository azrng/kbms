import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-qB9_Bjjp.js";const p={},o=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">namespace</span> <span class="token namespace">ConsoleApp4</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// CSV文件读写工具类</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CsvFile</span>
    <span class="token punctuation">{</span>
        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 写CSV文件</span>
        <span class="token comment">//字段数组转为CSV记录行</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">FieldsToLine</span><span class="token punctuation">(</span><span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fields <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            fields <span class="token operator">=</span> fields<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>field <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>field <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> field <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
                <span class="token comment">//所有字段都加双引号</span>
                field <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;{0}\\&quot;&quot;</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//不简化</span>
                <span class="token comment">//field = field.Replace(&quot;\\&quot;&quot;, &quot;\\&quot;\\&quot;&quot;);</span>
                <span class="token comment">//if (field.IndexOfAny(new char[] { &#39;,&#39;, &#39;&quot;&#39;, &#39; &#39;, &#39;\\r&#39; }) != -1)</span>
                <span class="token comment">//{</span>
                <span class="token comment">//    field = string.Format(&quot;\\&quot;{0}\\&quot;&quot;, field);</span>
                <span class="token comment">//}</span>
                <span class="token keyword">return</span> field<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> line <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;{0}{1}&quot;</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">,</span> Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> line<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//默认的字段转换方法</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">GetObjFields</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> isTitle<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isTitle<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                fields <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>pro <span class="token operator">=&gt;</span> pro<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                fields <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>pro <span class="token operator">=&gt;</span> pro<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> fields<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 写CSV文件，默认第一行为标题</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>数据列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>append<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>追加记录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>func<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>字段转换方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultEncoding<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Write</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span><span class="token class-name"><span class="token keyword">bool</span></span> append<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> func <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Encoding</span> defaultEncoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> list<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultEncoding <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                defaultEncoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>func <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                func <span class="token operator">=</span> GetObjFields<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">||</span> <span class="token operator">!</span>append<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> title <span class="token operator">=</span> <span class="token function">FieldsToLine</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
                File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> title<span class="token punctuation">,</span> defaultEncoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamWriter</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> defaultEncoding<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>obj <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">string</span></span> line <span class="token operator">=</span> <span class="token function">FieldsToLine</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sw<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 读CSV文件（使用TextFieldParser）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 读CSV文件，默认第一行为标题</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>func<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>字段解析规则<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultEncoding<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">,</span> <span class="token class-name">Encoding</span> defaultEncoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultEncoding <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                defaultEncoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">TextFieldParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextFieldParser</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> defaultEncoding<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                parser<span class="token punctuation">.</span>TextFieldType <span class="token operator">=</span> FieldType<span class="token punctuation">.</span>Delimited<span class="token punctuation">;</span>
                <span class="token comment">//设定逗号分隔符</span>
                parser<span class="token punctuation">.</span><span class="token function">SetDelimiters</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//设定不忽略字段前后的空格</span>
                parser<span class="token punctuation">.</span>TrimWhiteSpace <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">bool</span></span> isLine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>parser<span class="token punctuation">.</span>EndOfData<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> fields <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">ReadFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLine<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        <span class="token comment">//忽略标题行业</span>
                        isLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

        <span class="token preprocessor property">#<span class="token directive keyword">region</span> 读CSV文件（使用正则表达式）</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 读CSV文件，默认第一行为标题</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>func<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>字段解析规则<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultEncoding<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>文件编码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">Read_Regex</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span> func<span class="token punctuation">,</span> <span class="token class-name">Encoding</span> defaultEncoding <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
        <span class="token punctuation">{</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">StringBuilder</span> sbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Regex</span> lineReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Regex</span> fieldReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\G(?:^|,)(?:\\&quot;((?&gt;[^\\&quot;]*)(?&gt;\\&quot;\\&quot;[^\\&quot;]*)*)\\&quot;|([^\\&quot;,]*))&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Regex</span> quotesReg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Regex</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">bool</span></span> isLine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> line <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">ReadLine</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token keyword">string</span></span> str <span class="token operator">=</span> sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//一个完整的CSV记录行，它的双引号一定是偶数</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lineReg<span class="token punctuation">.</span><span class="token function">Matches</span><span class="token punctuation">(</span>sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Count <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLine<span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token class-name"><span class="token keyword">var</span></span> fields <span class="token operator">=</span> <span class="token function">ParseCsvLine</span><span class="token punctuation">(</span>sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fieldReg<span class="token punctuation">,</span> quotesReg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name"><span class="token keyword">var</span></span> obj <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">else</span>
                        <span class="token punctuation">{</span>
                            <span class="token comment">//忽略标题行业</span>
                            isLine <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        sbr<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>                   
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sbr<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//有解析失败的字符串，报错或忽略</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//重写ReadLine方法，只有\\r\\n才是正确的一行</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token class-name">StreamReader</span> sr<span class="token punctuation">)</span> 
        <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> sbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">char</span></span> c<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">int</span></span> cInt<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>cInt <span class="token operator">=</span>sr<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>cInt<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&amp;&amp;</span> sbr<span class="token punctuation">.</span>Length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sbr<span class="token punctuation">[</span>sbr<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\r&#39;</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    sbr<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>sbr<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> 
                <span class="token punctuation">{</span>
                    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> sbr<span class="token punctuation">.</span>Length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">?</span>sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
       
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">ParseCsvLine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> line<span class="token punctuation">,</span> <span class="token class-name">Regex</span> fieldReg<span class="token punctuation">,</span> <span class="token class-name">Regex</span> quotesReg<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> fieldMath <span class="token operator">=</span> fieldReg<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fields <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>fieldMath<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> field<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldMath<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    field <span class="token operator">=</span> quotesReg<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>fieldMath<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    field <span class="token operator">=</span> fieldMath<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                fields<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>
                fieldMath <span class="token operator">=</span> fieldMath<span class="token punctuation">.</span><span class="token function">NextMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> fields<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//写CSV文件</span>
CsvFile<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span>Test<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> isTitle<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fields<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isTitle<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        fields <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>pro <span class="token operator">=&gt;</span> pro<span class="token punctuation">.</span>Name <span class="token operator">+</span> Environment<span class="token punctuation">.</span>NewLine <span class="token operator">+</span> <span class="token string">&quot;\\&quot;,\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        fields <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>pro <span class="token operator">=&gt;</span> pro<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> fields<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读CSV文件</span>
records <span class="token operator">=</span> CsvFile<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> Test<span class="token punctuation">.</span>Parse<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读CSV文件</span>
records <span class="token operator">=</span> CsvFile<span class="token punctuation">.</span><span class="token function">Read_Regex</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> Test<span class="token punctuation">.</span>Parse<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","csvfile.html.vue"]]),d=JSON.parse(`{"path":"/middleware/office/csv/csvfile.html","title":"CsvFile","lang":"zh-CN","frontmatter":{"title":"CsvFile","lang":"zh-CN","date":"2022-06-26T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"csvfile","slug":"dq2ryg","docsId":"81511329","description":"使用方法如下：","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/office/csv/csvfile.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"CsvFile"}],["meta",{"property":"og:description","content":"使用方法如下："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CsvFile\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.84,"words":853},"filePathRelative":"middleware/office/csv/csvfile.md","localizedDate":"2022年6月26日","excerpt":"<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">namespace</span> <span class=\\"token namespace\\">ConsoleApp4</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token doc-comment comment\\">/// CSV文件读写工具类</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">CsvFile</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> 写CSV文件</span>\\n        <span class=\\"token comment\\">//字段数组转为CSV记录行</span>\\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> <span class=\\"token function\\">FieldsToLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IEnumerable<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> fields<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>fields <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span>Empty<span class=\\"token punctuation\\">;</span>\\n            fields <span class=\\"token operator\\">=</span> fields<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Select</span><span class=\\"token punctuation\\">(</span>field <span class=\\"token operator\\">=&gt;</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>field <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> field <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span>Empty<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//所有字段都加双引号</span>\\n                field <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Format</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\"{0}\\\\\\"\\"</span><span class=\\"token punctuation\\">,</span> field<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Replace</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\"\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"\\\\\\"\\\\\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token comment\\">//不简化</span>\\n                <span class=\\"token comment\\">//field = field.Replace(\\"\\\\\\"\\", \\"\\\\\\"\\\\\\"\\");</span>\\n                <span class=\\"token comment\\">//if (field.IndexOfAny(new char[] { ',', '\\"', ' ', '\\\\r' }) != -1)</span>\\n                <span class=\\"token comment\\">//{</span>\\n                <span class=\\"token comment\\">//    field = string.Format(\\"\\\\\\"{0}\\\\\\"\\", field);</span>\\n                <span class=\\"token comment\\">//}</span>\\n                <span class=\\"token keyword\\">return</span> field<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> line <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Format</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"{0}{1}\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Join</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\",\\"</span><span class=\\"token punctuation\\">,</span> fields<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> Environment<span class=\\"token punctuation\\">.</span>NewLine<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> line<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">//默认的字段转换方法</span>\\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\">IEnumerable<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token generic-method\\"><span class=\\"token function\\">GetObjFields</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> obj<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> isTitle<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">where</span> <span class=\\"token class-name\\">T</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token keyword\\">class</span></span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">IEnumerable<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> fields<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>isTitle<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                fields <span class=\\"token operator\\">=</span> obj<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetProperties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Select</span><span class=\\"token punctuation\\">(</span>pro <span class=\\"token operator\\">=&gt;</span> pro<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">else</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                fields <span class=\\"token operator\\">=</span> obj<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetProperties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Select</span><span class=\\"token punctuation\\">(</span>pro <span class=\\"token operator\\">=&gt;</span> pro<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetValue</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">?.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> fields<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// 写CSV文件，默认第一行为标题</span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>typeparam</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>T<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>typeparam</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>list<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>数据列表<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>path<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>文件路径<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>append<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>追加记录<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>func<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>字段转换方法<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>defaultEncoding<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token generic-method\\"><span class=\\"token function\\">Write</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span> list<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> path<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> append<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Func<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">bool</span><span class=\\"token punctuation\\">,</span> IEnumerable<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> func <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Encoding</span> defaultEncoding <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">where</span> <span class=\\"token class-name\\">T</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token keyword\\">class</span></span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>list <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">||</span> list<span class=\\"token punctuation\\">.</span>Count <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>defaultEncoding <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                defaultEncoding <span class=\\"token operator\\">=</span> Encoding<span class=\\"token punctuation\\">.</span>UTF8<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>func <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                func <span class=\\"token operator\\">=</span> GetObjFields<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Exists</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">||</span> <span class=\\"token operator\\">!</span>append<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> fields <span class=\\"token operator\\">=</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>list<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> title <span class=\\"token operator\\">=</span> <span class=\\"token function\\">FieldsToLine</span><span class=\\"token punctuation\\">(</span>fields<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAllText</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> title<span class=\\"token punctuation\\">,</span> defaultEncoding<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StreamWriter</span> sw <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamWriter</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span> defaultEncoding<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ForEach</span><span class=\\"token punctuation\\">(</span>obj <span class=\\"token operator\\">=&gt;</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> fields <span class=\\"token operator\\">=</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> line <span class=\\"token operator\\">=</span> <span class=\\"token function\\">FieldsToLine</span><span class=\\"token punctuation\\">(</span>fields<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    sw<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Write</span><span class=\\"token punctuation\\">(</span>line<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span></span>\\n\\n        <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> 读CSV文件（使用TextFieldParser）</span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// 读CSV文件，默认第一行为标题</span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>typeparam</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>T<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>typeparam</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>path<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>文件路径<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>func<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>字段解析规则<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>defaultEncoding<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>文件编码<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\">List<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token generic-method\\"><span class=\\"token function\\">Read</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> path<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Func<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> T<span class=\\"token punctuation\\">&gt;</span></span> func<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Encoding</span> defaultEncoding <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">where</span> <span class=\\"token class-name\\">T</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token keyword\\">class</span></span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>defaultEncoding <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                defaultEncoding <span class=\\"token operator\\">=</span> Encoding<span class=\\"token punctuation\\">.</span>UTF8<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TextFieldParser</span> parser <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">TextFieldParser</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">,</span> defaultEncoding<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                parser<span class=\\"token punctuation\\">.</span>TextFieldType <span class=\\"token operator\\">=</span> FieldType<span class=\\"token punctuation\\">.</span>Delimited<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//设定逗号分隔符</span>\\n                parser<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SetDelimiters</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\",\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">//设定不忽略字段前后的空格</span>\\n                parser<span class=\\"token punctuation\\">.</span>TrimWhiteSpace <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> isLine <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>parser<span class=\\"token punctuation\\">.</span>EndOfData<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> fields <span class=\\"token operator\\">=</span> parser<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadFields</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>isLine<span class=\\"token punctuation\\">)</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> obj <span class=\\"token operator\\">=</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>fields<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>obj <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token keyword\\">else</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token comment\\">//忽略标题行业</span>\\n                        isLine <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> list<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span></span>\\n\\n        <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">region</span> 读CSV文件（使用正则表达式）</span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// 读CSV文件，默认第一行为标题</span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>typeparam</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>T<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>typeparam</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>path<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>文件路径<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>func<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>字段解析规则<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>param</span> <span class=\\"token attr-name\\">name</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>defaultEncoding<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>文件编码<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>param</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>returns</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\">List<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token generic-method\\"><span class=\\"token function\\">Read_Regex</span><span class=\\"token generic class-name\\"><span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> path<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Func<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> T<span class=\\"token punctuation\\">&gt;</span></span> func<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Encoding</span> defaultEncoding <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">where</span> <span class=\\"token class-name\\">T</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token keyword\\">class</span></span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span>T<span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">StringBuilder</span> sbr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StringBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">Regex</span> lineReg <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Regex</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">Regex</span> fieldReg <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Regex</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\\\G(?:^|,)(?:\\\\\\"((?&gt;[^\\\\\\"]*)(?&gt;\\\\\\"\\\\\\"[^\\\\\\"]*)*)\\\\\\"|([^\\\\\\",]*))\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">Regex</span> quotesReg <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Regex</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"\\\\\\"\\\\\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">bool</span></span> isLine <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> line <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">.</span>Empty<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StreamReader</span> sr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamReader</span><span class=\\"token punctuation\\">(</span>path<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">!=</span> <span class=\\"token punctuation\\">(</span>line <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ReadLine</span><span class=\\"token punctuation\\">(</span>sr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Append</span><span class=\\"token punctuation\\">(</span>line<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> str <span class=\\"token operator\\">=</span> sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token comment\\">//一个完整的CSV记录行，它的双引号一定是偶数</span>\\n                    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>lineReg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Matches</span><span class=\\"token punctuation\\">(</span>sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>Count <span class=\\"token operator\\">%</span> <span class=\\"token number\\">2</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>isLine<span class=\\"token punctuation\\">)</span>\\n                        <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> fields <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ParseCsvLine</span><span class=\\"token punctuation\\">(</span>sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> fieldReg<span class=\\"token punctuation\\">,</span> quotesReg<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                            <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> obj <span class=\\"token operator\\">=</span> <span class=\\"token function\\">func</span><span class=\\"token punctuation\\">(</span>fields<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>obj <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                        <span class=\\"token keyword\\">else</span>\\n                        <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token comment\\">//忽略标题行业</span>\\n                            isLine <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                        sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Clear</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token keyword\\">else</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Append</span><span class=\\"token punctuation\\">(</span>Environment<span class=\\"token punctuation\\">.</span>NewLine<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>                   \\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>sbr<span class=\\"token punctuation\\">.</span>Length <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">//有解析失败的字符串，报错或忽略</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> list<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">//重写ReadLine方法，只有\\\\r\\\\n才是正确的一行</span>\\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> <span class=\\"token function\\">ReadLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">StreamReader</span> sr<span class=\\"token punctuation\\">)</span> \\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">StringBuilder</span> sbr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StringBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">char</span></span> c<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> cInt<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span> <span class=\\"token operator\\">!=</span> <span class=\\"token punctuation\\">(</span>cInt <span class=\\"token operator\\">=</span>sr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Read</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                c <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">char</span><span class=\\"token punctuation\\">)</span>cInt<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>c <span class=\\"token operator\\">==</span> <span class=\\"token char\\">'\\\\n'</span> <span class=\\"token operator\\">&amp;&amp;</span> sbr<span class=\\"token punctuation\\">.</span>Length <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> sbr<span class=\\"token punctuation\\">[</span>sbr<span class=\\"token punctuation\\">.</span>Length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> <span class=\\"token char\\">'\\\\r'</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Remove</span><span class=\\"token punctuation\\">(</span>sbr<span class=\\"token punctuation\\">.</span>Length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">return</span> sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token keyword\\">else</span> \\n                <span class=\\"token punctuation\\">{</span>\\n                    sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Append</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> sbr<span class=\\"token punctuation\\">.</span>Length<span class=\\"token operator\\">&gt;</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">?</span>sbr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n       \\n        <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">ParseCsvLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> line<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Regex</span> fieldReg<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Regex</span> quotesReg<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> fieldMath <span class=\\"token operator\\">=</span> fieldReg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Match</span><span class=\\"token punctuation\\">(</span>line<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> fields <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>fieldMath<span class=\\"token punctuation\\">.</span>Success<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> field<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>fieldMath<span class=\\"token punctuation\\">.</span>Groups<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>Success<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    field <span class=\\"token operator\\">=</span> quotesReg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Replace</span><span class=\\"token punctuation\\">(</span>fieldMath<span class=\\"token punctuation\\">.</span>Groups<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>Value<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"\\\\\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token keyword\\">else</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    field <span class=\\"token operator\\">=</span> fieldMath<span class=\\"token punctuation\\">.</span>Groups<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>Value<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n                fields<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span>field<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                fieldMath <span class=\\"token operator\\">=</span> fieldMath<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NextMatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> fields<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token preprocessor property\\">#<span class=\\"token directive keyword\\">endregion</span></span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{r as comp,d as data};
