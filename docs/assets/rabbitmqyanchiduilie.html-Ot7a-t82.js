import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as s,e as n,f as e,d as t}from"./app-D8HBJYTp.js";const i="/kbms/common/1656758867110-653eb9da-9018-4546-9376-4c0d06f9197d.png",u={},r=t('<h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h2><p>比如用户下单，多久之后未支付取消订单等延迟处理的场景。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>Rabbitmq版本：3.10.5 Erlang版本：24.3.4.2</p><blockquote><p>下面的例子没有进行封装，所以代码仅供参考</p></blockquote><h3 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件"><span>安装插件</span></a></h3>',6),k={href:"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker run <span class="token operator">-</span>d <span class="token operator">--</span>name myrabbit <span class="token operator">-</span>p <span class="token number">9005</span><span class="token punctuation">:</span><span class="token number">15672</span> <span class="token operator">-</span>p <span class="token number">5672</span><span class="token punctuation">:</span><span class="token number">5672</span>  <span class="token operator">-</span><span class="token class-name">e</span> RABBITMQ_DEFAULT_VHOST<span class="token operator">=</span>customer <span class="token operator">-</span><span class="token class-name">e</span> RABBITMQ_DEFAULT_USER<span class="token operator">=</span>admin <span class="token operator">-</span><span class="token class-name">e</span> RABBITMQ_DEFAULT_PASS<span class="token operator">=</span><span class="token number">123456</span> <span class="token operator">-</span><span class="token class-name">v</span> d<span class="token punctuation">:</span><span class="token operator">/</span>Download<span class="token operator">/</span>rabbitmq_delayed_message_exchange<span class="token operator">-</span><span class="token number">3.10</span><span class="token number">.2</span><span class="token punctuation">.</span>ez<span class="token punctuation">:</span><span class="token operator">/</span>plugins<span class="token operator">/</span>rabbitmq_delayed_message_exchange<span class="token operator">-</span><span class="token number">3.10</span><span class="token number">.2</span><span class="token punctuation">.</span><span class="token class-name">ez</span>  rabbitmq<span class="token punctuation">:</span><span class="token number">3</span><span class="token operator">-</span>management<span class="token operator">-</span>alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入容器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker exec <span class="token operator">-</span>it 容器名称<span class="token operator">/</span>标识 bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启用插件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>rabbitmq<span class="token operator">-</span>plugins enable rabbitmq_delayed_message_exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看是否启用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>rabbitmq<span class="token operator">-</span>plugins list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>[E*]和[e*]表示启用，然后重启服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>rabbitmq<span class="token operator">-</span>server restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在管理界面添加交换机都可以看到 <img src="`+i+`" alt="image.png" loading="lazy"></p><h3 id="生产消息" tabindex="-1"><a class="header-anchor" href="#生产消息"><span>生产消息</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;send/delay&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">SendDelayedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        HostName <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span><span class="token comment">//IP地址</span>
        Port <span class="token operator">=</span> <span class="token number">5672</span><span class="token punctuation">,</span><span class="token comment">//端口号</span>
        UserName <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span><span class="token comment">//用户账号</span>
        Password <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span><span class="token comment">//用户密码</span>
        VirtualHost <span class="token operator">=</span> <span class="token string">&quot;customer&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;delay-exchange&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> routingkey <span class="token operator">=</span> <span class="token string">&quot;delay.delay&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> queueName <span class="token operator">=</span> <span class="token string">&quot;delay_queueName&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//设置Exchange队列类型</span>
    <span class="token class-name"><span class="token keyword">var</span></span> argMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">{</span><span class="token string">&quot;x-delayed-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//设置当前消息为延时队列</span>
    channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;x-delayed-message&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> argMaps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> argMaps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> exchangeName<span class="token punctuation">,</span> routingkey<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;发送时间为 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy-MM-dd HH:mm:ss</span><span class="token punctuation">}</span></span><span class="token string"> 延时时间为:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">time</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> body <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> props <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">CreateBasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置消息的过期时间</span>
    props<span class="token punctuation">.</span>Headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token punctuation">{</span>  <span class="token string">&quot;x-delay&quot;</span><span class="token punctuation">,</span> time <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
    channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> routingkey<span class="token punctuation">,</span> <span class="token named-parameter punctuation">basicProperties</span><span class="token punctuation">:</span> props<span class="token punctuation">,</span> <span class="token named-parameter punctuation">body</span><span class="token punctuation">:</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;成功发送消息:&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费消息" tabindex="-1"><a class="header-anchor" href="#消费消息"><span>消费消息</span></a></h3><p>消费消息我是弄了一个后台任务(RabbitmqDelayedHostService)在处理</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqDelayedHostService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BackgroundService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IModel</span> _channel<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IConnection</span> _connection<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RabbitmqDelayedHostService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> connFactory <span class="token operator">=</span> <span class="token keyword">new</span> ConnectionFactory<span class="token comment">//创建连接工厂对象</span>
        <span class="token punctuation">{</span>
            HostName <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span><span class="token comment">//IP地址</span>
            Port <span class="token operator">=</span> <span class="token number">5672</span><span class="token punctuation">,</span><span class="token comment">//端口号</span>
            UserName <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span><span class="token comment">//用户账号</span>
            Password <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span><span class="token comment">//用户密码</span>
            VirtualHost <span class="token operator">=</span> <span class="token string">&quot;customer&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        _connection <span class="token operator">=</span> connFactory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _channel <span class="token operator">=</span> _connection<span class="token punctuation">.</span><span class="token function">CreateModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//交换机名称</span>
        <span class="token class-name"><span class="token keyword">var</span></span> exchangeName <span class="token operator">=</span> <span class="token string">&quot;exchangeDelayed&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> queueName <span class="token operator">=</span> <span class="token string">&quot;delay_queueName&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> routingkey <span class="token operator">=</span> <span class="token string">&quot;delay.delay&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> argMaps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">{</span><span class="token string">&quot;x-delayed-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        _channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;x-delayed-message&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> argMaps<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> argMaps<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _channel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchangeName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">routingKey</span><span class="token punctuation">:</span> routingkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//声明为手动确认</span>
        _channel<span class="token punctuation">.</span><span class="token function">BasicQos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> stoppingToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> queueName <span class="token operator">=</span> <span class="token string">&quot;delay_queueName&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>_channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span>Received <span class="token operator">+=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> routingKey <span class="token operator">=</span> ea<span class="token punctuation">.</span>RoutingKey<span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;接受到消息的时间为 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy-MM-dd HH:mm:ss</span><span class="token punctuation">}</span></span><span class="token string">,routingKey:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">routingKey</span><span class="token punctuation">}</span></span><span class="token string"> message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//手动确认</span>
            _channel<span class="token punctuation">.</span><span class="token function">BasicAck</span><span class="token punctuation">(</span>ea<span class="token punctuation">.</span>DeliveryTag<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        _channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">queue</span><span class="token punctuation">:</span> queueName<span class="token punctuation">,</span> <span class="token named-parameter punctuation">autoAck</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">consumer</span><span class="token punctuation">:</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _connection<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _channel<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册该后台任务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHostedService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RabbitmqDelayedHostService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果 成功发送消息:发送时间为 2022-07-02 18:54:22 延时时间为:5000 成功发送消息:发送时间为 2022-07-02 18:54:22 延时时间为:5000 成功发送消息:发送时间为 2022-07-02 18:54:22 延时时间为:5000 成功发送消息:发送时间为 2022-07-02 18:54:23 延时时间为:5000 成功发送消息:发送时间为 2022-07-02 18:54:23 延时时间为:5000 成功发送消息:发送时间为 2022-07-02 18:54:23 延时时间为:5000 接受到消息的时间为 2022-07-02 18:54:27,routingKey:delay.delay message:发送时间为 2022-07-02 18:54:22 延时时间为:5000 接受到消息的时间为 2022-07-02 18:54:27,routingKey:delay.delay message:发送时间为 2022-07-02 18:54:22 延时时间为:5000 接受到消息的时间为 2022-07-02 18:54:27,routingKey:delay.delay message:发送时间为 2022-07-02 18:54:22 延时时间为:5000 接受到消息的时间为 2022-07-02 18:54:28,routingKey:delay.delay message:发送时间为 2022-07-02 18:54:23 延时时间为:5000 接受到消息的时间为 2022-07-02 18:54:28,routingKey:delay.delay message:发送时间为 2022-07-02 18:54:23 延时时间为:5000 接受到消息的时间为 2022-07-02 18:54:28,routingKey:delay.delay message:发送时间为 2022-07-02 18:54:23 延时时间为:5000</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,19),m={href:"https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq",target:"_blank",rel:"noopener noreferrer"};function b(v,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[n("要使用rabbitmq做延迟是需要安装插件(rabbitmq_delayed_message_exchange)的，下载地址："),s("a",k,[n("https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases"),e(a)]),n(" 将下载好的插件(d:/Download/rabbitmq_delayed_message_exchange-3.10.2.ez)映射到容器的plugins目录下：")]),d,s("p",null,[n("官网插件："),s("a",m,[n("https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq"),e(a)])])])}const q=p(u,[["render",b],["__file","rabbitmqyanchiduilie.html.vue"]]),_=JSON.parse('{"path":"/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqyanchiduilie.html","title":"RabbitMQ延迟队列","lang":"zh-CN","frontmatter":{"title":"RabbitMQ延迟队列","lang":"zh-CN","date":"2022-07-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"rabbitmqyanchiduilie","slug":"vpa9xu","docsId":"82140527","description":"场景 比如用户下单，多久之后未支付取消订单等延迟处理的场景。 操作 Rabbitmq版本：3.10.5 Erlang版本：24.3.4.2 下面的例子没有进行封装，所以代码仅供参考 安装插件 要使用rabbitmq做延迟是需要安装插件(rabbitmq_delayed_message_exchange)的，下载地址：https://github.com...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqyanchiduilie.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"RabbitMQ延迟队列"}],["meta",{"property":"og:description","content":"场景 比如用户下单，多久之后未支付取消订单等延迟处理的场景。 操作 Rabbitmq版本：3.10.5 Erlang版本：24.3.4.2 下面的例子没有进行封装，所以代码仅供参考 安装插件 要使用rabbitmq做延迟是需要安装插件(rabbitmq_delayed_message_exchange)的，下载地址：https://github.com..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1656758867110-653eb9da-9018-4546-9376-4c0d06f9197d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-07-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ延迟队列\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1656758867110-653eb9da-9018-4546-9376-4c0d06f9197d.png\\"],\\"datePublished\\":\\"2022-07-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"安装插件","slug":"安装插件","link":"#安装插件","children":[]},{"level":3,"title":"生产消息","slug":"生产消息","link":"#生产消息","children":[]},{"level":3,"title":"消费消息","slug":"消费消息","link":"#消费消息","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.37,"words":1010},"filePathRelative":"middleware/xiaoxiduilie/rabbitmq/kuozhan/rabbitmqyanchiduilie.md","localizedDate":"2022年7月2日","excerpt":"<h2>场景</h2>\\n<p>比如用户下单，多久之后未支付取消订单等延迟处理的场景。</p>\\n<h2>操作</h2>\\n<p>Rabbitmq版本：3.10.5  Erlang版本：24.3.4.2</p>\\n<blockquote>\\n<p>下面的例子没有进行封装，所以代码仅供参考</p>\\n</blockquote>\\n<h3>安装插件</h3>\\n<p>要使用rabbitmq做延迟是需要安装插件(rabbitmq_delayed_message_exchange)的，下载地址：<a href=\\"https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases</a>\\n将下载好的插件(d:/Download/rabbitmq_delayed_message_exchange-3.10.2.ez)映射到容器的plugins目录下：</p>","autoDesc":true}');export{q as comp,_ as data};
