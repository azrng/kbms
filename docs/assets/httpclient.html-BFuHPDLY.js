import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,f as t,d as e}from"./app-CBxp4zeL.js";const i="/kbms/common/1635605991421-e45c7e7c-3483-4585-8782-a050aa13d72f.png",u="/kbms/common/1635607127494-0ee82640-00a3-498e-ac59-da4150c70f06.png",r="/kbms/common/1625323593371-e81fe980-f753-4f15-bd54-c543fff7bde3.png",k="/kbms/common/1625242924090-22336f06-e45b-4e02-89b7-54eaccc1b2a5.png",d="/kbms/common/1625242992263-d6e0fced-eb12-4168-86ef-caafaa1696b2.png",v={},m=e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>HttpClient是用户进行HTTP请求的，不过在我释放HttpClient对象时候，基础套接字不会立即释放，所以可能导致套接字耗尽，最终导致SocketException错误，所以推荐使用HttpClientFactory。</p><h2 id="底层方法" tabindex="-1"><a class="header-anchor" href="#底层方法"><span>底层方法</span></a></h2><p>HttpClient底层调用是</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>_handler<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而handler正是我们通过HttpClient传递下来的HttpMessageHandler。由此可知，HttpClient的本质是HttpMessageHandler的包装类。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>新建dotNet5 WebAPI程序，准备使用HttpClient请求进行请求</p><h3 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置"><span>基本配置</span></a></h3><p>ConfigureServices中添加配置注册服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>依赖注入IHttpClientFactory到控制器中使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpClientFactory</span> _httpClientFactory<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">CommonController</span><span class="token punctuation">(</span><span class="token class-name">IHttpClientFactory</span> httpClientFactory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _httpClientFactory <span class="token operator">=</span> httpClientFactory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> _client <span class="token operator">=</span> _httpClientFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;https://tianqiapi.com/api?version=v6&amp;appid=123456&amp;appsecret=55123&amp;city=郑州&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求头设置" tabindex="-1"><a class="header-anchor" href="#请求头设置"><span>请求头设置</span></a></h3><p>设置内容头</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

httpClient<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://www.xxx.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
httpClient<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Host&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

httpClient<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Accept<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MediaTypeWithQualityHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;application/fhir+json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),b={href:"https://blog.csdn.net/csdnnews/article/details/109040280",target:"_blank",rel:"noopener noreferrer"},g=e(`<h3 id="响应头" tabindex="-1"><a class="header-anchor" href="#响应头"><span>响应头</span></a></h3><p>讲述获取响应头的方法</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var response = await httpClient.GetAsync(videoFirst.BaseUrl);

// 如果你获取的响应头信息不完整，可能是因为默认情况下 HttpClient 只会返回一部分常见的响应头字段。
foreach (var header in response.Headers)
{
    Console.WriteLine($&quot;key:{header.Key} value：{header.Value}&quot;);
}

// 要获取完整的响应头信息，可以使用 HttpResponseMessage.Headers.TryGetValues 方法。
if (response.Content.Headers.TryGetValues(&quot;Content-Range&quot;, out var contentTypes))
{
    foreach (var contentType in contentTypes)
    {
        Console.WriteLine($&quot;Content-Range: {contentType}&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名模式" tabindex="-1"><a class="header-anchor" href="#命名模式"><span>命名模式</span></a></h3><p>个人感觉适用于：比如当前项目调用订单服务的许多接口，那么可以对这些接口统一进行配置(比如设置一些固定请求头，等请求参数)，然后使用该命名去调用。不同命名的Client之间是相互独立的。 ConfigureServices中添加配置注册服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;NameMode&quot;</span><span class="token punctuation">,</span> client <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置服务url</span>
    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://tianqiapi.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//自定义配置</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetHandlerLifetime</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认dns刷新时间为2分钟</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖注入到控制器中使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpClientFactory</span> _httpClientFactory<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">NameController</span><span class="token punctuation">(</span><span class="token class-name">IHttpClientFactory</span> httpClientFactory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _httpClientFactory <span class="token operator">=</span> httpClientFactory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> _client <span class="token operator">=</span> _httpClientFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token string">&quot;NameMode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;/api?version=v6&amp;appid=123456&amp;appsecret=123&amp;city=郑州&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求头中已经添加了指定配置 <img src="`+i+`" alt="image.png" loading="lazy"></p><h3 id="类型模式" tabindex="-1"><a class="header-anchor" href="#类型模式"><span>类型模式</span></a></h3><p>类型模式原理和命名模式是一样的，只是通过指定的类型名称作为对应HttpClient的名称，减少了单独定义名称的步骤 定义业务处理类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherClientService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">HttpClient</span> _httpClient<span class="token punctuation">;</span>
    <span class="token comment">//不能注入IHttpClientFactory，当前HttpClient会从HttpClientFactory中获取，并且HttpClient名称为WeatherClientService</span>
    <span class="token keyword">public</span> <span class="token function">WeatherClientService</span><span class="token punctuation">(</span><span class="token class-name">HttpClient</span> httpClient<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _httpClient <span class="token operator">=</span> httpClient<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">TestTypeClientGet</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response<span class="token operator">=</span> <span class="token keyword">await</span> _httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ConfigureServices中添加配置注册服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WeatherClientService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span> client <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置服务url</span>
    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://tianqiapi.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//自定义配置</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖注入到控制器中使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">WeatherClientService</span> _weatherClientService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">TypeModeController</span><span class="token punctuation">(</span><span class="token class-name">WeatherClientService</span> weatherClientService<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _weatherClientService <span class="token operator">=</span> weatherClientService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> _weatherClientService<span class="token punctuation">.</span><span class="token function">TestTypeClientGet</span><span class="token punctuation">(</span><span class="token string">&quot;/api?version=v6&amp;appid=123456&amp;appsecret=123&amp;city=郑州&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WeatherClientService我们没有写注入但是可以直接注入是因为在AddHttpClient时候已经帮我们将WeatherClientService注入了</p><h3 id="自定义管道逻辑" tabindex="-1"><a class="header-anchor" href="#自定义管道逻辑"><span>自定义管道逻辑</span></a></h3><h4 id="重写sendasync" tabindex="-1"><a class="header-anchor" href="#重写sendasync"><span>重写SendAsync</span></a></h4><p>先定义一个管道类(CustomDelegatingHandler)，继承DelegatingHandler，然后重写SendAsync方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDelegatingHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DelegatingHandler</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//请求前处理</span>
        <span class="token class-name"><span class="token keyword">var</span></span> requestId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;requestId&quot;</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;请求参数 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">requestId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//内部发起的真实请求</span>
        <span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//得到响应的结果，可以进行自定义处理响应信息</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;自定义管道处理响应，</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">res<span class="token punctuation">.</span>StatusCode</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册服务,并且根据需要在HttpClient上加上自定义管道</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;NameMode&quot;</span><span class="token punctuation">,</span> client <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置服务url</span>
    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;https://tianqiapi.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//自定义配置</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddHttpMessageHandler</span><span class="token punctuation">(</span>hander <span class="token operator">=&gt;</span> hander<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖注入到控制器中使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpClientFactory</span> _httpClientFactory<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">CustomerController</span><span class="token punctuation">(</span><span class="token class-name">IHttpClientFactory</span> httpClientFactory<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _httpClientFactory <span class="token operator">=</span> httpClientFactory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   	<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> _client <span class="token operator">=</span> _httpClientFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token string">&quot;NameMode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;/api?version=v6&amp;appid=123456&amp;appsecret=123&amp;city=郑州&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果展示 <img src="`+u+`" alt="image.png" loading="lazy"> 在类型模式的请求上增加了一个切面拦截，实现请求和响应后做业务处理。</p><h4 id="重新设置请求地址" tabindex="-1"><a class="header-anchor" href="#重新设置请求地址"><span>重新设置请求地址</span></a></h4><p>目的：当你调用一个服务接口，这个服务接口是需要做一些处理才可以获取到的，那么就可以做一层拦截来获取请求地址 编写处理程序CustomerRequestUrlDelegatingHandler继承自DelegatingHandler，用来重新设置请求地址</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 重写请求url  处理请求消息和返回消息</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRequestUrlDelegatingHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DelegatingHandler</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> current <span class="token operator">=</span> request<span class="token punctuation">.</span>RequestUri<span class="token punctuation">;</span>

        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//组装真实的调用url</span>
            request<span class="token punctuation">.</span>RequestUri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">current<span class="token punctuation">.</span>Scheme</span><span class="token punctuation">}</span></span><span class="token string">://</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">LookupService</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">current<span class="token punctuation">.</span>PathAndQuery</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//内部发起的真实请求</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span>
        <span class="token punctuation">{</span>
            request<span class="token punctuation">.</span>RequestUri <span class="token operator">=</span> current<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 通过方法获取一类服务统一的url地址</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">LookupService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;jsonplaceholder.typicode.com&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入配置修改为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;360service&quot;</span><span class="token punctuation">,</span> c <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//服务注册的名称</span>
    c<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://360service/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpMessageHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerRequestUrlDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注册自定义的DelegatingHandler</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomerRequestUrlDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]/[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IHttpClientFactory</span> _httpClientFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomerController</span><span class="token punctuation">(</span><span class="token class-name">IHttpClientFactory</span> httpClientFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _httpClientFactory <span class="token operator">=</span> httpClientFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 重写请求URL</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">OverrideRequestUrlAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> _httpClientFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token string">&quot;360service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最后会重新设置该请求地址</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>StatusCode <span class="token operator">==</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),h={href:"https://www.cnblogs.com/wucy/p/12941322.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<h4 id="请求日志输出" tabindex="-1"><a class="header-anchor" href="#请求日志输出"><span>请求日志输出</span></a></h4><p>对于 Http 请求的日志，我们希望记录请求的Url、Http动词、请求时长等信息，而这一点，在一个大量接入第三方接口的系统或者是以 Http 驱动的微服务架构中，常常是不可或缺的一环，对于我们排查故障、监控服务非常有用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> correlationId <span class="token operator">=</span> <span class="token function">GetCorrelationId</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span>_logger<span class="token punctuation">.</span><span class="token function">BeginScope</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;correlationId=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">correlationId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Start Processing HTTP Request </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>Method</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">request<span class="token punctuation">.</span>RequestUri</span><span class="token punctuation">}</span></span><span class="token string"> [Correlation: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">correlationId</span><span class="token punctuation">}</span></span><span class="token string">]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
         _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;End Processing HTTP Request in </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">response<span class="token punctuation">.</span>StatusCode</span><span class="token punctuation">}</span></span><span class="token string">, [Correlation: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">correlationId</span><span class="token punctuation">}</span></span><span class="token string">]&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// GetCorrelationId</span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetCorrelationId</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryGetValues</span><span class="token punctuation">(</span><span class="token string">&quot;X-Correlation-ID&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> values<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> values<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> correlationId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;X-Correlation-ID&quot;</span><span class="token punctuation">,</span> correlationId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> correlationId<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="请求重试" tabindex="-1"><a class="header-anchor" href="#请求重试"><span>请求重试</span></a></h4><p>考虑请求的故障恢复，通过引入polly，在实现SendAsync()方法的时候，通过Polly中的超时、重试等机制对其做一层包装：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryableHttpMessageHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DelegatingHandler</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>RetryableHttpMessageHandler<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IAsyncPolicy<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> _retryPolicy<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">RetryableHttpMessageHandler</span><span class="token punctuation">(</span>
        <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>RetryableHttpMessageHandler<span class="token punctuation">&gt;</span></span> logger
    <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
        _retryPolicy <span class="token operator">=</span> Policy<span class="token operator">&lt;</span>HttpResponseMessage<span class="token operator">&gt;</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpRequestException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Or</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TimeoutException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">OrResult</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>StatusCode <span class="token operator">&gt;=</span> <span class="token number">400</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">RetryAsync</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ret<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;调用接口异常：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret<span class="token punctuation">.</span>Exception<span class="token punctuation">?.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">，状态码：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret<span class="token punctuation">.</span>Result<span class="token punctuation">.</span>StatusCode</span><span class="token punctuation">}</span></span><span class="token string">, 正在进行第</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">index</span><span class="token punctuation">}</span></span><span class="token string">次重试&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span>
      <span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> 
      <span class="token class-name">CancellationToken</span> cancellationToken
    <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _retryPolicy<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样地，我们这里通过HttpClient来请求指定的接口。因为，下面的接口实际上是不存在的。所以，理论上它会返回404这个状态码。而我们的重试策略是，在发生HttpRequestException或者TimeoutException异常以及 Http 响应的状态码大于 400 时，自动触发 3 次重试。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> _clientFactory<span class="token punctuation">.</span><span class="token function">CreateClient</span><span class="token punctuation">(</span><span class="token string">&quot;ApiMock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;/api/fail&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="身份认证" tabindex="-1"><a class="header-anchor" href="#身份认证"><span>身份认证</span></a></h4><p>在发送 HTTP 请求之前添加 <code>Authorization</code> 标头。</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class AuthenticationDelegatingHandler(IOptions&lt;GitHubOptions&gt; options)
    : DelegatingHandler
{
    protected override Task&lt;HttpResponseMessage&gt; SendAsync(
        HttpRequestMessage request,
        CancellationToken cancellationToken)
    {
        request.Headers.Add(&quot;Authorization&quot;, options.Value.AccessToken);
        request.Headers.Add(&quot;User-Agent&quot;, options.Value.UserAgent);

        return base.SendAsync(request, cancellationToken);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入服务</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>builder.Services.AddTransient&lt;AuthenticationDelegatingHandler&gt;();

builder.Services.AddHttpClient&lt;GitHubService&gt;(httpClient =&gt;
{
    httpClient.BaseAddress = new Uri(&quot;https://api.github.com&quot;);
})
.AddHttpMessageHandler&lt;LoggingDelegatingHandler&gt;()
.AddHttpMessageHandler&lt;RetryDelegatingHandler&gt;()
.AddHttpMessageHandler&lt;AuthenticationDelegatingHandler&gt;();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="搭配polly" tabindex="-1"><a class="header-anchor" href="#搭配polly"><span>搭配Polly</span></a></h3><p>有时候请求会出现网络波动导致请求异常，这个时候我们就需要再次尝试请求一次或者多次，这个时候我们就需要使用到Polly库。 引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.Extensions.Http.Polly&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注册服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddHttpClient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WeatherClientService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>client <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//设置服务url</span>
    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://192.168.1.4:8012&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//自定义配置</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>Http<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddHttpMessageHandler</span><span class="token punctuation">(</span>hander <span class="token operator">=&gt;</span> hander<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CustomDelegatingHandler<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddTransientHttpErrorPolicy</span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span> builder<span class="token punctuation">.</span><span class="token function">WaitAndRetryAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
        <span class="token comment">//为了测试效果时间弄稍微久一点</span>
        TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖注入到控制器中使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">WeatherClientService</span> _weatherClientService<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">PollyController</span><span class="token punctuation">(</span><span class="token class-name">WeatherClientService</span> weatherClientService<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _weatherClientService <span class="token operator">=</span> weatherClientService<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> _weatherClientService<span class="token punctuation">.</span><span class="token function">TestTypeClientGet</span><span class="token punctuation">(</span><span class="token string">&quot;/api/Test/GetDateTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>展示效果，先关闭服务，在请求一次，重试一次后，重新启动服务 <img src="`+r+`" alt="image.png" loading="lazy"></p><p>直接在中间层DelegatingHandler处理重试</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class RetryDelegatingHandler : DelegatingHandler
{
    private readonly AsyncRetryPolicy&lt;HttpResponseMessage&gt; _retryPolicy =
        Policy&lt;HttpResponseMessage&gt;
            .Handle&lt;HttpRequestException&gt;()
            .RetryAsync(2);

    protected override async Task&lt;HttpResponseMessage&gt; SendAsync(
        HttpRequestMessage request,
        CancellationToken cancellationToken)
    {
        var policyResult = await _retryPolicy.ExecuteAndCaptureAsync(
            () =&gt; base.SendAsync(request, cancellationToken));

        if (policyResult.Outcome == OutcomeType.Failure)
        {
            throw new HttpRequestException(
                &quot;Something went wrong&quot;,
                policyResult.FinalException);
        }

        return policyResult.Result;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入服务</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>builder.Services.AddTransient&lt;RetryDelegatingHandler&gt;();

builder.Services.AddHttpClient&lt;GitHubService&gt;(httpClient =&gt;
{
    httpClient.BaseAddress = new Uri(&quot;https://api.github.com&quot;);
})
.AddHttpMessageHandler&lt;LoggingDelegatingHandler&gt;()
.AddHttpMessageHandler&lt;RetryDelegatingHandler&gt;();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试socket未释放" tabindex="-1"><a class="header-anchor" href="#测试socket未释放"><span>测试socket未释放</span></a></h3><p>现在我去请求一个WebApi程序，请求代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> httpclient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> httpclient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://xx.xx.xx.61:8001/api/xxx/xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;返回码&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用netstat查看是否存在Socket被占用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>netstat <span class="token operator">-</span>ano <span class="token operator">|</span> findstr TIME_WAIT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行之前 <img src="`+k+'" alt="image.png" loading="lazy"> 执行之后 <img src="'+d+`" alt="image.png" loading="lazy"> 经过一会后再次执行这些会断开,所以应该使用IHttpClientFactory来创建HttpClient。</p><h3 id="httpclienthandler" tabindex="-1"><a class="header-anchor" href="#httpclienthandler"><span>HttpClientHandler</span></a></h3><h4 id="禁用重定向" tabindex="-1"><a class="header-anchor" href="#禁用重定向"><span>禁用重定向</span></a></h4><p>输出重定向前的结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    AllowAutoRedirect <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span>BaseUrl<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>articlePath<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">TrimStart</span><span class="token punctuation">(</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>RequestMessage<span class="token punctuation">.</span>RequestUri<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res1<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="证书" tabindex="-1"><a class="header-anchor" href="#证书"><span>证书</span></a></h3><h4 id="忽略证书的问题" tabindex="-1"><a class="header-anchor" href="#忽略证书的问题"><span>忽略证书的问题</span></a></h4><p>无论证书是否有问题都可以请求成功</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>
<span class="token punctuation">{</span>
    ServerCertificateCustomValidationCallback <span class="token operator">=</span> <span class="token keyword">delegate</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> httpclient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Asp.NetCore中我们可以这么写</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span>
    <span class="token comment">// 忽略 SSL 不安全检查，或 https 不安全或 https 证书有误</span>
    <span class="token punctuation">.</span><span class="token function">ConfigurePrimaryHttpMessageHandler</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>
    <span class="token punctuation">{</span>
        ServerCertificateCustomValidationCallback <span class="token operator">=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至还可以忽略所有的请求证书</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>ServicePointManager<span class="token punctuation">.</span>ServerCertificateValidationCallback <span class="token operator">+=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> certificate<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> errors<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="证书有效期判断" tabindex="-1"><a class="header-anchor" href="#证书有效期判断"><span>证书有效期判断</span></a></h4><p>ServerCertificateCustomValidationCallback 这个 Func 就是让客户端进行服务端证书检验的一个回调，可以添加很多自定义的逻辑进去。 下面是它的定义：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Func<span class="token punctuation">&lt;</span>HttpRequestMessage<span class="token punctuation">,</span> X509Certificate2<span class="token punctuation">?</span><span class="token punctuation">,</span> X509Chain<span class="token punctuation">?</span><span class="token punctuation">,</span> SslPolicyErrors<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> ServerCertificateCustomValidationCallback <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们就可以通过 X509Certificate2 来进行服务端证书过期时间的判断了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ValidateCertificate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">X509Certificate<span class="token punctuation">?</span></span> certificate<span class="token punctuation">,</span> <span class="token class-name">X509Chain<span class="token punctuation">?</span></span> chain<span class="token punctuation">,</span> <span class="token class-name">SslPolicyErrors</span> sslPolicyErrors<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>certificate <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> expirationDate <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>certificate<span class="token punctuation">.</span><span class="token function">GetExpirationDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 提前 x 天预警，正常是提前一个月</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>expirationDate <span class="token operator">-</span> DateTime<span class="token punctuation">.</span>Today <span class="token operator">&lt;</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NeedRenewException</span><span class="token punctuation">(</span><span class="token string">&quot;It&#39;s time to renew the certificate!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sslPolicyErrors <span class="token operator">==</span> SslPolicyErrors<span class="token punctuation">.</span>None<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CertPolicyException</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Cert policy errors: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sslPolicyErrors<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后把上面的 ValidateCertificate 加到 HttpClientHandler 里面即可。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HttpClientSSLCheck</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> domain<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">HttpClientHandler</span> clientHandler <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        ServerCertificateCustomValidationCallback <span class="token operator">=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> cert<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> sslPolicyErrors<span class="token punctuation">)</span> 
                <span class="token operator">=&gt;</span> <span class="token function">ValidateCertificate</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> cert<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> sslPolicyErrors<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name">CancellationTokenSource</span> cts <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>clientHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;https://</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">domain</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">domain</span><span class="token punctuation">}</span></span><span class="token string"> is OK </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token keyword">nameof</span><span class="token punctuation">(</span>HttpClientSSLCheck<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TaskCanceledException</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 集成企微、钉钉或其他类型的通知</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>InnerException <span class="token keyword">is</span> <span class="token class-name">CertPolicyException</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">domain</span><span class="token punctuation">}</span></span><span class="token string"> | ex = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>InnerException<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>InnerException <span class="token keyword">is</span> <span class="token class-name">NeedRenewException</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">domain</span><span class="token punctuation">}</span></span><span class="token string"> | need to renew !!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">domain</span><span class="token punctuation">}</span></span><span class="token string"> | ex = </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就是调用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> <span class="token function">HttpClientSSLCheck</span><span class="token punctuation">(</span><span class="token string">&quot;github.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,52),w={href:"https://mp.weixin.qq.com/s/DbNHgR_ok0FLdqT-UXqEVA",target:"_blank",rel:"noopener noreferrer"},q=e(`<h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> Address <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//地址</span>
<span class="token class-name"><span class="token keyword">var</span></span> Account <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//用户名</span>
<span class="token class-name"><span class="token keyword">var</span></span> Password <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">//密码</span>
<span class="token class-name"><span class="token keyword">var</span></span> webProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebProxy</span><span class="token punctuation">(</span>Address<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
webProxy<span class="token punctuation">.</span>BypassProxyOnLocal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">//2.如果有用户名和密码需要以下设置</span>
<span class="token class-name">ICredentials</span> jxCredt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NetworkCredential</span><span class="token punctuation">(</span>Account<span class="token punctuation">,</span> Password<span class="token punctuation">)</span><span class="token punctuation">;</span>
webProxy<span class="token punctuation">.</span>Credentials <span class="token operator">=</span> jxCredt<span class="token punctuation">;</span>


<span class="token comment">//全局设置</span>
HttpClient<span class="token punctuation">.</span>DefaultProxy <span class="token operator">=</span> webProxy<span class="token punctuation">;</span>

<span class="token comment">//对某一个请求设置</span>
<span class="token class-name"><span class="token keyword">var</span></span> proxyHttpClientHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>
<span class="token punctuation">{</span>
    Proxy <span class="token operator">=</span> webProxy<span class="token punctuation">,</span>
    UseProxy <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>proxyHttpClientHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开启http2" tabindex="-1"><a class="header-anchor" href="#开启http2"><span>开启HTTP2</span></a></h3><p>HttpClient默认使用HTTP/1.1，在3.0之后可以启用http/2。</p><p>直接设置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultRequestVersion <span class="token operator">=</span> HttpVersion<span class="token punctuation">.</span>Version20<span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultVersionPolicy <span class="token operator">=</span> HttpVersionPolicy<span class="token punctuation">.</span>RequestVersionOrLower<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局设置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;h2multiconnnections&quot;</span><span class="token punctuation">,</span> httpclient <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    httpclient<span class="token punctuation">.</span>DefaultRequestVersion <span class="token operator">=</span> HttpVersion<span class="token punctuation">.</span>Version20<span class="token punctuation">;</span>
    httpclient<span class="token punctuation">.</span>DefaultVersionPolicy <span class="token operator">=</span> HttpVersionPolicy<span class="token punctuation">.</span>RequestVersionOrLower<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您使用Send或SendAsync方法，您必须在其中传递HttpRequestMessage的实例，则需要在 HttpRequestMessage 实例上设置Version和VersionPolicy属性。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span>Version <span class="token operator">=</span> HttpVersion<span class="token punctuation">.</span>Version20<span class="token punctuation">;</span>
request<span class="token punctuation">.</span>VersionPolicy <span class="token operator">=</span> HttpVersionPolicy<span class="token punctuation">.</span>RequestVersionOrLower<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> _client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多连接" tabindex="-1"><a class="header-anchor" href="#多连接"><span>多连接</span></a></h3><p>在 .NET 5.0 和 .NET 6.0 中，HttpClient 默认配置为仅打开 1 个到 HTTP/2 服务器的连接。另外，最大并发流数的推荐值为100。 在某些情况下，出于性能原因，如果您在短时间内发送数千个请求，则可能需要与服务器建立 1 个以上的连接。出于这个原因，在 .NET 5.0 中，Microsoft在SocketsHttpHandler类上引入了EnableMultipleHttp2Connections属性，使开发人员能够根据需要更改默认行为。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddHttpClient</span><span class="token punctuation">(</span><span class="token string">&quot;h2multiconnnections&quot;</span><span class="token punctuation">,</span> httpclient <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    httpclient<span class="token punctuation">.</span>DefaultRequestVersion <span class="token operator">=</span> HttpVersion<span class="token punctuation">.</span>Version20<span class="token punctuation">;</span>
    httpclient<span class="token punctuation">.</span>DefaultVersionPolicy <span class="token operator">=</span> HttpVersionPolicy<span class="token punctuation">.</span>RequestVersionOrLower<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">ConfigurePrimaryHttpMessageHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SocketsHttpHandler</span>
  <span class="token punctuation">{</span>
      EnableMultipleHttp2Connections <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="basic认证" tabindex="-1"><a class="header-anchor" href="#basic认证"><span>Basic认证</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> username <span class="token operator">=</span> <span class="token string">&quot;your_username&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> password <span class="token operator">=</span> <span class="token string">&quot;your_password&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> authHeaderValue <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">username</span><span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">password</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Basic&quot;</span><span class="token punctuation">,</span> authHeaderValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用webservice" tabindex="-1"><a class="header-anchor" href="#调用webservice"><span>调用WebService</span></a></h3><p>通过HTTP的方式去调用webservice接口</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>                <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;{{\\&quot;mobile\\&quot;:\\&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">textBox2<span class="token punctuation">.</span>Text</span><span class="token punctuation">}</span></span><span class="token string">\\&quot;,\\&quot;text\\&quot;:\\&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">textBox3<span class="token punctuation">.</span>Text</span><span class="token punctuation">}</span></span><span class="token string">\\&quot;,\\&quot;msgSource\\&quot;:\\&quot;森亿-360视图\\&quot;,\\&quot;isHaveOrgName\\&quot;:\\&quot;0\\&quot;}}&quot;</span></span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">string</span></span> requestContent <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$@&quot;&lt;soapenv:Envelope xmlns:soapenv=&quot;&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&quot;
    xmlns:web=&quot;&quot;http://webservice.xawellcare.com/&quot;&quot;&gt;
    &lt;soapenv:Header/&gt;
    &lt;soapenv:Body&gt;
        &lt;web:pushSmsByTextMsg&gt;
            &lt;param&gt;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string">&lt;/param&gt;
        &lt;/web:pushSmsByTextMsg&gt;
    &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;
                &quot;</span></span><span class="token punctuation">;</span>

                <span class="token class-name"><span class="token keyword">var</span></span> authHeaderValue <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">textBox5<span class="token punctuation">.</span>Text</span><span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">textBox6<span class="token punctuation">.</span>Text</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 创建 HttpClient 对象</span>
                <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 创建 HttpRequestMessage 对象</span>
                <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">,</span> textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>requestContent<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">&quot;text/xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
                client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Basic&quot;</span><span class="token punctuation">,</span> authHeaderValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 发送请求并获取响应</span>
                <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 读取响应内容</span>
                <span class="token class-name"><span class="token keyword">var</span></span> responseContent <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//var responseContent = @&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;UTF-8&quot;&quot;?&gt;</span>
                <span class="token comment">//&lt;soapenv:Envelope xmlns:soapenv=&quot;&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&quot;&gt;&lt;soapenv:Header xmlns:web=&quot;&quot;http://webservice.xawellcare.com/&quot;&quot;/&gt;&lt;soap:Body xmlns:soap=&quot;&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&quot;&gt;&lt;ns2:pushSmsByTextMsgResponse xmlns:ns2=&quot;&quot;http://webservice.xawellcare.com/&quot;&quot;&gt;&lt;return&gt;{data=null, errorMessage=, status=200, desc=请求成功}&lt;/return&gt;&lt;/ns2:pushSmsByTextMsgResponse&gt;&lt;/soap:Body&gt;&lt;/soapenv:Envelope&gt;&quot;;</span>

                <span class="token comment">// 解析 XML 响应数据</span>
                <span class="token class-name"><span class="token keyword">var</span></span> xmlDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                xmlDoc<span class="token punctuation">.</span><span class="token function">LoadXml</span><span class="token punctuation">(</span>responseContent<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name"><span class="token keyword">var</span></span> returnNode <span class="token operator">=</span> xmlDoc<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span><span class="token string">&quot;//return&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="网页压缩请求" tabindex="-1"><a class="header-anchor" href="#网页压缩请求"><span>网页压缩请求</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span>  
<span class="token punctuation">{</span>  
    AutomaticDecompression <span class="token operator">=</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>DecompressionMethods<span class="token punctuation">.</span>GZip <span class="token operator">|</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>DecompressionMethods<span class="token punctuation">.</span>Deflate  <span class="token operator">|</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">.</span>DecompressionMethods<span class="token punctuation">.</span>Brotli
<span class="token punctuation">}</span><span class="token punctuation">;</span>  
<span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 设置请求头</span>
client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &quot;</span> <span class="token operator">+</span>
    <span class="token string">&quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Encoding&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gzip, deflate, br&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Language&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zh-CN,zh;q=0.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Connection&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;keep-alive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),f={href:"https://learn.microsoft.com/zh-cn/dotnet/api/system.net.http.httpclienthandler.automaticdecompression?view=net-7.0",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="爬虫写法" tabindex="-1"><a class="header-anchor" href="#爬虫写法"><span>爬虫写法</span></a></h3><p>一个爬虫的httpclient请求写法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 下载网页内容，并将其他编码转换为 UTF-8 编码</span>
<span class="token doc-comment comment">/// 记得看后面的优化说明</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetWebHtml</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用 HttpClient 下载网页内容</span>

    <span class="token class-name"><span class="token keyword">var</span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 忽略证书错误</span>
    handler<span class="token punctuation">.</span>ServerCertificateCustomValidationCallback <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">,</span> cert<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> errors<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    handler<span class="token punctuation">.</span>AutomaticDecompression <span class="token operator">=</span> DecompressionMethods<span class="token punctuation">.</span>GZip <span class="token operator">|</span> DecompressionMethods<span class="token punctuation">.</span>Deflate <span class="token operator">|</span> DecompressionMethods<span class="token punctuation">.</span>Brotli<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置请求头</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) &quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Accept&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 加上后不处理解压缩会乱码</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Encoding&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gzip, deflate, br&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Accept-Language&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zh-CN,zh;q=0.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Connection&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;keep-alive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsByteArrayAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取网页编码 ContentType 可能为空，从网页获取</span>
    <span class="token class-name"><span class="token keyword">var</span></span> charset <span class="token operator">=</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentType<span class="token punctuation">?.</span>CharSet<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 从网页获取编码信息</span>
        <span class="token class-name"><span class="token keyword">var</span></span> htmldoc <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> match <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>htmldoc<span class="token punctuation">,</span> <span class="token string">&quot;&lt;meta.*?charset=\\&quot;?(?&lt;charset&gt;.*?)\\&quot;.*?&gt;&quot;</span><span class="token punctuation">,</span> RegexOptions<span class="token punctuation">.</span>IgnoreCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">.</span>Success<span class="token punctuation">)</span> charset <span class="token operator">=</span> match<span class="token punctuation">.</span>Groups<span class="token punctuation">[</span><span class="token string">&quot;charset&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
        <span class="token keyword">else</span> charset <span class="token operator">=</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Encoding<span class="token punctuation">.</span><span class="token function">RegisterProvider</span><span class="token punctuation">(</span>CodePagesEncodingProvider<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Encoding</span> encoding<span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span>charset<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;gbk&quot;</span><span class="token punctuation">:</span>
            encoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token function">GetEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;gb2312&quot;</span><span class="token punctuation">:</span>
            encoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token function">GetEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;GB2312&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;iso-8859-1&quot;</span><span class="token punctuation">:</span>
            encoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span><span class="token function">GetEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;ISO-8859-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;ascii&quot;</span><span class="token punctuation">:</span>
            encoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;unicode&quot;</span><span class="token punctuation">:</span>
            encoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>Unicode<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;utf-32&quot;</span><span class="token punctuation">:</span>
            encoding <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF32<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 统一转换为 UTF-8 编码</span>
    <span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span><span class="token function">Convert</span><span class="token punctuation">(</span>encoding<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> html<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用处理方法" tabindex="-1"><a class="header-anchor" href="#常用处理方法"><span>常用处理方法</span></a></h2><h3 id="获取网络图片字节数组" tabindex="-1"><a class="header-anchor" href="#获取网络图片字节数组"><span>获取网络图片字节数组</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span></span> <span class="token function">DownloadImageAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 绕过https证书</span>
    <span class="token class-name"><span class="token keyword">var</span></span> httpClientHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    httpClientHandler<span class="token punctuation">.</span>ServerCertificateCustomValidationCallback <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token punctuation">,</span> cert<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">//注意这里生成的只读流无法使用Length属性</span>
    <span class="token class-name">HttpClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>httpClientHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> file <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetStreamAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> memoryStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">CopyToAsync</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> memoryStream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,7),H={href:"https://mp.weixin.qq.com/s/sBWUGOLeE4EjkKljZg1zuQ",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mp.weixin.qq.com/s/i8kFdEpQ4-go5DrJFcJDJg",target:"_blank",rel:"noopener noreferrer"},A={href:"https://mp.weixin.qq.com/s/DYJ2NfVkCfW-RmEsH2gC_A",target:"_blank",rel:"noopener noreferrer"};function S(T,R){const a=o("ExternalLinkIcon");return c(),l("div",null,[m,n("p",null,[s("参考："),n("a",b,[s("https://blog.csdn.net/csdnnews/article/details/109040280"),t(a)])]),g,n("p",null,[s("参考资料："),n("a",h,[s("https://www.cnblogs.com/wucy/p/12941322.html"),t(a)])]),y,n("p",null,[n("a",w,[s("https://mp.weixin.qq.com/s/DbNHgR_ok0FLdqT-UXqEVA"),t(a)]),s(" | C## HTTPS证书的过期时间检测")]),q,n("p",null,[s("资料："),n("a",f,[s("https://learn.microsoft.com/zh-cn/dotnet/api/system.net.http.httpclienthandler.automaticdecompression?view=net-7.0"),t(a)])]),C,n("blockquote",null,[n("p",null,[n("a",H,[s("https://mp.weixin.qq.com/s/sBWUGOLeE4EjkKljZg1zuQ"),t(a)]),s(" | HttpClientFactory的套路，你知多少？ 本文参考自："),n("a",x,[s("https://mp.weixin.qq.com/s/i8kFdEpQ4-go5DrJFcJDJg"),t(a)]),n("a",A,[s("https://mp.weixin.qq.com/s/DYJ2NfVkCfW-RmEsH2gC_A"),t(a)]),s(" | .NET 平台Http消息处理者工厂")])])])}const E=p(v,[["render",S],["__file","httpclient.html.vue"]]),M=JSON.parse('{"path":"/dotnet/api/remoteProcedureCall/httpclient.html","title":"HttpClient","lang":"zh-CN","frontmatter":{"title":"HttpClient","lang":"zh-CN","date":"2023-10-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"httpclient","slug":"gm97a0","docsId":"47467052","description":"概述 HttpClient是用户进行HTTP请求的，不过在我释放HttpClient对象时候，基础套接字不会立即释放，所以可能导致套接字耗尽，最终导致SocketException错误，所以推荐使用HttpClientFactory。 底层方法 HttpClient底层调用是 而handler正是我们通过HttpClient传递下来的HttpMessa...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/remoteProcedureCall/httpclient.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"HttpClient"}],["meta",{"property":"og:description","content":"概述 HttpClient是用户进行HTTP请求的，不过在我释放HttpClient对象时候，基础套接字不会立即释放，所以可能导致套接字耗尽，最终导致SocketException错误，所以推荐使用HttpClientFactory。 底层方法 HttpClient底层调用是 而handler正是我们通过HttpClient传递下来的HttpMessa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1635605991421-e45c7e7c-3483-4585-8782-a050aa13d72f.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-09T07:25:08.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T07:25:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HttpClient\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1635605991421-e45c7e7c-3483-4585-8782-a050aa13d72f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1635607127494-0ee82640-00a3-498e-ac59-da4150c70f06.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625323593371-e81fe980-f753-4f15-bd54-c543fff7bde3.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625242924090-22336f06-e45b-4e02-89b7-54eaccc1b2a5.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625242992263-d6e0fced-eb12-4168-86ef-caafaa1696b2.png\\"],\\"datePublished\\":\\"2023-10-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-09T07:25:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"底层方法","slug":"底层方法","link":"#底层方法","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基本配置","slug":"基本配置","link":"#基本配置","children":[]},{"level":3,"title":"请求头设置","slug":"请求头设置","link":"#请求头设置","children":[]},{"level":3,"title":"响应头","slug":"响应头","link":"#响应头","children":[]},{"level":3,"title":"命名模式","slug":"命名模式","link":"#命名模式","children":[]},{"level":3,"title":"类型模式","slug":"类型模式","link":"#类型模式","children":[]},{"level":3,"title":"自定义管道逻辑","slug":"自定义管道逻辑","link":"#自定义管道逻辑","children":[{"level":4,"title":"重写SendAsync","slug":"重写sendasync","link":"#重写sendasync","children":[]},{"level":4,"title":"重新设置请求地址","slug":"重新设置请求地址","link":"#重新设置请求地址","children":[]},{"level":4,"title":"请求日志输出","slug":"请求日志输出","link":"#请求日志输出","children":[]},{"level":4,"title":"请求重试","slug":"请求重试","link":"#请求重试","children":[]},{"level":4,"title":"身份认证","slug":"身份认证","link":"#身份认证","children":[]}]},{"level":3,"title":"搭配Polly","slug":"搭配polly","link":"#搭配polly","children":[]},{"level":3,"title":"测试socket未释放","slug":"测试socket未释放","link":"#测试socket未释放","children":[]},{"level":3,"title":"HttpClientHandler","slug":"httpclienthandler","link":"#httpclienthandler","children":[{"level":4,"title":"禁用重定向","slug":"禁用重定向","link":"#禁用重定向","children":[]}]},{"level":3,"title":"证书","slug":"证书","link":"#证书","children":[{"level":4,"title":"忽略证书的问题","slug":"忽略证书的问题","link":"#忽略证书的问题","children":[]},{"level":4,"title":"证书有效期判断","slug":"证书有效期判断","link":"#证书有效期判断","children":[]}]},{"level":3,"title":"代理","slug":"代理","link":"#代理","children":[]},{"level":3,"title":"开启HTTP2","slug":"开启http2","link":"#开启http2","children":[]},{"level":3,"title":"多连接","slug":"多连接","link":"#多连接","children":[]},{"level":3,"title":"Basic认证","slug":"basic认证","link":"#basic认证","children":[]},{"level":3,"title":"调用WebService","slug":"调用webservice","link":"#调用webservice","children":[]},{"level":3,"title":"网页压缩请求","slug":"网页压缩请求","link":"#网页压缩请求","children":[]},{"level":3,"title":"爬虫写法","slug":"爬虫写法","link":"#爬虫写法","children":[]}]},{"level":2,"title":"常用处理方法","slug":"常用处理方法","link":"#常用处理方法","children":[{"level":3,"title":"获取网络图片字节数组","slug":"获取网络图片字节数组","link":"#获取网络图片字节数组","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1709969108000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":12.17,"words":3651},"filePathRelative":"dotnet/api/remoteProcedureCall/httpclient.md","localizedDate":"2023年10月5日","excerpt":"<h2>概述</h2>\\n<p>HttpClient是用户进行HTTP请求的，不过在我释放HttpClient对象时候，基础套接字不会立即释放，所以可能导致套接字耗尽，最终导致SocketException错误，所以推荐使用HttpClientFactory。</p>\\n<h2>底层方法</h2>\\n<p>HttpClient底层调用是</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>_handler<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">SendAsync</span><span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">,</span> cancellationToken<span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}');export{E as comp,M as data};
