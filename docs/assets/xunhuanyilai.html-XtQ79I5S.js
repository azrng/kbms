import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as e}from"./app-qB9_Bjjp.js";const t="/kbms/common/1610415080566-ae69a588-027c-4bbe-a9db-02d9784ee7f7.png",p={},c=e('<p>在构建应用程序时候，良好的设计应该避免服务之间的循环依赖，循环依赖之某些组件直接或者间接的相互依赖，例如下图 <img src="'+t+`" alt="image.png" loading="lazy"> 比如A服务依赖B，B服务依赖C服务，C服务依赖A服务，这样子就造成了循环依赖的场景。</p><p>这个时候更推荐的方法当然是重构项目，来解决循环依赖的问题，当然我们这里先采用其他办法解决这个问题。</p><h3 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一"><span>方法一</span></a></h3><p>通过IServiceProvider 去获取某一个服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IC</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IServiceProvider</span> _services<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> services<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _services <span class="token operator">=</span> services<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
        <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> _services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二"><span>方法二</span></a></h3><p>借助<code>Lazy&lt;T&gt;</code>，添加一个IServiceCollection拓展</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LazyExtession</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceCollection</span> <span class="token function">AddLazyResolution</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> services<span class="token punctuation">.</span><span class="token function">AddTransient</span><span class="token punctuation">(</span>
                <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Lazy<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">LazilyResolved<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LazilyResolved<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Lazy<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token function">LazilyResolved</span><span class="token punctuation">(</span><span class="token class-name">IServiceProvider</span> serviceProvider<span class="token punctuation">)</span>
                <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>serviceProvider<span class="token punctuation">.</span>GetRequiredService<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在ConfigureServices里面注入</p><blockquote><p>services.AddLazyResolution();</p></blockquote><p>然后在依赖的类中想使用某一个类，就可以注入Lazy，然后访问lazy的值Value</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IC</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Lazy<span class="token punctuation">&lt;</span>IA<span class="token punctuation">&gt;</span></span> _a<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token class-name">Lazy<span class="token punctuation">&lt;</span>IA<span class="token punctuation">&gt;</span></span> a<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _a <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
        _a<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不要访问构造函数中的值，保存Lazy即可 ，在构造函数中访问该值，这将导致我们试图解决的相同问题。</p><h3 id="方法三" tabindex="-1"><a class="header-anchor" href="#方法三"><span>方法三</span></a></h3><p>通过借助消息队列的方式实现解耦</p>`,15),i=[c];function o(l,u){return s(),a("div",null,i)}const k=n(p,[["render",o],["__file","xunhuanyilai.html.vue"]]),v=JSON.parse('{"path":"/dotnet/base/yilaizhuru/xunhuanyilai.html","title":"循环依赖","lang":"zh-CN","frontmatter":{"title":"循环依赖","lang":"zh-CN","date":"2022-10-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"xunhuanyilai","slug":"bhfsno","docsId":"29988632","description":"在构建应用程序时候，良好的设计应该避免服务之间的循环依赖，循环依赖之某些组件直接或者间接的相互依赖，例如下图 image.png 比如A服务依赖B，B服务依赖C服务，C服务依赖A服务，这样子就造成了循环依赖的场景。 这个时候更推荐的方法当然是重构项目，来解决循环依赖的问题，当然我们这里先采用其他办法解决这个问题。 方法一 通过IServiceProvi...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/xunhuanyilai.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"循环依赖"}],["meta",{"property":"og:description","content":"在构建应用程序时候，良好的设计应该避免服务之间的循环依赖，循环依赖之某些组件直接或者间接的相互依赖，例如下图 image.png 比如A服务依赖B，B服务依赖C服务，C服务依赖A服务，这样子就造成了循环依赖的场景。 这个时候更推荐的方法当然是重构项目，来解决循环依赖的问题，当然我们这里先采用其他办法解决这个问题。 方法一 通过IServiceProvi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1610415080566-ae69a588-027c-4bbe-a9db-02d9784ee7f7.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"循环依赖\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1610415080566-ae69a588-027c-4bbe-a9db-02d9784ee7f7.png\\"],\\"datePublished\\":\\"2022-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"方法一","slug":"方法一","link":"#方法一","children":[]},{"level":3,"title":"方法二","slug":"方法二","link":"#方法二","children":[]},{"level":3,"title":"方法三","slug":"方法三","link":"#方法三","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.25,"words":374},"filePathRelative":"dotnet/base/yilaizhuru/xunhuanyilai.md","localizedDate":"2022年10月25日","excerpt":"<p>在构建应用程序时候，良好的设计应该避免服务之间的循环依赖，循环依赖之某些组件直接或者间接的相互依赖，例如下图\\n<img src=\\"/common/1610415080566-ae69a588-027c-4bbe-a9db-02d9784ee7f7.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n比如A服务依赖B，B服务依赖C服务，C服务依赖A服务，这样子就造成了循环依赖的场景。</p>\\n<p>这个时候更推荐的方法当然是重构项目，来解决循环依赖的问题，当然我们这里先采用其他办法解决这个问题。</p>\\n<h3>方法一</h3>\\n<p>通过IServiceProvider 去获取某一个服务</p>","autoDesc":true}');export{k as comp,v as data};
