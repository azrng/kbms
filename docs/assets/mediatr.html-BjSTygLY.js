import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,e as s,f as t,d as e}from"./app-CBxp4zeL.js";const l="/kbms/common/1609838443244-8e178c00-db63-468e-ae97-d7bbf8695096.png",u={},r=e('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>MediatR是一款基于中介者模式的思想而实现的.NET library，主要是为了解决进程内消息发送与消息处理过程之间的耦合问题。MediatR 提供了一种简洁的方式来协调应用程序内部的消息传递。通过将请求发送给中介者，可以确保每个处理程序只处理与其相关的请求，而不需要直接依赖其他处理程序。</p><p>MediatR 的效果可以类比为进程内的事件总线。虽然 MediatR 不是一个传统意义上的事件总线，但它在应用程序内部实现了中介者模式，可以将请求发送给对应的处理程序进行处理，从而达到解耦和组织代码的目的。</p><blockquote><p>中介者模式(Mediator Pattern)定义：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p></blockquote><p><img src="'+l+`" alt="image.png" loading="lazy"> 优点：减少类间的依赖，将原有的一对多的依赖编程的一对一的依赖，同事类只依赖中介者，减少了依赖，当然同时也降低了类间的耦合性。 缺点：中介者会膨胀的很大，而且逻辑复杂，原来N个对象的相互依赖关系转换为中介者和同事类的依赖关系，同事类越多，中介者的逻辑就越复杂。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>安装组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>MediatR
MediatR<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Microsoft<span class="token punctuation">.</span>DependencyInjection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>startup中注册服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//扫描 Startup 所在程序集内实现了 Handler 的对象并添加到 IoC 容器中 </span>
<span class="token comment">//services.AddMediatR(typeof(Startup));</span>
 services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Program</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：如果你的程序不在一个程序集下，需要注册多个程序集。</p></blockquote><h3 id="单播模式" tabindex="-1"><a class="header-anchor" href="#单播模式"><span><strong>单播模式</strong></span></a></h3><p>创建对应的请求类，继承irequest</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>public class Ping <span class="token builtin class-name">:</span> IRequest<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
    public string Name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token builtin class-name">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后单播处理类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PingHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequestHandler<span class="token punctuation">&lt;</span>Ping<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>PingHandler<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">PingHandler</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>PingHandler<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		_logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">Ping</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	   _logger<span class="token punctuation">.</span><span class="token function">LogError</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token string">&quot;pong&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发布单播消息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> aaa <span class="token operator">=</span> <span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="多播模式" tabindex="-1"><a class="header-anchor" href="#多播模式"><span>多播模式</span></a></h3><p>创建多播请求类，继承INotification</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddOperationLogBo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotification</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多播处理类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationLogHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotificationHandler<span class="token punctuation">&lt;</span>AddOperationLogBo<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IServiceScopeFactory</span> _serviceScopeFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">OperationLogHandler</span><span class="token punctuation">(</span><span class="token class-name">IServiceScopeFactory</span> serviceScopeFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _serviceScopeFactory <span class="token operator">=</span> serviceScopeFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">AddOperationLogBo</span> notification<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> scope <span class="token operator">=</span> _serviceScopeFactory<span class="token punctuation">.</span><span class="token function">CreateScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> _httpContextAccessor <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IHttpContextAccessor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> _operationLogRepository <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IOperationLogRepository<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> _logger <span class="token operator">=</span> scope<span class="token punctuation">.</span>ServiceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&lt;</span>OperationLogHandler<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>notification <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>notification<span class="token punctuation">.</span><span class="token function">IsValidOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> ip <span class="token operator">=</span> _httpContextAccessor<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OperationLog</span>
            <span class="token punctuation">{</span>
                DepartureTime <span class="token operator">=</span> notification<span class="token punctuation">.</span>DepartureTime<span class="token punctuation">,</span>
                OperationContent <span class="token operator">=</span> notification<span class="token punctuation">.</span>OperationContent<span class="token punctuation">,</span>
                OperationIp <span class="token operator">=</span> ip<span class="token punctuation">,</span>
                OperationTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToCstDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                OperationType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>notification<span class="token punctuation">.</span>OperationType<span class="token punctuation">,</span>
                UserId <span class="token operator">=</span> notification<span class="token punctuation">.</span>UserId<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> _operationLogRepository<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录操作日志成功，用户ID</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">notification<span class="token punctuation">.</span>UserId</span><span class="token punctuation">}</span></span><span class="token string"> 操作内容：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">notification<span class="token punctuation">.</span>OperationContent</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依赖注入IMediator</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMediator</span> _mediator<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发布多播消息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> _mediator<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Ping2</span> <span class="token punctuation">{</span>Name <span class="token operator">=</span> <span class="token string">&quot;测试&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ipipelinebehavior" tabindex="-1"><a class="header-anchor" href="#ipipelinebehavior"><span>IPipelineBehavior</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IPipelineBehavior<span class="token punctuation">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token punctuation">&gt;</span></span></span> <span class="token keyword">where</span> <span class="token class-name">TRequest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ICacheableQuery</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDistributedCache</span> _cache<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CachingBehavior</span><span class="token punctuation">(</span><span class="token class-name">IDistributedCache</span> cache<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">TRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">,</span> <span class="token class-name">RequestHandlerDelegate<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">TResponse</span> response<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>SlidingExpiration <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name"><span class="token keyword">var</span></span> key <span class="token operator">=</span><span class="token function">GetCacheKey</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> cachedResponse <span class="token operator">=</span> <span class="token keyword">await</span> _cache<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedResponse <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            response <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>cachedResponse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DistributedCacheEntryOptions</span> <span class="token punctuation">{</span> SlidingExpiration <span class="token operator">=</span> request<span class="token punctuation">.</span>SlidingExpiration <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> serializedData <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> _cache<span class="token punctuation">.</span><span class="token function">SetAsync</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> serializedData<span class="token punctuation">,</span> options<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> response<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以TRequest作为缓存Key，如果缓存存在，则反序列化得到缓存的响应，否则执行请求，缓存响应。使用Mediator，设置缓存时间为5秒：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMediator</span> _mediator<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span><span class="token class-name">IMediator</span> mediator<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_mediator<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetWeatherForecastQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetWeatherForecastQuery</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequest<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">ICacheableQuery</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">TimeSpan<span class="token punctuation">?</span></span> SlidingExpiration <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">GetWeatherForecastQueryHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRequestHandler<span class="token punctuation">&lt;</span>GetWeatherForecastQuery<span class="token punctuation">,</span> IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token class-name">GetWeatherForecastQuery</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> rng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WeatherForecast</span>
        <span class="token punctuation">{</span> 
            TemperatureC <span class="token operator">=</span> rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>rng<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dotnet6" tabindex="-1"><a class="header-anchor" href="#dotnet6"><span>dotNet6+</span></a></h3><p>在.Net高版本中，只需要去引用nuget包MediatR，然后注入方法如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> cfg<span class="token punctuation">.</span><span class="token function">RegisterServicesFromAssembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Startup</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mock-mediatr" tabindex="-1"><a class="header-anchor" href="#mock-mediatr"><span>Mock MediatR</span></a></h2>`,35),k={href:"https://blog.chcaty.cn/2021/09/22/net-core-mock-mediatr/",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>如何在单元测试中Mock MediatR 返回的数据，在网上已经有很多的写好的例子了。但是他们大部分都是通过控制器构造函数直接使用Mock的MediatR。而我需求是直接把Mock 出来的 MediatR 直接注入到IoC在容器中，在阅读官方文档以后，发现对应注入IMediatR的方法。下面是封装的一个Mock MediatR的方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// &lt;summary&gt; </span>
<span class="token doc-comment comment">/// MockMediator 调用方单元测试时可以模拟Mediator返的数据</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span> </span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Mock</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceCollection</span> <span class="token function">UseMockMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 移除原来的Mediator注入</span>
		<span class="token class-name"><span class="token keyword">var</span></span> mediator <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">SingleOrDefault</span><span class="token punctuation">(</span>d <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>ServiceType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IMediator</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>mediator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> services<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// Mock Mediator</span>
		<span class="token class-name"><span class="token keyword">var</span></span> fakeMediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IMediator<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fakeMediator<span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GetStudentByIdQuery<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>CancellationToken<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">Returns</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StudentInfo</span>
		<span class="token punctuation">{</span>
			BirthTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
			ClassName <span class="token operator">=</span> <span class="token string">&quot;测试班级&quot;</span><span class="token punctuation">,</span>
			Code <span class="token operator">=</span> <span class="token string">&quot;test0001&quot;</span><span class="token punctuation">,</span>
			CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
			Name <span class="token operator">=</span> <span class="token string">&quot;测试学生&quot;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 将MockMediator注入 </span>
		services<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceDescriptor</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IMediator</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fakeMediator<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> services<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,3),m={href:"https://www.cnblogs.com/sheng-jie/p/10280336.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://mp.weixin.qq.com/s/RuWFL5pWT-Bg-Se_O7w5IA",target:"_blank",rel:"noopener noreferrer"};function b(g,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,n("blockquote",null,[n("p",null,[s("当前知识点来自："),n("a",k,[s("https://blog.chcaty.cn/2021/09/22/net-core-mock-mediatr/"),t(a)])])]),d,n("p",null,[s("教程："),n("a",m,[s("https://www.cnblogs.com/sheng-jie/p/10280336.html"),t(a)]),n("a",v,[s("https://mp.weixin.qq.com/s/RuWFL5pWT-Bg-Se_O7w5IA"),t(a)]),s(" | 在 ASP.NET Core 项目中使用 MediatR 实现中介者模式")])])}const f=p(u,[["render",b],["__file","mediatr.html.vue"]]),R=JSON.parse('{"path":"/middleware/shijianzongxian/mediatr.html","title":"MediatR","lang":"zh-CN","frontmatter":{"title":"MediatR","lang":"zh-CN","date":"2023-08-26T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"mediatr","slug":"hlcelx","docsId":"29634226","description":"概述 MediatR是一款基于中介者模式的思想而实现的.NET library，主要是为了解决进程内消息发送与消息处理过程之间的耦合问题。MediatR 提供了一种简洁的方式来协调应用程序内部的消息传递。通过将请求发送给中介者，可以确保每个处理程序只处理与其相关的请求，而不需要直接依赖其他处理程序。 MediatR 的效果可以类比为进程内的事件总线。虽...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/shijianzongxian/mediatr.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"MediatR"}],["meta",{"property":"og:description","content":"概述 MediatR是一款基于中介者模式的思想而实现的.NET library，主要是为了解决进程内消息发送与消息处理过程之间的耦合问题。MediatR 提供了一种简洁的方式来协调应用程序内部的消息传递。通过将请求发送给中介者，可以确保每个处理程序只处理与其相关的请求，而不需要直接依赖其他处理程序。 MediatR 的效果可以类比为进程内的事件总线。虽..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1609838443244-8e178c00-db63-468e-ae97-d7bbf8695096.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MediatR\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1609838443244-8e178c00-db63-468e-ae97-d7bbf8695096.png\\"],\\"datePublished\\":\\"2023-08-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"单播模式","slug":"单播模式","link":"#单播模式","children":[]},{"level":3,"title":"多播模式","slug":"多播模式","link":"#多播模式","children":[]},{"level":3,"title":"IPipelineBehavior","slug":"ipipelinebehavior","link":"#ipipelinebehavior","children":[]},{"level":3,"title":"dotNet6+","slug":"dotnet6","link":"#dotnet6","children":[]}]},{"level":2,"title":"Mock MediatR","slug":"mock-mediatr","link":"#mock-mediatr","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.2,"words":1260},"filePathRelative":"middleware/shijianzongxian/mediatr.md","localizedDate":"2023年8月26日","excerpt":"<h2>概述</h2>\\n<p>MediatR是一款基于中介者模式的思想而实现的.NET library，主要是为了解决进程内消息发送与消息处理过程之间的耦合问题。MediatR 提供了一种简洁的方式来协调应用程序内部的消息传递。通过将请求发送给中介者，可以确保每个处理程序只处理与其相关的请求，而不需要直接依赖其他处理程序。</p>\\n<p>MediatR 的效果可以类比为进程内的事件总线。虽然 MediatR 不是一个传统意义上的事件总线，但它在应用程序内部实现了中介者模式，可以将请求发送给对应的处理程序进行处理，从而达到解耦和组织代码的目的。</p>\\n<blockquote>\\n<p>中介者模式(Mediator Pattern)定义：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。中介者模式又称为调停者模式，它是一种对象行为型模式。</p>\\n</blockquote>","autoDesc":true}');export{f as comp,R as data};
