import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c,a as n,d as s,e as o,b as l}from"./app-qB9_Bjjp.js";const i={},u=l(`<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p>代理模式(proxy design pattern)是通过引入代码类来给原始类附加功能。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>业务系统的非功能性需求开发 <ul><li>比如监控、统计、鉴权、限流、事务等</li></ul></li><li>RPC框架也可以看作是一种代理，通过远程单代理，将网络通信、数据编解码等细节隐藏起来，客户端调用就跟使用本地函数一样，无需去了解跟服务器交互的细节。</li></ul><h2 id="静态代理" tabindex="-1"><a class="header-anchor" href="#静态代理"><span>静态代理</span></a></h2><p>有一个公共的输出日志监控的类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 模拟记录日志</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricsService</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于接口实现" tabindex="-1"><a class="header-anchor" href="#基于接口实现"><span>基于接口实现</span></a></h3><p>参照基于接口而非实现的编程思想，将原始类对象替换为代理类对象， 并且让代理类和原始类实现相同的接口</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUserName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> account<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUserName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;用户名&quot;</span><span class="token operator">+</span> userId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> account<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> account<span class="token operator">==</span><span class="token string">&quot;admin&quot;</span> <span class="token operator">&amp;&amp;</span> password<span class="token operator">==</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 用户服务代理类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">MetricsService</span> _metricsService<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">UserService</span> _userService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">UserServiceProxy</span><span class="token punctuation">(</span><span class="token class-name">UserService</span> userService<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _metricsService<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MetricsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _userService<span class="token operator">=</span>userService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUserName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _metricsService<span class="token punctuation">.</span><span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录请求时间 内容是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> _userService<span class="token punctuation">.</span><span class="token function">GetUserName</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> account<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _metricsService<span class="token punctuation">.</span><span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录请求日志 内容是：account：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">account</span><span class="token punctuation">}</span></span><span class="token string">  password：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">password</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> _userService<span class="token punctuation">.</span><span class="token function">Login</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这个操作需要我们去修改原始类，但是如果原始类没有定义接口或者原始类代码并不是由我们开发维护的，那么我们就没办法通过该方式去实现，所以就用到了下面通过继承的方式实现。</p><h3 id="基于继承实现" tabindex="-1"><a class="header-anchor" href="#基于继承实现"><span>基于继承实现</span></a></h3><p>通过继承的方式来实现一种不需要修改源代码文件，然后给方法增加功能的方法。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">UserService2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUserName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;用户名&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> account<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> account<span class="token operator">==</span><span class="token string">&quot;admin&quot;</span> <span class="token operator">&amp;&amp;</span> password<span class="token operator">==</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 用户服务代理类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">UserService2</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">MetricsService</span> _metricsService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">UserServiceProxy2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _metricsService<span class="token operator">=</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MetricsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUserName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> userId<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _metricsService<span class="token punctuation">.</span><span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录请求时间 内容是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">userId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">GetUserName</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> account<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _metricsService<span class="token punctuation">.</span><span class="token function">WriteLog</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;记录请求日志 内容是：account：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">account</span><span class="token punctuation">}</span></span><span class="token string">  password：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">password</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">Login</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserServiceProxy2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userService<span class="token punctuation">.</span><span class="token function">Login</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出信息：记录请求日志 内容是：account：admin password：123456</p><h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h2><p>上面的方案需要我们将原始类的所有方法都重新实现一遍，并且为每个方法都附加相似的代码逻辑，另一方面，如果要添加的附加功能的类不止有一个，我们需要针对每个类都创建一个代理类，这增加了代码维护的成本，并且每个代理类的代码都有点像是同一个模板的重复代码，所以这个时候就需要动态代理来解决这个问题。</p><p>动态代理：就是我们不事先为每个原始类编写代理类，而是运行的时候，动态地创建原始类对应的代理类，然后再系统中使用代理类替换掉原始类。</p><p>实现原理：用户配置好需要给哪些类创建代理，并定义好执行原始类的业务代码前后执行哪些附加功能，然后通过反射语法给每个需要的类创建代理类。</p>`,21),r={href:"https://www.yuque.com/docs/share/53044ea9-8d3c-4acb-a8a1-faa564a887ce?view=doc_embed",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"总结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#总结"},[n("span",null,"总结")])],-1),d=n("p",null,"在不改变原始类代码的情况下，通过引入代理类拉给原始类附加功能。常在业务系统中开发一些非功能性需求，比如：监控、统计、鉴权、限流、事务、幂等、日志等。",-1);function m(v,g){const a=t("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("可以借助组件来实现动态代理功能，比如 "),n("a",r,[s("Castle.Core"),o(a)])]),k,d])}const h=e(i,[["render",m],["__file","dailimoshi.html.vue"]]),w=JSON.parse('{"path":"/softwareDesign/highQualityCode/designMode/jiegouxing/dailimoshi.html","title":"代理模式","lang":"zh-CN","frontmatter":{"title":"代理模式","lang":"zh-CN","date":"2022-10-20T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"dailimoshi","slug":"lbwqqz","docsId":"83632270","description":"简述 代理模式(proxy design pattern)是通过引入代码类来给原始类附加功能。 使用场景 业务系统的非功能性需求开发 比如监控、统计、鉴权、限流、事务等 RPC框架也可以看作是一种代理，通过远程单代理，将网络通信、数据编解码等细节隐藏起来，客户端调用就跟使用本地函数一样，无需去了解跟服务器交互的细节。 静态代理 有一个公共的输出日志监控...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/designMode/jiegouxing/dailimoshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"代理模式"}],["meta",{"property":"og:description","content":"简述 代理模式(proxy design pattern)是通过引入代码类来给原始类附加功能。 使用场景 业务系统的非功能性需求开发 比如监控、统计、鉴权、限流、事务等 RPC框架也可以看作是一种代理，通过远程单代理，将网络通信、数据编解码等细节隐藏起来，客户端调用就跟使用本地函数一样，无需去了解跟服务器交互的细节。 静态代理 有一个公共的输出日志监控..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-10-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代理模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-20T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"简述","slug":"简述","link":"#简述","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[{"level":3,"title":"基于接口实现","slug":"基于接口实现","link":"#基于接口实现","children":[]},{"level":3,"title":"基于继承实现","slug":"基于继承实现","link":"#基于继承实现","children":[]}]},{"level":2,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.2,"words":961},"filePathRelative":"softwareDesign/highQualityCode/designMode/jiegouxing/dailimoshi.md","localizedDate":"2022年10月20日","excerpt":"<h2>简述</h2>\\n<p>代理模式(proxy design pattern)是通过引入代码类来给原始类附加功能。</p>\\n<h2>使用场景</h2>\\n<ul>\\n<li>业务系统的非功能性需求开发\\n<ul>\\n<li>比如监控、统计、鉴权、限流、事务等</li>\\n</ul>\\n</li>\\n<li>RPC框架也可以看作是一种代理，通过远程单代理，将网络通信、数据编解码等细节隐藏起来，客户端调用就跟使用本地函数一样，无需去了解跟服务器交互的细节。</li>\\n</ul>\\n<h2>静态代理</h2>\\n<p>有一个公共的输出日志监控的类</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// 模拟记录日志</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MetricsService</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">WriteLog</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> log<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>log<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{h as comp,w as data};
