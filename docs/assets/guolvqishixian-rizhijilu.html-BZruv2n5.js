import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-D8HBJYTp.js";const p={},e=t(`<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>通过Action过滤器实现对请求日志的记录。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>编写过滤器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 日志记录</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestParamRecordFilter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ActionFilterAttribute</span></span>
<span class="token punctuation">{</span>
    <span class="token comment">//目的：记录请求的消息</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ModelValidationFilter<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RequestParamRecordFilter</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>ModelValidationFilter<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span><span class="token class-name">ActionExecutingContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//设置可以多次读取</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        <span class="token class-name"><span class="token keyword">var</span></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamReader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span>  sr<span class="token punctuation">.</span><span class="token function">ReadToEndAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span>
            <span class="token interpolation-string"><span class="token string">$&quot;Time:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy-MM-dd HH:mm:ss</span><span class="token punctuation">}</span></span><span class="token string"> requestUrl:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Path</span><span class="token punctuation">}</span></span><span class="token string">  Method:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method</span><span class="token punctuation">}</span></span><span class="token string">  requestBodyData: &quot;</span></span> <span class="token operator">+</span>
            data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//读取到Body后，重新设置Stream到起始位置</span>
        context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> SeekOrigin<span class="token punctuation">.</span>Begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Host: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Host<span class="token punctuation">.</span>Host</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Client IP: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Connection<span class="token punctuation">.</span>RemoteIpAddress</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>option <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">//添加全局过滤器</span>
    option<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">RequestParamRecordFilter</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为涉及到读取请求体的操作，还需要借助中间件来设置可以重复读取流</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//读取请求体设置可以重复读取</span>
app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
 <span class="token punctuation">{</span>
     context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">EnableBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>info<span class="token punctuation">:</span> NetCoreFilterSample<span class="token punctuation">.</span>CustomFilter<span class="token punctuation">.</span>ModelValidationFilter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      Time<span class="token punctuation">:</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">19</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">04</span> requestUrl<span class="token punctuation">:</span><span class="token operator">/</span>api<span class="token operator">/</span>WeatherForecast<span class="token operator">/</span><span class="token class-name">AddPatientEat</span>  Method<span class="token punctuation">:</span><span class="token class-name">POST</span>  requestBodyData<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;patientId&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token string">&quot;eat&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;string222&quot;</span>
      <span class="token punctuation">}</span>
info<span class="token punctuation">:</span> NetCoreFilterSample<span class="token punctuation">.</span>CustomFilter<span class="token punctuation">.</span>ModelValidationFilter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      Host<span class="token punctuation">:</span> <span class="token class-name">localhost</span>
info<span class="token punctuation">:</span> NetCoreFilterSample<span class="token punctuation">.</span>CustomFilter<span class="token punctuation">.</span>ModelValidationFilter<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      <span class="token class-name">Client</span> IP<span class="token punctuation">:</span> <span class="token punctuation">::</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>可以实现请求地址入参等参数记录。</p>`,13),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","guolvqishixian-rizhijilu.html.vue"]]),d=JSON.parse('{"path":"/dotnet/base/pipeline/filter/guolvqishixian-rizhijilu.html","title":"过滤器实现-日志记录","lang":"zh-CN","frontmatter":{"title":"过滤器实现-日志记录","lang":"zh-CN","date":"2022-07-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"guolvqishixian-rizhijilu","slug":"ov2ag8","docsId":"67038030","description":"目的 通过Action过滤器实现对请求日志的记录。 操作 编写过滤器 全局使用 因为涉及到读取请求体的操作，还需要借助中间件来设置可以重复读取流 输出结果： 总结 可以实现请求地址入参等参数记录。","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/pipeline/filter/guolvqishixian-rizhijilu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"过滤器实现-日志记录"}],["meta",{"property":"og:description","content":"目的 通过Action过滤器实现对请求日志的记录。 操作 编写过滤器 全局使用 因为涉及到读取请求体的操作，还需要借助中间件来设置可以重复读取流 输出结果： 总结 可以实现请求地址入参等参数记录。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:20:50.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:20:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"过滤器实现-日志记录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:20:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1715005250000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.01,"words":303},"filePathRelative":"dotnet/base/pipeline/filter/guolvqishixian-rizhijilu.md","localizedDate":"2022年7月19日","excerpt":"<h2>目的</h2>\\n<p>通过Action过滤器实现对请求日志的记录。</p>\\n<h2>操作</h2>\\n<p>编写过滤器</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// 日志记录</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">RequestParamRecordFilter</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">ActionFilterAttribute</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//目的：记录请求的消息</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">readonly</span> <span class=\\"token class-name\\">ILogger<span class=\\"token punctuation\\">&lt;</span>ModelValidationFilter<span class=\\"token punctuation\\">&gt;</span></span> _logger<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">RequestParamRecordFilter</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ILogger<span class=\\"token punctuation\\">&lt;</span>ModelValidationFilter<span class=\\"token punctuation\\">&gt;</span></span> logger<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        _logger <span class=\\"token operator\\">=</span> logger<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">override</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">OnActionExecuting</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ActionExecutingContext</span> context<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//设置可以多次读取</span>\\n        context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Seek</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> SeekOrigin<span class=\\"token punctuation\\">.</span>Begin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//读取到Body后，重新设置Stream到起始位置</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> sr <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">StreamReader</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> data <span class=\\"token operator\\">=</span>  sr<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadToEndAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetAwaiter</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetResult</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        _logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span>\\n            <span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Time:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">DateTime<span class=\\"token punctuation\\">.</span>Now</span><span class=\\"token format-string\\"><span class=\\"token punctuation\\">:</span>yyyy-MM-dd HH:mm:ss</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\"> requestUrl:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Path</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">  Method:</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Method</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">  requestBodyData: \\"</span></span> <span class=\\"token operator\\">+</span>\\n            data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//读取到Body后，重新设置Stream到起始位置</span>\\n        context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Seek</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> SeekOrigin<span class=\\"token punctuation\\">.</span>Begin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        _logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Host: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>Host<span class=\\"token punctuation\\">.</span>Host</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        _logger<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">LogInformation</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"Client IP: </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">context<span class=\\"token punctuation\\">.</span>HttpContext<span class=\\"token punctuation\\">.</span>Connection<span class=\\"token punctuation\\">.</span>RemoteIpAddress</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
