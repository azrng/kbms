import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as r,o as n}from"./app-Bg64E3Xi.js";const o="/kbms/common/1610856529717-ba1dc6f8-6d8a-458c-958b-c87c9a65d3c9.png",s={};function i(p,a){return n(),t("div",null,a[0]||(a[0]=[r('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Oracle、MySQL、SQL Server、pgsql、SQLlite几种常用的关系型数据库，以及一堆非关系型数据库</p><h2 id="数据库架构演变" tabindex="-1"><a class="header-anchor" href="#数据库架构演变"><span>数据库架构演变</span></a></h2><p>单机数据库=》缓存加数据库加垂直拆分=》数据库读写分离=》分库分表+水平拆分+数据库集群</p><h2 id="非关系型数据库" tabindex="-1"><a class="header-anchor" href="#非关系型数据库"><span>非关系型数据库</span></a></h2><p>随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传统的关系型数据库中已经得不到满足，或者说关系型数据库应对这些需求已经显得力不从心了。关系型数据库经过几十年的发展已经很成熟，强大的sql语句支持，完美的ACID属性的支持，使得关系型数据库广泛应用于各种各样的应用系统中，但是应用的场景广泛并非意味着完美。</p><p>- 由于关系型数据库是按行进行存储的，在某些只统计一列的需求场景下，也需要把整行读入内存，导致了一个小小的统计需求高IO的缺点<br> - 关系型数据库无法存储数据结构，比如：一个商品可以从属于多个分类，业务上的从属关系体现到存储上是一个列表而已，但是关系型数据库需要把这些关系存储为多行，无法直接存储为一个列表。<br> - 关系型数据库中的存储单位表的架构是强约束，操作不存在的列会报出异常，而且添加、更新、删除列必须执行DDL语句，如果表的现存数据量比较大，会出现长时间锁表的现象。<br> - 关系型数据库全文搜索功能普通比较弱，用like去匹配关键词的时候，数据量比较大的情况下会出现慢查询的现象。<br> - 关系型数据库基于表格的关系模型使得很难添加新的或不同种类的关联信息。</p><p>由于以上这些诸多问题，便诞生了以“NOSQL”为口号的很多解决方案。在某些关系型数据库不擅长的领域，Nosql表现的很出色。上天是公平的，给你打开了一扇窗户，必会给你关上半扇门，NoSql是以牺牲ACID某个或者某些特性为代价的。<br> NoSQL并不是银弹，更多的时候是关系型数据库一个有力补充，或者是特定场景下优于关系型数据库的一种解决方案</p><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ol><li>非结构化数据模型：NoSQL数据库不需要严格定义数据的结构，可以接受各种类型和格式的数据，包括非结构化数据和半结构化数据。</li><li>分布式架构：NoSQL数据库通常具备良好的分布式架构，可以水平扩展以处理大规模数据集和高并发访问。</li><li>高性能和可伸缩性：由于去掉了一些传统数据库的复杂特性和约束条件，NoSQL数据库能够提供更高的读写性能和更好的可伸缩性。</li><li>弱一致性和灵活性：为了提高性能，一些NoSQL数据库对数据一致性要求较低，允许更灵活的数据操作，适用于某些场景下的高速度数据处理。</li><li>适应多种数据类型：NoSQL数据库广泛支持不同的数据模型，包括键值对、文档型、列族型、图形型等，以满足不同应用场景的需求。</li></ol><h3 id="四大分类" tabindex="-1"><a class="header-anchor" href="#四大分类"><span>四大分类</span></a></h3><ul><li>键值(Key-Value)存储数据库。相关的产品：Redis、Riak、SimpleDB、Chordless、Scalaris、Memcached。主要解决关系数据库无法存储数据结构的问题。</li><li>列存储数据库。相关产品：BigTable、HBase、Cassandra、HadoopDB、GreenPlum、PNUTS。解决关系数据库大数据场景下的 I/O 问题</li><li>文档数据库。相关产品：MongoDB、CouchDB、ThruDB、CloudKit、Perservere、Jackrabbit。解决关系数据库强 schema 约束的问题。</li><li>图形数据库。相关产品：Neo4J、OrientDB、InfoGrid、GraphDB。主要解决大量复杂、互连接、低结构化的图结构场合，如社交网络、推荐系统等</li><li>全文搜索引擎。相关产品：Elasticsearch。主要解决关系数据库的全文搜索性能问题。</li></ul><h3 id="kv键值数据库" tabindex="-1"><a class="header-anchor" href="#kv键值数据库"><span>KV键值数据库</span></a></h3><p>典型介绍：Redis、Memcache</p><h3 id="文档型数据库-bson" tabindex="-1"><a class="header-anchor" href="#文档型数据库-bson"><span>文档型数据库(Bson)</span></a></h3><p>典型介绍：CouchDB、MongoDB</p><h3 id="列存储数据库" tabindex="-1"><a class="header-anchor" href="#列存储数据库"><span>列存储数据库</span></a></h3><p>cassandra，HBase<br> 分布式文件系统</p><h3 id="图关系数据库" tabindex="-1"><a class="header-anchor" href="#图关系数据库"><span>图关系数据库</span></a></h3><p>不是放图形的，放的是关系比如：朋友圈社区网络、广告推荐系统<br> 社交网络，推荐系统等。专注于构建关系图谱<br> Neo4J，InfoGrid<br><img src="'+o+'" alt="image.png" loading="lazy"></p><h3 id="向量数据库" tabindex="-1"><a class="header-anchor" href="#向量数据库"><span>向量数据库</span></a></h3><p>向量数据库是一种专为处理高维向量数据而设计的数据库系统。与传统的关系型数据库不同，向量数据库专注于存储和查询向量数据，例如图像、音频、文本等。其核心思想是将数据表示为向量形式，并通过向量之间的相似度来进行查询和分析。</p><p>向量数据库的特点包括高效的相似度搜索和复杂的查询操作。通过利用向量之间的相似度，可以快速检索与查询向量相似的数据，适用于大规模数据集和高维度数据。此外，向量数据库还支持复杂的查询操作，如范围查询、聚类和聚合等。</p><p>在实际应用中，向量数据库被广泛用于图像搜索、推荐系统、自然语言处理等领域。例如，在图像搜索中，可以利用向量数据库来存储图像的特征向量，并通过计算相似度来实现快速的图像检索。在推荐系统中，可以利用用户的特征向量来实现个性化推荐。</p><p>总之，向量数据库是一种适用于处理高维向量数据的数据库系统，具有高效的相似度搜索和复杂的查询操作，广泛应用于图像搜索、推荐系统等领域。</p><h4 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h4><ul><li><strong>Chroma</strong>：适合小规模、低负载的应用，易于上手和集成</li><li><strong>Qdrant</strong>：适合对延迟要求高、查询负载中等的场景，支持过滤查询。</li><li><strong>FAISS</strong>：适合对查询速度和召回率要求极高的场景，尤其是大规模数据集。</li><li><strong>Milvus</strong>：适合大规模、高并发的向量查询场景，功能丰富，但配置复杂。</li></ul><h2 id="数据存放示例" tabindex="-1"><a class="header-anchor" href="#数据存放示例"><span>数据存放示例</span></a></h2><p>以商品为例<br> 商品基本信息：存储mysql、pgsql等关系型数据库<br> 商品描述详情评价(多文字类) 存储mongodb<br> 商品图片：分布式文件系统中<br> 商品关键字：搜索引擎和ISearch<br> 商品的波段性的热点高频信息：内存数据库redis<br> 商品的交易价格计算：支付系统</p><h2 id="数据库备份" tabindex="-1"><a class="header-anchor" href="#数据库备份"><span>数据库备份</span></a></h2><table><thead><tr><th></th><th>逻辑备份方式</th><th>物理备份方式</th><th></th></tr></thead><tbody><tr><td></td><td></td><td>冷备份</td><td>热备份</td></tr><tr><td>优点</td><td>灵活，可以跨平台实施备份操作并迁移数据</td><td>备份和恢复速度，容器达到低维护，高安全的效果，执行效率高</td><td>可以根据日志回滚到上一秒的操作，备份恢复更为精确</td></tr><tr><td>缺点</td><td>时间长，对系统影响大，适用于数据量小的系统</td><td>单独使用时候，只能提供到某一个时间点上的恢复，不能按照表、按照用户恢复，而且必须关闭数据库</td><td>不灵活，操作不允许失误，否则恢复不能进行</td></tr></tbody></table><h2 id="工具网站" tabindex="-1"><a class="header-anchor" href="#工具网站"><span>工具网站</span></a></h2><p>SQL格式化：<a href="https://zeroturnaround.github.io/sql-formatter/" target="_blank" rel="noopener noreferrer">https://zeroturnaround.github.io/sql-formatter/</a><br> 数据库连接字符串查询网站：<a href="https://www.connectionstrings.com/" target="_blank" rel="noopener noreferrer">https://www.connectionstrings.com/</a></p><h2 id="sql分类" tabindex="-1"><a class="header-anchor" href="#sql分类"><span>SQL分类</span></a></h2><h3 id="_1、数据定义语言ddl-data-definition-language" tabindex="-1"><a class="header-anchor" href="#_1、数据定义语言ddl-data-definition-language"><span>1、数据定义语言DDL( Data Definition Language)</span></a></h3><p>数据定义语言是SQL语言集中负责数据结构定义域数据对象定义的语言<br> 主要功能是定义数据库对象，核心指令： create,alter,drop,truncate ,有些数据库的不支持事务</p><h3 id="_2、数据操纵语言dml-data-manipulation-language" tabindex="-1"><a class="header-anchor" href="#_2、数据操纵语言dml-data-manipulation-language"><span>2、数据操纵语言DML (Data Manipulation Language)</span></a></h3><p>数据操纵语言是用于数据库的操作，对数据库其中的对象和数据运行访问的编程语句<br> 主要功能是访问数据，核心指令：insert,delete,update,select</p><h3 id="_3、事务控制语言tcl-transaction-control-language" tabindex="-1"><a class="header-anchor" href="#_3、事务控制语言tcl-transaction-control-language"><span>3、事务控制语言TCL (Transaction Control Language)</span></a></h3><p>事务控制语言用于管理数据库的事务，这些用于管理由DML语句所做的更改，还允许将语句分组为逻辑事务<br> 核心指令： commit,rollback, savepoint,rollback to</p><h3 id="_4、数据控制语言dcl-data-control-language" tabindex="-1"><a class="header-anchor" href="#_4、数据控制语言dcl-data-control-language"><span>4、数据控制语言DCL (Data Control Language)</span></a></h3><p>数据控制语言是一种对数据访问权限进行控制的指令，可以控制特定用户账号对数据表、查看表、预存程序、用户自定义函数等数据库对象的控制权<br> 核心指令：grant、revoke</p><h2 id="免费的在线数据库" tabindex="-1"><a class="header-anchor" href="#免费的在线数据库"><span>免费的在线数据库</span></a></h2><p>mysql：<a href="https://www.db4free.net/" target="_blank" rel="noopener noreferrer">https://www.db4free.net/</a></p><p>mongodb：<a href="https://www.mongodb.com/atlas/database" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/atlas/database</a></p><p>文章：<a href="https://wivwiv.com/post/free-online-resource" target="_blank" rel="noopener noreferrer">https://wivwiv.com/post/free-online-resource</a></p>',46)]))}const h=e(s,[["render",i]]),c=JSON.parse('{"path":"/dataBase/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-09-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["说明"],"filename":"shuiming","slug":"gyzrui","docsId":"31787276","description":"概述 Oracle、MySQL、SQL Server、pgsql、SQLlite几种常用的关系型数据库，以及一堆非关系型数据库 数据库架构演变 单机数据库=》缓存加数据库加垂直拆分=》数据库读写分离=》分库分表+水平拆分+数据库集群 非关系型数据库 随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1610856529717-ba1dc6f8-6d8a-458c-958b-c87c9a65d3c9.png\\"],\\"datePublished\\":\\"2023-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T12:57:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 Oracle、MySQL、SQL Server、pgsql、SQLlite几种常用的关系型数据库，以及一堆非关系型数据库 数据库架构演变 单机数据库=》缓存加数据库加垂直拆分=》数据库读写分离=》分库分表+水平拆分+数据库集群 非关系型数据库 随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1610856529717-ba1dc6f8-6d8a-458c-958b-c87c9a65d3c9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-27T12:57:59.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"说明"}],["meta",{"property":"article:published_time","content":"2023-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T12:57:59.000Z"}]]},"git":{"createdTime":1740661079000,"updatedTime":1740661079000,"contributors":[{"name":"azrng","username":"","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":7.65,"words":2295},"filePathRelative":"dataBase/readme.md","excerpt":"<h2>概述</h2>\\n<p>Oracle、MySQL、SQL Server、pgsql、SQLlite几种常用的关系型数据库，以及一堆非关系型数据库</p>\\n<h2>数据库架构演变</h2>\\n<p>单机数据库=》缓存加数据库加垂直拆分=》数据库读写分离=》分库分表+水平拆分+数据库集群</p>\\n<h2>非关系型数据库</h2>\\n<p>随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传统的关系型数据库中已经得不到满足，或者说关系型数据库应对这些需求已经显得力不从心了。关系型数据库经过几十年的发展已经很成熟，强大的sql语句支持，完美的ACID属性的支持，使得关系型数据库广泛应用于各种各样的应用系统中，但是应用的场景广泛并非意味着完美。</p>","autoDesc":true}');export{h as comp,c as data};
