import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as a,e as t,b as i}from"./app-Bw62I61B.js";const l="/kbms/common/1620911118372-0d629e1a-bc7a-41ec-9cc2-ea375da45497.png",u="/kbms/common/1620911384343-f5f7d430-9fe1-449c-997a-f5452129351b.png",r="/kbms/common/1620911528034-b1bce7f0-904a-4e68-8ecb-0aab22b1a2c0.png",d="/kbms/common/1620911727783-4928587f-ca55-4c98-a17a-dbabcf8b51e3.png",k="/kbms/common/1620911856379-67201b81-87b9-4559-a217-2321feb43b3d.png",m="/kbms/common/1620913001521-24c778d7-44e6-4160-8dad-9371c1002847.png",v="/kbms/common/1620913403862-f7762ceb-241b-4bb6-846e-a5d213d1ab0f.png",g={},b=i('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。日常可以用于后端开发人员测试接口或者前后端联调使用。从.net5开始，swagger已经集成到vs2019编译器中，可以通过勾对选项“启用OpenAPI支持”显示基本的swagger配置。</p><blockquote><p>本文示例环境：vs2019、net5</p></blockquote><h2 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用"><span>1 基本使用</span></a></h2><p>新建一个netcore api项目，为了测试效果，我多创建几个控制器 <img src="'+l+`" alt="image.png" loading="lazy"></p><h3 id="_1-1-安装组件" tabindex="-1"><a class="header-anchor" href="#_1-1-安装组件"><span>1.1 安装组件</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Swashbuckle.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.6.3&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-注册swagger服务" tabindex="-1"><a class="header-anchor" href="#_1-2-注册swagger服务"><span>1.2 注册swagger服务</span></a></h3><p>在ConfigureServices中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
	<span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiInfo</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token string">&quot;WebApi&quot;</span><span class="token punctuation">,</span> Version <span class="token operator">=</span> <span class="token string">&quot;v1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：     //netcore3.0之前版本用法   c.SwaggerDoc(&quot;v1&quot;, new Info { Title = &quot;WebApi&quot;, Version = &quot;v1&quot; });</p></blockquote><h3 id="_1-3-使用swagger" tabindex="-1"><a class="header-anchor" href="#_1-3-使用swagger"><span>1.3 使用Swagger</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//启用中间件以将生成的swagger公开为json终结点</span>
		app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//启用swagger-ui中间件，指定swagger json终结点，以公开交互文档</span>
		app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">SwaggerEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/swagger/v1/swagger.json&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WebApi v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>
	<span class="token punctuation">{</span>
		endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该示例代码配置的swagger只在Development环境下显示，可以根据实际情况来修改</p></blockquote><h3 id="_1-4-启动" tabindex="-1"><a class="header-anchor" href="#_1-4-启动"><span>1.4 启动</span></a></h3><p>运行项目，展示下面的效果 <img src="`+u+`" alt="image.png" loading="lazy"> 如果这是你写的接口，这个时候你的其他同事去看，真的会一脸懵逼，你这写的都是啥玩意，那么我们来给这加上注释吧。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 用户控制器</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">///查询用户列表</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 查询用户详情</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token punctuation">[</span><span class="token function">HttpGet</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 删除用户</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token punctuation">[</span><span class="token function">HttpDelete</span><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样子加了注释还不行，swagger还读取不到我们的注释，我们还需要生成xml文档并且让swagger使用，选中项目右键属性=&gt;生成=&gt;xml文档文件 <img src="`+r+`" alt="image.png" loading="lazy"> 或者直接双击项目名称，修改配置文件</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>
<span class="token operator">&lt;</span>Project Sdk<span class="token operator">=</span><span class="token string">&quot;Microsoft.NET.Sdk.Web&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>TargetFramework<span class="token operator">&gt;</span>net5<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>TargetFramework<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>GenerateDocumentationFile<span class="token operator">&gt;</span><span class="token boolean">True</span><span class="token operator">&lt;</span><span class="token operator">/</span>GenerateDocumentationFile<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>PackageReference Include<span class="token operator">=</span><span class="token string">&quot;Swashbuckle.AspNetCore&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.2.3&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Project<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改注入swagger配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
	c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiInfo</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token string">&quot;WebApi&quot;</span><span class="token punctuation">,</span> Version <span class="token operator">=</span> <span class="token string">&quot;v1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 使用反射获取xml文件。并构造出文件的路径</span>
	<span class="token class-name"><span class="token keyword">var</span></span> xmlFile <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">.xml&quot;</span></span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> xmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 启用xml注释.第二个参数启用控制器的注释，默认为false.</span>
	c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//或者循环获取xml文件配置</span>
	Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> <span class="token string">&quot;*.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>file <span class="token operator">=&gt;</span>
	<span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次启动项目查看界面 <img src="`+d+'" alt="image.png" loading="lazy"> 至此，基础的配置swagger显示注释已经实现了，那么如何调用我们接口那？ <img src="'+k+`" alt="image.png" loading="lazy"> 通过该界面，我们可以看到请求地址、请求方式、入参类型、输出参数等。</p><blockquote><p>注： 通过设置取消显示警告：1591 ， 可以去除方法和类上面的xml注释警告 如果实体类不在当前程序集下，需要同样方式配置实体类程序集的xml文档到swagger配置</p></blockquote><h3 id="_1-5-不显示某些接口" tabindex="-1"><a class="header-anchor" href="#_1-5-不显示某些接口"><span>1.5 不显示某些接口</span></a></h3><p>通过一些特性，可以标记不显示某一些接口</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//忽略显示接口</span>
<span class="token punctuation">[</span><span class="token function">ApiExplorerSettings</span><span class="token punctuation">(</span>IgnoreApi <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
 
<span class="token comment">//废弃接口</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Obsolete</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;该接口不再使用&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-swagger传递jwt" tabindex="-1"><a class="header-anchor" href="#_2-swagger传递jwt"><span>2. swagger传递JWT</span></a></h2><blockquote><p>jwt是一个基于json的、用于在网络上声明某种主张的令牌，通常是用三部分组成：<strong>头信息，消息体，签名</strong>。他是一种双方之间传递安全信息的表述性声明规范。可以做权限验证的工具，但是目的不是为了数据加密和保护。虽然看似像是加密的数据，但是它并没有加密，不适合存储机密信息。</p></blockquote><p>如果我们接口是需要传递token才可以访问，那么我们就需要对我们的swagger配置再进行改造</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
	c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiInfo</span> <span class="token punctuation">{</span>Title <span class="token operator">=</span> <span class="token string">&quot;WebApi&quot;</span><span class="token punctuation">,</span> Version <span class="token operator">=</span> <span class="token string">&quot;v1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 使用反射获取xml文件。并构造出文件的路径</span>
	<span class="token class-name"><span class="token keyword">var</span></span> xmlFile <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">.xml&quot;</span></span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">var</span></span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> xmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 启用xml注释.第二个参数启用控制器的注释，默认为false.</span>
	c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	c<span class="token punctuation">.</span><span class="token function">AddSecurityDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		Description <span class="token operator">=</span> <span class="token string">&quot;JWT授权(数据将在请求头中进行传输) 在下方输入Bearer {token} 即可，注意两者之间有空格&quot;</span><span class="token punctuation">,</span>
		Name <span class="token operator">=</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token comment">//jwt默认的参数名称</span>
		In <span class="token operator">=</span> ParameterLocation<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> <span class="token comment">//jwt默认存放Authorization信息的位置(请求头中)</span>
		Type <span class="token operator">=</span> SecuritySchemeType<span class="token punctuation">.</span>ApiKey<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	c<span class="token punctuation">.</span><span class="token function">AddSecurityRequirement</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityRequirement</span>
	<span class="token punctuation">{</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityScheme</span>
			<span class="token punctuation">{</span>
				Reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					Id <span class="token operator">=</span> <span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span>
					Type <span class="token operator">=</span> ReferenceType<span class="token punctuation">.</span>SecurityScheme
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者修改上面的配置为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddSwaggerGen</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 添加文档信息</span>
    c<span class="token punctuation">.</span><span class="token function">SwaggerDoc</span><span class="token punctuation">(</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiInfo</span> <span class="token punctuation">{</span> Title <span class="token operator">=</span> <span class="token string">&quot;SimpleJWTWeb&quot;</span><span class="token punctuation">,</span> Version <span class="token operator">=</span> <span class="token string">&quot;v1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 读取xml信息</span>

    <span class="token comment">// 使用反射获取xml文件。并构造出文件的路径</span>
    <span class="token class-name"><span class="token keyword">var</span></span> xmlFile <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">.xml&quot;</span></span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> xmlPath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>AppContext<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">,</span> xmlFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 启用xml注释. 该方法第二个参数启用控制器的注释，默认为false.</span>
    c<span class="token punctuation">.</span><span class="token function">IncludeXmlComments</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> 读取xml信息</span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 添加header验证信息</span>

    <span class="token comment">//另一种写法</span>
    <span class="token class-name"><span class="token keyword">var</span></span> schema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Description <span class="token operator">=</span> <span class="token string">&quot;JWT授权(数据将在请求头中进行传输) 在下方输入Bearer {token} 即可，注意两者之间有空格&quot;</span><span class="token punctuation">,</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">,</span> <span class="token comment">//jwt默认的参数名称</span>
        In <span class="token operator">=</span> ParameterLocation<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> <span class="token comment">//jwt默认存放Authorization信息的位置(请求头中)</span>
        Type <span class="token operator">=</span> SecuritySchemeType<span class="token punctuation">.</span>ApiKey<span class="token punctuation">,</span>
        Reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiReference</span>
        <span class="token punctuation">{</span>
            Id <span class="token operator">=</span> <span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span>
            Type <span class="token operator">=</span> ReferenceType<span class="token punctuation">.</span>SecurityScheme
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    c<span class="token punctuation">.</span><span class="token function">AddSecurityDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> requirement <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenApiSecurityRequirement</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">schema</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span><span class="token function">AddSecurityRequirement</span><span class="token punctuation">(</span>requirement<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> 添加header验证信息</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行，查看界面，发现界面有所不同 <img src="`+m+`" alt="image.png" loading="lazy"> 虽然我手上没有token，但是我也没有写校验token的代码，所以我们就暂且看为一个头部传递的工具使用。jwt具体使用后续再讲。</p><blockquote><p>token传递方式就是在Headers增加 Authorization:Bearer {token} ，然后需要在程序中配置校验token，当下我们只是模拟swagger在header中传递值。</p></blockquote><p>在输入框输出： Bearer AABBCC 在Action中获取我们传输的数据</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置"><span>其他配置</span></a></h2><h3 id="swagger界面设置接口的响应模型" tabindex="-1"><a class="header-anchor" href="#swagger界面设置接口的响应模型"><span>swagger界面设置接口的响应模型</span></a></h3><p>如果你使用的返回值是IActionResult，那么就可以使用ProducesResponseType来显式指定返回模型</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
///查询用户列表
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;/returns&gt;
[HttpGet]
[ProducesResponseType(typeof(IEnumerable&lt;string&gt;), 200)]
public IActionResult Get()
{
    return Ok(new string[] { &quot;value1&quot;, &quot;value2&quot; });
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置永久授权" tabindex="-1"><a class="header-anchor" href="#设置永久授权"><span>设置永久授权</span></a></h3><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>app.UseSwaggerUI(c =&gt;
{
    //指定Swagger JSON文件的终结点，用于加载和显示API文档。
    //需要提供JSON文件的URL和一个可识别的名称
    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
   
    //启用永久授权
    c.EnablePersistAuthorization(); 
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求时间控制" tabindex="-1"><a class="header-anchor" href="#请求时间控制"><span>请求时间控制</span></a></h3><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>app.UseSwaggerUI(c =&gt;
{
    //指定Swagger JSON文件的终结点，用于加载和显示API文档。
    //需要提供JSON文件的URL和一个可识别的名称
    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
    
   //控制Try It Out请求的请求持续时间（以毫秒为单位）的显示
    c.DisplayRequestDuration();
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ui路由" tabindex="-1"><a class="header-anchor" href="#ui路由"><span>UI路由</span></a></h3><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>app.UseSwaggerUI(c =&gt;
{
    //指定Swagger JSON文件的终结点，用于加载和显示API文档。
    //需要提供JSON文件的URL和一个可识别的名称
    c.SwaggerEndpoint(&quot;/swagger/v1/swagger.json&quot;, &quot;My API V1&quot;);
    
   //指定swagger文档的启动目录 。默认为swagger
   //可以通过设置为空字符串来让Swagger UI直接在根路径下进行访问
   //c.RoutePrefix = string.Empty;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文档展开方式" tabindex="-1"><a class="header-anchor" href="#文档展开方式"><span>文档展开方式</span></a></h3><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>//设置默认的接口文档展开方式，可选值包括None、List和Full。
//默认值为None，表示不展开接口文档；
//List表示只展开接口列表；
//Full表示展开所有接口详情
c.DocExpansion(DocExpansion.None); // 设置为完整模式 
c.DisplayRequestDuration();
c.EnablePersistAuthorization();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-参考文档" tabindex="-1"><a class="header-anchor" href="#_3-参考文档"><span>3 参考文档</span></a></h2>`,50),h={href:"https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-5.0",target:"_blank",rel:"noopener noreferrer"},w=n("blockquote",null,[n("p",null,"关于swagger的使用操作还有很多，上面有些配置也没有详细说到，只说了一些功能性的操作。更详细操作需要自行学习。")],-1),y=n("h2",{id:"_4-其他文章学习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-其他文章学习"},[n("span",null,"4 其他文章学习")])],-1),f={href:"https://www.cnblogs.com/shanfeng1000/p/13476831.html",target:"_blank",rel:"noopener noreferrer"};function q(x,_){const s=p("ExternalLinkIcon");return o(),c("div",null,[b,n("p",null,[n("a",h,[a("https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-5.0"),t(s)])]),w,y,n("blockquote",null,[n("p",null,[n("a",f,[a("https://www.cnblogs.com/shanfeng1000/p/13476831.html"),t(s)])])])])}const I=e(g,[["render",q],["__file","jibenshiyong.html.vue"]]),T=JSON.parse('{"path":"/dotnet/api/swagger/jibenshiyong.html","title":"基本使用","lang":"zh-CN","frontmatter":{"title":"基本使用","lang":"zh-CN","date":"2023-10-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jibenshiyong","slug":"ykh24k","docsId":"30112298","description":"概述 Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。日常可以用于后端开发人员测试接口或者前后端联调使用。从.net5开始，swagger已经集成到vs2019编译器中，可以通过勾对选项“启用OpenAPI支持”显示基本的swagger配置。 本文示例环境：vs2019、net5 1 基本使用...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/swagger/jibenshiyong.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"基本使用"}],["meta",{"property":"og:description","content":"概述 Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。日常可以用于后端开发人员测试接口或者前后端联调使用。从.net5开始，swagger已经集成到vs2019编译器中，可以通过勾对选项“启用OpenAPI支持”显示基本的swagger配置。 本文示例环境：vs2019、net5 1 基本使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1620911118372-0d629e1a-bc7a-41ec-9cc2-ea375da45497.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-24T01:52:26.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-24T01:52:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基本使用\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1620911118372-0d629e1a-bc7a-41ec-9cc2-ea375da45497.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620911384343-f5f7d430-9fe1-449c-997a-f5452129351b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620911528034-b1bce7f0-904a-4e68-8ecb-0aab22b1a2c0.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620911727783-4928587f-ca55-4c98-a17a-dbabcf8b51e3.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620911856379-67201b81-87b9-4559-a217-2321feb43b3d.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620913001521-24c778d7-44e6-4160-8dad-9371c1002847.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620913403862-f7762ceb-241b-4bb6-846e-a5d213d1ab0f.png\\"],\\"datePublished\\":\\"2023-10-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-24T01:52:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"1 基本使用","slug":"_1-基本使用","link":"#_1-基本使用","children":[{"level":3,"title":"1.1 安装组件","slug":"_1-1-安装组件","link":"#_1-1-安装组件","children":[]},{"level":3,"title":"1.2 注册swagger服务","slug":"_1-2-注册swagger服务","link":"#_1-2-注册swagger服务","children":[]},{"level":3,"title":"1.3 使用Swagger","slug":"_1-3-使用swagger","link":"#_1-3-使用swagger","children":[]},{"level":3,"title":"1.4 启动","slug":"_1-4-启动","link":"#_1-4-启动","children":[]},{"level":3,"title":"1.5 不显示某些接口","slug":"_1-5-不显示某些接口","link":"#_1-5-不显示某些接口","children":[]}]},{"level":2,"title":"2. swagger传递JWT","slug":"_2-swagger传递jwt","link":"#_2-swagger传递jwt","children":[]},{"level":2,"title":"其他配置","slug":"其他配置","link":"#其他配置","children":[{"level":3,"title":"swagger界面设置接口的响应模型","slug":"swagger界面设置接口的响应模型","link":"#swagger界面设置接口的响应模型","children":[]},{"level":3,"title":"设置永久授权","slug":"设置永久授权","link":"#设置永久授权","children":[]},{"level":3,"title":"请求时间控制","slug":"请求时间控制","link":"#请求时间控制","children":[]},{"level":3,"title":"UI路由","slug":"ui路由","link":"#ui路由","children":[]},{"level":3,"title":"文档展开方式","slug":"文档展开方式","link":"#文档展开方式","children":[]}]},{"level":2,"title":"3 参考文档","slug":"_3-参考文档","link":"#_3-参考文档","children":[]},{"level":2,"title":"4 其他文章学习","slug":"_4-其他文章学习","link":"#_4-其他文章学习","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1706061146000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2},{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.65,"words":1996},"filePathRelative":"dotnet/api/swagger/jibenshiyong.md","localizedDate":"2023年10月13日","excerpt":"<h2>概述</h2>\\n<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。日常可以用于后端开发人员测试接口或者前后端联调使用。从.net5开始，swagger已经集成到vs2019编译器中，可以通过勾对选项“启用OpenAPI支持”显示基本的swagger配置。</p>\\n<blockquote>\\n<p>本文示例环境：vs2019、net5</p>\\n</blockquote>\\n<h2>1 基本使用</h2>\\n<p>新建一个netcore api项目，为了测试效果，我多创建几个控制器\\n<img src=\\"/common/1620911118372-0d629e1a-bc7a-41ec-9cc2-ea375da45497.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{I as comp,T as data};
