import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,b as p}from"./app-Bw62I61B.js";const n={},r=p('<h2 id="说说数据库的隔离级别" tabindex="-1"><a class="header-anchor" href="#说说数据库的隔离级别"><span>说说数据库的隔离级别</span></a></h2><p>数据库事物的四大特性：原子性、一致性、隔离性、持续性（永久性）。原子性：要么全做，要么全不做；一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</p><p>一致性与原子性是密切相关的；隔离性：一个事务的执行不能被其他事务干扰；永久性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</p><p>事务的隔离性：未提交读（Read uncommitted），已提交读（Read committed），可重复读（Repeatable read），可串行化（Serializable ）。</p><p>未提交读：最低级别，任何情况都无法保证；已提交读：可避免脏读的发生；可重复读：可避免脏读、不可重复读的发生；串行化：可避免脏读、不可重复读、幻读的发生。</p><p>举例：未提交读：A更新了数据没有提交B可以看到；已提交读：A更新了数据没有提交B看不到，提交之后可以看到；可重复读：A插入一条数据，提交之后，B看不到，B事物结束之后，在查询可以看到；可串行化：A执行完之后B才可执行。</p><p>（所有的一切操作都是并行操作）</p><h2 id="数据库中的锁" tabindex="-1"><a class="header-anchor" href="#数据库中的锁"><span>数据库中的锁</span></a></h2><p>分为独占锁（即排它锁），共享锁和更新锁，细分又可分为表锁、行锁、页锁等。</p><p>为什么需要锁？当并发事务同时访问一个资源时，有可能导致数据不一致，因此需要一种机制来将数据访问顺序化，以保证数据库数据的一致性。</p><p>共享锁表示对数据进行select操作，多个事务可以同时为一个对象加共享锁。排他锁也叫写锁，排他锁表示对数据进行insert、update或delete操作，如果一个事务对对象加了排他锁，其他事务就不能再给它加任何锁了。</p><p>更新锁在的初始化阶段用来锁定可能要被修改的资源，这可以避免使用共享锁造成的死锁现象。</p><h2 id="如何防止-sql注入式攻击" tabindex="-1"><a class="header-anchor" href="#如何防止-sql注入式攻击"><span>如何防止 SQL注入式攻击</span></a></h2><p>答：SQL 注入式攻击时常见的一种攻击方法，主要利用的是系统设计的漏洞，让用户根据系统的程序构造非法的参数从而导致程序执行不是程序员期望的恶意SQL语句。所以程序员在设计时需要考虑到注入式攻击的问题，避免直接使用用户输入拼接 SQL 语句，或者使用参数化的SQL就可以避免SQL注入。</p><h2 id="数据库三范式是什么" tabindex="-1"><a class="header-anchor" href="#数据库三范式是什么"><span>数据库三范式是什么？</span></a></h2><p>第一范式：字段不能有冗余信息，所有字段都是必不可少的。</p><p>第二范式：满足第一范式并且表必须有主键。</p><p>第三范式：满足第二范式并且表引用其他的表必须通过主键引用。</p><h2 id="datareader和dataset的异同" tabindex="-1"><a class="header-anchor" href="#datareader和dataset的异同"><span>DataReader和DataSet的异同？</span></a></h2><p>DataReader使用时始终占用SqlConnection，在线操作数据库</p><p>每次只在内存中加载一条数据,所以占用的内存是很小的是只进的、只读的</p><p>DataSet则是将数据一次性加载在内存中，抛弃数据库连接，读取完毕即放弃数据库连接(非连接模式)</p><p>DataSet将数据全部加载在内存中.所以比较消耗内存，但是确比DataReader要灵活，可以动态的添加行、列、数据，对数据库进行回传更新操作(动态操作读入到内存的数据)。</p><h2 id="请简要叙述数据库连接池的机制" tabindex="-1"><a class="header-anchor" href="#请简要叙述数据库连接池的机制"><span>请简要叙述数据库连接池的机制</span></a></h2><p>答：ADO.NET 对上层用户提供了数据库连接池的服务，使用完的数据库连接将被有选择的保持在数据库连接池中，以供下次使用。当用户以某个连接字符串申请数据库连接时，数据库连接池将尝试寻找在池中寻找具有相同的连接字符串的连接，并直接提供给用户。</p><h2 id="如何提高连接池内连接的重用率" tabindex="-1"><a class="header-anchor" href="#如何提高连接池内连接的重用率"><span>如何提高连接池内连接的重用率</span></a></h2><p>答：为了提高数据库连接池的重用率，唯一的方法就是尽量保证系统访问数据库所使用的连接字符串不变。例如建立跳板数据库，使所有连接都首先尝试访问跳板数据库。另外，统一使用超级用户帐号可以进一步统一连接字符串，但这为系统带来了安全上的隐患。</p><h2 id="事务是什么" tabindex="-1"><a class="header-anchor" href="#事务是什么"><span>事务是什么？</span></a></h2><p>事务是作为一个逻辑单元执行的一系列操作，一个逻辑工作单元必须有四个属性，称为 ACID（原子性、一致性、隔离性和持久性）属性，只有这样才能成为一个事务：</p><p>1)原子性</p><p>事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。</p><p>2)一致性</p><p>事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。</p><p>3)隔离性</p><p>由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为可串行性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。</p><p>4)持久性</p><p>事务完成之后，它对于系统的影响是永久性的。该修改即使出现系统故障也将一直保持。</p><h2 id="存储过程的优缺点" tabindex="-1"><a class="header-anchor" href="#存储过程的优缺点"><span><strong>存储过程的优缺点</strong></span></a></h2><p>优点：预编译提高性能、减少网络流量、安全性提高（可以限制直接数据库访问）</p><p>缺点：维护困难、平台依赖、难以调试和测试。</p>',40),i=[r];function l(s,d){return a(),t("div",null,i)}const h=e(n,[["render",l],["__file","dataBase.html.vue"]]),m=JSON.parse('{"path":"/interview/dataBase.html","title":"数据库面试题","lang":"zh-CN","frontmatter":{"title":"数据库面试题","date":"2023-09-02T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"order":200,"category":["面试"],"tag":["面试题"],"article":false,"description":"说说数据库的隔离级别 数据库事物的四大特性：原子性、一致性、隔离性、持续性（永久性）。原子性：要么全做，要么全不做；一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。 一致性与原子性是密切相关的；隔离性：一个事务的执行不能被其他事务干扰；永久性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。 事务的隔离性：未提交读（...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/interview/dataBase.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据库面试题"}],["meta",{"property":"og:description","content":"说说数据库的隔离级别 数据库事物的四大特性：原子性、一致性、隔离性、持续性（永久性）。原子性：要么全做，要么全不做；一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。 一致性与原子性是密切相关的；隔离性：一个事务的执行不能被其他事务干扰；永久性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。 事务的隔离性：未提交读（..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-09T15:10:09.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2023-09-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-09T15:10:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"数据库面试题\\",\\"description\\":\\"说说数据库的隔离级别 数据库事物的四大特性：原子性、一致性、隔离性、持续性（永久性）。原子性：要么全做，要么全不做；一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。 一致性与原子性是密切相关的；隔离性：一个事务的执行不能被其他事务干扰；永久性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。 事务的隔离性：未提交读（...\\"}"]]},"headers":[{"level":2,"title":"说说数据库的隔离级别","slug":"说说数据库的隔离级别","link":"#说说数据库的隔离级别","children":[]},{"level":2,"title":"数据库中的锁","slug":"数据库中的锁","link":"#数据库中的锁","children":[]},{"level":2,"title":"如何防止 SQL注入式攻击","slug":"如何防止-sql注入式攻击","link":"#如何防止-sql注入式攻击","children":[]},{"level":2,"title":"数据库三范式是什么？","slug":"数据库三范式是什么","link":"#数据库三范式是什么","children":[]},{"level":2,"title":"DataReader和DataSet的异同？","slug":"datareader和dataset的异同","link":"#datareader和dataset的异同","children":[]},{"level":2,"title":"请简要叙述数据库连接池的机制","slug":"请简要叙述数据库连接池的机制","link":"#请简要叙述数据库连接池的机制","children":[]},{"level":2,"title":"如何提高连接池内连接的重用率","slug":"如何提高连接池内连接的重用率","link":"#如何提高连接池内连接的重用率","children":[]},{"level":2,"title":"事务是什么？","slug":"事务是什么","link":"#事务是什么","children":[]},{"level":2,"title":"存储过程的优缺点","slug":"存储过程的优缺点","link":"#存储过程的优缺点","children":[]}],"git":{"createdTime":1693671207000,"updatedTime":1694272209000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":5.48,"words":1643},"filePathRelative":"interview/dataBase.md","localizedDate":"2023年9月2日","excerpt":"<h2>说说数据库的隔离级别</h2>\\n<p>数据库事物的四大特性：原子性、一致性、隔离性、持续性（永久性）。原子性：要么全做，要么全不做；一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。</p>\\n<p>一致性与原子性是密切相关的；隔离性：一个事务的执行不能被其他事务干扰；永久性：一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</p>\\n<p>事务的隔离性：未提交读（Read uncommitted），已提交读（Read committed），可重复读（Repeatable read），可串行化（Serializable ）。</p>\\n<p>未提交读：最低级别，任何情况都无法保证；已提交读：可避免脏读的发生；可重复读：可避免脏读、不可重复读的发生；串行化：可避免脏读、不可重复读、幻读的发生。</p>","autoDesc":true}');export{h as comp,m as data};
