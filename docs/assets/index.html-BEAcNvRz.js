import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as r,d as t}from"./app-CX6H2AQa.js";const n="/kbms/common/image-20230924163836131.png",a="/kbms/common/202212111144122.webp",i="/kbms/common/1625063803946-e1d4a28e-75d1-414b-8573-fc675196e9e7.png",c={},s=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><strong>Docker 是一个开源的应用容器引擎，是用Go语言开发的</strong>。用于开发、交付和运行应用程序的开放平台，能够将应用程序与基础设施分开，从而可以快速交付软件。</p><p>看看Docker 的Logo图</p><figure><img src="'+n+'" alt="image-20230924163836131" tabindex="0" loading="lazy"><figcaption>image-20230924163836131</figcaption></figure><p>Docker就好比是下面的小鲸鱼，上面装满的每个集装箱(方块)可以理解为容器，不管集装箱里面装的什么，统一按集装箱的形式打包存放、运输即可，集装箱之间互不影响；即Docker不在乎容器里的内容是什么，<strong>统一基于容器这种形式进行标准化管理，容器之间相互隔离</strong>，所以Docker上运行的多个容器是相互不影响的。</p><p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），通常社区版足够用了，功能强大，还免费。</p><blockquote><p>Docker在线学习版：<a href="https://labs.play-with-docker.com/" target="_blank" rel="noopener noreferrer">https://labs.play-with-docker.com/</a> 书籍推荐：<a href="https://www.cnblogs.com/Can-daydayup/p/15585714.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/Can-daydayup/p/15585714.html</a></p></blockquote><h2 id="为什么使用" tabindex="-1"><a class="header-anchor" href="#为什么使用"><span>为什么使用</span></a></h2><p>可以将项目定制为镜像，实现一个一个镜像多服务器进行部署，并且保证服务部署环境一致。 docker相比传统的虚拟化技术来说不需要完整的操作系统，可以理解为进程级别的，在同等的情况下可以对系统资源更好的利用。 docker使用非常简单，可以通过一个命令就可以运行起来服务，使得这项技术更加流行。</p><h2 id="docker架构" tabindex="-1"><a class="header-anchor" href="#docker架构"><span>Docker架构</span></a></h2><p><img src="'+a+'" alt="图片" loading="lazy">Docker Architecture Diagram</p><p><strong>Docker是客户端/服务器模式架构(C/S)，Client(客户端)和Docker daemon(守护进程)通信， 后者接收到客户端指令并执行</strong>。简述上图的三个流程：</p><ul><li><strong>客户端(Client)</strong> 发送<strong>docker build</strong>指令， <strong>服务端(Docker daemon)</strong> 收到指令之后就执行，将对应文件打包生成为<strong>镜像(Images)</strong> ；</li><li><strong>客户端(Client)</strong> 发送<strong>docker pull</strong>指令，<strong>服务端(Docker daemon)</strong> 收到指令之后就执行，从<strong>远程仓储中(Registry)</strong> 寻找<strong>镜像(Images)</strong> ，并<strong>下载到Docker主机上(DOCKER_HOST)</strong> ，如果找不到就报错；</li><li><strong>客户端(Client)</strong> 发送<strong>docker run</strong>指令，<strong>服务端(Docker daemon)</strong> 收到指令之后就执行，先从本地查找<strong>镜像(Images)</strong> ，如果本地存在，直接通过镜像启动<strong>容器(Containers)</strong> 实例；如果本地没有镜像(Images)，就会从远程仓储中(Registry)下载，然后再根据镜像启动<strong>容器(Containers)</strong> 实例，如果都没找到，那就报错。</li></ul><p>上面只是用三关键指令大概描述了从客户端到服务端的执行流程，其实还有很多指令，后续会专门整理文章分享。</p><p>上图术语解释及作用：</p><ul><li><strong>Docker daemon(守护进程)</strong> ：负责监听客户端发过来的指令请求，并管理Docker的各种对象，如镜像(Images)、容器(Containers)、网络等。</li><li><strong>Client(客户端)</strong> ：用户和Docker主机交互的主要方式，就是用来发指令请求的。</li><li><strong>远程仓储(Registry)</strong> ：用于各种镜像的存储，<strong>Docker Hub是最大的镜像存储库</strong>，基本上平时能用到的镜像都可以找到；为了提升拉取速度，可以指定国内的一些仓储。</li><li><strong>镜像(Images)</strong> ：是一个启动<strong>容器(Containers)</strong> 的只读模板；比较容易理解的比喻：镜像就是编程语言中的类(Class)，容器就是通过类(Class) new出来的实例。</li><li><strong>容器(Containers)</strong> ：就是<strong>镜像(Images)</strong> 可运行的实例。</li></ul><h2 id="docker带来的好处" tabindex="-1"><a class="header-anchor" href="#docker带来的好处"><span>Docker带来的好处</span></a></h2><ul><li><strong>开发更加敏捷：</strong> 让开发人员可以自由定义环境，创建和部署的应用程序更快、更容易，运维人员快速应对变化也更加灵活性。</li><li><strong>高可移植性和扩展性：</strong> Docker容器可以运行在各种设备环境中，如开发电脑、虚拟机、服务器上等；根据业务需求，可实时扩展或拆除应用程序及相关服务；</li><li><strong>充分利用硬件资源</strong>：Docker轻量级、启动快，能共用公共服务，不像传统的虚拟机那样，需要单独虚拟出整个系统，占用资源多，速度还不够快。Docker容器之间相互隔离，互不冲突，所以同时可运行很多个容器，充分利用资源。</li></ul><p>理论先说那么多，主要是实操应用，用明白了，理论自然就清晰了。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>应用的自动化打包和发布</li><li>自动化测试和持续集成、发布</li><li>在服务型环境中部署和调整数据库或其他应用</li></ul><h2 id="docker如何工作" tabindex="-1"><a class="header-anchor" href="#docker如何工作"><span>Docker如何工作</span></a></h2><p>Docker是一个Client-Server结构，Docker守护进程运行在主机上，客户端与Dcoker通过Socket访问，守护进程接收客户端的命令并且管理运行主机的容器，容器是一个运行环境，就是我们的集装箱； <img src="'+i+'" alt="" loading="lazy"></p><h2 id="dockerui" tabindex="-1"><a class="header-anchor" href="#dockerui"><span>DockerUI</span></a></h2><p>DockerUI是一个易于使用且轻量级的Docker管理工具。通过Web界面的操作，可以更方便地让不熟悉Docker指令的用户更快地进入Docker世界。DockerUI覆盖了Docker CLI命令行的95％以上的命令功能。通过DockerUI界面提供的可视化操作功能，可以轻松执行Docker环境和Docker Swarm群集环境的管理和维护功能。</p><p>下载地址：https://github.com/gohutool/docker.ui</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p>官网：<a href="https://docs.docker.com/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/</a> docker入门到实践：<a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noopener noreferrer">https://yeasy.gitbook.io/docker_practice/</a> 阮一峰教程：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener noreferrer">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a> 雪雁docker详细教程：<a href="https://www.cnblogs.com/codelove/tag/Docker/default.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/codelove/tag/Docker/default.html</a> 既然遇见不如同行：<a href="https://mp.weixin.qq.com/s/h_AhphgyxWZ8RiE67LpIWw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/h_AhphgyxWZ8RiE67LpIWw</a></p><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h2><blockquote><p><a href="https://mp.weixin.qq.com/s/b7eA_54PWrYB2CukVuDVkg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/b7eA_54PWrYB2CukVuDVkg</a> | 项目小结：使用Docker迁移服务到离线服务器</p></blockquote>',30),l=[s];function g(p,d){return r(),o("div",null,l)}const h=e(c,[["render",g],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/cloud/container/docker/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"docker","slug":"iq7ndi","docsId":"29454276","description":"概述 Docker 是一个开源的应用容器引擎，是用Go语言开发的。用于开发、交付和运行应用程序的开放平台，能够将应用程序与基础设施分开，从而可以快速交付软件。 看看Docker 的Logo图 image-20230924163836131image-20230924163836131 Docker就好比是下面的小鲸鱼，上面装满的每个集装箱(方块)可以理...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/container/docker/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 Docker 是一个开源的应用容器引擎，是用Go语言开发的。用于开发、交付和运行应用程序的开放平台，能够将应用程序与基础设施分开，从而可以快速交付软件。 看看Docker 的Logo图 image-20230924163836131image-20230924163836131 Docker就好比是下面的小鲸鱼，上面装满的每个集装箱(方块)可以理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/image-20230924163836131.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T13:43:35.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T13:43:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/image-20230924163836131.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/202212111144122.webp\\",\\"https://azrng.gitee.io/kbms/kbms/common/1625063803946-e1d4a28e-75d1-414b-8573-fc675196e9e7.png\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T13:43:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"为什么使用","slug":"为什么使用","link":"#为什么使用","children":[]},{"level":2,"title":"Docker架构","slug":"docker架构","link":"#docker架构","children":[]},{"level":2,"title":"Docker带来的好处","slug":"docker带来的好处","link":"#docker带来的好处","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"Docker如何工作","slug":"docker如何工作","link":"#docker如何工作","children":[]},{"level":2,"title":"DockerUI","slug":"dockerui","link":"#dockerui","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]},{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1700919815000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":4.84,"words":1453},"filePathRelative":"cloud/container/docker/readme.md","localizedDate":"2023年9月24日","excerpt":"<h2>概述</h2>\\n<p><strong>Docker 是一个开源的应用容器引擎，是用Go语言开发的</strong>。用于开发、交付和运行应用程序的开放平台，能够将应用程序与基础设施分开，从而可以快速交付软件。</p>\\n<p>看看Docker 的Logo图</p>\\n<figure><img src=\\"/common/image-20230924163836131.png\\" alt=\\"image-20230924163836131\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20230924163836131</figcaption></figure>","autoDesc":true}');export{h as comp,u as data};
