import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DMmdIwn0.js";const e={},p=t(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>泛型(geberic)，单词意思是通用的，它可以代表任意的数据类型，使类型参数化，从而达到只实现一个方法就可以操作多种数据类型的目的。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h3><p>线程不安全泛型集合</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//使用int作为实际参数来初始化泛型类型</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> intList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//往int列表添加元素3</span>
intList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//用string作为实际参数来初始化泛型类型</span>
<span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//从string列表添加元素</span>
stringList<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;learninghard&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>List&lt;T&gt;</code>是.Net类库中实现的泛型类型，T是泛型参数。</p></blockquote><p>编写一个比较数据大小的泛型方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">CompareGeneric</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span> <span class="token class-name">T</span> t2<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparable</span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> t1<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">?</span> t1 <span class="token punctuation">:</span> t2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>T是泛型的类型参数，CompareGeneric是实现的泛型方法，代码中的where语句是类型参数的约束，它用来是类型参数可以适用于CompareGeneric方法。</p></blockquote><h3 id="concurrentbag" tabindex="-1"><a class="header-anchor" href="#concurrentbag"><span>ConcurrentBag</span></a></h3><p>线程安全的泛型集合，所属命名空间：System.Collections.Concurrent</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentBag<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束"><span>泛型约束</span></a></h2><h3 id="值类型约束" tabindex="-1"><a class="header-anchor" href="#值类型约束"><span>值类型约束</span></a></h3><p>资料参考自：https://mp.weixin.qq.com/s/F4HOoBQGi29Eg3dAPEA-BQ</p><p>C#泛型在.NET7（C#11）之前是不支持特定的值类型的，只能通过struct来约束广义的值类型。案例如下：</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class Testfx&lt;T&gt; where T : struct 
{
    public void Fun1(T x)
    {
        Console.WriteLine(x);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的struct是约束值类型，这样T可以是诸如整数、浮点数等基本数据类型，不能约束具体某个类型。</p><p>在.NET7（C#11）之后，.NET 7 为基类库引入了新的数学相关泛型接口。提供这些接口意味着可以将泛型类型或方法的类型参数约束为“类似于数字”。只需要约束INumber就可以实现特定的值类型。案例如下：</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public class TestStruct&lt;T&gt; where T : INumber&lt;int&gt;
{
    public void Fun1(T x)
    {
        Console.WriteLine(x);
    }
}
//调用
static void Main(string[] args)
{
    TestStruct&lt;int&gt; testStruct= new TestStruct&lt;int&gt;();
    testStruct.Fun1(666);
}
//输出：666
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上案例的泛型约束（where）使用了INumber，这样就对特定的整数（int）值类型实现了约束，当然也可以换成浮点数（float）等其它的类型。</p>`,22),c=[p];function i(o,l){return s(),a("div",null,c)}const d=n(e,[["render",i],["__file","fanxing.html.vue"]]),k=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/fanxing.html","title":"泛型","lang":"zh-CN","frontmatter":{"title":"泛型","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"fanxing","slug":"qxi76o","docsId":"32171053","description":"描述 泛型(geberic)，单词意思是通用的，它可以代表任意的数据类型，使类型参数化，从而达到只实现一个方法就可以操作多种数据类型的目的。 操作 List 线程不安全泛型集合 List<T>是.Net类库中实现的泛型类型，T是泛型参数。 编写一个比较数据大小的泛型方法 T是泛型的类型参数，CompareGeneric是实现的泛型方法，代码中的wher...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/fanxing.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"描述 泛型(geberic)，单词意思是通用的，它可以代表任意的数据类型，使类型参数化，从而达到只实现一个方法就可以操作多种数据类型的目的。 操作 List 线程不安全泛型集合 List<T>是.Net类库中实现的泛型类型，T是泛型参数。 编写一个比较数据大小的泛型方法 T是泛型的类型参数，CompareGeneric是实现的泛型方法，代码中的wher..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-22T14:49:49.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-22T14:49:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-22T14:49:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"List","slug":"list","link":"#list","children":[]},{"level":3,"title":"ConcurrentBag","slug":"concurrentbag","link":"#concurrentbag","children":[]}]},{"level":2,"title":"泛型约束","slug":"泛型约束","link":"#泛型约束","children":[{"level":3,"title":"值类型约束","slug":"值类型约束","link":"#值类型约束","children":[]}]}],"git":{"createdTime":1700232644000,"updatedTime":1708613389000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":1.89,"words":567},"filePathRelative":"dotnet/csharp/duixiangheleixing/fanxing.md","localizedDate":"2023年10月22日","excerpt":"<h2>描述</h2>\\n<p>泛型(geberic)，单词意思是通用的，它可以代表任意的数据类型，使类型参数化，从而达到只实现一个方法就可以操作多种数据类型的目的。</p>\\n<h2>操作</h2>\\n<h3>List</h3>\\n<p>线程不安全泛型集合</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token comment\\">//使用int作为实际参数来初始化泛型类型</span>\\n<span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span> intList <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//往int列表添加元素3</span>\\nintList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//用string作为实际参数来初始化泛型类型</span>\\n<span class=\\"token class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span> stringList <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">List<span class=\\"token punctuation\\">&lt;</span><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//从string列表添加元素</span>\\nstringList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"learninghard\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
