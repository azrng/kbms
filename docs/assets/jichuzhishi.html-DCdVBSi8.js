import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c,b as n,e as s,f as t,d as a}from"./app-CBxp4zeL.js";const i={},r=a(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>遇到数据库关键字需要加双引号，比如select &quot;model_id&quot; from meta_data.model</p></div><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h2><h3 id="登录" tabindex="-1"><a class="header-anchor" href="#登录"><span>登录</span></a></h3><p>psql命令连接方式</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 方式一</span>
psql postgres://username:password@host:port/dbname
<span class="token comment">## username：连接数据的用户名，默认值是postgres</span>
<span class="token comment">## password：密码，默认值是postgres</span>
<span class="token comment">## host：主机名，默认值是localhost</span>
<span class="token comment">## port：端口，默认值是5432</span>
<span class="token comment">## dbname：要连接的数据库名，默认值是postgres</span>

<span class="token comment">## 方式二</span>
psql <span class="token parameter variable">-U</span> username <span class="token parameter variable">-h</span> <span class="token function">hostname</span> <span class="token parameter variable">-p</span> port <span class="token parameter variable">-d</span> dbname
<span class="token comment">## -U username 用户名，默认值postgres</span>
<span class="token comment">## -h hostname 主机名，默认值localhost</span>
<span class="token comment">## -p port 端口号，默认值5432</span>
<span class="token comment">## -d dbname 要连接的数据库名，默认值postgres</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker连接</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 进入postgres容器</span>
docker exec <span class="token operator">-</span>it postgres bash

psql <span class="token operator">-</span>h localhost <span class="token operator">-</span>p <span class="token number">5432</span> <span class="token operator">-</span>U postgres <span class="token operator">-</span>d runoobdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>linux连接</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>psql <span class="token operator">-</span>h localhost <span class="token operator">-</span>p <span class="token number">5432</span> <span class="token operator">-</span>U postgres <span class="token operator">-</span>d runoobdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>windows连接</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 方式一，然后按照命令输入口令</span>
<span class="token punctuation">.</span>\\psql <span class="token operator">-</span>U postgres <span class="token operator">-</span>W

<span class="token comment">--  方式二：直接连接并且选择数据库</span>
<span class="token punctuation">.</span>\\psql <span class="token operator">-</span>h localhost <span class="token operator">-</span>p <span class="token number">5432</span> <span class="token operator">-</span>U postgres <span class="token operator">-</span>d postgres
<span class="token comment">-- 或者</span>
<span class="token punctuation">.</span>\\psql postgres:<span class="token comment">//postgres:123456@localhost:5432/postgres</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="程序连接" tabindex="-1"><a class="header-anchor" href="#程序连接"><span>程序连接</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># .Net连接数据库</span>
<span class="token assign-left variable">host</span><span class="token operator">=</span>localhost<span class="token punctuation">;</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">5432</span><span class="token punctuation">;</span><span class="token assign-left variable">database</span><span class="token operator">=</span>test<span class="token punctuation">;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>postgres<span class="token punctuation">;</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">;</span>Maximum Pool <span class="token assign-left variable">Size</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>

<span class="token comment"># jdbc连接数据库</span>
jdbc:postgresql://localhost:5432/azrng?user<span class="token operator">=</span>postgres<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用户" tabindex="-1"><a class="header-anchor" href="#用户"><span>用户</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 创建用户</span>
CREATE <span class="token environment constant">USER</span> dba WITH PASSWORD <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>

<span class="token comment">## 修改用户密码</span>
alter user username with password <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>

<span class="token comment">## 更新指定数据库的所有者</span>
ALTER database hdr_01 OWNER TO <span class="token builtin class-name">test</span><span class="token punctuation">;</span>

<span class="token comment">## 赋予某个表所有权限</span>
GRANT ALL PRIVILEGES on argo_workflows to dba<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据库等操作" tabindex="-1"><a class="header-anchor" href="#数据库等操作"><span>数据库等操作</span></a></h2><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库"><span>数据库</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 查询数据库</span>
<span class="token punctuation">\\</span>l

<span class="token comment">## 创建数据库</span>
create database hdr_01<span class="token punctuation">;</span>

<span class="token comment">##  进入指定的数据库</span>
<span class="token punctuation">\\</span>c 数据库名字
<span class="token comment">## 示例：\\c hdr</span>

<span class="token comment">## 执行外部脚本</span>
 <span class="token punctuation">\\</span>i D:/Work/HDR/hdr_v116_202305.sql

<span class="token comment">## 删除数据库</span>
 drop database hdr_01<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取数据库下所有表分区" tabindex="-1"><a class="header-anchor" href="#获取数据库下所有表分区"><span>获取数据库下所有表分区</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> datname <span class="token keyword">from</span> pg_database<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="时区" tabindex="-1"><a class="header-anchor" href="#时区"><span>时区</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 显示当前时区</span>
<span class="token class-name">show</span> timezone<span class="token punctuation">;</span> <span class="token operator">--</span>UTC

<span class="token comment">//显示内置时区</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_timezone_names<span class="token punctuation">;</span>

<span class="token comment">//设置时区 设置完获取当前时间就是和本机一样了，默认是utc</span>
<span class="token keyword">set</span> time zone &#39;Asia<span class="token operator">/</span>Shanghai&#39;<span class="token punctuation">;</span> 

<span class="token comment">//以指定时区展示时间</span>
<span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> at time zone &#39;Asia<span class="token operator">/</span>Shanghai&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="schema" tabindex="-1"><a class="header-anchor" href="#schema"><span>Schema</span></a></h3><p>psql命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">## 获取数据库下的所有schema</span>
<span class="token punctuation">\\</span>dn

<span class="token comment">## 创建schema</span>
create schema schema_01<span class="token punctuation">;</span>

<span class="token comment">## 切换schema</span>
<span class="token builtin class-name">set</span> search_path to schema_01<span class="token punctuation">;</span>

<span class="token comment">## 查询现在所在schema</span>
show search_path<span class="token punctuation">;</span>

<span class="token comment">## 查询当前schema下所有的表</span>
<span class="token punctuation">\\</span>d

<span class="token comment">## 查询某一个表的表结构信息</span>
<span class="token punctuation">\\</span>d 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 创建模式</span>
create schema <span class="token keyword">if</span> not exists sample<span class="token punctuation">;</span>

<span class="token comment"># 删除模式</span>
drop schema meta_data<span class="token punctuation">;</span>

<span class="token comment"># 删除模式并串联删除依赖对象</span>
drop schema meta_data cascade<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表" tabindex="-1"><a class="header-anchor" href="#表"><span>表</span></a></h3><h4 id="获取表结构信息" tabindex="-1"><a class="header-anchor" href="#获取表结构信息"><span>获取表结构信息</span></a></h4><p>使用psql命令获取</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token punctuation">\\</span>d 表名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表"><span>创建表</span></a></h4><p>创建表并且授予所有者，创建注释</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token comment">-- 如果不存在就创建</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token keyword">exists</span> search<span class="token punctuation">.</span>userinfo
<span class="token punctuation">(</span>
	id serial
		constraint userinfo_pk
			primary key<span class="token punctuation">,</span> <span class="token comment">-- 主键自增</span>
	<span class="token keyword">name</span> text <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">not</span> <span class="token keyword">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建表</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> search<span class="token punctuation">.</span>userinfo
<span class="token punctuation">(</span>
	id serial
		constraint userinfo_pk
			primary key<span class="token punctuation">,</span>
	<span class="token keyword">name</span> text <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">not</span> <span class="token keyword">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加注释</span>
<span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">table</span> search<span class="token punctuation">.</span>userinfo <span class="token keyword">is</span> <span class="token string">&#39;用户表&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">comment</span> <span class="token keyword">on</span> column search<span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span>id <span class="token keyword">is</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">comment</span> <span class="token keyword">on</span> column search<span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span><span class="token keyword">name</span> <span class="token keyword">is</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 授权</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> search<span class="token punctuation">.</span>userinfo 
  OWNER <span class="token keyword">TO</span> <span class="token string">&quot;postgres&quot;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加列" tabindex="-1"><a class="header-anchor" href="#添加列"><span>添加列</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> config<span class="token punctuation">.</span><span class="token string">&quot;SqlConfig&quot;</span> <span class="token keyword">add</span> <span class="token string">&quot;TableName&quot;</span> <span class="token keyword">text</span><span class="token punctuation">;</span> <span class="token comment">-- 添加列</span>
<span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> config<span class="token punctuation">.</span><span class="token string">&quot;SqlConfig&quot;</span><span class="token punctuation">.</span><span class="token string">&quot;TableName&quot;</span> <span class="token operator">is</span> <span class="token string">&#39;表名&#39;</span><span class="token punctuation">;</span> <span class="token comment">--设置备注</span>

<span class="token comment">-- 添加列并且设置默认值</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> other<span class="token punctuation">.</span>blood_transfusion_record <span class="token keyword">add</span> blood_apply_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">-- 添加列如果列不存在就添加</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> checks<span class="token punctuation">.</span>ecg_report  <span class="token keyword">ADD</span> <span class="token keyword">column</span>  <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> link_show_type <span class="token keyword">int</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个列之前不是自增，现在修改为自定模式，那么需要创建队列并设置队列的值为当前表最大值，然后将主键设置为自增</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建序列</span>
<span class="token keyword">CREATE</span> SEQUENCE osp<span class="token punctuation">.</span>system_dictionary_id_seq<span class="token punctuation">;</span>

<span class="token comment">-- 重置序列的当前值为表中的最大 id 值</span>
<span class="token keyword">SELECT</span> setval<span class="token punctuation">(</span><span class="token string">&#39;osp.system_dictionary_id_seq&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> osp<span class="token punctuation">.</span>system_dictionary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 将序列与主键列关联</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> osp<span class="token punctuation">.</span>system_dictionary <span class="token keyword">ALTER</span> <span class="token keyword">COLUMN</span> id <span class="token keyword">SET</span> <span class="token keyword">DEFAULT</span> nextval<span class="token punctuation">(</span><span class="token string">&#39;osp.system_dictionary_id_seq&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加数据" tabindex="-1"><a class="header-anchor" href="#添加数据"><span>添加数据</span></a></h4><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">.</span>userinfo<span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 批量添加</span>
<span class="token keyword">INSERT</span> <span class="token keyword">into</span> other<span class="token punctuation">.</span>blood_apply_test_details<span class="token punctuation">(</span><span class="token keyword">name</span><span class="token punctuation">,</span>blood_apply_id<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> patient_name<span class="token punctuation">,</span>blood_apply_id <span class="token keyword">from</span>  other<span class="token punctuation">.</span>blood_apply <span class="token keyword">where</span> patient_id<span class="token operator">=</span><span class="token number">716</span> <span class="token keyword">and</span> visit_id<span class="token operator">=</span><span class="token number">100182490</span>

<span class="token comment">-- 要插入的SQL中code数据不存在就添加，存在就不添加，注意，该code列需要是唯一索引的列</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">public</span><span class="token punctuation">.</span>operation_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> code<span class="token punctuation">,</span> content<span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> version<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token string">&#39;version&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;3.10.0&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">ON</span> CONFLICT <span class="token punctuation">(</span>code<span class="token punctuation">)</span> DO NOTHING<span class="token punctuation">;</span>

<span class="token comment">-- 添加的时候如果存在就更新，该code列需要是唯一索引的列</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">public</span><span class="token punctuation">.</span>operation_log <span class="token punctuation">(</span>id<span class="token punctuation">,</span> code<span class="token punctuation">,</span> content<span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> version<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span> <span class="token string">&#39;version&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;3.10.0&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">ON</span> CONFLICT <span class="token punctuation">(</span>code<span class="token punctuation">)</span> DO <span class="token keyword">update</span>
<span class="token keyword">set</span> content<span class="token operator">=</span><span class="token string">&#39;v3.10.0&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过pgsql copy的方式批量添加数据</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token comment">-- FROM STDIN (FORMAT BINARY): 指定数据来源为标准输入，并且数据格式为二进制。这意味着你需要将二进制数据提供给 COPY 命令</span>


COPY cda<span class="token punctuation">.</span>document_generation_log <span class="token punctuation">(</span>task_batch_number<span class="token punctuation">,</span>document_type<span class="token punctuation">,</span>document_serial_number<span class="token punctuation">,</span>generation_status<span class="token punctuation">,</span>error_message<span class="token punctuation">,</span>created_time<span class="token punctuation">)</span> <span class="token keyword">FROM</span> STDIN <span class="token punctuation">(</span>FORMAT <span class="token keyword">BINARY</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>资料：http://postgres.cn/docs/12/sql-copy.html</p><h4 id="批量添加数据" tabindex="-1"><a class="header-anchor" href="#批量添加数据"><span>批量添加数据</span></a></h4>`,43),d={href:"https://www.postgresql.org/docs/9.2/sql-copy.html",target:"_blank",rel:"noopener noreferrer"},u=a(`<h4 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据"><span>更新数据</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span> 查询一个表<span class="token punctuation">(</span>closed_loop_relation<span class="token punctuation">)</span>的数据去更新另一个表<span class="token punctuation">(</span>closed_loop_process_copy1<span class="token punctuation">)</span>的数据
update cr<span class="token punctuation">.</span>closed_loop_process_copy1 clp
<span class="token keyword">set</span> parent_node_code<span class="token operator">=</span>clr<span class="token punctuation">.</span>main_process_code
<span class="token keyword">from</span> cr<span class="token punctuation">.</span>closed_loop_relation clr
<span class="token keyword">where</span> <span class="token class-name">clr</span><span class="token punctuation">.</span>sub_process_code <span class="token operator">=</span> clp<span class="token punctuation">.</span>process_code<span class="token punctuation">;</span>

UPDATE table1 t1
<span class="token class-name">SET</span> column1 <span class="token operator">=</span> <span class="token class-name">t2<span class="token punctuation">.</span>columnname1</span>
    column2 <span class="token operator">=</span> <span class="token return-type class-name">t2<span class="token punctuation">.</span>columnname2</span>
 FROM <span class="token punctuation">(</span><span class="token keyword">select</span> columnname1<span class="token punctuation">,</span>columnname2 <span class="token keyword">from</span> table2<span class="token punctuation">)</span> t2
 WHERE t1<span class="token punctuation">.</span>column3 <span class="token operator">=</span> t2<span class="token punctuation">.</span>column3
 AND t1<span class="token punctuation">.</span>column <span class="token operator">=</span> &#39;<span class="token number">111</span>&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特殊的列</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span> 更新bytea类型数据
update platform<span class="token punctuation">.</span>system_config  <span class="token keyword">set</span> desc_html<span class="token operator">=</span>E&#39;我是测试数据&#39; <span class="token keyword">where</span> <span class="token class-name">key</span><span class="token operator">=</span>&#39;traceSource_sql_parser_config&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="批量更新" tabindex="-1"><a class="header-anchor" href="#批量更新"><span>批量更新</span></a></h4>`,5),k={href:"https://www.postgresql.org/docs/10/sql-insert.html#SQL-ON-CONFLICT",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"使用Values List更新部分列",-1),v=n("li",null,"使用临时表去批量更新(创建一个临时表，插入临时表，然后通过表链接去更新，然后删除临时表)",-1),b=a(`<h4 id="删除数据" tabindex="-1"><a class="header-anchor" href="#删除数据"><span>删除数据</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- DELETE 命令用于逐行删除表中的数据</span>
<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>

<span class="token comment">-- TRUNCATE 命令将删除表中的所有行，并重置自增主键（如果有）。它比 DELETE 命令更快，因为它是通过释放存储空间来实现的，而不是逐行删除</span>
<span class="token keyword">truncate</span> dr<span class="token punctuation">.</span>drug_info_1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="序列" tabindex="-1"><a class="header-anchor" href="#序列"><span>序列</span></a></h4><p>更新序列的值</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>-- 查询序列值(查询的时候会递增)
select nextval(&#39;cr.record_folder_info_id_seq&#39;)

-- 更新序列的值
alter sequence 队列名 restart with <span class="token number">1058</span>;
-- 示例
alter sequence cr.record_folder_info_id_seq restart with <span class="token number">142</span>;

-- 设置序列为表最大的主键值
SELECT setval(&#39;osp.system_dictionary_id_seq&#39;<span class="token punctuation">,</span> (SELECT MAX(id) FROM osp.system_dictionary));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="提前获取序列值" tabindex="-1"><a class="header-anchor" href="#提前获取序列值"><span>提前获取序列值</span></a></h5><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public async Task&lt;Queue&lt;int&gt;&gt; TakeIdsAsync(int size)
{
	var sqls = Enumerable.Range(0, size).Select(x =&gt; &quot;select nextval(&#39;meta_data.model_struct_id_seq&#39;)&quot;);
	var sql = string.Join(&quot; union &quot;, sqls);
	var ret = await _dbContext.Database.GetDbConnection().QueryAsync&lt;int&gt;(sql);

	var queue = new Queue&lt;int&gt;();
	foreach (var item in ret.OrderBy(x =&gt; x))
	{
		queue.Enqueue(item);
	}

	return queue;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引" tabindex="-1"><a class="header-anchor" href="#索引"><span>索引</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建索引</span>
<span class="token keyword">create</span> <span class="token keyword">index</span> request_log_module_index
<span class="token keyword">on</span> cr<span class="token punctuation">.</span>request_log <span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 联合索引</span>
<span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> chart_review_config_key_version_number_uindex
<span class="token keyword">on</span> cr<span class="token punctuation">.</span>chart_review_config <span class="token punctuation">(</span><span class="token keyword">key</span> <span class="token keyword">asc</span><span class="token punctuation">,</span> version_number <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 删除索引</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> cr<span class="token punctuation">.</span>chart_review_config_key_uindex<span class="token punctuation">;</span>
<span class="token comment">-- 存在删除，不存在跳过</span>
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> cr<span class="token punctuation">.</span>trace_source_target_config_name_uindex<span class="token punctuation">;</span>

<span class="token comment">-- 部分索引</span>
<span class="token comment">-- https://www.postgresql.org/docs/16/indexes-partial.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模糊查询走索引</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> EXTENSION pg_bigm<span class="token punctuation">;</span>
<span class="token comment">-- 支持  &#39;%张三%&#39;  走索引查询</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> lab_report_report_name_index <span class="token keyword">ON</span> lab_report <span class="token keyword">USING</span> gin <span class="token punctuation">(</span>report_name <span class="token keyword">public</span><span class="token punctuation">.</span>gin_bigm_ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),h={href:"http://pgbigm.osdn.jp/pg_bigm_en-1-2.html",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>重建索引 下面解释下说明情况下需要： 1、 当由于软件bug或者硬件原因导致的索引不再可用，索引的数据不再可用； 2、 当索引包含许多空的或者近似于空的页，这个在b-tree索引会发生。Reindex会腾出空间释放哪些无用的页(页就是存放数据的一个单位，类似于block)。 3、 PostgreSql数据库系统修改了存储参数，需要重建不然就会失效(如修改了fillfactor参数)； 4、 创建并发索引时失败，遗留了一个失效的索引。这样的索引不会被使用，但重构后能用。一个索引的重构不能并发的执行。</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token comment">-- REINDEX { INDEX | TABLE | DATABASE | SYSTEM } name [ FORCE ];</span>

<span class="token comment">-- 重建指定索引</span>
reindex <span class="token keyword">index</span> my_index<span class="token punctuation">;</span>

<span class="token comment">-- 重建指定表的所有索引</span>
REINDEX <span class="token keyword">TABLE</span> my_table<span class="token punctuation">;</span>

<span class="token comment">-- 重建指定数据库的所有索引</span>
REINDEX DATABASE broken_db<span class="token punctuation">;</span>

<span class="token comment">--  SYSTEM 重构这个系统的索引包含当前的数据库。共享系统中的索引页是被包含的，但是用户自己的表是不处理的，同样也不能在一个事务块中执行。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重建索引不同的级别的重构需要不同的权限，比如table那么就需要有这个表的权限即需要有操作索引的权限，如超级用户postgres拥有这个权限。</li><li>重构索引的目的是为了当索引的数据不可信时，即对于成本的计算会出现偏差较大，无益于优化器得到最优的执行计划以至于性能优化失败。</li><li>重构索引类似于先删除所有再创建一个索引，但是索引的条目是重新开始的。重构时当前索引是不能写的，因为此时有排他锁。</li><li>在8,1版本之前REINDEX DATABASE 只包含系统索引，并不是期望的所有指定数据库的索引。7.4版本之前REINDEX TABLE不会自动执行下级TOAST tables</li></ul><p>视图创建索引 PostgreSQL的视图（View）可以像表一样创建索引。当在视图上执行查询时，PostgreSQL会使用该视图的索引来加速查询。但请注意，与表不同，视图本身并不存储数据，因此视图索引仅存储对基础表的引用，并且可能受到基础表中数据更改的影响。 在创建视图时，可以使用CREATE INDEX语句为其添加索引，就像在表上创建索引一样。例如：</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> myview <span class="token keyword">AS</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mytable <span class="token keyword">WHERE</span> column <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> myview_index <span class="token keyword">ON</span> myview <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在myview视图上创建名为myview_index的索引，以加速满足WHERE语句中条件的查询。</p><h4 id="约束" tabindex="-1"><a class="header-anchor" href="#约束"><span>约束</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 创建唯一约束(对key和version_number)</span>
<span class="token keyword">create</span> <span class="token keyword">unique</span> <span class="token keyword">index</span> chart_review_config_key_version_number_uindex
	<span class="token keyword">on</span> cr<span class="token punctuation">.</span>chart_review_config <span class="token punctuation">(</span><span class="token keyword">key</span> <span class="token keyword">desc</span><span class="token punctuation">,</span> version_number <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">-- 删除约束</span>
<span class="token keyword">drop</span> <span class="token keyword">index</span> cr<span class="token punctuation">.</span>chart_review_config_key_uindex<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不能直接更新，如果要修改需要删除之前的然后添加新的约束</p></blockquote><h2 id="系统表操作" tabindex="-1"><a class="header-anchor" href="#系统表操作"><span>系统表操作</span></a></h2><h3 id="监控程序活动" tabindex="-1"><a class="header-anchor" href="#监控程序活动"><span>监控程序活动</span></a></h3><p>pg_stat_activity 是 PostgreSQL 内置的一个系统视图， 是 PostgreSQL 实例维护的一个进程相关的视图，是实时变化的。</p><p>关于该表的字段说明可以查看：https://www.cnblogs.com/zhuminghui/p/14421501.html</p><p>查询慢SQL可以执行下面sql</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_stat_activity <span class="token keyword">where</span> state<span class="token operator">&lt;&gt;</span><span class="token string">&#39;idle&#39;</span> <span class="token operator">and</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>query_start <span class="token operator">&gt;</span> <span class="token keyword">interval</span> <span class="token string">&#39;5 s&#39;</span> <span class="token keyword">order</span> <span class="token keyword">by</span> query_start<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询连接字符串中应用名查询该应用活动信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_stat_activity <span class="token keyword">where</span> <span class="token class-name">application_name</span> like &#39;fss<span class="token operator">%</span>&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要在原来的SQL最后拼接东西，如连接字符串中拼接<code>Application Name=app1</code>,或者使用下面c#代码拼接</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> conStrBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NpgsqlConnectionStringBuilder</span><span class="token punctuation">(</span>connectionString<span class="token punctuation">)</span><span class="token punctuation">;</span>
conStrBuilder<span class="token punctuation">.</span>ApplicationName <span class="token operator">=</span> appName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取表分区下表" tabindex="-1"><a class="header-anchor" href="#获取表分区下表"><span>获取表分区下表</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>SELECT <span class="token operator">*</span> FROM information_schema<span class="token punctuation">.</span>tables <span class="token keyword">where</span> <span class="token class-name">table_catalog</span><span class="token operator">=</span>&#39;zyp&#39; <span class="token keyword">and</span> table_schema <span class="token operator">=</span> &#39;config&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查询指定表备注" tabindex="-1"><a class="header-anchor" href="#查询指定表备注"><span>查询指定表备注</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> relname <span class="token keyword">as</span> <span class="token class-name">tabname</span><span class="token punctuation">,</span>
<span class="token function">cast</span><span class="token punctuation">(</span><span class="token function">obj_description</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>oid<span class="token punctuation">,</span>&#39;pg_class&#39;<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">varchar</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">comment</span> <span class="token keyword">from</span> pg_class c 
<span class="token keyword">where</span>  <span class="token class-name">relname</span> <span class="token operator">=</span>&#39;表名字&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构查询" tabindex="-1"><a class="header-anchor" href="#结构查询"><span>结构查询</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-- 查询指定数据库下是否存在某一个schema
SELECT count(1) FROM information_schema.schemata where catalog_name=&#39;cdr&#39; and schema_name=&#39;meta_data&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取表结构信息-1" tabindex="-1"><a class="header-anchor" href="#获取表结构信息-1"><span>获取表结构信息</span></a></h3><p>根据schema和表名称获取表结构信息</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>select distinct *
from (select column_name ColName,
    character_maximum_length Length,
    ordinal_position Sort,
    udt_name SubLength,
    data_type ColType
    from information_schema.columns
    where table_name = &#39;patient_master_info&#39;  -- Your table name here
    and table_schema = &#39;patient&#39;) col  -- Your schema name here
    inner join (SELECT distinct col_description(a.attrelid, a.attnum) as Comment,
    a.attname as name,
    a.attnotnull as Is_Null,
    (case
    when (select count(*) from pg_constraint where conrelid = a.attrelid and conkey[1]=attnum and contype=&#39;p&#39;)&gt;0 then a.attname
    else &#39;&#39;
    end) as pkName
    FROM pg_class as c,
    pg_attribute as a
    where c.relname = &#39;patient_master_info&#39; -- Your table name here
    and c.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = &#39;patient&#39;) -- Your schema name here
    and a.attrelid = c.oid
    and a.attnum &gt; 0) colInfo
on colInfo.name = col.ColName
order by Sort;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询数据库指定schema下每个表的数据量</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>  schemaname<span class="token punctuation">,</span> relname tableName<span class="token punctuation">,</span> n_live_tup size
<span class="token keyword">FROM</span> pg_stat_user_tables <span class="token keyword">where</span> schemaname <span class="token string">&#39;user&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="磁盘统计" tabindex="-1"><a class="header-anchor" href="#磁盘统计"><span>磁盘统计</span></a></h3><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 计算某一个表某一个列的存储量</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>pg_column_size<span class="token punctuation">(</span><span class="token string">&quot;config_code&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  CSIZE <span class="token keyword">FROM</span> meta_data<span class="token punctuation">.</span>meta_config<span class="token punctuation">;</span>

<span class="token keyword">select</span> table_schema<span class="token punctuation">,</span> table_name<span class="token punctuation">,</span>  column_name ColName<span class="token punctuation">,</span>pg_column_size<span class="token punctuation">(</span>table_name<span class="token operator">||</span><span class="token string">&#39;.&#39;</span><span class="token operator">||</span>  column_name<span class="token punctuation">)</span>
<span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span>
<span class="token keyword">where</span> table_name <span class="token operator">=</span> <span class="token string">&#39;department&#39;</span>  <span class="token comment">-- Your table name here</span>
  <span class="token operator">and</span> table_schema <span class="token operator">=</span> <span class="token string">&#39;sample&#39;</span><span class="token punctuation">;</span>


<span class="token comment">-- 查询指定数据库指定schema下所有表的存储量</span>
<span class="token keyword">SELECT</span> table_catalog<span class="token punctuation">,</span>table_schema<span class="token punctuation">,</span>table_name <span class="token punctuation">,</span>pg_total_relation_size<span class="token punctuation">(</span>table_schema <span class="token operator">||</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">||</span> table_name<span class="token punctuation">)</span> <span class="token keyword">as</span> total_size
<span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_catalog<span class="token operator">=</span><span class="token string">&#39;consoletest&#39;</span> <span class="token operator">and</span> table_schema <span class="token operator">=</span> <span class="token string">&#39;sample&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> table_catalog<span class="token punctuation">,</span>table_schema<span class="token punctuation">,</span>table_name <span class="token punctuation">,</span>pg_table_size<span class="token punctuation">(</span>table_schema <span class="token operator">||</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">||</span> table_name<span class="token punctuation">)</span> <span class="token keyword">as</span> total_size
<span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_catalog<span class="token operator">=</span><span class="token string">&#39;consoletest&#39;</span> <span class="token operator">and</span> table_schema <span class="token operator">=</span> <span class="token string">&#39;sample&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> table_catalog<span class="token punctuation">,</span>table_schema<span class="token punctuation">,</span>table_name <span class="token punctuation">,</span>pg_total_relation_size<span class="token punctuation">(</span>  table_schema <span class="token operator">||</span> <span class="token string">&#39;.&quot;&#39;</span> <span class="token operator">||</span> table_name<span class="token operator">||</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> total_size
<span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_catalog<span class="token operator">=</span><span class="token string">&#39;cdr&#39;</span> <span class="token operator">and</span> table_schema <span class="token operator">=</span> <span class="token string">&#39;meta_data&#39;</span><span class="token punctuation">;</span>


<span class="token comment">-- 获取指定数据库的大小</span>
<span class="token keyword">SELECT</span> table_catalog<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>pg_total_relation_size<span class="token punctuation">(</span>table_catalog<span class="token operator">||</span> <span class="token string">&#39;.&#39;</span><span class="token operator">||</span> table_schema <span class="token operator">||</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">||</span> table_name<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> total_size
<span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_catalog<span class="token operator">=</span><span class="token string">&#39;consoletest&#39;</span>  <span class="token operator">and</span> table_name<span class="token operator">!=</span><span class="token string">&#39;__EFMigrationsHistory&#39;</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> table_catalog<span class="token punctuation">;</span>

<span class="token comment">-- 查询数据库的大小</span>
<span class="token keyword">select</span> pg_database_size<span class="token punctuation">(</span><span class="token string">&#39;consoletest&#39;</span><span class="token punctuation">)</span>


<span class="token comment">-- 求每个表下的记录数</span>
<span class="token comment">-- 方案一：类似于批量count</span>
<span class="token keyword">select</span> schemaname<span class="token punctuation">,</span> tablename<span class="token punctuation">,</span> <span class="token punctuation">(</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;/row/cnt/text()&#39;</span><span class="token punctuation">,</span> xml_count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>::<span class="token keyword">text</span>::<span class="token keyword">int</span> <span class="token keyword">as</span> row_count
<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> schemaname<span class="token punctuation">,</span>
             tablename<span class="token punctuation">,</span>
             query_to_xml<span class="token punctuation">(</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;select count(1) as cnt from %I.%I&#39;</span><span class="token punctuation">,</span> schemaname<span class="token punctuation">,</span> tablename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                          <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> xml_count
      <span class="token keyword">from</span> pg_tables
      <span class="token keyword">where</span> schemaname <span class="token operator">=</span> <span class="token string">&#39;blog&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> count<span class="token punctuation">;</span>
<span class="token comment">-- 方案二：不太准</span>
<span class="token keyword">select</span> schemaname<span class="token punctuation">,</span> relname tableName<span class="token punctuation">,</span> n_live_tup count
<span class="token keyword">from</span> pg_stat_user_tables<span class="token punctuation">;</span>
<span class="token comment">-- 方案三：不太准</span>
<span class="token keyword">select</span> relname <span class="token keyword">as</span> TABLE_NAME<span class="token punctuation">,</span> reltuples <span class="token keyword">as</span> rowCounts
<span class="token keyword">from</span> pg_class
<span class="token keyword">where</span> relkind <span class="token operator">=</span> <span class="token string">&#39;r&#39;</span>
  <span class="token operator">and</span> relnamespace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> oid <span class="token keyword">from</span> pg_namespace <span class="token keyword">where</span> nspname <span class="token operator">=</span> <span class="token string">&#39;blog&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> rowCounts <span class="token keyword">desc</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h2><h3 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h3><p>视图(VIEW)是一个伪表。 它不是物理表，而是作为普通表选择查询。视图也可以表示连接的表。 它可以包含表的所有行或来自一个或多个表的所选行。 <strong>视图便于用户执行以下操作</strong>：</p><ul><li>它以自然和直观的方式构建数据，并使其易于查找。</li><li>它限制对数据的访问，使得用户只能看到有限的数据而不是完整的数据。</li><li>它归总来自各种表中的数据以生成报告。</li></ul><p>语法 可以使用CREATE VIEW语句来在PostgreSQL中创建视图。 您可以从单个表，多个表以及另一个视图创建它。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CREATE <span class="token punctuation">[</span>TEMP <span class="token operator">|</span> TEMPORARY<span class="token punctuation">]</span> VIEW view_name AS  
<span class="token class-name">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token range operator">..</span><span class="token range operator">..</span><span class="token punctuation">.</span>  
FROM table_name  
WHERE <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 从sqlconfig表创建一个视图(该视图属于config表分区)，此视图将包含querycolumn,sqlcode,tablename,alias这几个列</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CREATE OR REPLACE VIEW config<span class="token punctuation">.</span>sqlconfig_view <span class="token keyword">as</span>
<span class="token keyword">select</span>  querycolumn<span class="token punctuation">,</span>sqlcode<span class="token punctuation">,</span>tablename<span class="token punctuation">,</span><span class="token keyword">alias</span> <span class="token keyword">from</span> <span class="token class-name">config<span class="token punctuation">.</span>sqlconfig</span> config<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从视图中检索带条件的数据</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> config<span class="token punctuation">.</span>sqlconfig_view <span class="token keyword">where</span> <span class="token class-name">alias</span><span class="token operator">=</span><span class="token char">&#39;x&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除视图</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span> 语法
<span class="token operator">--</span> DROP <span class="token class-name">VIEW</span> view_name<span class="token punctuation">;</span>

drop view config<span class="token punctuation">.</span>sqlconfig_view<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="临时表" tabindex="-1"><a class="header-anchor" href="#临时表"><span>临时表</span></a></h3><p>一、根据原表创建临时表</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CREATE TEMP TABLE temp_testbulkcopy <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> testbulkcopy limit <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>二、本次使用完临时表后自动删除</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CREATE TEMP TABLE temp_testbulkcopy ON COMMIT DROP <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> testbulkcopy limit <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ON COMMIT DROP 表示本次事务提交后就自动删掉</p><h3 id="触发器" tabindex="-1"><a class="header-anchor" href="#触发器"><span>触发器</span></a></h3><p>一般格式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>create trigger trigger_name <span class="token punctuation">[</span>before<span class="token operator">/</span>after<span class="token operator">/</span><span class="token class-name">instead</span> of<span class="token punctuation">]</span> <span class="token punctuation">[</span>update <span class="token operator">|</span> insert <span class="token operator">|</span> delete<span class="token punctuation">]</span> <span class="token keyword">on</span> table_name
<span class="token keyword">for</span> each <span class="token punctuation">[</span>row <span class="token operator">|</span> statement<span class="token punctuation">]</span>
execute <span class="token punctuation">[</span>function <span class="token operator">|</span> procedure<span class="token punctuation">]</span> function_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例创建触发器当更新system_config表的value列的时候触发</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>DROP TRIGGER IF EXISTS <span class="token string">&quot;trigger_AddSystemConfigFlow&quot;</span> ON sample1<span class="token punctuation">.</span>system_config<span class="token punctuation">;</span>
DROP FUNCTION IF EXISTS sample1<span class="token punctuation">.</span><span class="token string">&quot;func_addSystemConfigFlow&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

CREATE OR REPLACE FUNCTION sample1<span class="token punctuation">.</span><span class="token string">&quot;func_addSystemConfigFlow&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> RETURNS trigger AS $BODY$ BEGIN
        INSERT <span class="token return-type class-name">INTO</span> sample1<span class="token punctuation">.</span>system_config_history <span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span>version<span class="token punctuation">,</span>update_user_id<span class="token punctuation">,</span>update_time<span class="token punctuation">)</span>
        VALUES <span class="token punctuation">(</span>OLD<span class="token punctuation">.</span>key<span class="token punctuation">,</span>OLD<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">,</span>OLD<span class="token punctuation">.</span>version<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>CURRENT_TIMESTAMP<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">RETURN</span> NEW<span class="token punctuation">;</span>

END $BODY$ <span class="token class-name">LANGUAGE</span> plpgsql <span class="token punctuation">;</span>

CREATE TRIGGER <span class="token string">&quot;trigger_AddSystemConfigFlow&quot;</span> AFTER UPDATE OF <span class="token string">&quot;value&quot;</span> ON sample1<span class="token punctuation">.</span>system_config FOR EACH ROW
EXECUTE PROCEDURE sample1<span class="token punctuation">.</span><span class="token string">&quot;func_addSystemConfigFlow&quot;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加创建更新一个表就让另一个表插入备份数据的触发器脚本</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span>创建备份表（只需更新chart_review_config_bk表名即可）
create table cda<span class="token punctuation">.</span>system_dictionary_bk <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> cda<span class="token punctuation">.</span>system_dictionary<span class="token punctuation">;</span>

Alter table cda<span class="token punctuation">.</span>system_dictionary_bk <span class="token keyword">add</span> column <span class="token class-name">operation</span> text<span class="token punctuation">;</span>
Alter table cda<span class="token punctuation">.</span>system_dictionary_bk <span class="token keyword">add</span> column <span class="token class-name">operation_time</span> timestamp<span class="token punctuation">;</span>
Alter table cda<span class="token punctuation">.</span>system_dictionary_bk <span class="token keyword">add</span> column <span class="token class-name">user_name</span> text<span class="token punctuation">;</span>
Alter table cda<span class="token punctuation">.</span>system_dictionary_bk <span class="token keyword">add</span> column <span class="token class-name">old_content</span> text<span class="token punctuation">;</span>

<span class="token operator">--</span>创建备份trigger （只需更新cda<span class="token punctuation">.</span>system_dictionary_bk 表名即可）
CREATE OR REPLACE <span class="token return-type class-name">FUNCTION</span> cda<span class="token punctuation">.</span><span class="token function">system_dictionary_log_audit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> RETURNS TRIGGER AS $system_dictionary_bk$
    BEGIN
        <span class="token operator">--</span> 在 log_audit 中创建日志来记录操作 ，
        <span class="token operator">--</span> 使用特殊变量 TG_OP 来得到操作。
        IF <span class="token punctuation">(</span>TG_OP <span class="token operator">=</span> &#39;DELETE&#39;<span class="token punctuation">)</span> THEN
            INSERT INTO cda<span class="token punctuation">.</span>system_dictionary_bk SELECT  OLD<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>TG_OP<span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span>&#39;&#39;<span class="token punctuation">;</span>
            <span class="token class-name">RETURN</span> OLD<span class="token punctuation">;</span>
        ELSIF <span class="token punctuation">(</span>TG_OP <span class="token operator">=</span> &#39;UPDATE&#39;<span class="token punctuation">)</span> THEN
            INSERT INTO cda<span class="token punctuation">.</span>system_dictionary_bk SELECT NEW<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>TG_OP<span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span><span class="token function">row_to_json</span><span class="token punctuation">(</span>OLD<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RETURN</span> NEW<span class="token punctuation">;</span>
        ELSIF <span class="token punctuation">(</span>TG_OP <span class="token operator">=</span> &#39;INSERT&#39;<span class="token punctuation">)</span> THEN
            INSERT INTO cda<span class="token punctuation">.</span>system_dictionary_bk SELECT NEW<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>TG_OP<span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span>&#39;&#39;<span class="token punctuation">;</span>
            <span class="token class-name">RETURN</span> NEW<span class="token punctuation">;</span>
        <span class="token class-name">END</span> IF<span class="token punctuation">;</span>
        <span class="token class-name">RETURN</span> NULL<span class="token punctuation">;</span> <span class="token operator">--</span> 因为这是一个 AFTER 触发器，结果被忽略
    END<span class="token punctuation">;</span>
$system_dictionary_bk$ <span class="token class-name">LANGUAGE</span> plpgsql<span class="token punctuation">;</span>

<span class="token operator">--</span>表关联触发器（只需更新system_dictionary_bk表名即可）
CREATE TRIGGER system_dictionary_audit
AFTER INSERT OR UPDATE OR DELETE ON cda<span class="token punctuation">.</span>system_dictionary
    FOR EACH ROW EXECUTE <span class="token return-type class-name">PROCEDURE</span> cda<span class="token punctuation">.</span><span class="token function">system_dictionary_log_audit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h3><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code> 
<span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">OR</span> REPLACE<span class="token punctuation">]</span> <span class="token keyword">FUNCTION</span> function_name <span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>   
RETURNS return_datatype <span class="token keyword">AS</span> $variable_name$  
  <span class="token keyword">DECLARE</span>  
    declaration<span class="token punctuation">;</span>  
    <span class="token punctuation">[</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  
  <span class="token keyword">BEGIN</span>  
    <span class="token operator">&lt;</span> function_body <span class="token comment">-- 函数逻辑 &gt;  </span>
    <span class="token punctuation">[</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  
    <span class="token keyword">RETURN</span> { variable_name | <span class="token keyword">value</span> }  
  <span class="token keyword">END</span><span class="token punctuation">;</span> 
  <span class="token keyword">LANGUAGE</span> plpgsql<span class="token punctuation">;</span>
<span class="token comment">---------------------------------------------------------</span>
<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> function_name<span class="token punctuation">(</span>p1 <span class="token keyword">type</span><span class="token punctuation">,</span> p2 <span class="token keyword">type</span><span class="token punctuation">)</span>
 RETURNS <span class="token keyword">type</span> <span class="token keyword">AS</span>
<span class="token keyword">BEGIN</span>
 <span class="token comment">-- 函数逻辑</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>
<span class="token keyword">LANGUAGE</span> language_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建简单函数例子</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">CREATE</span> <span class="token keyword">OR</span> REPLACE <span class="token keyword">FUNCTION</span> <span class="token keyword">add</span><span class="token punctuation">(</span><span class="token keyword">a</span> INTEGER<span class="token punctuation">,</span> b NUMERIC<span class="token punctuation">)</span>
RETURNS NUMERIC <span class="token keyword">AS</span> $$
	<span class="token keyword">SELECT</span> <span class="token keyword">a</span><span class="token operator">+</span>b<span class="token punctuation">;</span>
$$
<span class="token keyword">LANGUAGE</span> <span class="token keyword">SQL</span><span class="token punctuation">;</span>

<span class="token comment">-- 调用方法</span>
<span class="token keyword">select</span>  <span class="token keyword">public</span><span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="导入导出" tabindex="-1"><a class="header-anchor" href="#导入导出"><span>导入导出</span></a></h2><p>在pg_dump.exe/psql.exe的目录下执行该SQL</p><h3 id="导出脚本" tabindex="-1"><a class="header-anchor" href="#导出脚本"><span>导出脚本</span></a></h3><p>执行下面脚本并输入口令操作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 仅架构</span>
<span class="token comment"># pg_dump -h your_host -p your_port -U your_username -d your_database -f dump.sql</span>

<span class="token comment"># 从本地localhost库中将数据名字为sample数据库表结构导出</span>
.<span class="token punctuation">\\</span>pg_dump <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> sample <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>sample.sql
<span class="token comment"># 从本地localhost库中将数据名字为sample数据库表结构+表数据导出</span>
.<span class="token punctuation">\\</span>pg_dump <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> sample <span class="token parameter variable">-a</span> <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>sample2.sql

<span class="token comment"># 导出特定表的数据</span>
<span class="token comment"># pg_dump -h your_host -p your_port -U your_username -d your_database -t specific_table -a -f data_dump.sql</span>
.<span class="token punctuation">\\</span>pg_dump <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-t</span> schema_01.users <span class="token parameter variable">-a</span> <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>table_data_dump.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>-h：ip -p：端口号 -U：使用指定用户名进行数据库备份</p><p>-b：在备份文件中包含创建数据库对象（如表、索引等）的 SQL 语句。</p><p>-d：数据库名称</p><p>-Fp：指定备份文件的格式为plain，即普通文本格式</p><p>-F d：目录格式，将每个表的数据存储在单独的文件中</p><p>-F c：表示使用自定义格式，这通常是在处理大型数据库时推荐的选项</p><p>-f 保存路径 -a 导出表的数据 -t：指定要备份的表名，不指定备份整个数据库</p><p>-f：指定备份文件的输出路径</p><p>-v：启用详细模式，显示有关转储过程的详细信息</p><p>-O：排除与所有者相关的命令，如 ALTER OWNER。如果你想将转储恢复到不同的数据库，这很有用</p><p>-n：指定要导出的schema</p><p>-s：用于导出数据库的结构信息，而不包括数据内容</p></blockquote><h3 id="导入脚本" tabindex="-1"><a class="header-anchor" href="#导入脚本"><span>导入脚本</span></a></h3><p>执行下面脚本并输入口令操作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 执行sql导入到指定数据库</span>
<span class="token comment"># pg_dump -h your_host -p your_port -U your_username -d your_database -f dump.sql</span>

<span class="token comment"># 将上面sample库的内容导入到sample2库中</span>
.<span class="token punctuation">\\</span>psql <span class="token parameter variable">-h</span> localhost <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>table_data_dump.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>-d 数据库名 -h ip地址 -p 端口号 -U 数据库用户名 -f sql文件路径</p></blockquote><h3 id="汇总" tabindex="-1"><a class="header-anchor" href="#汇总"><span>汇总</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 导出整个库(带数据)导入的信息</span>
.<span class="token punctuation">\\</span>pg_dump <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> cdr_05 <span class="token parameter variable">-v</span> <span class="token parameter variable">-O</span> <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql
.<span class="token punctuation">\\</span>psql <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> 0112 <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql

<span class="token comment"># 导出整个库结构并导入</span>
.<span class="token punctuation">\\</span>pg_dump <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> cdr_05 <span class="token parameter variable">-s</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-O</span> <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql
.<span class="token punctuation">\\</span>psql <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> 0112 <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql

<span class="token comment"># 导出指定schema 并导入</span>
.<span class="token punctuation">\\</span>pg_dump <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> cdr_05 <span class="token parameter variable">-n</span> cr <span class="token parameter variable">-v</span> <span class="token parameter variable">-O</span> <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql
.<span class="token punctuation">\\</span>psql <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> 0112 <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql

<span class="token comment"># 导出指定表 并导入</span>
.<span class="token punctuation">\\</span>pg_dump <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> cdr_05 <span class="token parameter variable">-t</span> schema_01.users <span class="token parameter variable">-v</span> <span class="token parameter variable">-O</span> <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql
.<span class="token punctuation">\\</span>psql <span class="token parameter variable">-h</span> <span class="token number">172.16</span>.70.54 <span class="token parameter variable">-p</span> <span class="token number">5432</span> <span class="token parameter variable">-U</span> postgres <span class="token parameter variable">-d</span> 0112 <span class="token parameter variable">-f</span> d:<span class="token punctuation">\\</span>temp<span class="token punctuation">\\</span>cdr.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,73);function _(y,w){const e=l("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[n("li",null,[s("使用 "),n("a",d,[s("COPY BINARY"),t(e)]),s("执行批量添加操作")])]),u,n("ul",null,[n("li",null,[s("使用"),n("a",k,[s("ON CONFLICT "),t(e)]),s(" 进行添加冲突后进行更新")]),m,v]),b,n("p",null,[s("pg_bigm文档："),n("a",h,[s("http://pgbigm.osdn.jp/pg_bigm_en-1-2.html"),t(e)])]),g])}const q=p(i,[["render",_],["__file","jichuzhishi.html.vue"]]),T=JSON.parse('{"path":"/dataBase/postgresql/jichuzhishi.html","title":"基础知识","lang":"zh-CN","frontmatter":{"title":"基础知识","lang":"zh-CN","date":"2023-09-01T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["base"],"description":"提示 遇到数据库关键字需要加双引号，比如select \\"model_id\\" from meta_data.model 基本操作 登录 psql命令连接方式 docker连接 linux连接 windows连接 程序连接 用户 数据库等操作 数据库 获取数据库下所有表分区 时区 Schema psql命令 表 获取表结构信息 使用psql命令获取 创建表...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/postgresql/jichuzhishi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"基础知识"}],["meta",{"property":"og:description","content":"提示 遇到数据库关键字需要加双引号，比如select \\"model_id\\" from meta_data.model 基本操作 登录 psql命令连接方式 docker连接 linux连接 windows连接 程序连接 用户 数据库等操作 数据库 获取数据库下所有表分区 时区 Schema psql命令 表 获取表结构信息 使用psql命令获取 创建表..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T16:44:51.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"base"}],["meta",{"property":"article:published_time","content":"2023-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-23T16:44:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础知识\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-23T16:44:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[{"level":3,"title":"登录","slug":"登录","link":"#登录","children":[]},{"level":3,"title":"程序连接","slug":"程序连接","link":"#程序连接","children":[]},{"level":3,"title":"用户","slug":"用户","link":"#用户","children":[]}]},{"level":2,"title":"数据库等操作","slug":"数据库等操作","link":"#数据库等操作","children":[{"level":3,"title":"数据库","slug":"数据库","link":"#数据库","children":[{"level":4,"title":"获取数据库下所有表分区","slug":"获取数据库下所有表分区","link":"#获取数据库下所有表分区","children":[]},{"level":4,"title":"时区","slug":"时区","link":"#时区","children":[]}]},{"level":3,"title":"Schema","slug":"schema","link":"#schema","children":[]},{"level":3,"title":"表","slug":"表","link":"#表","children":[{"level":4,"title":"获取表结构信息","slug":"获取表结构信息","link":"#获取表结构信息","children":[]},{"level":4,"title":"创建表","slug":"创建表","link":"#创建表","children":[]},{"level":4,"title":"添加列","slug":"添加列","link":"#添加列","children":[]},{"level":4,"title":"添加数据","slug":"添加数据","link":"#添加数据","children":[]},{"level":4,"title":"批量添加数据","slug":"批量添加数据","link":"#批量添加数据","children":[]},{"level":4,"title":"更新数据","slug":"更新数据","link":"#更新数据","children":[]},{"level":4,"title":"批量更新","slug":"批量更新","link":"#批量更新","children":[]},{"level":4,"title":"删除数据","slug":"删除数据","link":"#删除数据","children":[]},{"level":4,"title":"序列","slug":"序列","link":"#序列","children":[{"level":5,"title":"提前获取序列值","slug":"提前获取序列值","link":"#提前获取序列值","children":[]}]},{"level":4,"title":"索引","slug":"索引","link":"#索引","children":[]},{"level":4,"title":"约束","slug":"约束","link":"#约束","children":[]}]}]},{"level":2,"title":"系统表操作","slug":"系统表操作","link":"#系统表操作","children":[{"level":3,"title":"监控程序活动","slug":"监控程序活动","link":"#监控程序活动","children":[]},{"level":3,"title":"获取表分区下表","slug":"获取表分区下表","link":"#获取表分区下表","children":[]},{"level":3,"title":"查询指定表备注","slug":"查询指定表备注","link":"#查询指定表备注","children":[]},{"level":3,"title":"结构查询","slug":"结构查询","link":"#结构查询","children":[]},{"level":3,"title":"获取表结构信息","slug":"获取表结构信息-1","link":"#获取表结构信息-1","children":[]},{"level":3,"title":"磁盘统计","slug":"磁盘统计","link":"#磁盘统计","children":[]}]},{"level":2,"title":"进阶","slug":"进阶","link":"#进阶","children":[{"level":3,"title":"视图","slug":"视图","link":"#视图","children":[]},{"level":3,"title":"临时表","slug":"临时表","link":"#临时表","children":[]},{"level":3,"title":"触发器","slug":"触发器","link":"#触发器","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]}]},{"level":2,"title":"导入导出","slug":"导入导出","link":"#导入导出","children":[{"level":3,"title":"导出脚本","slug":"导出脚本","link":"#导出脚本","children":[]},{"level":3,"title":"导入脚本","slug":"导入脚本","link":"#导入脚本","children":[]},{"level":3,"title":"汇总","slug":"汇总","link":"#汇总","children":[]}]}],"git":{"createdTime":1695484404000,"updatedTime":1711212291000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":9},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":9}]},"readingTime":{"minutes":14.67,"words":4400},"filePathRelative":"dataBase/postgresql/jichuzhishi.md","localizedDate":"2023年9月1日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>遇到数据库关键字需要加双引号，比如select \\"model_id\\" from meta_data.model</p>\\n</div>\\n<h2>基本操作</h2>\\n<h3>登录</h3>\\n<p>psql命令连接方式</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\">## 方式一</span>\\npsql postgres://username:password@host:port/dbname\\n<span class=\\"token comment\\">## username：连接数据的用户名，默认值是postgres</span>\\n<span class=\\"token comment\\">## password：密码，默认值是postgres</span>\\n<span class=\\"token comment\\">## host：主机名，默认值是localhost</span>\\n<span class=\\"token comment\\">## port：端口，默认值是5432</span>\\n<span class=\\"token comment\\">## dbname：要连接的数据库名，默认值是postgres</span>\\n\\n<span class=\\"token comment\\">## 方式二</span>\\npsql <span class=\\"token parameter variable\\">-U</span> username <span class=\\"token parameter variable\\">-h</span> <span class=\\"token function\\">hostname</span> <span class=\\"token parameter variable\\">-p</span> port <span class=\\"token parameter variable\\">-d</span> dbname\\n<span class=\\"token comment\\">## -U username 用户名，默认值postgres</span>\\n<span class=\\"token comment\\">## -h hostname 主机名，默认值localhost</span>\\n<span class=\\"token comment\\">## -p port 端口号，默认值5432</span>\\n<span class=\\"token comment\\">## -d dbname 要连接的数据库名，默认值postgres</span>\\n</code></pre></div>","autoDesc":true}');export{q as comp,T as data};
