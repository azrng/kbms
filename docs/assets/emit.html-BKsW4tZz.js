import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as s,e as n,f as t,d as l}from"./app-D8HBJYTp.js";const i={},u=l(`<h2 id="简述" tabindex="-1"><a class="header-anchor" href="#简述"><span>简述</span></a></h2><p>Emit则可以在运行时动态生成代码。 一个程序集的层级：方法=&gt;类型=&gt;模块=&gt;程序集</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><blockquote><p>.net fw项目，可以实现程序集的运行和保存，但是.Net Core的就只能运行了</p></blockquote><h3 id="动态生成代码输出" tabindex="-1"><a class="header-anchor" href="#动态生成代码输出"><span>动态生成代码输出</span></a></h3><p>通过构建程序集等动态生成一个方法，然后通过反射执行方法然后输出信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//方法=&gt;类型=&gt;模块=&gt;程序集</span>

<span class="token comment">//定义程序集名称</span>
<span class="token class-name"><span class="token keyword">var</span></span> _assemblyName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssemblyName</span><span class="token punctuation">(</span><span class="token string">&quot;DynamicAssemblyDemo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个程序集构建器</span>
<span class="token comment">// Framework 也可以这样：AppDomain.CurrentDomain.DefineDynamicAssembly</span>
<span class="token class-name">AssemblyBuilder</span> ab <span class="token operator">=</span> AssemblyBuilder<span class="token punctuation">.</span><span class="token function">DefineDynamicAssembly</span><span class="token punctuation">(</span>_assemblyName<span class="token punctuation">,</span> AssemblyBuilderAccess<span class="token punctuation">.</span>Run<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用程序集构建器创建一个模块构建器</span>
<span class="token class-name">ModuleBuilder</span> mb <span class="token operator">=</span> ab<span class="token punctuation">.</span><span class="token function">DefineDynamicModule</span><span class="token punctuation">(</span>_assemblyName<span class="token punctuation">.</span>Name<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用模块构建器创建一个类型构建器</span>
<span class="token class-name">TypeBuilder</span> tb <span class="token operator">=</span> mb<span class="token punctuation">.</span><span class="token function">DefineType</span><span class="token punctuation">(</span><span class="token string">&quot;DynamicConsole&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使类型实现IConsole接口</span>
tb<span class="token punctuation">.</span><span class="token function">AddInterfaceImplementation</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IConsole</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> attrs <span class="token operator">=</span> MethodAttributes<span class="token punctuation">.</span>Public <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>Virtual <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>NewSlot <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>HideBySig <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>Final<span class="token punctuation">;</span>

<span class="token comment">// 使用类型构建器创建一个方法构建器</span>
<span class="token class-name">MethodBuilder</span> methodBuilder <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">DefineMethod</span><span class="token punctuation">(</span><span class="token string">&quot;Say&quot;</span><span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">void</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过方法构建器获取一个MSIL生成器</span>
<span class="token class-name"><span class="token keyword">var</span></span> IL <span class="token operator">=</span> methodBuilder<span class="token punctuation">.</span><span class="token function">GetILGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 开始编写方法的执行逻辑</span>

<span class="token comment">// 将一个字符串压入栈顶</span>
IL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ldstr<span class="token punctuation">,</span> <span class="token string">&quot;I&#39;m here.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用Console.Writeline函数</span>
IL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Call<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Console</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;WriteLine&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 退出函数</span>
IL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//方法结束</span>

<span class="token comment">// 从类型构建器中创建出类型</span>
<span class="token class-name"><span class="token keyword">var</span></span> dynamicType <span class="token operator">=</span> tb<span class="token punctuation">.</span><span class="token function">CreateType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//ab.Save(aName.Name + &quot;.dll&quot;);</span>
<span class="token comment">// 通过反射创建出动态类型的实例</span>
<span class="token class-name"><span class="token keyword">var</span></span> console <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>dynamicType<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">IConsole</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//ab.Save(&quot;DynamicAssemblyExample.dll&quot;);</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;不错，完成了任务!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 输出</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IConsole</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 说</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,8),k={href:"https://docs.microsoft.com/zh-cn/dotnet/api/system.reflection.emit.ilgenerator.emit?view=net-6.0",target:"_blank",rel:"noopener noreferrer"},r={href:"https://mp.weixin.qq.com/s/xF1LNon-4P0Xwar-Bd7C4Q",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/V7Zuea53ykJXuVu95u2wgA",target:"_blank",rel:"noopener noreferrer"},d={href:"https://mp.weixin.qq.com/s/doi6fGLcZzUBex7VCxiw7w",target:"_blank",rel:"noopener noreferrer"};function v(y,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("emit资料："),s("a",k,[n("https://docs.microsoft.com/zh-cn/dotnet/api/system.reflection.emit.ilgenerator.emit?view=net-6.0"),t(a)]),s("a",r,[n("https://mp.weixin.qq.com/s/xF1LNon-4P0Xwar-Bd7C4Q"),t(a)]),n(" | .Net IL Emit 实现Aop面向切面之动态代理 案例版 "),s("a",m,[n("https://mp.weixin.qq.com/s/V7Zuea53ykJXuVu95u2wgA"),t(a)]),n(" ：动态生成代码 "),s("a",d,[n("https://mp.weixin.qq.com/s/doi6fGLcZzUBex7VCxiw7w"),t(a)]),n(" | .NET高级特性-Emit")])])}const f=e(i,[["render",v],["__file","emit.html.vue"]]),w=JSON.parse(`{"path":"/dotnet/csharp/emit.html","title":"Emit","lang":"zh-CN","frontmatter":{"title":"Emit","lang":"zh-CN","date":"2023-11-09T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"emit","slug":"lzm5v4","docsId":"83786361","description":"简述 Emit则可以在运行时动态生成代码。 一个程序集的层级：方法=>类型=>模块=>程序集 操作 .net fw项目，可以实现程序集的运行和保存，但是.Net Core的就只能运行了 动态生成代码输出 通过构建程序集等动态生成一个方法，然后通过反射执行方法然后输出信息 资料 emit资料：https://docs.microsoft.com/zh-c...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/emit.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Emit"}],["meta",{"property":"og:description","content":"简述 Emit则可以在运行时动态生成代码。 一个程序集的层级：方法=>类型=>模块=>程序集 操作 .net fw项目，可以实现程序集的运行和保存，但是.Net Core的就只能运行了 动态生成代码输出 通过构建程序集等动态生成一个方法，然后通过反射执行方法然后输出信息 资料 emit资料：https://docs.microsoft.com/zh-c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-11-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Emit\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"简述","slug":"简述","link":"#简述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"动态生成代码输出","slug":"动态生成代码输出","link":"#动态生成代码输出","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.57,"words":470},"filePathRelative":"dotnet/csharp/emit.md","localizedDate":"2023年11月9日","excerpt":"<h2>简述</h2>\\n<p>Emit则可以在运行时动态生成代码。\\n一个程序集的层级：方法=&gt;类型=&gt;模块=&gt;程序集</p>\\n<h2>操作</h2>\\n<blockquote>\\n<p>.net&nbsp;fw项目，可以实现程序集的运行和保存，但是.Net&nbsp;Core的就只能运行了</p>\\n</blockquote>\\n<h3>动态生成代码输出</h3>\\n<p>通过构建程序集等动态生成一个方法，然后通过反射执行方法然后输出信息</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token comment\\">//方法=&gt;类型=&gt;模块=&gt;程序集</span>\\n\\n<span class=\\"token comment\\">//定义程序集名称</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> _assemblyName <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">AssemblyName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DynamicAssemblyDemo\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 创建一个程序集构建器</span>\\n<span class=\\"token comment\\">// Framework 也可以这样：AppDomain.CurrentDomain.DefineDynamicAssembly</span>\\n<span class=\\"token class-name\\">AssemblyBuilder</span> ab <span class=\\"token operator\\">=</span> AssemblyBuilder<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DefineDynamicAssembly</span><span class=\\"token punctuation\\">(</span>_assemblyName<span class=\\"token punctuation\\">,</span> AssemblyBuilderAccess<span class=\\"token punctuation\\">.</span>Run<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 使用程序集构建器创建一个模块构建器</span>\\n<span class=\\"token class-name\\">ModuleBuilder</span> mb <span class=\\"token operator\\">=</span> ab<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DefineDynamicModule</span><span class=\\"token punctuation\\">(</span>_assemblyName<span class=\\"token punctuation\\">.</span>Name<span class=\\"token operator\\">!</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 使用模块构建器创建一个类型构建器</span>\\n<span class=\\"token class-name\\">TypeBuilder</span> tb <span class=\\"token operator\\">=</span> mb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DefineType</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"DynamicConsole\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 使类型实现IConsole接口</span>\\ntb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddInterfaceImplementation</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">IConsole</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> attrs <span class=\\"token operator\\">=</span> MethodAttributes<span class=\\"token punctuation\\">.</span>Public <span class=\\"token operator\\">|</span> MethodAttributes<span class=\\"token punctuation\\">.</span>Virtual <span class=\\"token operator\\">|</span> MethodAttributes<span class=\\"token punctuation\\">.</span>NewSlot <span class=\\"token operator\\">|</span> MethodAttributes<span class=\\"token punctuation\\">.</span>HideBySig <span class=\\"token operator\\">|</span> MethodAttributes<span class=\\"token punctuation\\">.</span>Final<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 使用类型构建器创建一个方法构建器</span>\\n<span class=\\"token class-name\\">MethodBuilder</span> methodBuilder <span class=\\"token operator\\">=</span> tb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DefineMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Say\\"</span><span class=\\"token punctuation\\">,</span> attrs<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\"><span class=\\"token keyword\\">void</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> Type<span class=\\"token punctuation\\">.</span>EmptyTypes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 通过方法构建器获取一个MSIL生成器</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> IL <span class=\\"token operator\\">=</span> methodBuilder<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetILGenerator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 开始编写方法的执行逻辑</span>\\n\\n<span class=\\"token comment\\">// 将一个字符串压入栈顶</span>\\nIL<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Emit</span><span class=\\"token punctuation\\">(</span>OpCodes<span class=\\"token punctuation\\">.</span>Ldstr<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"I'm here.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 调用Console.Writeline函数</span>\\nIL<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Emit</span><span class=\\"token punctuation\\">(</span>OpCodes<span class=\\"token punctuation\\">.</span>Call<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">Console</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"WriteLine\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\"><span class=\\"token keyword\\">string</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 退出函数</span>\\nIL<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Emit</span><span class=\\"token punctuation\\">(</span>OpCodes<span class=\\"token punctuation\\">.</span>Ret<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//方法结束</span>\\n\\n<span class=\\"token comment\\">// 从类型构建器中创建出类型</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> dynamicType <span class=\\"token operator\\">=</span> tb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">//ab.Save(aName.Name + \\".dll\\");</span>\\n<span class=\\"token comment\\">// 通过反射创建出动态类型的实例</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> console <span class=\\"token operator\\">=</span> Activator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateInstance</span><span class=\\"token punctuation\\">(</span>dynamicType<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> <span class=\\"token class-name\\">IConsole</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Say</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//ab.Save(\\"DynamicAssemblyExample.dll\\");</span>\\n\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"不错，完成了任务!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token doc-comment comment\\">/// 输出</span>\\n<span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">IConsole</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token doc-comment comment\\">/// 说</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Say</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{f as comp,w as data};
