import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,e}from"./app-vSdX8vi3.js";const i="/kbms/common/1631198779014-d0acb9fa-4253-4c31-ae04-f0258d34ad6b.png",r="/kbms/common/1631200587824-4cbe63e5-95d1-49df-a268-a8eab8218fc6.png",u="/kbms/common/1631200720902-b295068a-57d5-41e8-a633-d54e8937835b.png",d="/kbms/common/1631200834118-e6cce9cc-c041-4984-80fc-e96c98cc570e.png",k="/kbms/common/1631200909276-dea3e78e-1057-48e7-8eec-a19d14cee2f6.png",m="/kbms/common/1631201043068-356800d8-f4ab-4da5-887f-7fbe492e0285.png",v="/kbms/common/1631201089700-1e63df37-09c4-47fa-98d8-5ec64d480acc.png",g={},b=e('<blockquote><p>最近更新时间：2021年12月24日 17:01:19</p></blockquote><p>最近在工作中，需要同时放出来WebAPI接口和支持Soap协议的WebService接口，在dotNetFramework时候玩过WebService，这可是好久没再碰过了，没想到现在居然遇到了。只好迎难而上。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>本来是在ASP.NetCore中使用了组件SoapCore来使用Soap协议。 支持以下框架：</p><ul><li>.NET 5.0（使用 ASP.NET Core 5.0）</li><li>.NET Core 3.1（使用 ASP.NET Core 3.1）</li><li>.NET Core 2.1（使用 ASP.NET Core 2.1）</li><li>.NET Standard 2.0（使用 ASP.NET Core 2.1）</li></ul>',5),h={href:"https://github.com/DigDes/SoapCore",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#操作"},[n("span",null,"操作")])],-1),w=n("h3",{id:"准备工作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#准备工作"},[n("span",null,"准备工作")])],-1),C=n("blockquote",null,[n("p",null,"本文示例环境：vs2022、.Net5")],-1),S={href:"https://gitee.com/AZRNG/my-example",target:"_blank",rel:"noopener noreferrer"},f=n("img",{src:i,alt:"image.png",loading:"lazy"},null,-1),_=e(`<h3 id="开始编写接口" tabindex="-1"><a class="header-anchor" href="#开始编写接口"><span>开始编写接口</span></a></h3><p>环境：dotnet5.0 + SoapCore 1.1.0.10 安装组件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>PackageReference <span class="token assign-left variable">Include</span><span class="token operator">=</span><span class="token string">&quot;SoapCore&quot;</span> <span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token string">&quot;1.1.0.10&quot;</span> /<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ConfigureServices中注入SoapCore</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>services.AddSoapCore<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新建User WebService</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// User WebService</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>ServiceContract<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContractImpl</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IUserService</span> _userService<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMapper</span> _mapper<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">UserContractImpl</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span> userService<span class="token punctuation">,</span>
        <span class="token class-name">IMapper</span> mapper<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>
        _mapper <span class="token operator">=</span> mapper<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 查询用户列表</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>OperationContract<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> _userService<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 查询详情</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>OperationContract<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> <span class="token function">GetDetailsAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> _userService<span class="token punctuation">.</span><span class="token function">GetDetailsAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 添加</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>OperationContract<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token class-name">AddUserVm</span> dto<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> _userService<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 删除</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span>OperationContract<span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">DeleteAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span>  <span class="token keyword">await</span> _userService<span class="token punctuation">.</span><span class="token function">DeleteAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ConfigureServices中注入</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>services.AddTransient<span class="token operator">&lt;</span>UserContractImpl<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Configure中配置终结点路由</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>app.UseEndpoints<span class="token punctuation">(</span>endpoints <span class="token operator">=</span><span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
    endpoints.MapControllers<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    var binging <span class="token operator">=</span> new BasicHttpBinding<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    binging.ReaderQuotas.MaxStringContentLength <span class="token operator">=</span> int.MaxValue<span class="token punctuation">;</span>
    endpoints.UseSoapEndpoint<span class="token operator">&lt;</span>UserContractImpl<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&quot;/UserContractImpl.asmx&quot;</span>, binging, SoapSerializer.DataContractSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),A={href:"http://localhost:5000/UserContractImpl.asmx",target:"_blank",rel:"noopener noreferrer"},x=n("img",{src:r,alt:"image.png",loading:"lazy"},null,-1),I=e('<h3 id="webapi程序客户端" tabindex="-1"><a class="header-anchor" href="#webapi程序客户端"><span>WebApi程序客户端</span></a></h3><p>新建dotnet5.0项目 <img src="'+u+'" alt="image.png" loading="lazy"> 选中项目右键=&gt;添加=&gt;服务引用=&gt;WCF Web Service <img src="'+d+'" alt="image.png" loading="lazy"> 输入url，点击go出来服务 <img src="'+k+'" alt="image.png" loading="lazy"> 下一步 <img src="'+m+'" alt="image.png" loading="lazy"> 最后一直下一步直到完成 <img src="'+v+`" alt="image.png" loading="lazy"> 这个时候vs已经帮我们生成了调用的方法，后期地址有变动可以直接去修改这个代码。 ConfigureServices中注册</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserContractImpl<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserContractImplClient</span><span class="token punctuation">(</span>UserContractImplClient<span class="token punctuation">.</span>EndpointConfiguration<span class="token punctuation">.</span>BasicHttpBinding<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：UserContractImpl就是你上面添加服务引用点击go的时候出来的名字。UserContractImplClient就是前面的名字加上Client</p></blockquote><p>控制器注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">UseService<span class="token punctuation">.</span>UserContractImpl</span> _userContractImpl<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token function">HomeController</span><span class="token punctuation">(</span> <span class="token class-name">UseService<span class="token punctuation">.</span>UserContractImpl</span> userContractImpl<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _userContractImpl <span class="token operator">=</span> userContractImpl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用里面的接口</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _userContractImpl<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UseService<span class="token punctuation">.</span>AddUserVm</span>
<span class="token punctuation">{</span>
    Account <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span>
    PassWord <span class="token operator">=</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span>
    Sex <span class="token operator">=</span> UseService<span class="token punctuation">.</span>SexEnum<span class="token punctuation">.</span>Man
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> _userContractImpl<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过先调用添加接口然后调用查询接口可以查询到我们刚才添加到的数据。</p><h3 id="控制台程序" tabindex="-1"><a class="header-anchor" href="#控制台程序"><span>控制台程序</span></a></h3><p>像上面一样将Soap服务引用到项目中 事例一：直接构建UserContractImplClient</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserContractImplClient</span><span class="token punctuation">(</span>UserContractImplClient<span class="token punctuation">.</span>EndpointConfiguration<span class="token punctuation">.</span>BasicHttpBinding<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddUserVm</span>
<span class="token punctuation">{</span>
    Account <span class="token operator">=</span> <span class="token string">&quot;23456&quot;</span><span class="token punctuation">,</span>
    PassWord <span class="token operator">=</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span>
    Sex <span class="token operator">=</span> SexEnum<span class="token punctuation">.</span>Noknow
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事例二：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 创建 HTTP 绑定对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BasicHttpBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 根据 WebService 的 URL 构建终端点对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> endpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EndpointAddress</span><span class="token punctuation">(</span><span class="token string">@&quot;http://localhost:5000/UserContractImpl.asmx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建调用接口的工厂，注意这里泛型只能传入接口</span>
<span class="token class-name"><span class="token keyword">var</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChannelFactory<span class="token punctuation">&lt;</span>UserContractImplChannel<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>binding<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从工厂获取具体的调用实例</span>
<span class="token class-name"><span class="token keyword">var</span></span> callClient <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用具体的方法，这里是 GetListAsync 方法。</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> callClient<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>涉及到自定义绑定的接口，设置自定义请求版本等</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 创建 HTTP 绑定对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextMessageEncodingBindingElement</span>
<span class="token punctuation">{</span>
    <span class="token comment">//默认消息版本是1.2,要调用的也是1.2所以这里可以直接注释</span>
    <span class="token comment">// MessageVersion = MessageVersion.Soap12WSAddressing10</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpTransportBindingElement</span>
<span class="token punctuation">{</span>
    <span class="token comment">//认证模式</span>
    AuthenticationScheme <span class="token operator">=</span> AuthenticationSchemes<span class="token punctuation">.</span>Anonymous<span class="token punctuation">,</span>
    MaxReceivedMessageSize <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据 WebService 的 URL 构建终端点对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> endpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EndpointAddress</span><span class="token punctuation">(</span><span class="token string">@&quot;xxxxxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建调用接口的工厂，注意这里泛型只能传入接口</span>
<span class="token class-name"><span class="token keyword">var</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChannelFactory<span class="token punctuation">&lt;</span>ServiceReference1<span class="token punctuation">.</span>DocumentV2ServiceChannel<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>binding<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 从工厂获取具体的调用实例</span>
<span class="token class-name"><span class="token keyword">var</span></span> callClient <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 调用具体的方法，这里是 HIPMessageServerAsync 方法。</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> callClient<span class="token punctuation">.</span><span class="token function">HIPMessageServerAsync</span><span class="token punctuation">(</span><span class="token string">&quot;DocumentRetrieve&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,17),q={href:"https://github.com/DigDes/SoapCore",target:"_blank",rel:"noopener noreferrer"};function T(N,U){const a=o("ExternalLinkIcon");return c(),l("div",null,[b,n("blockquote",null,[n("p",null,[s("官网："),n("a",h,[s("https://github.com/DigDes/SoapCore"),t(a)])])]),y,w,C,n("p",null,[s("为了省事，我还在之前的文章demo上面操作，地址是："),n("a",S,[s("https://gitee.com/AZRNG/my-example"),t(a)]),s(" ，分支是：inmemory_soap ，当前项目已经包含一些WebAPI接口，我要实现使用Soap协议也放出这些接口，共用UserService类。 "),f]),_,n("p",null,[s("访问地址："),n("a",A,[s("http://localhost:5000/UserContractImpl.asmx"),t(a)]),x]),I,n("p",null,[n("a",q,[s("https://github.com/DigDes/SoapCore"),t(a)])])])}const P=p(g,[["render",T],["__file","dotnetzhisoapcorejianchanshiyong.html.vue"]]),W=JSON.parse('{"path":"/dotnet/api/webservice/dotnetzhisoapcorejianchanshiyong.html","title":"dotnet之SoapCore简单使用","lang":"zh-CN","frontmatter":{"title":"dotnet之SoapCore简单使用","lang":"zh-CN","date":"2023-07-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"dotnetzhisoapcorejianchanshiyong","slug":"qmroas","docsId":"53041047","description":"最近更新时间：2021年12月24日 17:01:19 最近在工作中，需要同时放出来WebAPI接口和支持Soap协议的WebService接口，在dotNetFramework时候玩过WebService，这可是好久没再碰过了，没想到现在居然遇到了。只好迎难而上。 介绍 本来是在ASP.NetCore中使用了组件SoapCore来使用Soap协议。 ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/webservice/dotnetzhisoapcorejianchanshiyong.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"dotnet之SoapCore简单使用"}],["meta",{"property":"og:description","content":"最近更新时间：2021年12月24日 17:01:19 最近在工作中，需要同时放出来WebAPI接口和支持Soap协议的WebService接口，在dotNetFramework时候玩过WebService，这可是好久没再碰过了，没想到现在居然遇到了。只好迎难而上。 介绍 本来是在ASP.NetCore中使用了组件SoapCore来使用Soap协议。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1631198779014-d0acb9fa-4253-4c31-ae04-f0258d34ad6b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dotnet之SoapCore简单使用\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1631198779014-d0acb9fa-4253-4c31-ae04-f0258d34ad6b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631200587824-4cbe63e5-95d1-49df-a268-a8eab8218fc6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631200720902-b295068a-57d5-41e8-a633-d54e8937835b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631200834118-e6cce9cc-c041-4984-80fc-e96c98cc570e.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631200909276-dea3e78e-1057-48e7-8eec-a19d14cee2f6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631201043068-356800d8-f4ab-4da5-887f-7fbe492e0285.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1631201089700-1e63df37-09c4-47fa-98d8-5ec64d480acc.png\\"],\\"datePublished\\":\\"2023-07-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"准备工作","slug":"准备工作","link":"#准备工作","children":[]},{"level":3,"title":"开始编写接口","slug":"开始编写接口","link":"#开始编写接口","children":[]},{"level":3,"title":"WebApi程序客户端","slug":"webapi程序客户端","link":"#webapi程序客户端","children":[]},{"level":3,"title":"控制台程序","slug":"控制台程序","link":"#控制台程序","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.41,"words":1023},"filePathRelative":"dotnet/api/webservice/dotnetzhisoapcorejianchanshiyong.md","localizedDate":"2023年7月5日","excerpt":"<blockquote>\\n<p>最近更新时间：2021年12月24日 17:01:19</p>\\n</blockquote>\\n<p>最近在工作中，需要同时放出来WebAPI接口和支持Soap协议的WebService接口，在dotNetFramework时候玩过WebService，这可是好久没再碰过了，没想到现在居然遇到了。只好迎难而上。</p>\\n<h2>介绍</h2>\\n<p>本来是在ASP.NetCore中使用了组件SoapCore来使用Soap协议。\\n支持以下框架：</p>\\n<ul>\\n<li>.NET 5.0（使用 ASP.NET Core 5.0）</li>\\n<li>.NET Core 3.1（使用 ASP.NET Core 3.1）</li>\\n<li>.NET Core 2.1（使用 ASP.NET Core 2.1）</li>\\n<li>.NET Standard 2.0（使用 ASP.NET Core 2.1）</li>\\n</ul>","autoDesc":true}');export{P as comp,W as data};
