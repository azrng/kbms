import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as d,c as s,a as t,d as e,e as r,b as n}from"./app-qB9_Bjjp.js";const h={},o=n('<h2 id="测试类型" tabindex="-1"><a class="header-anchor" href="#测试类型"><span>测试类型</span></a></h2><ul><li>单元测试 <ul><li>范围：是一种针对代码中最小功能单元进行的测试，通常是一个方法或者一个类的某个特定功能，目的是验证这个最小单元的功能是否正常</li><li>独立性：单元测试通常是以隔离的环境进行的，不依赖其他组件、服务或系统(包括与数据库、文件系统和网络资源的交互)，通过模拟或者替换依赖项来实现独立性</li><li>快速执行：因为测试的范围小且独立性强，因此它们通常执行速度非常快</li><li>侧重于验证代码内部逻辑的正确性和稳定性</li></ul></li><li>集成测试 <ul><li>范围：用于验证多个组件或者模块之间的交互和协作的测试，目的是确保不同的组件在整合的时候能够正确地工作，并满足预期的功能和业务需求。</li><li>上下文：集成测试需要更真实的环境中运行，涉及到真实的依赖项和外部系统(例如数据库、网络服务等)</li><li>操作复杂性：因为集成测试覆盖了更广泛的功能和交互，因此设置和执行可能相对复杂一些</li><li>侧重于组件之间的交互和协作正确性</li></ul></li><li>负载测试 <ul><li>确认系统是否可以处理指定的负载，比如使用应用程序的并发用户数和应用程序响应性处理交互的能力.</li></ul></li><li>渗漏测试 <ul><li>Dude Suite：https://www.dudesuite.cn/</li></ul></li></ul><h2 id="第三方工具" tabindex="-1"><a class="header-anchor" href="#第三方工具"><span>第三方工具</span></a></h2><p>以下列表包含具有各种功能集的第三方 web 性能工具：</p>',4),c={href:"https://jmeter.apache.org/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://httpd.apache.org/docs/2.4/programs/ab.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://gatling.io/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://k6.io/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://locust.io/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://websurge.west-wind.com/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/hallatore/Netling",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/tsenart/vegeta",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/PragmaticFlow/NBomber",target:"_blank",rel:"noopener noreferrer"},k=n('<h2 id="常见概念" tabindex="-1"><a class="header-anchor" href="#常见概念"><span>常见概念</span></a></h2><h3 id="负载-压力测试" tabindex="-1"><a class="header-anchor" href="#负载-压力测试"><span>负载/压力测试</span></a></h3><p>负载测试和压力测试对于确保 web 应用的性能和可缩放性非常重要。尽管它们的某些测试是相同的，但目标不同。</p><blockquote><p>负载测试：测试应用是否可以在特定情况下处理指定的用户负载，同时仍满足响应目标。应用在正常状态下运行。 压力测试：在极端条件下（通常为长时间）运行时测试应用的稳定性。测试会对应用施加高用户负载（峰值或逐渐增加的负载）或限制应用的计算资源。</p></blockquote><p>压力测试可以被看作是负载测试的一种，即高负载下的负载测试，或者说压力测试采用负载测试技术。</p><p>相同点：</p><ul><li>两种测试方法都是为了测试系统的性能表现。</li><li>两种测试方法都是通过模拟实际使用场景来进行测试。</li><li>两种测试方法都需要使用工具进行测试。</li></ul><p>区别：</p><ul><li>负载测试是在一定的工作负荷下，给系统造成的负荷及系统响应的时间，例如逐渐增加系统负载，观察系统在不同负载情况下的运行情况；而压力测试则是在一定的负荷条件下，长时间连续运行系统给系统性能造成的影响，例如系统在强负载情况下持续运行，观察系统的运行情况。</li><li>负载测试侧重于压力持续的时间，而压力测试则更加强调施加压力的大小。</li><li>压力测试是为了获取系统正确运行的极限，检查系统在瞬间峰值负荷下正确执行的能力，例如增加并发操作的用户数量、不停地向服务器发送请求等；而负载测试是用于检查系统在使用大量数据的时候正确工作的能力，即检验系统的能力最高能达到什么程度，例如让信息检索系统使用频率达到最大、让多个终端的分时系统所有的终端都开动等。</li></ul><h3 id="压测" tabindex="-1"><a class="header-anchor" href="#压测"><span>压测</span></a></h3><h4 id="what" tabindex="-1"><a class="header-anchor" href="#what"><span>What</span></a></h4><p>压力测试，是确定系统稳定性的一种测试方法，通常在系统正常运作范围之外进行，用来考察功能极限和隐患，主要检测服务器的承受能力，包括用户承受能力(多少用户同时操作基本不影响质量)、流程承受等。</p><h4 id="why" tabindex="-1"><a class="header-anchor" href="#why"><span>Why</span></a></h4><ul><li>压测的目的就是通过压测(模拟真实用户的行为)，测算出机器的性能(单台机器的QPS)，从而推算出系统在承受指定用户数时候，需要多少机器能支撑得住。</li><li>压测是在上线前为了应对未来可能达到的用户数量的一次预估，压测以后通过优化程序的性能或准备充足的机器，来保证用户的体验。</li></ul><h4 id="压测类型" tabindex="-1"><a class="header-anchor" href="#压测类型"><span>压测类型</span></a></h4><table><thead><tr><th>压测类型</th><th>解释</th></tr></thead><tbody><tr><td>压力测试(Stress Testing)</td><td>也称之为强度测试，测试一个系统的最大抗压能力，在强负载(大数据、高并发)的情况下，测试系统所能承受的最大压力，预估系统的瓶颈</td></tr><tr><td>并发测试(Concurrency Testing)</td><td>通过模拟很多用户同一时刻访问系统或对系统某一个功能进行操作，来测试系统的性能，从中发现问题(并发读写、线程控制、资源争抢)</td></tr><tr><td>耐久性测试(Configuration Testing)</td><td>通过对系统在大负荷的条件下长时间运行，测试系统、机器的长时间运行下的状况,从中发现问题(内存泄漏、数据库连接池不释放、资源不回收)</td></tr></tbody></table><h4 id="压测名词解释" tabindex="-1"><a class="header-anchor" href="#压测名词解释"><span>压测名词解释</span></a></h4><h5 id="压测类型解释" tabindex="-1"><a class="header-anchor" href="#压测类型解释"><span>压测类型解释</span></a></h5><table><thead><tr><th>压测名词</th><th>解释</th></tr></thead><tbody><tr><td>并发(Concurrency)</td><td>指一个处理器同时处理多个任务的能力(逻辑上处理的能力)</td></tr><tr><td>并行(Parallel)</td><td>多个处理器或者是多核的处理器同时处理多个不同的任务(物理上同时执行)</td></tr><tr><td>QPS(每秒钟查询数量 Query Per Second)</td><td>每秒请求数，即在不断向服务器发送请求的情况下，服务器每秒能够处理的请求数量(req/sec 请求数/秒 一段时间内总请求数/请求时间)</td></tr><tr><td>事务(Transactions)</td><td>是用户一次或者是几次请求的集合</td></tr><tr><td>TPS(每秒钟处理事务数量 Transaction Per Second)</td><td>服务器每秒钟处理事务数量(一个事务可能包括多个请求)</td></tr><tr><td>请求成功数(Request Success Number)</td><td>在一次压测中，请求成功的数量</td></tr><tr><td>请求失败数(Request Failures Number)</td><td>在一次压测中，请求失败的数量</td></tr><tr><td>错误率(Error Rate)</td><td>在压测中，请求成功的数量与请求失败数量的比率</td></tr><tr><td>最大响应时间(Max Response Time)</td><td>在一次事务中，从发出请求或指令系统做出的反映(响应)的最大时间</td></tr><tr><td>最少响应时间(Mininum Response Time)</td><td>在一次事务中，从发出请求或指令系统做出的反映(响应)的最少时间</td></tr><tr><td>平均响应时间(Average Response Time)</td><td>在一次事务中，从发出请求或指令系统做出的反映(响应)的平均时间</td></tr></tbody></table><h5 id="机器性能指标解释" tabindex="-1"><a class="header-anchor" href="#机器性能指标解释"><span>机器性能指标解释</span></a></h5><table><thead><tr><th>机器性能</th><th>解释</th></tr></thead><tbody><tr><td>CUP利用率(CPU Usage)</td><td>CUP 利用率分用户态、系统态和空闲态，CPU利用率是指:CPU执行非系统空闲进程的时间与CPU总执行时间的比率</td></tr><tr><td>内存使用率(Memory usage)</td><td>内存使用率指的是此进程所开销的内存。</td></tr><tr><td>IO(Disk input/ output)</td><td>磁盘的读写包速率</td></tr><tr><td>网卡负载(Network Load)</td><td>网卡的进出带宽,包量</td></tr></tbody></table><h5 id="访问指标解释" tabindex="-1"><a class="header-anchor" href="#访问指标解释"><span>访问指标解释</span></a></h5><table><thead><tr><th>访问</th><th>解释</th></tr></thead><tbody><tr><td>PV(页面浏览量 Page View)</td><td>用户每打开1个网站页面，记录1个PV。用户多次打开同一页面，PV值累计多次</td></tr><tr><td>UV(网站独立访客 Unique Visitor)</td><td>通过互联网访问、流量网站的自然人。1天内相同访客多次访问网站，只计算为1个独立访客</td></tr></tbody></table><h4 id="如何计算压测指标" tabindex="-1"><a class="header-anchor" href="#如何计算压测指标"><span>如何计算压测指标</span></a></h4><ul><li>压测我们需要有目的性的压测，这次压测我们需要达到什么目标(如:单台机器的性能为100QPS?网站能同时满足100W人同时在线)</li><li>可以通过以下计算方法来进行计算:</li><li>压测原则:每天80%的访问量集中在20%的时间里，这20%的时间就叫做峰值</li><li>公式: ( 总PV数80% ) / ( 每天的秒数20% ) = 峰值时间每秒钟请求数(QPS)</li><li>机器: 峰值时间每秒钟请求数(QPS) / 单台机器的QPS = 需要的机器的数量</li><li>假设:网站每天的用户数(100W)，每天的用户的访问量约为3000W PV，这台机器的需要多少QPS? <ul><li>( 30000000*0.8 ) / (86400 * 0.2) ≈ 1389 (QPS)</li></ul></li><li>假设:单台机器的的QPS是69，需要需要多少台机器来支撑？ <ul><li>1389 / 69 ≈ 20</li></ul></li></ul><h3 id="快照测试" tabindex="-1"><a class="header-anchor" href="#快照测试"><span>快照测试</span></a></h3>',26),w={href:"https://timdeschryver.dev/bits/snapshot-testing-in-c-with-verify",target:"_blank",rel:"noopener noreferrer"},P=t("h2",{id:"资料",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#资料"},[t("span",null,"资料")])],-1),v={href:"https://segmentfault.com/a/1190000020211494",target:"_blank",rel:"noopener noreferrer"};function x(S,T){const l=i("ExternalLinkIcon");return d(),s("div",null,[o,t("ul",null,[t("li",null,[t("a",c,[e("Apache JMeter"),r(l)])]),t("li",null,[t("a",p,[e("ApacheBench (ab)"),r(l)])]),t("li",null,[t("a",u,[e("Gatling"),r(l)])]),t("li",null,[t("a",g,[e("k6"),r(l)])]),t("li",null,[t("a",m,[e("Locust"),r(l)])]),t("li",null,[t("a",b,[e("West Wind WebSurge"),r(l)])]),t("li",null,[t("a",_,[e("Netling"),r(l)])]),t("li",null,[t("a",f,[e("Vegeta"),r(l)])]),t("li",null,[t("a",y,[e("NBomber"),r(l)])])]),k,t("p",null,[e("c#中的快照测试："),t("a",w,[e("https://timdeschryver.dev/bits/snapshot-testing-in-c-with-verify"),r(l)])]),P,t("p",null,[e("压测工具如何选择："),t("a",v,[e("https://segmentfault.com/a/1190000020211494"),r(l)])])])}const V=a(h,[["render",x],["__file","jianshu.html.vue"]]),z=JSON.parse('{"path":"/middleware/testMange/jianshu.html","title":"简述","lang":"zh-CN","frontmatter":{"title":"简述","lang":"zh-CN","date":"2023-10-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"jianshu","slug":"ydppnv","docsId":"70054477","description":"测试类型 单元测试 范围：是一种针对代码中最小功能单元进行的测试，通常是一个方法或者一个类的某个特定功能，目的是验证这个最小单元的功能是否正常 独立性：单元测试通常是以隔离的环境进行的，不依赖其他组件、服务或系统(包括与数据库、文件系统和网络资源的交互)，通过模拟或者替换依赖项来实现独立性 快速执行：因为测试的范围小且独立性强，因此它们通常执行速度非常...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/jianshu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"简述"}],["meta",{"property":"og:description","content":"测试类型 单元测试 范围：是一种针对代码中最小功能单元进行的测试，通常是一个方法或者一个类的某个特定功能，目的是验证这个最小单元的功能是否正常 独立性：单元测试通常是以隔离的环境进行的，不依赖其他组件、服务或系统(包括与数据库、文件系统和网络资源的交互)，通过模拟或者替换依赖项来实现独立性 快速执行：因为测试的范围小且独立性强，因此它们通常执行速度非常..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-28T13:44:21.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-28T13:44:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-28T13:44:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"测试类型","slug":"测试类型","link":"#测试类型","children":[]},{"level":2,"title":"第三方工具","slug":"第三方工具","link":"#第三方工具","children":[]},{"level":2,"title":"常见概念","slug":"常见概念","link":"#常见概念","children":[{"level":3,"title":"负载/压力测试","slug":"负载-压力测试","link":"#负载-压力测试","children":[]},{"level":3,"title":"压测","slug":"压测","link":"#压测","children":[{"level":4,"title":"What","slug":"what","link":"#what","children":[]},{"level":4,"title":"Why","slug":"why","link":"#why","children":[]},{"level":4,"title":"压测类型","slug":"压测类型","link":"#压测类型","children":[]},{"level":4,"title":"压测名词解释","slug":"压测名词解释","link":"#压测名词解释","children":[{"level":5,"title":"压测类型解释","slug":"压测类型解释","link":"#压测类型解释","children":[]},{"level":5,"title":"机器性能指标解释","slug":"机器性能指标解释","link":"#机器性能指标解释","children":[]},{"level":5,"title":"访问指标解释","slug":"访问指标解释","link":"#访问指标解释","children":[]}]},{"level":4,"title":"如何计算压测指标","slug":"如何计算压测指标","link":"#如何计算压测指标","children":[]}]},{"level":3,"title":"快照测试","slug":"快照测试","link":"#快照测试","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1714311861000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":4}]},"readingTime":{"minutes":7.67,"words":2302},"filePathRelative":"middleware/testMange/jianshu.md","localizedDate":"2023年10月14日","excerpt":"<h2>测试类型</h2>\\n<ul>\\n<li>单元测试\\n<ul>\\n<li>范围：是一种针对代码中最小功能单元进行的测试，通常是一个方法或者一个类的某个特定功能，目的是验证这个最小单元的功能是否正常</li>\\n<li>独立性：单元测试通常是以隔离的环境进行的，不依赖其他组件、服务或系统(包括与数据库、文件系统和网络资源的交互)，通过模拟或者替换依赖项来实现独立性</li>\\n<li>快速执行：因为测试的范围小且独立性强，因此它们通常执行速度非常快</li>\\n<li>侧重于验证代码内部逻辑的正确性和稳定性</li>\\n</ul>\\n</li>\\n<li>集成测试\\n<ul>\\n<li>范围：用于验证多个组件或者模块之间的交互和协作的测试，目的是确保不同的组件在整合的时候能够正确地工作，并满足预期的功能和业务需求。</li>\\n<li>上下文：集成测试需要更真实的环境中运行，涉及到真实的依赖项和外部系统(例如数据库、网络服务等)</li>\\n<li>操作复杂性：因为集成测试覆盖了更广泛的功能和交互，因此设置和执行可能相对复杂一些</li>\\n<li>侧重于组件之间的交互和协作正确性</li>\\n</ul>\\n</li>\\n<li>负载测试\\n<ul>\\n<li>确认系统是否可以处理指定的负载，比如使用应用程序的并发用户数和应用程序响应性处理交互的能力.</li>\\n</ul>\\n</li>\\n<li>渗漏测试\\n<ul>\\n<li>Dude Suite：https://www.dudesuite.cn/</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{V as comp,z as data};
