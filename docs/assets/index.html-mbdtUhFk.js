import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e as t,b as i}from"./app-qB9_Bjjp.js";const l="/kbms/common/1610504420615-46cb846d-a818-4cee-a6b3-b2c5d49bfb41.png",u={},r=i('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>注入到应用程序中处理请求和响应的组件，是通过多个委托来嵌套成型的一个俄罗斯套娃，也想一层层的“滤网”，过滤所有的请求和响应。 1.选择是否将http请求传递给管道中的下个组件。 2.可以在管道中的下个组件之前和之后执行工作。 在ASP.NET Core 中一个中间件组件只做一个特定的事情。 直观的感觉：中间件是http请求管道中的一层层的AOP扩展。</p><p>整个HTTP Request请求跟HTTP Response返回结果之间的处理流程是一个<strong>请求管道（request pipeline）</strong>。而**中间件（middleware）**则是一种装配到请求管道以处理请求和响应的组件。每个组件： ●<strong>可选择是否将请求传递到管道中的下一个组件。</strong> ●<strong>可在管道中的下一个组件前后执行工作。</strong> 中间件（middleware）处理流程如下图所示： <img src="'+l+`" alt="image.png" loading="lazy"> 每个请求委托（中间件）都可以在下一个请求委托（中间件）之前和之后执行操作。中间件中的异常处理委托应该在管道的早起被处理，这样子就可以捕捉在管道后期发生的异常。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>中间件用来处理应用程序中和业务关系不大的的需求，例如：身份验证、session存储、日志记录等</p><h2 id="顺序" tabindex="-1"><a class="header-anchor" href="#顺序"><span>顺序</span></a></h2><p>中间件的顺序</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//异常显示页中间件</span>
        app<span class="token punctuation">.</span><span class="token function">UseDatabaseErrorPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//异常处理中间件</span>
        app<span class="token punctuation">.</span><span class="token function">UseHsts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//https重定向中间件</span>
    app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//静态文件中间件，返回静态文件，并简化进一步请求处理</span>
    <span class="token comment">// app.UseCookiePolicy();//cookie策略中间件  </span>

    app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户路由请求的路由中间件</span>
    <span class="token comment">// app.UseRequestLocalization();//</span>
    <span class="token comment">// app.UseCors();//允许跨域请求</span>

    app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//身份验证中间件  尝试对用户进行身份验证，然后才会允许用户访问安全资源</span>
    app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用户授权用户访问安全资源的授权中间件</span>
    <span class="token comment">// app.UseSession();//会话中间件 </span>

    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        endpoints<span class="token punctuation">.</span><span class="token function">MapRazorPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        endpoints<span class="token punctuation">.</span><span class="token function">MapControllerRoute</span><span class="token punctuation">(</span>
            <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">pattern</span><span class="token punctuation">:</span> <span class="token string">&quot;{controller=Home}/{action=Index}/{id?}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基础的中间件" tabindex="-1"><a class="header-anchor" href="#基础的中间件"><span>基础的中间件</span></a></h2><p>Use和Run 都是用来向应用请求管道里面添加中间件的，use方法可以调用下一个中间件的添加，run不会，run运行过就终止了</p><h3 id="use命令" tabindex="-1"><a class="header-anchor" href="#use命令"><span>Use命令</span></a></h3><p>会将请求往下传递</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Use&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Use1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先打印Use，然后Use1，最后完成执行。 使用Use方法运行一个委托，我们可以在Next调用之前和之后分别执行自定义的代码，从而可以方便的进行日志记录等工作。这段代码中，使用next.Invoke()方法调用下一个中间件，从而将中间件管道连贯起来；如果不调用next.Invoke()方法，则会造成管道短路，不再往下面执行了。</p><h3 id="run命令" tabindex="-1"><a class="header-anchor" href="#run命令"><span>Run命令</span></a></h3><p>终止传递 一般用于输出返回错误信息： context.Response.WriteAsync(JsonConvert.SerializeObject(new Response{Code=&quot;400&quot;,Msg=&quot;系统出错&quot; }));</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
   <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很简单的示例，在默认api流程前，加了一段输出。段代码中，使用Run方法运行一个委托，这就是最简单的中间件，它拦截了所有请求，返回一段文本作为响应。Run委托终止了管道的运行，因此也叫作中断中间件。</p><h3 id="map命令" tabindex="-1"><a class="header-anchor" href="#map命令"><span>Map命令</span></a></h3><p>Map创建基于路径匹配的分支、使用MapWhen创建基于条件的分支。 创建一段IApplicationBuilder.Map的示例，可以作为一个简单的接口使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">&quot;/api/test&quot;</span><span class="token punctuation">,</span> _map <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    _map<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>conetxt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> conetxt<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者对特定路径指定中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token string">&quot;/api/test2&quot;</span><span class="token punctuation">,</span> _map <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    _map<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>conetxt<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;只有这个地址才会输出请求信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> next<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;只有这个地址才会输出响应信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是也是运行结束就返回了</p><h3 id="mapwhen" tabindex="-1"><a class="header-anchor" href="#mapwhen"><span>MapWhen</span></a></h3><p>判断式，两个委托，第一个委托作为判断条件的内容，第二个委托是要执行的逻辑。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">MapWhen</span><span class="token punctuation">(</span>content <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> content<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断下面的中间件是否执行</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> build <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>RequestDelegate<span class="token punctuation">,</span> RequestDelegate<span class="token punctuation">&gt;</span></span> middleware <span class="token operator">=</span> next <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">async</span> c <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> c<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    build<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义中间件" tabindex="-1"><a class="header-anchor" href="#自定义中间件"><span>自定义中间件</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyMiddlewareExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IApplicationBuilder</span> <span class="token function">UseMyMiddleware</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IApplicationBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseMiddleware</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyMiddleware<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMiddleware</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">RequestDelegate</span> _next<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>MyMiddleware<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MyMiddleware</span><span class="token punctuation">(</span><span class="token class-name">RequestDelegate</span> next<span class="token punctuation">,</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>MyMiddleware<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;开始执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">_next</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">&quot;执行结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用中间件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseMyMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,32),d={href:"https://www.cnblogs.com/wzk153/p/10904988.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.cnblogs.com/RainingNight/p/middleware-in-asp-net-core.html",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[s("中间件："),n("a",d,[s("https://www.cnblogs.com/wzk153/p/10904988.html"),t(a)]),s(" 请求管道构成："),n("a",k,[s("https://www.cnblogs.com/RainingNight/p/middleware-in-asp-net-core.html"),t(a)])])])])}const y=e(u,[["render",m],["__file","index.html.vue"]]),w=JSON.parse('{"path":"/dotnet/base/zhongjianjian/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-04-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"readme","slug":"vzynn9nnzmeghft9","docsId":"121335492","description":"介绍 注入到应用程序中处理请求和响应的组件，是通过多个委托来嵌套成型的一个俄罗斯套娃，也想一层层的“滤网”，过滤所有的请求和响应。 1.选择是否将http请求传递给管道中的下个组件。 2.可以在管道中的下个组件之前和之后执行工作。 在ASP.NET Core 中一个中间件组件只做一个特定的事情。 直观的感觉：中间件是http请求管道中的一层层的AOP扩...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/zhongjianjian/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"介绍 注入到应用程序中处理请求和响应的组件，是通过多个委托来嵌套成型的一个俄罗斯套娃，也想一层层的“滤网”，过滤所有的请求和响应。 1.选择是否将http请求传递给管道中的下个组件。 2.可以在管道中的下个组件之前和之后执行工作。 在ASP.NET Core 中一个中间件组件只做一个特定的事情。 直观的感觉：中间件是http请求管道中的一层层的AOP扩..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1610504420615-46cb846d-a818-4cee-a6b3-b2c5d49bfb41.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-04-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1610504420615-46cb846d-a818-4cee-a6b3-b2c5d49bfb41.png\\"],\\"datePublished\\":\\"2023-04-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"顺序","slug":"顺序","link":"#顺序","children":[]},{"level":2,"title":"基础的中间件","slug":"基础的中间件","link":"#基础的中间件","children":[{"level":3,"title":"Use命令","slug":"use命令","link":"#use命令","children":[]},{"level":3,"title":"Run命令","slug":"run命令","link":"#run命令","children":[]},{"level":3,"title":"Map命令","slug":"map命令","link":"#map命令","children":[]},{"level":3,"title":"MapWhen","slug":"mapwhen","link":"#mapwhen","children":[]}]},{"level":2,"title":"自定义中间件","slug":"自定义中间件","link":"#自定义中间件","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.97,"words":1192},"filePathRelative":"dotnet/base/zhongjianjian/readme.md","localizedDate":"2023年4月11日","excerpt":"<h2>介绍</h2>\\n<p>注入到应用程序中处理请求和响应的组件，是通过多个委托来嵌套成型的一个俄罗斯套娃，也想一层层的“滤网”，过滤所有的请求和响应。\\n1.选择是否将http请求传递给管道中的下个组件。\\n2.可以在管道中的下个组件之前和之后执行工作。\\n在ASP.NET Core 中一个中间件组件只做一个特定的事情。\\n直观的感觉：中间件是http请求管道中的一层层的AOP扩展。</p>\\n<p>整个HTTP Request请求跟HTTP Response返回结果之间的处理流程是一个<strong>请求管道（request pipeline）</strong>。而**中间件（middleware）**则是一种装配到请求管道以处理请求和响应的组件。每个组件：\\n●<strong>可选择是否将请求传递到管道中的下一个组件。</strong>\\n●<strong>可在管道中的下一个组件前后执行工作。</strong>\\n中间件（middleware）处理流程如下图所示：\\n<img src=\\"/common/1610504420615-46cb846d-a818-4cee-a6b3-b2c5d49bfb41.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n每个请求委托（中间件）都可以在下一个请求委托（中间件）之前和之后执行操作。中间件中的异常处理委托应该在管道的早起被处理，这样子就可以捕捉在管道后期发生的异常。</p>","autoDesc":true}');export{y as comp,w as data};
