import{_ as n}from"./1611537637247-5f5aa764-7b56-4fa6-9377-26938a4c05a8-DzC_meP0.js";import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as t}from"./app-vSdX8vi3.js";const p={},o=t(`<h3 id="构建触发器" tabindex="-1"><a class="header-anchor" href="#构建触发器"><span>构建触发器</span></a></h3><h4 id="轮询scm" tabindex="-1"><a class="header-anchor" href="#轮询scm"><span>轮询SCM</span></a></h4><p>轮询远程仓库有代码变更就进行构建</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>H<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>两分钟执行部署一次(只有在有提交的情况下才能执行)</p></blockquote><h3 id="构建环境" tabindex="-1"><a class="header-anchor" href="#构建环境"><span>构建环境</span></a></h3><ul><li>Delete workspace before build starts：构建前删除工作空间</li><li>Abort the build if it&#39;s stuck：设定构建的超时时间，如果构建使用的时候超过设定的时间，那么就认为构建失败。</li></ul><h3 id="构建" tabindex="-1"><a class="header-anchor" href="#构建"><span>构建</span></a></h3><h4 id="执行shell" tabindex="-1"><a class="header-anchor" href="#执行shell"><span>执行shell</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker<span class="token operator">-</span>compose <span class="token operator">-</span>f build<span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yaml up <span class="token operator">--</span>build <span class="token operator">-</span>d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="docker-compose-build-step" tabindex="-1"><a class="header-anchor" href="#docker-compose-build-step"><span>Docker Compose Build Step</span></a></h4><p><img src="`+n+`" alt="image.png" loading="lazy"> 构建时候生成的命令是：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>docker<span class="token operator">-</span>compose <span class="token operator">-</span>f <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>jenkins_home<span class="token operator">/</span>workspace<span class="token operator">/</span>测试<span class="token operator">/</span>build<span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yaml up <span class="token operator">-</span>d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：这种方式不会重新发布项目，只是up文件，适用于修改docker-compose配置文件时候使用。</p></blockquote><h3 id="windows-powershell" tabindex="-1"><a class="header-anchor" href="#windows-powershell"><span>Windows PowerShell</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token preprocessor property">#定义变量</span>
$IMAGE_VERSION<span class="token operator">=</span>&#39;latest&#39;
$REGISTRY_USER<span class="token operator">=</span>&#39;镜像仓库账号&#39;
$REGISTRY_PWD<span class="token operator">=</span>&#39;镜像仓库密码&#39;
$REGISTRY_HOST<span class="token operator">=</span>&#39;ccr<span class="token punctuation">.</span>ccs<span class="token punctuation">.</span>tencentyun<span class="token punctuation">.</span>com&#39;
$REGISTRY_NAMESPACE<span class="token operator">=</span>&#39;镜像仓库<span class="token keyword">namespace</span>&#39;
$SERVICE_HELLOWORLD<span class="token operator">=</span>&#39;helloworld&#39;
$SERVICE_MYNGINX<span class="token operator">=</span>&#39;mynginx&#39;
<span class="token preprocessor property">#jenkins拉取的项目默认路径 “安装路径根目录/workspace/jenkins里面建的项目名”</span>
$COMPOSE_PATH<span class="token operator">=</span>&#39;D<span class="token punctuation">:</span>\\<span class="token return-type class-name">Program</span> Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>\\Jenkins\\workspace\\helloworld\\docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yml&#39;

echo <span class="token string">&quot;------------------------------ 构建镜像 ------------------------------&quot;</span>
docker<span class="token operator">-</span>compose <span class="token operator">-</span>f <span class="token string">&quot;\${COMPOSE_PATH}&quot;</span> build

echo <span class="token string">&quot;------------------------------ 登录远程仓库 ------------------------------&quot;</span>
docker login <span class="token operator">--</span>username<span class="token operator">=</span>$<span class="token punctuation">{</span>REGISTRY_USER<span class="token punctuation">}</span> <span class="token operator">--</span>password<span class="token operator">=</span>$<span class="token punctuation">{</span>REGISTRY_PWD<span class="token punctuation">}</span> $<span class="token punctuation">{</span>REGISTRY_HOST<span class="token punctuation">}</span>

echo <span class="token string">&quot;------------------------------ 标记镜像 ------------------------------&quot;</span>
docker tag $<span class="token punctuation">{</span>SERVICE_HELLOWORLD<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>IMAGE_VERSION<span class="token punctuation">}</span> $<span class="token punctuation">{</span>REGISTRY_HOST<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>REGISTRY_NAMESPACE<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>SERVICE_HELLOWORLD<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>IMAGE_VERSION<span class="token punctuation">}</span>
docker tag $<span class="token punctuation">{</span>SERVICE_MYNGINX<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>IMAGE_VERSION<span class="token punctuation">}</span> $<span class="token punctuation">{</span>REGISTRY_HOST<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>REGISTRY_NAMESPACE<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>SERVICE_MYNGINX<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>IMAGE_VERSION<span class="token punctuation">}</span>

echo <span class="token string">&quot;------------------------------ 推送到远程仓库 ------------------------------&quot;</span>
docker push $<span class="token punctuation">{</span>REGISTRY_HOST<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>REGISTRY_NAMESPACE<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>SERVICE_HELLOWORLD<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>IMAGE_VERSION<span class="token punctuation">}</span>
docker push $<span class="token punctuation">{</span>REGISTRY_HOST<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>REGISTRY_NAMESPACE<span class="token punctuation">}</span><span class="token operator">/</span>$<span class="token punctuation">{</span>SERVICE_MYNGINX<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>IMAGE_VERSION<span class="token punctuation">}</span>

echo <span class="token string">&quot;------------------------------ 清理None ------------------------------&quot;</span>
docker rmi $<span class="token punctuation">(</span>docker images <span class="token operator">-</span>f <span class="token string">&quot;dangling=true&quot;</span> <span class="token operator">-</span>q<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),c=[o];function l(i,r){return a(),e("div",null,c)}const m=s(p,[["render",l],["__file","jenkinspeizhi.html.vue"]]),h=JSON.parse(`{"path":"/cloud/ciAndCd/jenkins/jenkinspeizhi.html","title":"Jenkins配置","lang":"zh-CN","frontmatter":{"title":"Jenkins配置","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"jenkinspeizhi","slug":"rukx8t","docsId":"30650408","description":"构建触发器 轮询SCM 轮询远程仓库有代码变更就进行构建 两分钟执行部署一次(只有在有提交的情况下才能执行) 构建环境 Delete workspace before build starts：构建前删除工作空间 Abort the build if it's stuck：设定构建的超时时间，如果构建使用的时候超过设定的时间，那么就认为构建失败。 构建...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/ciAndCd/jenkins/jenkinspeizhi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Jenkins配置"}],["meta",{"property":"og:description","content":"构建触发器 轮询SCM 轮询远程仓库有代码变更就进行构建 两分钟执行部署一次(只有在有提交的情况下才能执行) 构建环境 Delete workspace before build starts：构建前删除工作空间 Abort the build if it's stuck：设定构建的超时时间，如果构建使用的时候超过设定的时间，那么就认为构建失败。 构建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1611537637247-5f5aa764-7b56-4fa6-9377-26938a4c05a8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T07:50:54.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T07:50:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jenkins配置\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1611537637247-5f5aa764-7b56-4fa6-9377-26938a4c05a8.png\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-24T07:50:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"构建触发器","slug":"构建触发器","link":"#构建触发器","children":[{"level":4,"title":"轮询SCM","slug":"轮询scm","link":"#轮询scm","children":[]}]},{"level":3,"title":"构建环境","slug":"构建环境","link":"#构建环境","children":[]},{"level":3,"title":"构建","slug":"构建","link":"#构建","children":[{"level":4,"title":"执行shell","slug":"执行shell","link":"#执行shell","children":[]},{"level":4,"title":"Docker Compose Build Step","slug":"docker-compose-build-step","link":"#docker-compose-build-step","children":[]}]},{"level":3,"title":"Windows PowerShell","slug":"windows-powershell","link":"#windows-powershell","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1695541854000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.23,"words":370},"filePathRelative":"cloud/ciAndCd/jenkins/jenkinspeizhi.md","localizedDate":"2023年9月24日","excerpt":"<h3>构建触发器</h3>\\n<h4>轮询SCM</h4>\\n<p>轮询远程仓库有代码变更就进行构建</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>H<span class=\\"token operator\\">/</span><span class=\\"token number\\">2</span> <span class=\\"token operator\\">*</span> <span class=\\"token operator\\">*</span> <span class=\\"token operator\\">*</span> <span class=\\"token operator\\">*</span>  \\n</code></pre></div>","autoDesc":true}`);export{m as comp,h as data};
