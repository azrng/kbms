import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,b as s,d as c,e as i}from"./app-vSdX8vi3.js";const l="/kbms/common/1669733409962-36e0cc02-9f53-4d1f-ae81-1db8920b2a9c.png",u={},k=n("h2",{id:"概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概念"},[n("span",null,"概念")])],-1),r=n("img",{src:l,alt:"image.png",loading:"lazy"},null,-1),d={href:"https://echarts.apache.org/examples/zh/editor.html?c=graph-simple",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 指定点 以及指定的位置</span>
        <span class="token class-name"><span class="token keyword">var</span></span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token comment">//[5] = new List&lt;int&gt; { 6 },</span>
            <span class="token comment">//[6] = new List&lt;int&gt; { 7, 11 },</span>
            <span class="token comment">//[7] = new List&lt;int&gt; { 8 },</span>
            <span class="token comment">//[8] = new List&lt;int&gt; { 13 },</span>
            <span class="token comment">//[9] = new List&lt;int&gt; { 10 },</span>
            <span class="token comment">//[10] = new List&lt;int&gt; { 11 },</span>
            <span class="token comment">//[11] = new List&lt;int&gt; { 12 },</span>
            <span class="token comment">//[12] = new List&lt;int&gt; { 13 },</span>
            <span class="token comment">//[13] = new List&lt;int&gt; { 14 },</span>
            <span class="token comment">//[14] = new List&lt;int&gt;()</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token function">TopoloGicalSort</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> re <span class="token keyword">in</span> result<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;点：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">re<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">  x轴坐标是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">re<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>x</span><span class="token punctuation">}</span></span><span class="token string"> y轴坐标是：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">re<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用字典的形式来表示有向无环形图</span>
    <span class="token doc-comment comment">/// 其中键是每个顶点，值是该顶点传向的顶点</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>graph<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> <span class="token function">TopoloGicalSort</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> graph<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 入度字典  key:点坐标  value:入度值</span>
        <span class="token class-name"><span class="token keyword">var</span></span> inDegree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//填充inDegree入度数组</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> kv <span class="token keyword">in</span> graph<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inDegree<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 设置所有顶点的入度为0</span>
                inDegree<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 如果某一个点的指向点</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> verteice <span class="token keyword">in</span> kv<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 增加指定的顶点的入度</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inDegree<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>verteice<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    inDegree<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>verteice<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    inDegree<span class="token punctuation">[</span>verteice<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//存放所有入度为0的顶点的栈</span>
        <span class="token class-name"><span class="token keyword">var</span></span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Stack<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//next初始化</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> kv <span class="token keyword">in</span> inDegree<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>kv<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 添加入度为0的顶点</span>
                next<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 核心思想就是移除入度为的0的顶点，并且将该点相邻的下游点的入度减一，</span>
        <span class="token comment">// 那么剩下的图仍然还是有向无环图，反复操作就得到了线性序列</span>

        <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> xPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> yPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> next<span class="token punctuation">.</span>Count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> yPosition<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 取出来值</span>
            <span class="token class-name"><span class="token keyword">var</span></span> verticeTemp <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>verticeTemp<span class="token punctuation">,</span> <span class="token punctuation">(</span>xPosition<span class="token punctuation">,</span> yPosition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 循环当前顶点将他附近的顶点入度都减去1</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> vertice <span class="token keyword">in</span> graph<span class="token punctuation">[</span>verticeTemp<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                inDegree<span class="token punctuation">[</span>vertice<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>inDegree<span class="token punctuation">[</span>vertice<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token comment">// 将该顶点加入入度为0的序列里面   然后继续循环将相邻的下游点入度减一</span>
                    next<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>vertice<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    xPosition<span class="token operator">++</span><span class="token punctuation">;</span>
                    yPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p>数据血缘图：https://blog.csdn.net/qq_44831907/article/details/120937608</p><p>有向无环图：https://www.cnblogs.com/johnyang/p/15757406.html</p>`,5);function v(b,g){const a=p("ExternalLinkIcon");return e(),o("div",null,[k,n("p",null,[s("有向图由顶点和有向边组成，有向边由上游点和下游点组成，比如一个(u,v)表示一个有向边，其中u就是该有向边的上游点，v就是该有向边的下游点， 入度就是一个顶点作为下游点所在有向边的个数(也就是指向该顶点的个数)，比如顶点1的入度为0，顶点3的入度为1，顶点6的入度为2。 出度就是一个顶点作为上游点所在有向边的个数(该顶点指出的个数)，比如顶点的出度是1，顶点3的出度是2。 "),r,s(" 在线展示示例："),n("a",d,[s("https://echarts.apache.org/examples/zh/editor.html?c=graph-simple"),c(a)])]),m])}const w=t(u,[["render",v],["__file","youxiangmohuantutu.html.vue"]]),f=JSON.parse('{"path":"/computerBasics/arithmetic/youxiangmohuantutu.html","title":"有向无环图图","lang":"zh-CN","frontmatter":{"title":"有向无环图图","lang":"zh-CN","date":"2023-09-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["计算机基础"],"tag":["无"],"filename":"youxiangmohuantutu","slug":"cuy245gbyg7fwoo6","docsId":"107814537","description":"概念 有向图由顶点和有向边组成，有向边由上游点和下游点组成，比如一个(u,v)表示一个有向边，其中u就是该有向边的上游点，v就是该有向边的下游点， 入度就是一个顶点作为下游点所在有向边的个数(也就是指向该顶点的个数)，比如顶点1的入度为0，顶点3的入度为1，顶点6的入度为2。 出度就是一个顶点作为上游点所在有向边的个数(该顶点指出的个数)，比如顶点的出...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/computerBasics/arithmetic/youxiangmohuantutu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"有向无环图图"}],["meta",{"property":"og:description","content":"概念 有向图由顶点和有向边组成，有向边由上游点和下游点组成，比如一个(u,v)表示一个有向边，其中u就是该有向边的上游点，v就是该有向边的下游点， 入度就是一个顶点作为下游点所在有向边的个数(也就是指向该顶点的个数)，比如顶点1的入度为0，顶点3的入度为1，顶点6的入度为2。 出度就是一个顶点作为上游点所在有向边的个数(该顶点指出的个数)，比如顶点的出..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1669733409962-36e0cc02-9f53-4d1f-ae81-1db8920b2a9c.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-24T04:06:34.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-24T04:06:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"有向无环图图\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1669733409962-36e0cc02-9f53-4d1f-ae81-1db8920b2a9c.png\\"],\\"datePublished\\":\\"2023-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-24T04:06:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1693755609000,"updatedTime":1711253194000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.42,"words":726},"filePathRelative":"computerBasics/arithmetic/youxiangmohuantutu.md","localizedDate":"2023年9月3日","excerpt":"<h2>概念</h2>\\n<p>有向图由顶点和有向边组成，有向边由上游点和下游点组成，比如一个(u,v)表示一个有向边，其中u就是该有向边的上游点，v就是该有向边的下游点，\\n入度就是一个顶点作为下游点所在有向边的个数(也就是指向该顶点的个数)，比如顶点1的入度为0，顶点3的入度为1，顶点6的入度为2。\\n出度就是一个顶点作为上游点所在有向边的个数(该顶点指出的个数)，比如顶点的出度是1，顶点3的出度是2。\\n<img src=\\"/common/1669733409962-36e0cc02-9f53-4d1f-ae81-1db8920b2a9c.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n在线展示示例：<a href=\\"https://echarts.apache.org/examples/zh/editor.html?c=graph-simple\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://echarts.apache.org/examples/zh/editor.html?c=graph-simple</a></p>","autoDesc":true}');export{w as comp,f as data};
