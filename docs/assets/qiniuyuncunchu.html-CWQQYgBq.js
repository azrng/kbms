import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,d as s,e as c,b as l}from"./app-qB9_Bjjp.js";const u={},i=l(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>C## SDK 属于服务端SDK之一，主要有如下功能：</p><ul><li>提供生成客户端上传所需的上传凭证的功能</li><li>提供文件从服务端直接上七牛的功能</li><li>提供对七牛空间中文件进行管理的功能</li><li>提供对七牛空间中文件进行处理的功能</li><li>提供七牛CDN相关的刷新，预取，日志功能</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="客户端上传凭证" tabindex="-1"><a class="header-anchor" href="#客户端上传凭证"><span>客户端上传凭证</span></a></h3><p>客户端（移动端或者Web端）上传文件的时候，需要从客户自己的业务服务器获取上传凭证，而这些上传凭证是通过服务端的SDK来生成的，然后通过客户自己的业务API分发给客户端使用。根据上传的业务需求不同，c## SDK支持丰富的上传凭证生成方式。 创建各种上传凭证之前，我们需要定义好其中鉴权对象mac：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Mac</span> mac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mac</span><span class="token punctuation">(</span>AccessKey<span class="token punctuation">,</span> SecretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="简单上传凭证" tabindex="-1"><a class="header-anchor" href="#简单上传凭证"><span>简单上传凭证</span></a></h3><p>最简单的上传凭证只需要AccessKey，SecretKey和Bucket就可以。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">PutPolicy</span> putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>Scope <span class="token operator">=</span> Bucket<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> token <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">CreateUploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> putPolicy<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，在不指定上传凭证的有效时间情况下，默认有效期为1个小时。也可以自行指定上传凭证的有效期，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//自定义凭证有效期（示例2小时，expires单位为秒，为上传凭证的有效时间）</span>
<span class="token class-name">PutPolicy</span> putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>Scope <span class="token operator">=</span> Bucket<span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span><span class="token function">SetExpires</span><span class="token punctuation">(</span><span class="token number">7200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> token <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">CreateUploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> putPolicy<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="覆盖上传的凭证" tabindex="-1"><a class="header-anchor" href="#覆盖上传的凭证"><span>覆盖上传的凭证</span></a></h3><p>覆盖上传除了需要简单上传所需要的信息之外，还需要想进行覆盖的文件名称，这个文件名称同时可是客户端上传代码中指定的文件名，两者必须一致。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">PutPolicy</span> putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>Scope <span class="token operator">=</span> Bucket <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> Key<span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span><span class="token function">SetExpires</span><span class="token punctuation">(</span><span class="token number">7200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> token <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">CreateUploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> putPolicy<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义上传回复的凭证" tabindex="-1"><a class="header-anchor" href="#自定义上传回复的凭证"><span>自定义上传回复的凭证</span></a></h3><p>默认情况下，文件上传到存储之后，在没有设置returnBody或者回调相关的参数情况下，存储返回给上传端的回复格式为hash和key，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span><span class="token string">&quot;hash&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Ftgm-CkWePC9fzMBTRNmPMhGBcSV&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;qiniu.jpg&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有时候我们希望能自定义这个返回的JSON格式的内容，可以通过设置returnBody参数来实现，在returnBody中，我们可以使用七牛支持的魔法变量和自定义变量。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">PutPolicy</span> putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>Scope <span class="token operator">=</span> Bucket <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> Key<span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>ReturnBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;key\\&quot;:\\&quot;$(key)\\&quot;,\\&quot;hash\\&quot;:\\&quot;$(etag)\\&quot;,\\&quot;fsiz\\&quot;:$(fsize),\\&quot;bucket\\&quot;:\\&quot;$(bucket)\\&quot;,\\&quot;name\\&quot;:\\&quot;$(x:name)\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> token <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">CreateUploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> putPolicy<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则文件上传到存储之后，收到的回复内容如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;qiniu.jpg&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hash&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Ftgm-CkWePC9fzMBTRNmPMhGBcSV&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bucket&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;if-bc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;fsize&quot;</span><span class="token punctuation">:</span><span class="token number">39335</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;qiniu&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="带回调业务服务器的凭证" tabindex="-1"><a class="header-anchor" href="#带回调业务服务器的凭证"><span>带回调业务服务器的凭证</span></a></h3><p>上面生成的自定义上传回复的上传凭证适用于上传端（无论是客户端还是服务端）和存储服务器之间进行直接交互的情况下。在客户端上传的场景之下，有时候客户端需要在文件上传到存储之后，从业务服务器获取相关的信息，这个时候就要用到存储的上传回调及相关回调参数的设置。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>Scope <span class="token operator">=</span> Bucket<span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>CallbackUrl <span class="token operator">=</span> <span class="token string">&quot;http://api.example.com/qiniu/upload/callback&quot;</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>CallbackBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;key\\&quot;:\\&quot;$(key)\\&quot;,\\&quot;hash\\&quot;:\\&quot;$(etag)\\&quot;,\\&quot;fsiz\\&quot;:$(fsize),\\&quot;bucket\\&quot;:\\&quot;$(bucket)\\&quot;,\\&quot;name\\&quot;:\\&quot;$(x:name)\\&quot;}&quot;</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>CallbackBodyType <span class="token operator">=</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">;</span>
upToken <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">CreateUploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> putPolicy<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>upToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用了上传回调的情况下，客户端收到的回复就是业务服务器响应七牛的JSON格式内容。通常情况下，我们建议使用application/json格式来设置callbackBody，保持数据格式的统一性。实际情况下，callbackBody也支持application/x-www-form-urlencoded格式来组织内容，这个主要看业务服务器在接收到callbackBody的内容时如果解析。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>Scope <span class="token operator">=</span> Bucket<span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>CallbackUrl <span class="token operator">=</span> <span class="token string">&quot;http://api.example.com/qiniu/upload/callback&quot;</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>CallbackBody <span class="token operator">=</span> <span class="token string">&quot;key=$(key)&amp;hash=$(etag)&amp;bucket=$(bucket)&amp;fsize=$(fsize)&amp;name=$(x:name)&quot;</span><span class="token punctuation">;</span>
upToken <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">CreateUploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> putPolicy<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>upToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带数据处理的凭证" tabindex="-1"><a class="header-anchor" href="#带数据处理的凭证"><span>带数据处理的凭证</span></a></h3><p>七牛支持在文件上传到七牛之后，立即对其进行多种指令的数据处理，这个只需要在生成的上传凭证中指定相关的处理参数即可。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>putPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PutPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> saveMp4Entry <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">UrlSafeBase64Encode</span><span class="token punctuation">(</span>Bucket <span class="token operator">+</span> <span class="token string">&quot;:avthumb_test_target.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> saveJpgEntry <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">UrlSafeBase64Encode</span><span class="token punctuation">(</span>Bucket <span class="token operator">+</span> <span class="token string">&quot;:vframe_test_target.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> avthumbMp4Fop <span class="token operator">=</span> <span class="token string">&quot;avthumb/mp4|saveas/&quot;</span> <span class="token operator">+</span> saveMp4Entry<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> vframeJpgFop <span class="token operator">=</span> <span class="token string">&quot;vframe/jpg/offset/1|saveas/&quot;</span> <span class="token operator">+</span> saveJpgEntry<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> fops <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> avthumbMp4Fop<span class="token punctuation">,</span> vframeJpgFop <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>Scope <span class="token operator">=</span> Bucket<span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>PersistentOps <span class="token operator">=</span> fops<span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>PersistentPipeline <span class="token operator">=</span> <span class="token string">&quot;video-pipe&quot;</span><span class="token punctuation">;</span>
putPolicy<span class="token punctuation">.</span>PersistentNotifyUrl <span class="token operator">=</span> <span class="token string">&quot;http://api.example.com/qiniu/pfop/notify&quot;</span><span class="token punctuation">;</span>
upToken <span class="token operator">=</span> Auth<span class="token punctuation">.</span><span class="token function">CreateUploadToken</span><span class="token punctuation">(</span>mac<span class="token punctuation">,</span> putPolicy<span class="token punctuation">.</span><span class="token function">ToJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>upToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>队列 pipeline 请参阅创建私有队列；转码操作具体参数请参阅音视频转码；saveas 请参阅处理结果另存。</p><h3 id="带自定义参数的凭证" tabindex="-1"><a class="header-anchor" href="#带自定义参数的凭证"><span>带自定义参数的凭证</span></a></h3><p>存储支持客户端上传文件的时候定义一些自定义参数，这些参数可以在returnBody和callbackBody里面和七牛内置支持的魔法变量（即系统变量）通过相同的方式来引用。这些自定义的参数名称必须以x:开头。例如客户端上传的时候指定了自定义的参数x:name和x:age分别是string和int类型。那么可以通过下面的方式引用：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>putPolicy<span class="token punctuation">.</span>ReturnBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;key\\&quot;:\\&quot;$(key)\\&quot;,\\&quot;hash\\&quot;:\\&quot;$(etag)\\&quot;,\\&quot;fsiz\\&quot;:$(fsize),\\&quot;bucket\\&quot;:\\&quot;$(bucket)\\&quot;,\\&quot;name\\&quot;:\\&quot;$(x:name)\\&quot;}&quot;</span><span class="token punctuation">;</span>

或者
putPolicy<span class="token punctuation">.</span>CallbackBody <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;key\\&quot;:\\&quot;$(key)\\&quot;,\\&quot;hash\\&quot;:\\&quot;$(etag)\\&quot;,\\&quot;fsiz\\&quot;:$(fsize),\\&quot;bucket\\&quot;:\\&quot;$(bucket)\\&quot;,\\&quot;name\\&quot;:\\&quot;$(x:name)\\&quot;}&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="综合上传凭证" tabindex="-1"><a class="header-anchor" href="#综合上传凭证"><span>综合上传凭证</span></a></h3><p>上面的生成上传凭证的方法，都是通过设置上传策略🔗相关的参数来支持的，这些参数可以通过不同的组合方式来满足不同的业务需求，可以灵活地组织你所需要的上传凭证。</p><h3 id="服务端直传" tabindex="-1"><a class="header-anchor" href="#服务端直传"><span>服务端直传</span></a></h3><p>服务端直传是指客户利用七牛服务端SDK从服务端直接上传文件到存锤，交互的双方一般都在机房里面，所以服务端可以自己生成上传凭证，然后利用SDK中的上传逻辑进行上传，最后从七牛云获取上传的结果，这个过程中由于双方都是业务服务器，所以很少利用到上传回调的功能，而是直接自定义returnBody来获取自定义的回复内容。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,39),r={href:"https://mp.weixin.qq.com/s/UfK_kLxz7x1zyokWN3CPtA",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[i,n("p",null,[s("微信公众号【DotNet NB】："),n("a",r,[s("https://mp.weixin.qq.com/s/UfK_kLxz7x1zyokWN3CPtA"),c(a)])])])}const g=t(u,[["render",k],["__file","qiniuyuncunchu.html.vue"]]),q=JSON.parse('{"path":"/middleware/oss/qiniuyuncunchu.html","title":"七牛云存储","lang":"zh-CN","frontmatter":{"title":"七牛云存储","lang":"zh-CN","date":"2022-01-16T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"qiniuyuncunchu","slug":"vwg15v","docsId":"63746249","description":"介绍 C## SDK 属于服务端SDK之一，主要有如下功能： 提供生成客户端上传所需的上传凭证的功能 提供文件从服务端直接上七牛的功能 提供对七牛空间中文件进行管理的功能 提供对七牛空间中文件进行处理的功能 提供七牛CDN相关的刷新，预取，日志功能 操作 客户端上传凭证 客户端（移动端或者Web端）上传文件的时候，需要从客户自己的业务服务器获取上传凭证...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/oss/qiniuyuncunchu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"七牛云存储"}],["meta",{"property":"og:description","content":"介绍 C## SDK 属于服务端SDK之一，主要有如下功能： 提供生成客户端上传所需的上传凭证的功能 提供文件从服务端直接上七牛的功能 提供对七牛空间中文件进行管理的功能 提供对七牛空间中文件进行处理的功能 提供七牛CDN相关的刷新，预取，日志功能 操作 客户端上传凭证 客户端（移动端或者Web端）上传文件的时候，需要从客户自己的业务服务器获取上传凭证..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-13T14:11:27.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-01-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-13T14:11:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"七牛云存储\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-13T14:11:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"客户端上传凭证","slug":"客户端上传凭证","link":"#客户端上传凭证","children":[]},{"level":3,"title":"简单上传凭证","slug":"简单上传凭证","link":"#简单上传凭证","children":[]},{"level":3,"title":"覆盖上传的凭证","slug":"覆盖上传的凭证","link":"#覆盖上传的凭证","children":[]},{"level":3,"title":"自定义上传回复的凭证","slug":"自定义上传回复的凭证","link":"#自定义上传回复的凭证","children":[]},{"level":3,"title":"带回调业务服务器的凭证","slug":"带回调业务服务器的凭证","link":"#带回调业务服务器的凭证","children":[]},{"level":3,"title":"带数据处理的凭证","slug":"带数据处理的凭证","link":"#带数据处理的凭证","children":[]},{"level":3,"title":"带自定义参数的凭证","slug":"带自定义参数的凭证","link":"#带自定义参数的凭证","children":[]},{"level":3,"title":"综合上传凭证","slug":"综合上传凭证","link":"#综合上传凭证","children":[]},{"level":3,"title":"服务端直传","slug":"服务端直传","link":"#服务端直传","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1710339087000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.01,"words":1503},"filePathRelative":"middleware/oss/qiniuyuncunchu.md","localizedDate":"2022年1月16日","excerpt":"<h2>介绍</h2>\\n<p>C## SDK 属于服务端SDK之一，主要有如下功能：</p>\\n<ul>\\n<li>提供生成客户端上传所需的上传凭证的功能</li>\\n<li>提供文件从服务端直接上七牛的功能</li>\\n<li>提供对七牛空间中文件进行管理的功能</li>\\n<li>提供对七牛空间中文件进行处理的功能</li>\\n<li>提供七牛CDN相关的刷新，预取，日志功能</li>\\n</ul>\\n<h2>操作</h2>\\n<h3>客户端上传凭证</h3>\\n<p>客户端（移动端或者Web端）上传文件的时候，需要从客户自己的业务服务器获取上传凭证，而这些上传凭证是通过服务端的SDK来生成的，然后通过客户自己的业务API分发给客户端使用。根据上传的业务需求不同，c## SDK支持丰富的上传凭证生成方式。\\n创建各种上传凭证之前，我们需要定义好其中鉴权对象mac：</p>","autoDesc":true}');export{g as comp,q as data};
