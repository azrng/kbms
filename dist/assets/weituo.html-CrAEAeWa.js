import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,b as n,d as e,e as l}from"./app-vSdX8vi3.js";const i="/kbms/common/1613872694982-1b0b4a67-7fdb-41a5-86e3-c30a09086f9e.png",u={},r=l(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h3><p>委托(Delegate)由来，早在c/c++中，有一个概念叫做函数的指针，其实就是一个内存指针，指向一个函数，想去调用函数的时候，只要调用函数指针就可以了，至于函数本身的实现，可以放在其他地方，也可以后实现。到了net中，没有指针的概念，但是这种方法保存了下来，形成了现在的委托Delegate。委托本身也是一种引用类型，它保存的是托管堆中对象的引用，只不过这个引用是对方法的引用。</p><blockquote><p>自己理解：委托可以保存好多同种方法(入参和出参的类型相同)的调用方式，当你去调用委托的时候，委托去代替你调用指定的方法。</p></blockquote><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><p>委托间接的将调用者和目标方法解耦(目标方法没见过调用者，调用者也不认真目标方法)。举个常见的例子，UI编程中的按钮Button类。按钮类本身并不知道它的OnClick事件是如何处理的，也不需要知道。所以实际中，OnClick事件就是使用委托发布的。开发者在开发过程中实现OnClick事件的处理，并由UI订阅使用。这种方式就是利用委托对类的解耦。调用者调用委托，然后委托再去调用目标方法。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="定义委托" tabindex="-1"><a class="header-anchor" href="#定义委托"><span>定义委托</span></a></h3><p>委托类型定义了方法的返回类型(bool)和参数类型(int)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//委托类型</span>
<span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Transformer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Transformer兼容(存放)任何返回类型为bool并且有一个入参类型为int的方法,例如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Vaild</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将该方法赋值给一个委托变量就是创建了一个委托实例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//委托实例</span>
<span class="token class-name">Transformer</span> transformer <span class="token operator">=</span> Vaild<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以让我(调用者)通过委托调用未曾蒙面的方法(假设Vaild方法是另一个同事写的)。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">transformer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// True</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>transformer<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用者(我)调用委托(transformer),委托去调用方法(Vaild)。</p><h3 id="委托是方法的指针" tabindex="-1"><a class="header-anchor" href="#委托是方法的指针"><span>委托是方法的指针</span></a></h3><p>实现一个带上传进度通知的类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//赋值的过程就是将自身所具有的和委托声明相同的声明方法名赋值给FileUploaded</span>
        fileUpload<span class="token punctuation">.</span>FileUploaded<span class="token operator">=</span>OutPutMessage<span class="token punctuation">;</span>
        fileUpload<span class="token punctuation">.</span>FileUploaded<span class="token operator">+=</span>ProgressAnother<span class="token punctuation">;</span>
        fileUpload<span class="token punctuation">.</span><span class="token function">Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OutPutMessage</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ProgressAnother</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> message<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;另一个通知方法&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 文件传输的进度通知</span>
<span class="token doc-comment comment">/// 演示目的：委托是方法的指针</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpload</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FileUploadHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> progress<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">FileUploadHandler</span> FileUploaded<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> fileProgress <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fileProgress<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            fileProgress<span class="token operator">--</span><span class="token punctuation">;</span>
            FileUploaded<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>fileProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个有一个问题就是，调用者可以修改委托的FileUploaded为null，也可以直接被外部调阅，比如</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 会导致原来的需要订阅的地方接收不到通知</span>
fileUpload<span class="token punctuation">.</span>FileUploaded<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 原本应该由FileUpload类自己执行的，变成通过调用者去执行了</span>
fileUpload<span class="token punctuation">.</span><span class="token function">FileUploaded</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于上述问题，我们可以修改为通过事件(event)处理，它为委托加了保护，比如修改为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUpload</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FileUploadHandler</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> progress<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">FileUploadHandler</span> FileUploaded<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> fileProgress <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fileProgress<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            fileProgress<span class="token operator">--</span><span class="token punctuation">;</span>
            FileUploaded<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>fileProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么上面的几种情况就会在编辑期间被阻止，下面这些都是错误的提示</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>fileUpload<span class="token punctuation">.</span>FileUploaded<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
fileUpload<span class="token punctuation">.</span><span class="token function">FileUploaded</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fileUpload<span class="token punctuation">.</span>FileUploaded<span class="token operator">=</span>OutPutMessage<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误信息是：事件‘xxxx’只能出现在+=或者-=的左边。</p><h3 id="委托链" tabindex="-1"><a class="header-anchor" href="#委托链"><span>委托链</span></a></h3><p>委托链的核心就是维护一个可调用的委托列表。当调用列表的是，列表中的所有委托都会被调用。同时，委托链可以使用操作符，+来组合，-来删除</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token comment">//要引用的方法的返回类型或参数要与委托类型声明相匹配。</span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Delegate_Method</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Delegate_Method<span class="token punctuation">[</span><span class="token punctuation">]</span></span> delegate_list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Delegate_Method<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> Sum<span class="token punctuation">,</span> Sub <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//委托加法</span>
            <span class="token class-name">Delegate_Method</span> delegate_jia <span class="token operator">=</span> delegate_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> delegate_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//组合委托</span>
            <span class="token function">delegate_jia</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;****************************************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//委托减法</span>
            <span class="token class-name">Delegate_Method</span> delegate_jian <span class="token operator">=</span> delegate_jia <span class="token operator">-</span> delegate_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//移除委托</span>
            <span class="token function">delegate_jian</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;****************************************&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//GetInvocationList方法获取委托链中的所有委托 </span>
            <span class="token class-name">Delegate<span class="token punctuation">[</span><span class="token punctuation">]</span></span> delegates <span class="token operator">=</span> delegate_jia<span class="token punctuation">.</span><span class="token function">GetInvocationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> delegates<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> _delegate <span class="token operator">=</span> <span class="token punctuation">(</span>Delegate_Method<span class="token punctuation">)</span>delegates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token function">_delegate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多播委托" tabindex="-1"><a class="header-anchor" href="#多播委托"><span>多播委托</span></a></h3><p>所有的委托实例都拥有多播能力，这就代表一个委托实例可以引用一个目标方法，也可以引用多个目标方法，这就称为多播，多播委托时候，只能组合相同类型的委托。操作符(+、+=、-、-=)可用于从组合委托中增加/删除委托组件。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//要引用的方法的返回类型和传入参数要与委托类型声明相匹配。</span>
<span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Delegate_Method</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//多播委托的返回类型总是void</span>
    <span class="token class-name">Delegate_Method</span> delegate1<span class="token punctuation">,</span> delegate2<span class="token punctuation">,</span> delegate3<span class="token punctuation">,</span> delegate4<span class="token punctuation">;</span>

    delegate1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">//多播委托</span>
    delegate1 <span class="token operator">+=</span> Sum<span class="token punctuation">;</span>
    delegate1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;-----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    delegate1 <span class="token operator">+=</span> Sub<span class="token punctuation">;</span>
    delegate1<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    delegate1 <span class="token operator">-=</span> Sum<span class="token punctuation">;</span>
    delegate1 <span class="token operator">-=</span> Sub<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate1 <span class="token keyword">is</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;delegate1为null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    delegate1 <span class="token operator">+=</span> Sum<span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;----delegate1执行结束 分割线----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    delegate2 <span class="token operator">=</span> Sub<span class="token punctuation">;</span>
    delegate2 <span class="token operator">+=</span> delegate1<span class="token punctuation">;</span>
    <span class="token comment">// 委托是不可变的，因此调用+=和-=的实质是创建一个新的委托实例，并把它赋值给已有变量。</span>
    delegate2<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;----delegate2执行结束 分割线----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//组合委托</span>
    delegate3 <span class="token operator">=</span> delegate1 <span class="token operator">+</span> delegate2<span class="token punctuation">;</span><span class="token comment">//委托对象分配给一个委托实例，以便使用操作符进行多播</span>

    <span class="token function">delegate3</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//组合委托调用由它组成的多个委托</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;----delegate3执行结束 分割线----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    delegate4 <span class="token operator">=</span> delegate3 <span class="token operator">-</span> delegate2<span class="token punctuation">;</span><span class="token comment">// delegate1</span>
    <span class="token function">delegate4</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;----delegate4执行结束 分割线----&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sub</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token number">1</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">3</span>
<span class="token operator">-</span><span class="token number">1</span>
delegate1为<span class="token keyword">null</span>
<span class="token operator">--</span><span class="token operator">--</span>delegate1执行结束 分割线<span class="token operator">--</span><span class="token operator">--</span>
<span class="token operator">-</span><span class="token number">1</span>
<span class="token number">7</span>
<span class="token operator">--</span><span class="token operator">--</span>delegate2执行结束 分割线<span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">150</span>
<span class="token number">50</span>
<span class="token number">150</span>
<span class="token operator">--</span><span class="token operator">--</span>delegate3执行结束 分割线<span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">150</span>
<span class="token operator">--</span><span class="token operator">--</span>delegate4执行结束 分割线<span class="token operator">--</span><span class="token operator">--</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>多播委托返回类型总是void，如果返回值不是void，那么只会接受最后一个被调用的方法来返回值。</p></blockquote><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>1.有A,B两个方法，这两个方法比较长，中间那部分一样，那么这个时候就可以将中间那部分做成一个委托，然后在ab两个方法里面调用这个委托，这个情况下这个委托是可以通过抽出来公共方法进行替换的 2.有A,B两个方法，这两个方法比较长，上面和下面代码一样，中间的那块代码不一样，但是又相似点(请求参数和返回参数有某种继承关系),这个时候就可以将中间那部分作为两个委托方法，然后ab两个方法合为c，然后调用c的时候，根据不同的情况传输不同的委托方法作为c方法的参数</p><h3 id="封装好的泛型委托" tabindex="-1"><a class="header-anchor" href="#封装好的泛型委托"><span>封装好的泛型委托</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//无返回值，无参数委托，不需要单独声明</span>
<span class="token class-name">Action</span> act <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>DoNothing<span class="token punctuation">;</span>
<span class="token comment">//无返回值，有参数委托，参数类型为泛型</span>
<span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> act <span class="token operator">=</span> p <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//返回类型为string，参数类型为string的委托</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> func <span class="token operator">=</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">;</span>
<span class="token comment">//返回类型为bool，参数类型为string的委托</span>
<span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span> func <span class="token operator">=</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>&#39;&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了用户自定义的委托之外，系统还为用户提供了一个内置的委托类型Action和Func</p><h4 id="action委托" tabindex="-1"><a class="header-anchor" href="#action委托"><span>Action委托</span></a></h4><p><code>Action</code>属于无参数无返回值的函数类型 <code>Action&lt;T&gt;</code>通过设置泛型，我们可以定义多个参数，无返回值的函数 当函数有多个重载时候，系统会自动匹配 Action是没有返回值的 参数也是0或者最多16个 常用例子：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                id <span class="token operator">=</span> <span class="token string">&quot;222&quot;</span><span class="token punctuation">,</span>
                Name <span class="token operator">=</span> <span class="token string">&quot;我是测试数据&quot;</span><span class="token punctuation">,</span>
                Age <span class="token operator">=</span> <span class="token number">10</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//可以可以拿到一个useinfo类型的对象，可以对其进行操作</span>
                info<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;我已经不是当初那个值了&quot;</span><span class="token punctuation">;</span>
                info<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
                <span class="token comment">//我是一个委托但是我并没有返回值</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">UserInfo</span> userInfo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                id <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
                Name <span class="token operator">=</span> userInfo<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
                Age <span class="token operator">=</span> userInfo<span class="token punctuation">.</span>Age
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>userInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> userInfo1<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值： <img src="`+i+`" alt="image.png" loading="lazy"></p><h4 id="func委托" tabindex="-1"><a class="header-anchor" href="#func委托"><span>Func委托</span></a></h4><p>Func只有带泛型的一种形式，Action有带泛型和不带的两种 Func委托必须要带一个返回值 可以有0个最多16个参数类型 最后一个泛型参数代表返回类型，前面的都是参数类型 参数类型必须跟指向的方法的参数类型按照顺序对应 常用例子</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                id <span class="token operator">=</span> <span class="token string">&quot;222&quot;</span><span class="token punctuation">,</span>
                Name <span class="token operator">=</span> <span class="token string">&quot;我是测试数据&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
              <span class="token punctuation">{</span>
                 <span class="token comment">//可以可以拿到一个useinfo类型的对象，可以对其进行操作</span>
                  info<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;我已经不是当初那个值了&quot;</span><span class="token punctuation">;</span>
                  <span class="token comment">//我是一个委托,并且我包含返回值</span>
                  <span class="token keyword">return</span> info<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> action<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">UserInfo</span> userInfo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                id <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
                Name <span class="token operator">=</span> userInfo<span class="token punctuation">.</span>Name
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span>  action<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>userInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值：我已经不是当初那个值了</p><h4 id="predicate委托" tabindex="-1"><a class="header-anchor" href="#predicate委托"><span>Predicate委托</span></a></h4><p>常用语检索collection，语法结构：<code>Predicate&lt;T&gt;</code> 示例用法：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Predicate<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span> hydCustomers <span class="token operator">=</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Customer</span> customer <span class="token operator">=</span> custList<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>hydCustomers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步调用委托" tabindex="-1"><a class="header-anchor" href="#异步调用委托"><span>异步调用委托</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Task</span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SendDelegate<span class="token punctuation">)</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,55),k={href:"https://www.cnblogs.com/guoqiang1/p/8138889.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.cnblogs.com/edisonchou/archive/2012/03/20/2407675.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/edisonchou/p/4104612.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/4x7CN5p724X-1lmumomSdg",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("委托和事件应用场景："),s("a",k,[n("https://www.cnblogs.com/guoqiang1/p/8138889.html"),e(a)]),n(" 委托和事件学习笔记："),s("a",d,[n("https://www.cnblogs.com/edisonchou/archive/2012/03/20/2407675.html"),e(a)]),n(" 系统预定于委托和Labmda表达式教程："),s("a",v,[n("https://www.cnblogs.com/edisonchou/p/4104612.html"),e(a)]),n(" 多播委托和事件："),s("a",m,[n("https://mp.weixin.qq.com/s/4x7CN5p724X-1lmumomSdg"),e(a)])])])}const f=t(u,[["render",b],["__file","weituo.html.vue"]]),x=JSON.parse('{"path":"/dotnet/csharp/gaojizhuti/weituo.html","title":"委托","lang":"zh-CN","frontmatter":{"title":"委托","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"weituo","slug":"iqhbtk","docsId":"31694735","description":"介绍 描述 委托(Delegate)由来，早在c/c++中，有一个概念叫做函数的指针，其实就是一个内存指针，指向一个函数，想去调用函数的时候，只要调用函数指针就可以了，至于函数本身的实现，可以放在其他地方，也可以后实现。到了net中，没有指针的概念，但是这种方法保存了下来，形成了现在的委托Delegate。委托本身也是一种引用类型，它保存的是托管堆中对...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/gaojizhuti/weituo.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"委托"}],["meta",{"property":"og:description","content":"介绍 描述 委托(Delegate)由来，早在c/c++中，有一个概念叫做函数的指针，其实就是一个内存指针，指向一个函数，想去调用函数的时候，只要调用函数指针就可以了，至于函数本身的实现，可以放在其他地方，也可以后实现。到了net中，没有指针的概念，但是这种方法保存了下来，形成了现在的委托Delegate。委托本身也是一种引用类型，它保存的是托管堆中对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1613872694982-1b0b4a67-7fdb-41a5-86e3-c30a09086f9e.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T15:44:14.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T15:44:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"委托\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1613872694982-1b0b4a67-7fdb-41a5-86e3-c30a09086f9e.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T15:44:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"定义委托","slug":"定义委托","link":"#定义委托","children":[]},{"level":3,"title":"委托是方法的指针","slug":"委托是方法的指针","link":"#委托是方法的指针","children":[]},{"level":3,"title":"委托链","slug":"委托链","link":"#委托链","children":[]},{"level":3,"title":"多播委托","slug":"多播委托","link":"#多播委托","children":[]}]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[{"level":3,"title":"封装好的泛型委托","slug":"封装好的泛型委托","link":"#封装好的泛型委托","children":[{"level":4,"title":"Action委托","slug":"action委托","link":"#action委托","children":[]},{"level":4,"title":"Func委托","slug":"func委托","link":"#func委托","children":[]},{"level":4,"title":"Predicate委托","slug":"predicate委托","link":"#predicate委托","children":[]}]},{"level":3,"title":"异步调用委托","slug":"异步调用委托","link":"#异步调用委托","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700235854000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":8.16,"words":2448},"filePathRelative":"dotnet/csharp/gaojizhuti/weituo.md","localizedDate":"2023年10月22日","excerpt":"<h2>介绍</h2>\\n<h3>描述</h3>\\n<p>委托(Delegate)由来，早在c/c++中，有一个概念叫做函数的指针，其实就是一个内存指针，指向一个函数，想去调用函数的时候，只要调用函数指针就可以了，至于函数本身的实现，可以放在其他地方，也可以后实现。到了net中，没有指针的概念，但是这种方法保存了下来，形成了现在的委托Delegate。委托本身也是一种引用类型，它保存的是托管堆中对象的引用，只不过这个引用是对方法的引用。</p>\\n<blockquote>\\n<p>自己理解：委托可以保存好多同种方法(入参和出参的类型相同)的调用方式，当你去调用委托的时候，委托去代替你调用指定的方法。</p>\\n</blockquote>","autoDesc":true}');export{f as comp,x as data};
