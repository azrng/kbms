import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as s,o as n}from"./app-Du2i1EF2.js";const a="/kbms/cloud/image-20210715093411379.png",l="/kbms/cloud/image-20210715093724991.png",o={};function i(c,e){return n(),r("div",null,e[0]||(e[0]=[s('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>k3s是经过CNCF认证的由Rancher公司开发维护的一个<strong>轻量级的 Kubernetes 发行版</strong>，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，<code>K3s 就是阉割版 K8s</code>，消耗资源极少。它主要用于<strong>边缘计算、物联网</strong>等场景。</p><p>官网文档：<a href="https://docs.k3s.io/zh/" target="_blank" rel="noopener noreferrer">https://docs.k3s.io/zh/</a></p><p>中文网站：<a href="http://docs.rancher.cn/docs/k3s/quick-start/_index/" target="_blank" rel="noopener noreferrer">http://docs.rancher.cn/docs/k3s/quick-start/_index/</a></p><p>K3s 具有以下特点：</p><p>1）安装简单，占用资源少，只需要512M内存就可以运行起来；<br> 2）apiserver 、schedule 等组件全部简化，并以进程的形式运行在节点上，把程序都打包为单个二进制文件，每个程序只需要占用100M内存；<br> 3）使用基于<code>sqlite3</code>的轻量级存储后端作为默认存储机制。同时支持使用etcd3、MySQL 和PostgreSQL作为存储机制；<br> 4）默认使用 <code>local-path-provisioner</code> 提供本地存储卷；<br> 5）默认安装了<code>Helm controller</code> 和 <code>Traefik Ingress controller</code>；<br> 6）所有 Kubernetes control-plane 组件的操作都封装在单个二进制文件和进程中，使 K3s 具有自动化和管理包括证书分发在内的复杂集群操作的能力。<br> 7）减少外部依赖，操作系统只需要安装较新的内核（centos7.6就可以，不需要升级内核）以及支持cgroup即可，k3s安装包已经包含了containerd、Flannel、CoreDNS，非常方便地一键式安装，不需要额外安装Docker、Flannel等组件。</p><h2 id="k3s架构" tabindex="-1"><a class="header-anchor" href="#k3s架构"><span>K3s架构</span></a></h2><blockquote><p>内容来自：<a href="https://www.cnblogs.com/hujinzhong/p/15014487.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/hujinzhong/p/15014487.html</a></p></blockquote><h3 id="单节点架构" tabindex="-1"><a class="header-anchor" href="#单节点架构"><span>单节点架构</span></a></h3><figure><img src="'+a+'" alt="image-20210715093411379" tabindex="0" loading="lazy"><figcaption>image-20210715093411379</figcaption></figure><p>1）k3s server节点是运行k3s server命令的机器（裸机或者虚拟机），而k3s Agent 节点是运行k3s agent命令的机器。</p><p>2）单点架构只有一个控制节点（在 K3s 里叫做server node，相当于 K8s 的 master node），而且K3s的数据存储使用 sqlite 并内置在了控制节点上</p><p>3）在这种配置中，每个 agent 节点都注册到同一个 server 节点。K3s 用户可以通过调用server节点上的K3s API来操作Kubernetes资源。</p><h3 id="高可用架构" tabindex="-1"><a class="header-anchor" href="#高可用架构"><span>高可用架构</span></a></h3><figure><img src="'+l+'" alt="image-20210715093724991" tabindex="0" loading="lazy"><figcaption>image-20210715093724991</figcaption></figure><p>虽然单节点 k3s 集群可以满足各种用例，但对于 Kubernetes control-plane 的正常运行至关重要的环境，可以在高可用配置中运行 K3s。一个高可用 K3s 集群由以下几个部分组成：</p><p>1）<strong>K3s Server 节点</strong>：两个或者更多的server节点将为 Kubernetes API 提供服务并运行其他 control-plane 服务</p><p>2）<strong>外部数据库</strong>：外部数据存储（与单节点 k3s 设置中使用的嵌入式 SQLite 数据存储相反）</p><h2 id="资源对象" tabindex="-1"><a class="header-anchor" href="#资源对象"><span>资源对象</span></a></h2><h3 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment"><span><strong>Deployment</strong></span></a></h3><ul><li><strong>定义</strong>：Deployment 是用来描述应用的期望状态，包括应用的副本数、应用的镜像、更新策略等。</li><li><strong>用途</strong>：用于管理无状态应用的副本，确保应用始终以用户定义的状态运行。它允许你定义应用的副本数，并在需要时自动扩展或缩减副本数。</li><li>特点 <ul><li>支持滚动更新，可以平滑地更新应用而不影响服务的可用性。</li><li>可以设置健康检查，自动替换不健康的容器。</li><li>提供版本回滚功能，如果新版本有问题，可以回滚到之前的版本。</li></ul></li></ul><h3 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span><strong>Service</strong></span></a></h3><ul><li><strong>定义</strong>：Service 是定义一组Pods的逻辑集合，它为这些Pods提供一个统一的访问接口。</li><li><strong>用途</strong>：用于定义一组具有相同功能的Pods的访问策略，可以是内部访问（ClusterIP）或外部访问（NodePort、LoadBalancer）。</li><li>特点 <ul><li>提供负载均衡，可以将请求分发到后端的多个Pods。</li><li>支持服务发现，Pods不需要知道彼此的IP地址，通过Service名称就可以相互通信。</li><li>支持端口映射，可以将Service的端口映射到Pods的不同端口。</li></ul></li></ul><h4 id="type类型" tabindex="-1"><a class="header-anchor" href="#type类型"><span>Type类型</span></a></h4><p>type类型几种 <code>Service</code> 类型：</p><ol><li><strong>ClusterIP</strong>： <ul><li>默认类型，只在 Kubernetes 集群内部可见。</li><li>适合内部服务，如数据库，不需要从集群外部访问。</li><li>提供了一个只对集群内部开放的稳定 IP 地址。</li></ul></li><li><strong>NodePort</strong>： <ul><li>通过每个节点上的端口对外提供服务。</li><li>适合需要从集群外部访问，但不需要负载均衡的场景。</li><li>每个节点都会开放一个静态端口（由 <code>NodePort</code> 指定），外部可以通过 <code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code> 访问服务。</li></ul></li><li><strong>LoadBalancer</strong>（仅限云服务商环境）： <ul><li>在云服务商环境中，自动创建一个外部负载均衡器。</li><li>适合需要从集群外部访问，并且需要负载均衡的场景。</li></ul></li><li><strong>ExternalName</strong>： <ul><li>通过 CNAME 记录将服务映射到外部服务。</li><li>适合将流量路由到集群外部的服务。</li></ul></li></ol><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h2><h3 id="redis-master-deployment-yaml" tabindex="-1"><a class="header-anchor" href="#redis-master-deployment-yaml"><span>redis-master-deployment.yaml</span></a></h3><p>这是一个Deployment（部署）的配置文件，用于定义和创建Redis主节点的副本集。Deployment是Kubernetes的资源对象，用于管理Pods的创建、更新和扩缩容等操作。在<code>redis-master-deployment.yaml</code>中，你可以定义Redis主节点的镜像、Pod的副本数、资源限制、环境变量等配置，并指定要使用的存储卷。</p><p>Deployment会创建并管理一组Pods，保证指定数量的Pods在任何时候都处于运行状态。如果Pods发生故障或被删除，Deployment会自动创建新的Pods以维持指定的副本数。因此，<code>redis-master-deployment.yaml</code>主要用于定义Redis主节点的部署规范。</p><h3 id="redis-master-service-yaml" tabindex="-1"><a class="header-anchor" href="#redis-master-service-yaml"><span>redis-master-service.yaml</span></a></h3><p><code>redis-master-service.yaml</code>：这是一个Service（服务）的配置文件，用于定义如何将Redis主节点暴露给其他应用程序或服务。Service是Kubernetes的资源对象，用于提供网络访问和负载均衡等功能。在<code>redis-master-service.yaml</code>中，你可以定义Service的类型、端口映射、选择器和负载均衡策略等配置。</p><p>Service为一组Pods提供了一个稳定的入口点，并通过Cluster IP或者LoadBalancer IP将流量分发到这组Pods上。通过Service，其他应用程序或服务可以通过Service的地址和端口访问Redis主节点。因此，<code>redis-master-service.yaml</code>主要用于定义Redis主节点的服务配置。</p><h2 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h2><p>pod状态：<a href="https://www.cnblogs.com/niuben/p/17427130.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/niuben/p/17427130.html</a></p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/3qBfk7CIyfjk8zXJPbycjg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3qBfk7CIyfjk8zXJPbycjg</a> | K3S 入门级实战教程，和 K8S 有何不同？</p><p><a href="https://www.cnblogs.com/hujinzhong/p/15014487.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/hujinzhong/p/15014487.html</a> k3s安装和部署</p>',38)]))}const h=t(o,[["render",i],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/cloud/k8s/k3s/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2022-10-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"category":["cloud"],"tag":["k3s"],"description":"概述 k3s是经过CNCF认证的由Rancher公司开发维护的一个轻量级的 Kubernetes 发行版，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，K3s 就是阉割版 K8s，消耗资源极少。它主要用于边缘计算、物联网等场景。 官网文档：...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/k8s/k3s/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 k3s是经过CNCF认证的由Rancher公司开发维护的一个轻量级的 Kubernetes 发行版，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，K3s 就是阉割版 K8s，消耗资源极少。它主要用于边缘计算、物联网等场景。 官网文档：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/cloud/image-20210715093411379.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-18T14:11:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"k3s"}],["meta",{"property":"article:published_time","content":"2022-10-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-18T14:11:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20210715093411379.png\\",\\"https://azrng.gitee.io/kbms/kbms/cloud/image-20210715093724991.png\\"],\\"datePublished\\":\\"2022-10-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-18T14:11:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"K3s架构","slug":"k3s架构","link":"#k3s架构","children":[{"level":3,"title":"单节点架构","slug":"单节点架构","link":"#单节点架构","children":[]},{"level":3,"title":"高可用架构","slug":"高可用架构","link":"#高可用架构","children":[]}]},{"level":2,"title":"资源对象","slug":"资源对象","link":"#资源对象","children":[{"level":3,"title":"Deployment","slug":"deployment","link":"#deployment","children":[]},{"level":3,"title":"Service","slug":"service","link":"#service","children":[{"level":4,"title":"Type类型","slug":"type类型","link":"#type类型","children":[]}]}]},{"level":2,"title":"配置文件","slug":"配置文件","link":"#配置文件","children":[{"level":3,"title":"redis-master-deployment.yaml","slug":"redis-master-deployment-yaml","link":"#redis-master-deployment-yaml","children":[]},{"level":3,"title":"redis-master-service.yaml","slug":"redis-master-service-yaml","link":"#redis-master-service-yaml","children":[]}]},{"level":2,"title":"状态","slug":"状态","link":"#状态","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1703947377000,"updatedTime":1726668688000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":7},{"name":"zhangyunpeng","username":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":2}]},"readingTime":{"minutes":5.42,"words":1627},"filePathRelative":"cloud/k8s/k3s/readme.md","localizedDate":"2022年10月11日","excerpt":"<h2>概述</h2>\\n<p>k3s是经过CNCF认证的由Rancher公司开发维护的一个<strong>轻量级的 Kubernetes 发行版</strong>，内核机制还是和 k8s 一样，但是剔除了很多外部依赖以及 K8s 的 alpha、beta 特性，同时改变了部署方式和运行方式，目的是轻量化 K8s，简单来说，<code>K3s 就是阉割版 K8s</code>，消耗资源极少。它主要用于<strong>边缘计算、物联网</strong>等场景。</p>\\n<p>官网文档：<a href=\\"https://docs.k3s.io/zh/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://docs.k3s.io/zh/</a></p>","autoDesc":true}');export{h as comp,m as data};
