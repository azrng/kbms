import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,d as s,e as c,b as l}from"./app-DMmdIwn0.js";const i="/kbms/common/1661049193464-89f24c8c-1dba-4cce-8b87-7b6f633e521e.jpeg",u="/kbms/common/1661051018361-2d773a35-3578-4657-a0ba-ad9b0253bee9.jpeg",r={},k=l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>门面模式也叫做外观模式，定义翻译为中文就是，门面模式为子系统提供一组统一的接口让子系统更易用。</p><p>意思就是，原本我们需要调用多个接口，现在利用门面模式，提供一个包裹了之前多个接口的门面接口给其他系统使用。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><h3 id="解决易用性问题" tabindex="-1"><a class="header-anchor" href="#解决易用性问题"><span>解决易用性问题</span></a></h3><p>可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。比如调用系统的函数就可以看做是一种“门面”。它是系统暴露给开发者的一组“特殊”的编程接口。</p><h3 id="解决性能问题" tabindex="-1"><a class="header-anchor" href="#解决性能问题"><span>解决性能问题</span></a></h3><p>通过将多个接口调用替换为一个门面接口调用，减少网络通信成本，提高客户端的响应速度。</p><h3 id="解决分布式事务问题" tabindex="-1"><a class="header-anchor" href="#解决分布式事务问题"><span>解决分布式事务问题</span></a></h3><p>比如我们一个业务要同时操作两个数据库执行添加逻辑，原来这是两个接口的逻辑，为了保证在一个事务中执行，需要使用到分布式事务，但是如果我们利用数据库事务，在一个事务中执行这两个添加的SQL，这就要求这两个SQL在一个接口中完成，所以可以借钱门面模式的思想，在设计一个包裹这两个操作的新接口，在新接口中让一个事务去执行这两个sql操作。</p><h3 id="系统解耦" tabindex="-1"><a class="header-anchor" href="#系统解耦"><span>系统解耦</span></a></h3><p>原来是需要依赖多个子系统才能够处理的逻辑，通过使用门面模式封装之后，依赖项变少了</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>示例：当前有一个抵押的系统，当有一个客户来的时候，有几个事情需要确定 大银行子系统查询客户首付有足够的存款、到信用子系统查询是否有良好的信用、到贷款子系统查询是否有劣迹贷款，只有这三个系统都通过的时候才可以进行抵押，当不考虑门面模式的情况下，类结构图如下 <img src="'+i+`" alt="c492e79a40256a1f5190af7184b1e865_Facade05.jpg" loading="lazy"> 这里，我们首先有一个顾客类，只是保存抵押人是谁，并没有实际的操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 顾客类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建三个子系统的列，代码如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 银行子系统</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">HasSufficientSavings</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> amount<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;检查顾客&quot;</span> <span class="token operator">+</span> customer<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;余额&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 信用子系统</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Credit</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">HasGoodCredit</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;检查顾客</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">customer<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">信用&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 贷款子系统</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Loan</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">HasNoBadLoans</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;检查顾客</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">customer<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">是否有不良的贷款&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写客户端的调用代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> amout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> loan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Loan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> credit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> eligible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bank<span class="token punctuation">.</span><span class="token function">HasSufficientSavings</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> amout<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        eligible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loan<span class="token punctuation">.</span><span class="token function">HasNoBadLoans</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        eligible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>credit<span class="token punctuation">.</span><span class="token function">HasGoodCredit</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        eligible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> eligible <span class="token punctuation">?</span> <span class="token string">&quot;满足&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;不满足&quot;</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;顾客</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">customer<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result</span><span class="token punctuation">}</span></span><span class="token string">贷款要求&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法，客户程序和三个子系统都发生了耦合，使得该客户端程序依赖于这三个子系统，如果这三个系统变化的时候，客户端程序也得跟着变化，但是当我们引入门面模式之后，我们就可以将这三个子系统包裹成一个，类结构图如下 <img src="`+u+`" alt="ac45424964205b12def211c74978ddaf_Facade06.jpg" loading="lazy"> 门面类实现如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 外观类</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mortage</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否符合要求</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>amount<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">isEligible</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> amount<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> loan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Loan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> credit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Credit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> eligible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bank<span class="token punctuation">.</span><span class="token function">HasSufficientSavings</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            eligible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loan<span class="token punctuation">.</span><span class="token function">HasNoBadLoans</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            eligible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>credit<span class="token punctuation">.</span><span class="token function">HasGoodCredit</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            eligible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> eligible<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顾客类和子系统的类实现保持不变，客户端的实现改为</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> mortage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mortage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> eligible <span class="token operator">=</span> mortage<span class="token punctuation">.</span><span class="token function">isEligible</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> eligible <span class="token punctuation">?</span> <span class="token string">&quot;满足&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;不满足&quot;</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;顾客</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">customer<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">result</span><span class="token punctuation">}</span></span><span class="token string">贷款要求&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在引入门面模式之后，客户端程序只和Mortage类发生依赖，借助Mortage屏蔽了和子系统之间的负责操作，达到了解耦内部子系统与客户程序之间的依赖。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,25),d={href:"https://www.cnblogs.com/Terrylee/archive/2006/03/17/352349.html",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=e("ExternalLinkIcon");return p(),o("div",null,[k,n("p",null,[s("参考资料："),n("a",d,[s("https://www.cnblogs.com/Terrylee/archive/2006/03/17/352349.html"),c(a)])])])}const y=t(r,[["render",m],["__file","menmianmoshi.html.vue"]]),w=JSON.parse('{"path":"/softwareDesign/highQualityCode/designMode/jiegouxing/menmianmoshi.html","title":"门面模式","lang":"zh-CN","frontmatter":{"title":"门面模式","lang":"zh-CN","date":"2022-08-21T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"menmianmoshi","slug":"dh0pi3","docsId":"90151830","description":"概述 门面模式也叫做外观模式，定义翻译为中文就是，门面模式为子系统提供一组统一的接口让子系统更易用。 意思就是，原本我们需要调用多个接口，现在利用门面模式，提供一个包裹了之前多个接口的门面接口给其他系统使用。 使用场景 解决易用性问题 可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。比如调用系统的函数就可以看做是一种“...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/designMode/jiegouxing/menmianmoshi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"门面模式"}],["meta",{"property":"og:description","content":"概述 门面模式也叫做外观模式，定义翻译为中文就是，门面模式为子系统提供一组统一的接口让子系统更易用。 意思就是，原本我们需要调用多个接口，现在利用门面模式，提供一个包裹了之前多个接口的门面接口给其他系统使用。 使用场景 解决易用性问题 可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。比如调用系统的函数就可以看做是一种“..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1661049193464-89f24c8c-1dba-4cce-8b87-7b6f633e521e.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-08-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"门面模式\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1661049193464-89f24c8c-1dba-4cce-8b87-7b6f633e521e.jpeg\\",\\"https://azrng.gitee.io/kbms/kbms/common/1661051018361-2d773a35-3578-4657-a0ba-ad9b0253bee9.jpeg\\"],\\"datePublished\\":\\"2022-08-21T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[{"level":3,"title":"解决易用性问题","slug":"解决易用性问题","link":"#解决易用性问题","children":[]},{"level":3,"title":"解决性能问题","slug":"解决性能问题","link":"#解决性能问题","children":[]},{"level":3,"title":"解决分布式事务问题","slug":"解决分布式事务问题","link":"#解决分布式事务问题","children":[]},{"level":3,"title":"系统解耦","slug":"系统解耦","link":"#系统解耦","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.78,"words":1134},"filePathRelative":"softwareDesign/highQualityCode/designMode/jiegouxing/menmianmoshi.md","localizedDate":"2022年8月21日","excerpt":"<h2>概述</h2>\\n<p>门面模式也叫做外观模式，定义翻译为中文就是，门面模式为子系统提供一组统一的接口让子系统更易用。</p>\\n<p>意思就是，原本我们需要调用多个接口，现在利用门面模式，提供一个包裹了之前多个接口的门面接口给其他系统使用。</p>\\n<h2>使用场景</h2>\\n<h3>解决易用性问题</h3>\\n<p>可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。比如调用系统的函数就可以看做是一种“门面”。它是系统暴露给开发者的一组“特殊”的编程接口。</p>\\n<h3>解决性能问题</h3>\\n<p>通过将多个接口调用替换为一个门面接口调用，减少网络通信成本，提高客户端的响应速度。</p>","autoDesc":true}');export{y as comp,w as data};
