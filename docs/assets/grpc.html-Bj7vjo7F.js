import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as p,c as l,b as e,e as t,f as s,d as a}from"./app-CBxp4zeL.js";const c="/kbms/common/1625569084899-bc895ae4-ce5b-4750-95fc-9d1dadf23b27.png",i={},h=e("h2",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述"},[e("span",null,"概述")])],-1),d=e("p",null,[e("img",{src:c,alt:"image.png",loading:"lazy"}),t(" gRPC是一个由google开发的，跨语言的，高性能远程调用框架，使客户端和服务端应用程序可以透明的进行通讯，并简化了连接系统的构建，使用http/2作为通信协议，使用protocol buffers作为序列化协议。客户端应用程序可以直接在其他计算机上的服务器应用程序上调用该方法，就好像它是本地对象一样。我感觉有点像webservice。")],-1),u={href:"https://www.grpc.io",target:"_blank",rel:"noopener noreferrer"},g=a('<p>在服务器端，服务器实现此接口并运行grpc服务器以处理客户端调用(需要使用HTTP/2(https证书))。在客户端，客户端具有一个存根，提供与服务器相同的方法。</p><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><h3 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h3><p>现代高性能轻量级 RPC 框架。 约定优先的 API 开发，默认使用 Protocol Buffers 作为描述语言，允许与语言无关的实现。 可用于多种语言的工具，以生成强类型的服务器和客户端。 支持客户端，服务器双向流调用。 通过Protocol Buffers二进制序列化减少网络使用。 基于 HTTP/2 进行传输</p><h2 id="推荐场景" tabindex="-1"><a class="header-anchor" href="#推荐场景"><span>推荐场景</span></a></h2><p>高性能轻量级微服务 - gRPC设计为低延迟和高吞吐量通信，非常适合需要高性能的轻量级微服务。 多语言混合开发 - gRPC工具支持所有流行的开发语言，使gRPC成为多语言开发环境的理想选择。 点对点实时通信 - gRPC对双向流调用提供出色的支持。gRPC服务可以实时推送消息而无需轮询。 网络受限环境 - 使用 Protocol Buffers二进制序列化消息，该序列化始终小于等效的JSON消息，对网络带宽需求比JSON小。</p><h2 id="不建议场景" tabindex="-1"><a class="header-anchor" href="#不建议场景"><span>不建议场景</span></a></h2><p>浏览器可访问的API - 浏览器不完全支持gRPC。虽然gRPC-Web可以提供浏览器支持，但是它有局限性，引入了服务器代理 广播实时通信 - gRPC支持通过流进行实时通信，但不存在向已注册连接广播消息的概念 进程间通信 - 进程必须承载HTTP/2才能接受传入的gRPC调用，对于Windows，进程间通信管道是一种更快速的方法。</p><blockquote><p>注：尽管http/2协议没有明确规定需要使用https，但是为了安全在浏览器实现都要求使用https，所以现在的http/2话题https基本上是一对。</p></blockquote><h2 id="net支持情况" tabindex="-1"><a class="header-anchor" href="#net支持情况"><span>.Net支持情况</span></a></h2><ul><li>提供了基于HttpClient的原生框架实现</li><li>提供原生的ASP.NET Core集成库</li><li>提供完整的代码生成工具</li><li>编译器提供对proto文件的智能提示</li></ul><h2 id="tls" tabindex="-1"><a class="header-anchor" href="#tls"><span>TLS</span></a></h2>',12),m={href:"https://localhost:5001",target:"_blank",rel:"noopener noreferrer"},b=a(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
 <span class="token string">&quot;Kestrel&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
   <span class="token string">&quot;Endpoints&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
     <span class="token string">&quot;HttpsInlineCertFile&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
       <span class="token string">&quot;Url&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;https://localhost:5001&quot;</span><span class="token punctuation">,</span>
       <span class="token string">&quot;Protocols&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Http2&quot;</span><span class="token punctuation">,</span>
       <span class="token string">&quot;Certificate&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
         <span class="token string">&quot;Path&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;path to .pfx file&gt;&quot;</span><span class="token punctuation">,</span>
         <span class="token string">&quot;Password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;&lt;certificate password&gt;&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考教程" tabindex="-1"><a class="header-anchor" href="#参考教程"><span>参考教程</span></a></h2>`,2),f={href:"https://docs.microsoft.com/zh-cn/aspnet/core/grpc/?view=aspnetcore-5.0",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.grpc.io/docs/quickstart/csharp/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/148139089",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/stulzq/p/11897704.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/Leo_wl/p/11593681.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mp.weixin.qq.com/s/3--85-0CMMi81xyJC-8xjA",target:"_blank",rel:"noopener noreferrer"},P={href:"https://mp.weixin.qq.com/s/4DGZQTCm0DOxRrM8Nna_1w",target:"_blank",rel:"noopener noreferrer"};function C(T,x){const n=r("ExternalLinkIcon");return p(),l("div",null,[h,d,e("blockquote",null,[e("p",null,[t("gRPC官网："),e("a",u,[t("https://www.grpc.io"),s(n)])])]),g,e("p",null,[t("gRPC基于Http2，默认情况下Http2是使用了Http的加密协议，用于 gRPC 的 Kestrel 终结点应使用TLS 进行保护。 在开发环境中，当存在ASP.NET Core 开发证书时，会在 "),e("a",m,[t("https://localhost:5001"),s(n)]),t(" 自动创建使用 TLS 进行保护的终结点。 不需要任何配置。 https 前缀验证 Kestrel 终结点是否正在使用TLS。 在生产环境中，必须显式配置 TLS。 以下 appsettings.json 示例中提供了使用 TLS 进行保护的 HTTP/2 终结点 ：")]),b,e("p",null,[t("grpc在netcore官网文档："),e("a",f,[t("https://docs.microsoft.com/zh-cn/aspnet/core/grpc/?view=aspnetcore-5.0"),s(n)]),t(" 官方教程："),e("a",k,[t("https://www.grpc.io/docs/quickstart/csharp/"),s(n)]),t(" 知乎文章："),e("a",_,[t("https://zhuanlan.zhihu.com/p/148139089"),s(n)]),t(" 晓晨系列教程："),e("a",w,[t("https://www.cnblogs.com/stulzq/p/11897704.html"),s(n)]),t(" NET Core3高性能RPC框架："),e("a",v,[t("https://www.cnblogs.com/Leo_wl/p/11593681.html"),s(n)]),t(" 如何使gRPC 获得最佳性能："),e("a",q,[t("https://mp.weixin.qq.com/s/3--85-0CMMi81xyJC-8xjA"),s(n)]),t(" code综艺圈："),e("a",P,[t("https://mp.weixin.qq.com/s/4DGZQTCm0DOxRrM8Nna_1w"),s(n)])])])}const z=o(i,[["render",C],["__file","grpc.html.vue"]]),N=JSON.parse('{"path":"/middleware/grpc/grpc.html","title":"gRPC","lang":"zh-CN","frontmatter":{"title":"gRPC","lang":"zh-CN","date":"2023-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"grpc","slug":"piprwr","docsId":"29770924","description":"概述 image.png gRPC是一个由google开发的，跨语言的，高性能远程调用框架，使客户端和服务端应用程序可以透明的进行通讯，并简化了连接系统的构建，使用http/2作为通信协议，使用protocol buffers作为序列化协议。客户端应用程序可以直接在其他计算机上的服务器应用程序上调用该方法，就好像它是本地对象一样。我感觉有点像webse...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/grpc/grpc.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"gRPC"}],["meta",{"property":"og:description","content":"概述 image.png gRPC是一个由google开发的，跨语言的，高性能远程调用框架，使客户端和服务端应用程序可以透明的进行通讯，并简化了连接系统的构建，使用http/2作为通信协议，使用protocol buffers作为序列化协议。客户端应用程序可以直接在其他计算机上的服务器应用程序上调用该方法，就好像它是本地对象一样。我感觉有点像webse..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1625569084899-bc895ae4-ce5b-4750-95fc-9d1dadf23b27.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gRPC\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1625569084899-bc895ae4-ce5b-4750-95fc-9d1dadf23b27.png\\"],\\"datePublished\\":\\"2023-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[{"level":3,"title":"描述","slug":"描述","link":"#描述","children":[]}]},{"level":2,"title":"推荐场景","slug":"推荐场景","link":"#推荐场景","children":[]},{"level":2,"title":"不建议场景","slug":"不建议场景","link":"#不建议场景","children":[]},{"level":2,"title":".Net支持情况","slug":"net支持情况","link":"#net支持情况","children":[]},{"level":2,"title":"TLS","slug":"tls","link":"#tls","children":[]},{"level":2,"title":"参考教程","slug":"参考教程","link":"#参考教程","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.2,"words":959},"filePathRelative":"middleware/grpc/grpc.md","localizedDate":"2023年10月18日","excerpt":"<h2>概述</h2>\\n<p><img src=\\"/common/1625569084899-bc895ae4-ce5b-4750-95fc-9d1dadf23b27.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\ngRPC是一个由google开发的，跨语言的，高性能远程调用框架，使客户端和服务端应用程序可以透明的进行通讯，并简化了连接系统的构建，使用http/2作为通信协议，使用protocol buffers作为序列化协议。客户端应用程序可以直接在其他计算机上的服务器应用程序上调用该方法，就好像它是本地对象一样。我感觉有点像webservice。</p>\\n<blockquote>\\n<p>gRPC官网：<a href=\\"https://www.grpc.io\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.grpc.io</a></p>\\n</blockquote>","autoDesc":true}');export{z as comp,N as data};
