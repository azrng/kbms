import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as a,a as t,d as e,e as n,b as s}from"./app-qB9_Bjjp.js";const p={},c=s('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。</p><ul><li>相对设计原则来讲，没有那么抽象，大部分不难理解。</li><li>难点是了解他们能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。</li></ul><p>可以从更好层次考虑问题：可读性、可维护性、可扩展性、模块化、组件化，避免烂代码。</p><p>设计模式要干的事情就是解耦。 创建型是将创建和使用代码解耦，结构型是将不同的功能代码解耦，行为型模式是将不同的行为代码解耦。</p><p>设计原则和思想比设计模式更加朴实和重要。</p><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><p>经典的设计模式有23种，其中随着时间推进，有些设计模式过时了，甚至成为反模式，一些被内置在编程语言中，还有一些新的模式诞生。</p><ul><li>创建型(解决对象的创建问题，封装复杂的创建过程，解耦对象的创建代码和使用代码) <ul><li>单例模式(常)</li><li>工厂模式(工厂方法和抽象工厂)(常)</li><li>建造者模式(常)</li><li>原型模式</li></ul></li><li>结构型(解决一些类或者对象组合在一起的经典结构) <ul><li>代理模式(常)</li><li>桥接模式(常)</li><li>装饰者模式(常)</li><li>适配器模式(常)</li><li>门面模式</li><li>组合模式</li><li>享元模式</li></ul></li><li>行为型(将不同的行为代码解耦) <ul><li>观察者模式(常)</li><li>模版模式(常)</li><li>策略模式(常)</li><li>职责链模式(常)</li><li>迭代器模式(常)</li><li>状态模式(常)</li><li>访问者模式</li><li>备忘录模式</li><li>命令模式</li><li>解释器模式</li><li>中介模式</li></ul></li></ul><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>',10),h={href:"https://www.cnblogs.com/edisonchou/p/7512912.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/anjoy8/DesignPattern",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/sheng-jie/Design-Pattern",target:"_blank",rel:"noopener noreferrer"},m={href:"https://refactoringguru.cn/design-patterns",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.microsoft.com/zh-cn/azure/architecture/patterns/",target:"_blank",rel:"noopener noreferrer"},_=t("p",null,"https://mp.weixin.qq.com/s/8WKjgVsOKyXGN4jvKJyp_Q | 重温设计模式 --- 中介者模式",-1);function f(y,b){const i=l("ExternalLinkIcon");return o(),a("div",null,[c,t("p",null,[e("爱迪生周："),t("a",h,[e("设计模式的学习征途系列"),n(i)]),e(" 23种设计模式相关的资料："),t("a",d,[e("https://github.com/anjoy8/DesignPattern"),n(i)]),e(" 设计模式github文章："),t("a",g,[e("https://github.com/sheng-jie/Design-Pattern"),n(i)]),e(" 免费在线学习代码重构和设计模式："),t("a",m,[e("https://refactoringguru.cn/design-patterns"),n(i)]),t("a",u,[e("https://docs.microsoft.com/zh-cn/azure/architecture/patterns/"),n(i)]),e(" | 云设计模式")]),_])}const w=r(p,[["render",f],["__file","overview.html.vue"]]),z=JSON.parse('{"path":"/softwareDesign/highQualityCode/designMode/overview.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","lang":"zh-CN","date":"2023-02-09T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"overview","slug":"plr3gr","docsId":"29634085","description":"概述 设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。 相对设计原则来讲，没有那么抽象，大部分不难理解。 难点是了解他们能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。 可以从更好层次考虑问题：可读性、可维护性、可扩展性、模块化、组件化，避免烂代码。 设计模式要干...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/designMode/overview.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"概述 设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。 相对设计原则来讲，没有那么抽象，大部分不难理解。 难点是了解他们能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。 可以从更好层次考虑问题：可读性、可维护性、可扩展性、模块化、组件化，避免烂代码。 设计模式要干..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":1.99,"words":597},"filePathRelative":"softwareDesign/highQualityCode/designMode/overview.md","localizedDate":"2023年2月9日","excerpt":"<h2>概述</h2>\\n<p>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。大部分设计模式要解决的都是代码的可扩展性问题。</p>\\n<ul>\\n<li>相对设计原则来讲，没有那么抽象，大部分不难理解。</li>\\n<li>难点是了解他们能解决哪些问题，掌握典型的应用场景，并且懂得不过度应用。</li>\\n</ul>\\n<p>可以从更好层次考虑问题：可读性、可维护性、可扩展性、模块化、组件化，避免烂代码。</p>\\n<p>设计模式要干的事情就是解耦。\\n创建型是将创建和使用代码解耦，结构型是将不同的功能代码解耦，行为型模式是将不同的行为代码解耦。</p>\\n<p>设计原则和思想比设计模式更加朴实和重要。</p>","autoDesc":true}');export{w as comp,z as data};
