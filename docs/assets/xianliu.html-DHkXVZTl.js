import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as o,a as n,d as s,e as t,b as l}from"./app-Bw62I61B.js";const i="/kbms/common/1667400429830-af304785-f707-4870-b3fb-e379f5eb39f6.png",u="/kbms/common/1667400612141-575112c5-b411-4ef0-9c3d-99a3d9bb3872.png",k="/kbms/common/1668263349791-ded26ea5-5ea8-41e0-a9f5-f97cb2626667.png",r="/kbms/common/1666018592914-97c91443-85ff-4173-b362-441b953edef8.png",d={},m=l(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>对外部服务请求的限制，尽早拒绝过载的请求，能够保证尽量处理负载过程中的请求。</p><p>与熔断的区别：限流作用是防御上游流量超过处理能力的手段，熔断作用是容错下游的快速失败的手段。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>主流的底层就是基于令牌桶算法和漏斗算法。</p><ul><li>计数器算法</li><li>令牌桶算法</li><li>漏桶算法</li><li>滑动窗口算法</li></ul><h3 id="计数器算法" tabindex="-1"><a class="header-anchor" href="#计数器算法"><span>计数器算法</span></a></h3><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h4><p>在一定时间间隔里，记录请求的次数，当请求次数超过该时间限制时候，就把计数器清零。当请求次数超过间隔的内的最大次数时候，拒绝访问。</p><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h4><p>例如：一个接口每分钟允许请求100次。 1.设置一个计数器count，接收一个请求将计数器加一，同时记录当前时间。 2.判断当前时间和上次统计时间是否为同一分钟 如果是，则判断count是否超过阈值，如果超过阈值，则返回限流拒绝。 如果不是，就把count重置为1，判断是否超过阈值。</p><p>示例代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 计数器算法 设置一分钟只能请求100次</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CounterLimit</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 每分钟限制的请求总数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestSum <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 记录上一次统计时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DateTime<span class="token punctuation">?</span></span> _lastDate<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前请求间隔的请求数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _counter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">bool</span> isLimit<span class="token punctuation">,</span> <span class="token keyword">int</span> counter<span class="token punctuation">)</span></span> <span class="token function">CountLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _lastDate <span class="token operator">??=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>

        <span class="token comment">//当前时间</span>
        <span class="token class-name"><span class="token keyword">var</span></span> now <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> interval <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">Subtract</span><span class="token punctuation">(</span>_lastDate<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalMinutes<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _lastDate <span class="token operator">=</span> now<span class="token punctuation">;</span>
            _counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 判断计数器是否大于每分钟限定的值</span>
        <span class="token class-name"><span class="token keyword">var</span></span> limit <span class="token operator">=</span> _counter <span class="token operator">&gt;=</span> _requestSum<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>limit<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> _counter<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token operator">++</span>_counter<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> _counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 模拟一秒</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThreadInterruptedException</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name"><span class="token keyword">var</span></span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟1秒内请求1次</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> isLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> counter<span class="token punctuation">)</span> <span class="token operator">=</span> CounterLimit<span class="token punctuation">.</span><span class="token function">CountLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 模拟1秒内请求2次</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> isLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> counter<span class="token punctuation">)</span> <span class="token operator">=</span> CounterLimit<span class="token punctuation">.</span><span class="token function">CountLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 模拟1秒内请求10次</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> isLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> counter<span class="token punctuation">)</span> <span class="token operator">=</span> CounterLimit<span class="token punctuation">.</span><span class="token function">CountLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不足" tabindex="-1"><a class="header-anchor" href="#不足"><span>不足</span></a></h4><p>该算法实现简单，但是如果两个时间段间隔的地方有密集请求，比如第一个时间段的在最后五秒(00:55)来了好几十个请求，此时可以正常处理不会限流，然后再下一个时间段(01:05)的时候一下子又来了100个请求，这个时候也能正常处理，不会限流，但是这00:55-01:05一分钟时间间隔一下子接收到了100多个请求，可能造成后端过载导致服务崩溃。</p><h3 id="滑动窗口算法" tabindex="-1"><a class="header-anchor" href="#滑动窗口算法"><span>滑动窗口算法</span></a></h3><h4 id="实现1" tabindex="-1"><a class="header-anchor" href="#实现1"><span>实现1</span></a></h4><p>滑动窗口算法把间隔时间划分成更小的粒度，当更小独立的时间间隔过去之后，将过去的间隔请求数减掉，再补充一个空的时间间隔。</p><p>如下图所示，将1分钟划分成10个更小的时间间隔，每6s为一个时间间隔 <img src="`+i+'" alt="image.png" loading="lazy"></p><ol><li>一个时间窗口为1分钟，滑动窗口分为10个格子，每个格子6秒。</li><li>每过6秒，滑动窗口向右移动一个格子</li><li>每个格子都有独立的计数器</li><li>如果时间窗口内所有的计数器之和超过了限流阈值，则触发限流操作。</li></ol><p>滑动窗口算法比计数器算法控制得更精细 <img src="'+u+`" alt="image.png" loading="lazy"> 用户在0:59 时刻发送了100个请求，第10个格子的计数器增加100，下一秒的时候时间窗口向右移动1格，这时再来100个请求就超过了阈值，不会处理这100个请求，这样就避免了计数器场景出现的问题。 滑动窗口设置的越精细，限流效果越好，但是滑动窗口的时间间隔(格子)多了，存储空间也会增加。</p><p>具体操作 1 设计一个滑动窗口，窗口有10个格子，每个格子6秒，每隔6秒移动一格。 2 装满所有格子的时间为 10 * 6 = 60 秒。也就是说时间窗口是 60 秒。 3 从60秒开始，开始滑动，新请求数开始覆盖老请求数。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 滑动窗口算法 一分钟请求600次</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SlideWindowLimit</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 每分钟限制的请求总数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestSum <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 滑动窗口大小（每个窗口可以请求的次数）</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Size <span class="token operator">=&gt;</span> _requestSum <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">/</span> _interval<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 格子时长(秒)  能够被60整除的值</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> _interval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 滑动窗口数组，每移动一个格子，更新对应数据项的值</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">int</span></span><span class="token punctuation">[</span><span class="token number">60</span> <span class="token operator">/</span> _interval<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 移动窗口中正在计数的格子</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _currId<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 上次请求时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DateTime<span class="token punctuation">?</span></span> _lastDate<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前窗口计数总和</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">int</span></span> _counter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">bool</span> isLimit<span class="token punctuation">,</span> <span class="token keyword">int</span> counter<span class="token punctuation">)</span></span> <span class="token function">SliderWindowLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;当前滚轮滚到  </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">_currId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _lastDate <span class="token operator">??=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>

        <span class="token comment">//获取当前时间</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> interval <span class="token operator">=</span> currTime<span class="token punctuation">.</span><span class="token function">Subtract</span><span class="token punctuation">(</span>_lastDate<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalSeconds<span class="token punctuation">;</span>
        <span class="token comment">// 按照新的移动窗口进行计数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&gt;=</span> _interval<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 当前计数格子的下个格子将被清掉重写</span>
            _currId<span class="token operator">++</span><span class="token punctuation">;</span>

            <span class="token comment">// 目的就是让这个_currId一直在0-10之前重复  类似于如果_currId大于等于10,那么他就是_currId</span>
            <span class="token comment">//_currId %= _window.Length;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>_currId <span class="token operator">==</span> _window<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> _currId <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> newCurrId <span class="token operator">=</span> _currId<span class="token punctuation">;</span>

            <span class="token comment">//下个格子将被清掉，总数据减掉上一轮中该格子的数量</span>
            _counter <span class="token operator">-=</span> _window<span class="token punctuation">[</span>newCurrId<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token comment">// 新格子设置为1</span>
            _window<span class="token punctuation">[</span>newCurrId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token comment">//记录滑动的时间</span>
            _lastDate <span class="token operator">=</span> currTime<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> isLimit <span class="token operator">=</span> _counter <span class="token operator">&gt;=</span> _requestSum<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> _counter<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//当前计数的格子</span>
            <span class="token operator">++</span>_window<span class="token punctuation">[</span>_currId<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token operator">++</span>_counter<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> _counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 滑动窗口算法测试  模拟每秒请求多次，测试是否限流</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlideWindowLimitTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ILimitTest</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 模拟1秒</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThreadInterruptedException</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name"><span class="token keyword">var</span></span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 模拟1秒内请求8次</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> q <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> isLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">var</span></span> counter<span class="token punctuation">)</span> <span class="token operator">=</span> SlideWindowLimit<span class="token punctuation">.</span><span class="token function">SliderWindowLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 模拟1秒内请求9次</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> isLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">var</span></span> counter<span class="token punctuation">)</span> <span class="token operator">=</span> SlideWindowLimit<span class="token punctuation">.</span><span class="token function">SliderWindowLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 模拟1秒内请求11次</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> isLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">var</span></span> counter<span class="token punctuation">)</span> <span class="token operator">=</span> SlideWindowLimit<span class="token punctuation">.</span><span class="token function">SliderWindowLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记录滑动窗口中的请求数。滑动窗口中的请求数控制在 600以内。滑动窗口能记录60秒的请求，所以如果每秒请求不超过10，不会限流。测试用例也是这样设计的，每秒模拟发送的请求为8次，9次，10次。从测试结果来看，符合预期。</p><h4 id="实现2" tabindex="-1"><a class="header-anchor" href="#实现2"><span>实现2</span></a></h4><p>通过将前一个窗口估计的技术加上当前窗口计数来计算总估计数，如果超过计数限制，则请求将被阻止。 具体公式如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>估计数 <span class="token operator">=</span> 前一窗口计数 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> 当前窗口经过时间 <span class="token operator">/</span> 单位时间<span class="token punctuation">)</span> <span class="token operator">+</span> 当前窗口计数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果上次请求时间距离现在是大于2倍窗口时间，那么就重置开始时间； 如果上次请求时间距离现在大于一个窗口时间，那么就是当前时间减去上次请求时间，为当前窗口经过的时间</p><p>完整代码如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 通过将前一个窗口中的加权计数添加到当前窗口中的计数来计算估计数，如果估计数超过计数限制，则请求将被阻止。</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlideWindowLimitTwo</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 同步锁</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">object</span></span> _syncObject <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 请求间隔的秒</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestIntervalSeconds<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 请求限制数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestLimit<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 开始时间</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token class-name">DateTime</span> _windowStartTime<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 上一个窗口的请求数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _prevRequestCount<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前窗口请求数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _requestCount<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造函数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>requestLimit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>请求限制数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>requestIntervalSeconds<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>请求间隔时间(秒)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">SlideWindowLimitTwo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> requestLimit<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> requestIntervalSeconds<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _windowStartTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
        _requestLimit <span class="token operator">=</span> requestLimit<span class="token punctuation">;</span>
        _requestIntervalSeconds <span class="token operator">=</span> requestIntervalSeconds<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 是否通过请求</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span>true代表没有限流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">PassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">lock</span> <span class="token punctuation">(</span>_syncObject<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> currentTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
            <span class="token comment">// 经过的时间：当前时间-开始时间</span>
            <span class="token class-name"><span class="token keyword">var</span></span> elapsedSeconds <span class="token operator">=</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> _windowStartTime<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalSeconds<span class="token punctuation">;</span>

            <span class="token comment">//当过去的时间 大于等于 窗口时间的2倍时候，重置开始时间</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsedSeconds <span class="token operator">&gt;=</span> _requestIntervalSeconds <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 进这里说明前面两次的请求间隔已经超过2倍的窗口范围，因为经过时间超过一个窗口的时候会调整开始时间</span>
                _windowStartTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span>
                _prevRequestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                _requestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                elapsedSeconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token comment">// 经过的时间大于一个窗口时间</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsedSeconds <span class="token operator">&gt;=</span> _requestIntervalSeconds<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 开始时间=开始时间+请求时间</span>
                _windowStartTime <span class="token operator">=</span> _windowStartTime<span class="token punctuation">.</span><span class="token function">AddSeconds</span><span class="token punctuation">(</span>_requestIntervalSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
                _prevRequestCount <span class="token operator">=</span> _requestCount<span class="token punctuation">;</span>
                _requestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                <span class="token comment">//计算当前窗口已经经过的时间</span>
                elapsedSeconds <span class="token operator">=</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> _windowStartTime<span class="token punctuation">)</span><span class="token punctuation">.</span>TotalSeconds<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 估计数 = 前一窗口计数 * (1 - 当前窗口经过时间 / 单位时间) + 当前窗口计数</span>
            <span class="token class-name"><span class="token keyword">var</span></span> requestCount <span class="token operator">=</span> <span class="token punctuation">(</span>_prevRequestCount <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span>elapsedSeconds <span class="token operator">/</span> _requestIntervalSeconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> _requestCount<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCount <span class="token operator">&lt;</span> _requestLimit<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                _requestCount<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试方法如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlideWindowLimitTestTwo</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ILimitTest</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 设置10秒只能请求100次</span>
        <span class="token class-name"><span class="token keyword">var</span></span> windows <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SlideWindowLimitTwo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 模拟1秒</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThreadInterruptedException</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name"><span class="token keyword">var</span></span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 模拟1秒内请求1次</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> q <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> pass <span class="token operator">=</span> windows<span class="token punctuation">.</span><span class="token function">PassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pass<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 模拟1秒内请求9次</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> pass <span class="token operator">=</span> windows<span class="token punctuation">.</span><span class="token function">PassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pass<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 模拟1秒内请求11次</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token class-name"><span class="token keyword">var</span></span> pass <span class="token operator">=</span> windows<span class="token punctuation">.</span><span class="token function">PassRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pass<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;限流了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;没限流&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><p>弥补了计数器算法的不足。</p><h3 id="漏桶算法" tabindex="-1"><a class="header-anchor" href="#漏桶算法"><span>漏桶算法</span></a></h3><h4 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1"><span>原理</span></a></h4><p>漏桶算法比较形象，设想有一个桶，桶的底部有一个洞，当装上水之后，睡会一滴一滴从底部漏掉。当装的谁太满的时候，水就会移除，但是底部漏水的速度还是不变的。</p><ul><li>底部漏水的速度就是系统处理的速度，只会通过一个恒速的方式处理请求(能够应对一定的突发流量，使得系统不会因为突增的压力而导致崩溃)</li><li>桶内存储的水就是上游过来的请求，当请求太多超过桶的容量，就会被拒绝</li></ul><blockquote><p>拓展：各种MQ比如kafka就是典型漏斗算法。broker就是这个固定容量的桶，生产者会不断的将数据写到broker里，消费者是采用的拉取模式，总是以固定的速率来消费。</p></blockquote><h4 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1"><span>实现</span></a></h4><p>如下图所示，外部的请求随机过来，把桶填满后，装不进桶的请求就会被丢弃，每秒中从桶中匀速漏出一定量的水，服务进程处理漏出的请求。 <img src="`+k+`" alt="image.png" loading="lazy"> 当请求突增的时候，漏桶算法能够保证处理的速度总是恒定的。 系统可以在一些时刻处理突增的请求，只要持续时间不是很长，系统有能力处理即可。 实现代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 漏桶算法 桶容量2000，处理速度是每毫秒一个请求，也就是一秒1000个请求</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakBucket</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前桶中累计的请求数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> currNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 记录上次统计的时间的毫秒</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> lastTime <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 漏桶算法</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>capcity<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>桶能承载的最大请求数，超过这个数就开始限流<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>漏水的速度，系统每毫秒能处理的请求数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">bool</span> isLimie<span class="token punctuation">,</span> <span class="token keyword">long</span> currNum<span class="token punctuation">)</span></span> <span class="token function">LeakBuck</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> capcity<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> rate<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 当前请求进来的时间</span>
        <span class="token class-name"><span class="token keyword">var</span></span> millisTime <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 距离上一次请求过去的时间，单位是毫秒</span>
        <span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> millisTime <span class="token operator">-</span> lastTime<span class="token punctuation">;</span>

        <span class="token comment">// 当前请求距离上次请求漏走的水量</span>
        <span class="token class-name"><span class="token keyword">var</span></span> lastLeakNum <span class="token operator">=</span> time <span class="token operator">*</span> rate<span class="token punctuation">;</span>

        <span class="token comment">// 现在木桶内剩余的水量为 桶的累积数量-距离上次漏走的水量  因为这里最低为0(桶内水流干)，所以求一下和0相比的最大值</span>
        currNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> currNum <span class="token operator">-</span> lastLeakNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lastTime <span class="token operator">=</span> millisTime<span class="token punctuation">;</span>
        <span class="token comment">// 加上这次请求的数</span>
        <span class="token operator">++</span>currNum<span class="token punctuation">;</span>
        <span class="token comment">// 如果当前桶内累积的请求数大于等于桶的容量，那么就限流</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currNum <span class="token operator">&gt;=</span> capcity<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            currNum <span class="token operator">=</span> capcity<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> currNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> currNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakBucketTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ILimitTest</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 桶容量为2000，每毫秒能处理一个请求（每秒请求1000次），每秒能请求1500，测试是否限流</span>

            <span class="token comment">// 模拟1秒内请求的次数  1500次内</span>
            <span class="token class-name"><span class="token keyword">int</span></span> randomTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> randomTime<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">var</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">,</span> currNum<span class="token punctuation">)</span> <span class="token operator">=</span> LeakBucket<span class="token punctuation">.</span><span class="token function">LeakBuck</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;限流了：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currNum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;没限流了：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currNum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试后，当外部请求的请求数在1500内随机取值，还是有可能限流。</p><h3 id="令牌桶算法" tabindex="-1"><a class="header-anchor" href="#令牌桶算法"><span>令牌桶算法</span></a></h3><h4 id="原理-2" tabindex="-1"><a class="header-anchor" href="#原理-2"><span>原理</span></a></h4><p>有一个固定容量为X的桶，每个Y单位会将Z个令牌放入该桶，如果桶内令牌超过X，令牌就溢出了，多出来的令牌就不要了。请求来了会去取令牌，如果请求太快，令牌生产速度跟不上消费速率，如果没有获取到令牌，这时候就会直接返回错误而不继续处理。 <img src="`+r+`" alt="image.png" loading="lazy"> 所以上面配置中Z应该比每个单位时间内请求的数稍大，系统将长时间处于该状态，X可以是允许系统瞬时最大请求数，并且不能长时间处于这个状态</p><blockquote><p>可以处理瞬时突发流量</p></blockquote><h4 id="实现-2" tabindex="-1"><a class="header-anchor" href="#实现-2"><span>实现</span></a></h4><p>编写令牌桶限流算法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 令牌桶限流算法</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 当前桶中累积的请求数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> currNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 记录上次请求的时间毫秒数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">long</span></span> lastTime <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 令牌桶</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>capcity<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>桶能承受的最大容量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>生成token的速度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">bool</span> isLimit<span class="token punctuation">,</span> <span class="token keyword">long</span> currNum<span class="token punctuation">)</span></span> <span class="token function">TokenBuck</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> capcity<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> rate<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 当前请求进来的时间</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currMillisTime <span class="token operator">=</span> DateTimeOffset<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 距离上一次请求过去的时间 单位是秒</span>
        <span class="token class-name"><span class="token keyword">var</span></span> time <span class="token operator">=</span> currMillisTime <span class="token operator">-</span> lastTime<span class="token punctuation">;</span>

        <span class="token comment">// 距离上一次请求的这段时间又新生成的token数目</span>
        <span class="token class-name"><span class="token keyword">var</span></span> lastTokenNum <span class="token operator">=</span> time <span class="token operator">*</span> rate<span class="token punctuation">;</span>

        <span class="token comment">// 现在木桶内剩余的token数量 桶内累积的数量-距离上次时间间隔又新生成的token数量  因为这里桶的最大容量有限制，所以求两个的最小值</span>
        currNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span>capcity<span class="token punctuation">,</span> currNum <span class="token operator">+</span> lastTokenNum<span class="token punctuation">)</span><span class="token punctuation">;</span>

        lastTime <span class="token operator">=</span> currMillisTime<span class="token punctuation">;</span>

        <span class="token comment">// 当前桶内的请求数-1</span>
        <span class="token operator">--</span>currNum<span class="token punctuation">;</span>

        <span class="token comment">// 如果当前桶内累积的token数小于等于0，那么就限流</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currNum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            currNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> currNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> currNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucketTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ILimitTest</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span>
            <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 桶最大容量为2000 每毫秒生成一个token(1秒生成1000个)，每秒请求1500次，测试是否会限流</span>

            <span class="token comment">// 模拟1s内请求数 1500次以内</span>
            <span class="token class-name"><span class="token keyword">var</span></span> randomNum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> randomNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">var</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">,</span> currNum<span class="token punctuation">)</span> <span class="token operator">=</span> TokenBucket<span class="token punctuation">.</span><span class="token function">TokenBuck</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>isLimit<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;限流了：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currNum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;没有限流：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currNum</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每秒请求900-1500次的情况下，有可能会导致限流</p><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h3><table><thead><tr><th></th><th>相同点</th><th>不同点</th><th>应用场景</th></tr></thead><tbody><tr><td>令牌桶算法</td><td>都可以实现限流，都有固定的最大容量(桶容量)，超过最大容量的请求被丢弃</td><td>消费速率不固定</td><td>可应对突发流量</td></tr><tr><td>漏斗算法</td><td></td><td>消费速率固定，强行限制诗句传输速率</td><td>流量削锋，处理请求更均匀</td></tr></tbody></table><h2 id="文章推荐" tabindex="-1"><a class="header-anchor" href="#文章推荐"><span>文章推荐</span></a></h2>`,62),v={href:"https://www.yuque.com/docs/share/a83b1251-0013-491b-a268-0c4b345ea7ca?view=doc_embed",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料"},[n("span",null,"参考资料")])],-1),g={href:"https://blog.csdn.net/chengqiuming/article/details/122385943",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.cnblogs.com/xiexj/p/13021294.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://mp.weixin.qq.com/s?__biz=MzA5ODg3Mzk5NQ==&mid=2453343666&idx=1&sn=5d66d5bec8cf5af0983f46bbdff93df5&chksm=87454a56b032c340f4902bd3193b37ecb9d07e52513093df69e9fbfefdc6a7e35bd30ada8eeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mp.weixin.qq.com/s/yxs7nk5tzxwmSbK_b06Hwg",target:"_blank",rel:"noopener noreferrer"};function f(_,q){const a=e("ExternalLinkIcon");return c(),o("div",null,[m,n("p",null,[n("a",v,[s("请求限制窗口算法"),t(a)])]),b,n("p",null,[n("a",g,[s("https://blog.csdn.net/chengqiuming/article/details/122385943"),t(a)]),s("：计数器算法 "),n("a",y,[s("https://www.cnblogs.com/xiexj/p/13021294.html"),t(a)]),s(" | 稳定性五件套-限流的原理和实现 - 编程一生 - 博客园 令牌桶限流算法："),n("a",w,[s("https://mp.weixin.qq.com/s?__biz=MzA5ODg3Mzk5NQ==&mid=2453343666&idx=1&sn=5d66d5bec8cf5af0983f46bbdff93df5&chksm=87454a56b032c340f4902bd3193b37ecb9d07e52513093df69e9fbfefdc6a7e35bd30ada8eeb&scene=21#wechat_redirect"),t(a)]),s(" 漏斗桶算法："),n("a",h,[s("https://mp.weixin.qq.com/s/yxs7nk5tzxwmSbK_b06Hwg"),t(a)])])])}const x=p(d,[["render",f],["__file","xianliu.html.vue"]]),S=JSON.parse('{"path":"/middleware/smallService/xianliu.html","title":"限流","lang":"zh-CN","frontmatter":{"title":"限流","lang":"zh-CN","date":"2023-07-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"xianliu","slug":"tucpcv","docsId":"72257752","description":"介绍 对外部服务请求的限制，尽早拒绝过载的请求，能够保证尽量处理负载过程中的请求。 与熔断的区别：限流作用是防御上游流量超过处理能力的手段，熔断作用是容错下游的快速失败的手段。 操作 主流的底层就是基于令牌桶算法和漏斗算法。 计数器算法 令牌桶算法 漏桶算法 滑动窗口算法 计数器算法 原理 在一定时间间隔里，记录请求的次数，当请求次数超过该时间限制时候...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/smallService/xianliu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"限流"}],["meta",{"property":"og:description","content":"介绍 对外部服务请求的限制，尽早拒绝过载的请求，能够保证尽量处理负载过程中的请求。 与熔断的区别：限流作用是防御上游流量超过处理能力的手段，熔断作用是容错下游的快速失败的手段。 操作 主流的底层就是基于令牌桶算法和漏斗算法。 计数器算法 令牌桶算法 漏桶算法 滑动窗口算法 计数器算法 原理 在一定时间间隔里，记录请求的次数，当请求次数超过该时间限制时候..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1667400429830-af304785-f707-4870-b3fb-e379f5eb39f6.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-09T14:02:29.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-09T14:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"限流\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1667400429830-af304785-f707-4870-b3fb-e379f5eb39f6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1667400612141-575112c5-b411-4ef0-9c3d-99a3d9bb3872.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1668263349791-ded26ea5-5ea8-41e0-a9f5-f97cb2626667.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1666018592914-97c91443-85ff-4173-b362-441b953edef8.png\\"],\\"datePublished\\":\\"2023-07-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-09T14:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"计数器算法","slug":"计数器算法","link":"#计数器算法","children":[{"level":4,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":4,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":4,"title":"不足","slug":"不足","link":"#不足","children":[]}]},{"level":3,"title":"滑动窗口算法","slug":"滑动窗口算法","link":"#滑动窗口算法","children":[{"level":4,"title":"实现1","slug":"实现1","link":"#实现1","children":[]},{"level":4,"title":"实现2","slug":"实现2","link":"#实现2","children":[]},{"level":4,"title":"优点","slug":"优点","link":"#优点","children":[]}]},{"level":3,"title":"漏桶算法","slug":"漏桶算法","link":"#漏桶算法","children":[{"level":4,"title":"原理","slug":"原理-1","link":"#原理-1","children":[]},{"level":4,"title":"实现","slug":"实现-1","link":"#实现-1","children":[]}]},{"level":3,"title":"令牌桶算法","slug":"令牌桶算法","link":"#令牌桶算法","children":[{"level":4,"title":"原理","slug":"原理-2","link":"#原理-2","children":[]},{"level":4,"title":"实现","slug":"实现-2","link":"#实现-2","children":[]}]},{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]}]},{"level":2,"title":"文章推荐","slug":"文章推荐","link":"#文章推荐","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1699538549000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":13.8,"words":4140},"filePathRelative":"middleware/smallService/xianliu.md","localizedDate":"2023年7月27日","excerpt":"<h2>介绍</h2>\\n<p>对外部服务请求的限制，尽早拒绝过载的请求，能够保证尽量处理负载过程中的请求。</p>\\n<p>与熔断的区别：限流作用是防御上游流量超过处理能力的手段，熔断作用是容错下游的快速失败的手段。</p>\\n<h2>操作</h2>\\n<p>主流的底层就是基于令牌桶算法和漏斗算法。</p>\\n<ul>\\n<li>计数器算法</li>\\n<li>令牌桶算法</li>\\n<li>漏桶算法</li>\\n<li>滑动窗口算法</li>\\n</ul>\\n<h3>计数器算法</h3>\\n<h4>原理</h4>\\n<p>在一定时间间隔里，记录请求的次数，当请求次数超过该时间限制时候，就把计数器清零。当请求次数超过间隔的内的最大次数时候，拒绝访问。</p>","autoDesc":true}');export{x as comp,S as data};
