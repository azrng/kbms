import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,d as s,e as t,b as e}from"./app-qB9_Bjjp.js";const i="/kbms/common/1619859754610-fc47148b-04d3-4314-b49a-3219448ed593.png",u={},r=e('<blockquote><p>最近更新：2021年12月24日 09:43:04</p></blockquote><h2 id="开篇语" tabindex="-1"><a class="header-anchor" href="#开篇语"><span>开篇语</span></a></h2><p>本文开始之前，首先我想问下大家对于属性和特性知道多少？属性和特性又有何区别？ <img src="'+i+'" alt="image.png" loading="lazy"> 对于该单词，我更想把它称之为：特性。对于属性和特性就是名称上有纠葛(不知道你们迷不迷，反正我写本文之前我是迷了)，什么是属性？属性是面向对象编程的基本概念，提供了对私有字段的访问封装，在C#中以get和set访问器方法实现对可读可写属性的操作，提供了安全和灵活的数据访问封装。什么是特性？下面内容就说明下：</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2>',4),k={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/attributes/",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="常用特性" tabindex="-1"><a class="header-anchor" href="#常用特性"><span>常用特性</span></a></h2><h3 id="attributeusage" tabindex="-1"><a class="header-anchor" href="#attributeusage"><span><strong>AttributeUsage</strong></span></a></h3><p>AttributeUsage特性用于控制如何应用自定义特性到目标元素，有三个数据属性可用以修饰我们的自定义的属性</p><table><thead><tr><th>ValidOn</th><th>规定特性可被放置的语言元素。它是枚举器 AttributeTargets 的值的组合。默认值是 AttributeTargets.All。</th></tr></thead><tbody><tr><td>AllowMultiple</td><td>定义了是否可在同一个程序实体上同时使用多个属性进行修饰</td></tr><tr><td>Inherited</td><td>定义了自定义属性的修饰是否可由被修饰类的派生类继承</td></tr></tbody></table><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token named-parameter punctuation">validOn</span><span class="token punctuation">:</span> AttributeTargets<span class="token punctuation">.</span>Class<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> Inherited <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelpAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>表示该特定只能标识在类上，并且同一个类上只能用一个属性修饰，并且自定义属性的修饰不能由修饰类的派生类继承。</p></blockquote><h3 id="flags" tabindex="-1"><a class="header-anchor" href="#flags"><span>Flags</span></a></h3><p>以Flags特性来将枚举数值看作位标记，而非单独的数值，例如我有如下的一个需求，当我想要取得用户信息的时候，会先从本地缓存中查找，找不到然后从分布式缓存中查找，最后找不到再从数据库中查询。但是有些场景我又不需要查询数据库。 所以会建立下面的这种模型</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">UserEntity</span>  <span class="token function">GetUserInfo</span><span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span>DataSource<span class="token punctuation">&gt;</span></span>  dataSources<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> xxxx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dataSources<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从本地缓存中获取</span>
        <span class="token keyword">return</span> xxxx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">if</span><span class="token punctuation">(</span>dataSources<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span>Distribution<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从分布式缓存中获取</span>
        <span class="token comment">//更新本地缓存</span>
        <span class="token keyword">return</span> xxxx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">if</span><span class="token punctuation">(</span>dataSources<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span>DB<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从DB中获取</span>
        <span class="token comment">//更新分布式缓存</span>
        <span class="token comment">//更新本地缓存</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> xxxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是每次调用者都去构建一个List，比较麻烦，此时我们可以使用枚举中的Flags特性，修改程序如下： 首先是枚举的定义上**，要加上   [Flags] 特性标签，并且定义 一般都是 2的n次方，主要是便于位移运算**</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">///数据取得地方</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>Flags<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DataSource</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///本地缓存</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">&quot;本地缓存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    LocalCache <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
 
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///分布式缓存</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">&quot;分布式缓存&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    DistributeCache <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
 
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///数据库</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">Description</span><span class="token punctuation">(</span><span class="token string">&quot;数据库&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    DB <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">UserEntity</span>  <span class="token function">GetUserInfo</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSources<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> xxxx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dataSources<span class="token punctuation">.</span><span class="token function">HasFlags</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span>Local<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从本地缓存中获取</span>
        <span class="token keyword">return</span> xxxx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dataSources<span class="token punctuation">.</span><span class="token function">HasFlags</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span>Distribution<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从分布式缓存中获取</span>
        <span class="token comment">//更新本地缓存</span>
        <span class="token keyword">return</span> xxxx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dataSources<span class="token punctuation">.</span><span class="token function">HasFlags</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span>DB<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//从DB中获取</span>
        <span class="token comment">//更新分布式缓存</span>
        <span class="token comment">//更新本地缓存</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> xxxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用的地方，可以用过“|”来指定，例如我只想用分布式缓存和数据库，那么：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userInfo <span class="token operator">=</span> <span class="token function">GetUserInfo</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">.</span>Distribution <span class="token operator">|</span> DataSource<span class="token punctuation">.</span>DB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),m={href:"https://www.cnblogs.com/dcz2015/p/10943759.html",target:"_blank",rel:"noopener noreferrer"},v=e(`<h3 id="dllimport" tabindex="-1"><a class="header-anchor" href="#dllimport"><span>DllImport</span></a></h3><p>DllImport特性，可以让我们调用非托管代码，所以我们可以使用DllImport特性引入对Win32 API函数的调用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">.</span>DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;user32.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">extern</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="serializable" tabindex="-1"><a class="header-anchor" href="#serializable"><span>Serializable</span></a></h3><p>Serializable特性表明了应用的元素可以被序列化(serializated)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleClass</span>
<span class="token punctuation">{</span>
    <span class="token comment">// Objects of this type can be serialized.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当时经过测试，当类不标注该特性的时候也可以进行序列化，或许是因为老版本的特性？</p></blockquote><h3 id="conditional" tabindex="-1"><a class="header-anchor" href="#conditional"><span>Conditional</span></a></h3><p>Conditional特性，用于条件编译，在调试时使用。注意：Conditional不可应用于数据成员和属性。</p><h2 id="自定义特性" tabindex="-1"><a class="header-anchor" href="#自定义特性"><span>自定义特性</span></a></h2>`,10),b={href:"https://docs.microsoft.com/zh-cn/dotnet/api/system.attribute",target:"_blank",rel:"noopener noreferrer"},g=e(`<h3 id="类特性" tabindex="-1"><a class="header-anchor" href="#类特性"><span>类特性</span></a></h3><p>假设我们希望使用编写类的程序员名字来标记该类，那么我们就需要自定义一个Author特性类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Struct<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//允许多次标注</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> AuthorName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">double</span></span> version<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">AuthorAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> authorName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>AuthorName <span class="token operator">=</span> authorName<span class="token punctuation">;</span>
        version <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类名 <code>AuthorAttribute</code> 是该特性的名称，即 <code>Author</code> 加上 <code>Attribute</code> 后缀。 由于该类继承自 <code>System.Attribute</code>，因此它是一个自定义特性类。 构造函数的参数是自定义特性的位置参数。 在此示例中，<code>name</code> 是位置参数。 所有公共读写字段或属性都是命名参数。 在本例中，<code>version</code> 是唯一的命名参数。</p><blockquote><p>请注意，使用 <code>AttributeUsage</code> 特性可使 <code>Author</code> 特性仅对类和 <code>struct</code> 声明有效。</p></blockquote><p>可按照下面的方式使用特性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Author</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Author</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleClass</span>
<span class="token punctuation">{</span> 

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取自定义参数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> attr <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SampleClass</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AuthorAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">AuthorAttribute</span> attribute <span class="token keyword">in</span> attr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;作者名称是 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"> attribute<span class="token punctuation">.</span>AuthorName</span><span class="token punctuation">}</span></span><span class="token string">,版本是</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">attribute<span class="token punctuation">.</span>Version</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//作者名称是 张三,版本是1.1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>GetCustomAttributes 会以数组形式返回 Author 对象和任何其他特性对象，第二个参数inherit是bool类型，true代表搜索该成员的继承链来查找该特性，否则就不查询继承链。</p></blockquote><h3 id="属性特性" tabindex="-1"><a class="header-anchor" href="#属性特性"><span>属性特性</span></a></h3><p>假设我们导出excel需要设置某一列的宽度，那么我们增加下面的特性类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Property <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Field<span class="token punctuation">,</span> Inherited <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColumnWidthAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 设置宽度</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">ColumnWidthAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> width<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Width <span class="token operator">=</span> width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Width <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用该特性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleClass</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ColumnWidth</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取该属性对应的特性值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SampleClass</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetCustomAttribute</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ColumnWidthAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name">ColumnWidthAttribute</span> headerAttr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> bb <span class="token operator">=</span> headerAttr<span class="token punctuation">.</span>Width<span class="token punctuation">;</span> <span class="token comment">//30</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,18),h={href:"https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/attributes/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.cnblogs.com/long2006sky/archive/2007/10/19/930094.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.cnblogs.com/dcz2015/p/10943759.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><h3 id="自定义匿名特性" tabindex="-1"><a class="header-anchor" href="#自定义匿名特性"><span>自定义匿名特性</span></a></h3><p>作用：如果配置了全局的过滤器，但是某一个方法不想让执行该过滤器，那么就可以标识为给他标识为匿名的 创建匿名Filter</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomAllowAnonymousAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在指定的Action上进行标记</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomAllowAnonymous</span></span><span class="token punctuation">]</span><span class="token comment">//匿名Filter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在过滤器内部检查是否匿名(配置该方法不走过滤器)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//如果标记有特殊的记好的话，就避开检查</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>ActionDescriptor<span class="token punctuation">.</span>EndpointMetadata<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomAllowAnonymousAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rabbitmq自定义属性" tabindex="-1"><a class="header-anchor" href="#rabbitmq自定义属性"><span>RabbitMq自定义属性</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义RabbitMQ队列注解</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRabbitMqAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 交换机名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Exchange <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 队列名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Queue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 路由键</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> RoutingKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 类名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomRabbitMqAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> routingKey<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> queue <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> exchange <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Exchange <span class="token operator">=</span> exchange<span class="token punctuation">;</span>
        Queue <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">?</span> queue <span class="token punctuation">:</span> <span class="token string">&quot;chat.queue.event&quot;</span><span class="token punctuation">;</span>
        RoutingKey <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>routingKey<span class="token punctuation">)</span> <span class="token punctuation">?</span> routingKey <span class="token punctuation">:</span> <span class="token string">&quot;chat.routingkey.event&quot;</span><span class="token punctuation">;</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">CustomRabbitMqAttribute</span><span class="token punctuation">(</span><span class="token class-name">Type</span> eventType<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> queue <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> exchange <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>eventType<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> eventType<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token named-parameter punctuation">exchange</span><span class="token punctuation">:</span> exchange<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// CustomRabbitMqAttribute扩展方法</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomRabbitMqAttributeExtension</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 获取CustomRabbitMqAttribute注解</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>type<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">CustomRabbitMqAttribute</span> <span class="token function">ToGetCustomRabbitMqAttribute</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> attributes <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomRabbitMqAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token keyword">default</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> assemblyName <span class="token operator">=</span> type<span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomRabbitMqAttribute</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> assemblyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span>CustomRabbitMqAttribute<span class="token punctuation">)</span>attributes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CustomRabbitMq</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bbbbb&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">user</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> consultationsId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//获取自定义属性注解</span>
<span class="token class-name"><span class="token keyword">var</span></span> bbb <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">user</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToGetCustomRabbitMqAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,13),x={href:"https://mp.weixin.qq.com/s/7uRqKR_tPVQdrdWUgOTKig",target:"_blank",rel:"noopener noreferrer"},A={href:"https://mp.weixin.qq.com/s/x-zLMMTE1Eha4HqQdkhVEg",target:"_blank",rel:"noopener noreferrer"};function q(_,C){const a=c("ExternalLinkIcon");return o(),l("div",null,[r,n("p",null,[s("使用特性，可以有效地将元数据或声明性信息与代码（程序集、类型、方法、属性等）相关联。 将特性与程序实体相关联后，可以在运行时使用 反射 这项技术查询特性。"),n("a",k,[s("详情"),t(a)]),s(" 用于添加元数据，如编译器指令和注释、描述、方法、类等其他信息。.Net 框架提供了两种类型的特性：预定义特性和自定义特性。 简单总结：定制特性attribute，本质上是一个类，其为目标元素提供关联附加信息，并在运行期以反射的方式来获取附加信息。")]),d,n("blockquote",null,[n("p",null,[s("该例子摘抄自："),n("a",m,[s("https://www.cnblogs.com/dcz2015/p/10943759.html"),t(a)])])]),v,n("p",null,[s("可通过定义特性类创建自己的自定义特性，特性类是直接或间接派生自 "),n("a",b,[s("Attribute"),t(a)]),s(" 的类，可快速轻松地识别元数据中的特性定义。")]),g,n("blockquote",null,[n("p",null,[n("a",h,[s("https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/attributes/"),t(a)]),n("a",y,[s("https://www.cnblogs.com/long2006sky/archive/2007/10/19/930094.html"),t(a)]),n("a",w,[s("https://www.cnblogs.com/dcz2015/p/10943759.html"),t(a)])])]),f,n("p",null,[n("a",x,[s("https://mp.weixin.qq.com/s/7uRqKR_tPVQdrdWUgOTKig"),t(a)]),s(" | C## Attribute "),n("a",A,[s("https://mp.weixin.qq.com/s/x-zLMMTE1Eha4HqQdkhVEg"),t(a)]),s(" | 每个.NET开发都应掌握的C#特性（Attribute）知识点")])])}const D=p(u,[["render",q],["__file","attribute.html.vue"]]),T=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/attribute.html","title":"特性[Attribute]","lang":"zh-CN","frontmatter":{"title":"特性[Attribute]","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"texing[attribute]","slug":"igfflt","docsId":"44228430","description":"最近更新：2021年12月24日 09:43:04 开篇语 本文开始之前，首先我想问下大家对于属性和特性知道多少？属性和特性又有何区别？ image.png 对于该单词，我更想把它称之为：特性。对于属性和特性就是名称上有纠葛(不知道你们迷不迷，反正我写本文之前我是迷了)，什么是属性？属性是面向对象编程的基本概念，提供了对私有字段的访问封装，在C#中以g...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/attribute.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"特性[Attribute]"}],["meta",{"property":"og:description","content":"最近更新：2021年12月24日 09:43:04 开篇语 本文开始之前，首先我想问下大家对于属性和特性知道多少？属性和特性又有何区别？ image.png 对于该单词，我更想把它称之为：特性。对于属性和特性就是名称上有纠葛(不知道你们迷不迷，反正我写本文之前我是迷了)，什么是属性？属性是面向对象编程的基本概念，提供了对私有字段的访问封装，在C#中以g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1619859754610-fc47148b-04d3-4314-b49a-3219448ed593.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T13:07:08.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T13:07:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"特性[Attribute]\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1619859754610-fc47148b-04d3-4314-b49a-3219448ed593.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T13:07:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"开篇语","slug":"开篇语","link":"#开篇语","children":[]},{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"常用特性","slug":"常用特性","link":"#常用特性","children":[{"level":3,"title":"AttributeUsage","slug":"attributeusage","link":"#attributeusage","children":[]},{"level":3,"title":"Flags","slug":"flags","link":"#flags","children":[]},{"level":3,"title":"DllImport","slug":"dllimport","link":"#dllimport","children":[]},{"level":3,"title":"Serializable","slug":"serializable","link":"#serializable","children":[]},{"level":3,"title":"Conditional","slug":"conditional","link":"#conditional","children":[]}]},{"level":2,"title":"自定义特性","slug":"自定义特性","link":"#自定义特性","children":[{"level":3,"title":"类特性","slug":"类特性","link":"#类特性","children":[]},{"level":3,"title":"属性特性","slug":"属性特性","link":"#属性特性","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"自定义匿名特性","slug":"自定义匿名特性","link":"#自定义匿名特性","children":[]},{"level":3,"title":"RabbitMq自定义属性","slug":"rabbitmq自定义属性","link":"#rabbitmq自定义属性","children":[{"level":4,"title":"使用","slug":"使用","link":"#使用","children":[]}]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700399228000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.89,"words":2066},"filePathRelative":"dotnet/csharp/duixiangheleixing/attribute.md","localizedDate":"2023年10月22日","excerpt":"<blockquote>\\n<p>最近更新：2021年12月24日 09:43:04</p>\\n</blockquote>\\n<h2>开篇语</h2>\\n<p>本文开始之前，首先我想问下大家对于属性和特性知道多少？属性和特性又有何区别？\\n<img src=\\"/common/1619859754610-fc47148b-04d3-4314-b49a-3219448ed593.png\\" alt=\\"image.png\\" loading=\\"lazy\\">\\n对于该单词，我更想把它称之为：特性。对于属性和特性就是名称上有纠葛(不知道你们迷不迷，反正我写本文之前我是迷了)，什么是属性？属性是面向对象编程的基本概念，提供了对私有字段的访问封装，在C#中以get和set访问器方法实现对可读可写属性的操作，提供了安全和灵活的数据访问封装。什么是特性？下面内容就说明下：</p>","autoDesc":true}');export{D as comp,T as data};
