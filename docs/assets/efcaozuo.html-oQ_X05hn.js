import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as t}from"./app-CBxp4zeL.js";const e={},p=t(`<h4 id="创建上下文对象" tabindex="-1"><a class="header-anchor" href="#创建上下文对象"><span>创建上下文对象：</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">WordBoradEntities</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WordBoradEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="登录-相当于查询操作" tabindex="-1"><a class="header-anchor" href="#登录-相当于查询操作"><span>登录（相当于查询操作）</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userinfo <span class="token operator">=</span> db<span class="token punctuation">.</span>TbUsers<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Email <span class="token operator">==</span> user<span class="token punctuation">.</span>Email <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span>Password <span class="token operator">==</span> user<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>userinfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h4><h5 id="单个表查询" tabindex="-1"><a class="header-anchor" href="#单个表查询"><span>单个表查询</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">List</span> list <span class="token operator">=</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>uName <span class="token operator">==</span> <span class="token string">&quot;刘德华&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="两个表链接查询" tabindex="-1"><a class="header-anchor" href="#两个表链接查询"><span>两个表链接查询</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list<span class="token operator">=</span>db<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span> UsersAddresses<span class="token punctuation">,</span>c<span class="token operator">=&gt;</span>c<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>g<span class="token operator">=&gt;</span>g<span class="token punctuation">.</span>udid<span class="token punctuation">,</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">new</span><span class="token punctuation">{</span>Name<span class="token operator">=</span>c<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>GroupName<span class="token operator">=</span>g<span class="token punctuation">.</span>GroupName<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询"><span>模糊查询</span></a></h5><h5 id="如何需要根据某一个进行模糊查询-那么可以使用contains-v-来实现-同理-v-、-v-可以分别使用startswith-与endswith-函数实现。" tabindex="-1"><a class="header-anchor" href="#如何需要根据某一个进行模糊查询-那么可以使用contains-v-来实现-同理-v-、-v-可以分别使用startswith-与endswith-函数实现。"><span>如何需要根据某一个进行模糊查询，那么可以使用Contains(&quot;V&quot;)来实现，同理，&quot;V%&quot;、&quot;%V&quot;可以分别使用StartsWith()与EndsWith()函数实现。</span></a></h5><h4 id="修改" tabindex="-1"><a class="header-anchor" href="#修改"><span>修改</span></a></h4><p>1.官方推荐的修改方式（先查询，再修改）</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//将Id为2的Users数据查询出来</span>
<span class="token class-name"><span class="token keyword">var</span></span> user <span class="token operator">=</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//修改UserName的属性</span>
user<span class="token punctuation">.</span>UserName <span class="token operator">=</span> <span class="token string">&quot;222222222222222&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//保存修改</span>
db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加" tabindex="-1"><a class="header-anchor" href="#添加"><span>添加</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//1.1创建一个实体对象</span>
    <span class="token class-name">User</span> uObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
                uName <span class="token operator">=</span> <span class="token string">&quot;刘德华&quot;</span><span class="token punctuation">,</span>
                uLoginName <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//1.2通过EF新增到数据库</span>
<span class="token comment">//1.2.1将对象加入到数据上下的User集合中</span>
db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>uObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//1.2.2调用数据上下文的保存方法，将对象保存到数据库</span>
db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h4><p>注：版本一、二都是根据主键删除，版本三是根据任意条件到数据库查询然后再根据查询的结果进行删除，实际上版本三也是根据查询出来的结果中的主键进行删除。</p><h5 id="版本1-根据主键删除" tabindex="-1"><a class="header-anchor" href="#版本1-根据主键删除"><span>版本1：根据主键删除</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//实例化一个Users对象，并制定Id的值</span>
<span class="token class-name">Users</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//将user附加到一个上下文对象中，并获得EF容器的管理对象</span>
 <span class="token class-name"><span class="token keyword">var</span></span> entry <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>或者 <span class="token class-name"><span class="token keyword">var</span></span> entry<span class="token operator">=</span>db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置该对象的状态为删除</span>
entry<span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
<span class="token comment">//保存修改</span>
db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="版本2-根据主键删除" tabindex="-1"><a class="header-anchor" href="#版本2-根据主键删除"><span>版本2：根据主键删除</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//实例化一个Users对象，并指定Id的值</span>
 <span class="token class-name">Users</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//将user附加到上下文对象中</span>
db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//删除user对象</span>
Db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//保存修改</span>
db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="版本三-根据条件先查询出来然后再删除" tabindex="-1"><a class="header-anchor" href="#版本三-根据条件先查询出来然后再删除"><span>版本三：根据条件先查询出来然后再删除</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list<span class="token operator">=</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Name <span class="token operator">==</span>”张三”<span class="token punctuation">)</span>；
<span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
       <span class="token function">Foreach</span><span class="token punctuation">(</span><span class="token class-name">User</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>
       <span class="token punctuation">{</span>
             db<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
	   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ef执行sql语句" tabindex="-1"><a class="header-anchor" href="#ef执行sql语句"><span>EF执行sql语句</span></a></h4><h5 id="查询数据" tabindex="-1"><a class="header-anchor" href="#查询数据"><span>查询数据</span></a></h5><p><code>Db.DataBase.SqlQuery(&quot;sql语句&quot;);</code> 例子：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">DbRawSqlQuery</span> result1 <span class="token operator">=</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">SqlQuery</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM test.student WHERE name = &#39;萝莉&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DbRawSqlQuery</span> result1 <span class="token operator">=</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">SqlQuery</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">student</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;SELECT * FROM test.student WHERE name = &#39;萝莉&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="实现增删改操作" tabindex="-1"><a class="header-anchor" href="#实现增删改操作"><span>实现增删改操作</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">--</span>同步的方式
Db<span class="token punctuation">.</span>DataBase<span class="token punctuation">.</span><span class="token function">ExecuteSqlCommand</span><span class="token punctuation">(</span><span class="token string">&quot;sql语句&quot;</span><span class="token punctuation">)</span>；  只返回受影响行数
<span class="token operator">--</span>异步的方式
Db<span class="token punctuation">.</span>DataBase<span class="token punctuation">.</span><span class="token function">ExecuteSqlCommandAsync</span><span class="token punctuation">(</span><span class="token string">&quot;sql语句&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
首行首列
db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">SqlQuery</span><span class="token punctuation">(</span>strSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
然后取第一列
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","efcaozuo.html.vue"]]),k=JSON.parse('{"path":"/orm/ef/efcaozuo.html","title":"EF操作","lang":"zh-CN","frontmatter":{"title":"EF操作","lang":"zh-CN","date":"2022-02-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"efcaozuo","slug":"iim6ix","docsId":"23977189","description":"创建上下文对象： 登录（相当于查询操作） 查询 单个表查询 两个表链接查询 模糊查询 如何需要根据某一个进行模糊查询，那么可以使用Contains(\\"V\\")来实现，同理，\\"V%\\"、\\"%V\\"可以分别使用StartsWith()与EndsWith()函数实现。 修改 1.官方推荐的修改方式（先查询，再修改） 添加 删除 注：版本一、二都是根据主键删除，版本...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/ef/efcaozuo.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"EF操作"}],["meta",{"property":"og:description","content":"创建上下文对象： 登录（相当于查询操作） 查询 单个表查询 两个表链接查询 模糊查询 如何需要根据某一个进行模糊查询，那么可以使用Contains(\\"V\\")来实现，同理，\\"V%\\"、\\"%V\\"可以分别使用StartsWith()与EndsWith()函数实现。 修改 1.官方推荐的修改方式（先查询，再修改） 添加 删除 注：版本一、二都是根据主键删除，版本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-22T16:22:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-22T16:22:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EF操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-22T16:22:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":4,"title":"创建上下文对象：","slug":"创建上下文对象","link":"#创建上下文对象","children":[]},{"level":4,"title":"登录（相当于查询操作）","slug":"登录-相当于查询操作","link":"#登录-相当于查询操作","children":[]},{"level":4,"title":"查询","slug":"查询","link":"#查询","children":[{"level":5,"title":"单个表查询","slug":"单个表查询","link":"#单个表查询","children":[]},{"level":5,"title":"两个表链接查询","slug":"两个表链接查询","link":"#两个表链接查询","children":[]},{"level":5,"title":"模糊查询","slug":"模糊查询","link":"#模糊查询","children":[]},{"level":5,"title":"如何需要根据某一个进行模糊查询，那么可以使用Contains(\\"V\\")来实现，同理，\\"V%\\"、\\"%V\\"可以分别使用StartsWith()与EndsWith()函数实现。","slug":"如何需要根据某一个进行模糊查询-那么可以使用contains-v-来实现-同理-v-、-v-可以分别使用startswith-与endswith-函数实现。","link":"#如何需要根据某一个进行模糊查询-那么可以使用contains-v-来实现-同理-v-、-v-可以分别使用startswith-与endswith-函数实现。","children":[]}]},{"level":4,"title":"修改","slug":"修改","link":"#修改","children":[]},{"level":4,"title":"添加","slug":"添加","link":"#添加","children":[]},{"level":4,"title":"删除","slug":"删除","link":"#删除","children":[{"level":5,"title":"版本1：根据主键删除","slug":"版本1-根据主键删除","link":"#版本1-根据主键删除","children":[]},{"level":5,"title":"版本2：根据主键删除","slug":"版本2-根据主键删除","link":"#版本2-根据主键删除","children":[]},{"level":5,"title":"版本三：根据条件先查询出来然后再删除","slug":"版本三-根据条件先查询出来然后再删除","link":"#版本三-根据条件先查询出来然后再删除","children":[]}]},{"level":4,"title":"EF执行sql语句","slug":"ef执行sql语句","link":"#ef执行sql语句","children":[{"level":5,"title":"查询数据","slug":"查询数据","link":"#查询数据","children":[]},{"level":5,"title":"实现增删改操作","slug":"实现增删改操作","link":"#实现增删改操作","children":[]}]}],"git":{"createdTime":1690042937000,"updatedTime":1690042937000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.04,"words":613},"filePathRelative":"orm/ef/efcaozuo.md","localizedDate":"2022年2月13日","excerpt":"<h4>创建上下文对象：</h4>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\">WordBoradEntities</span> db <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">WordBoradEntities</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
