import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as n,b as e}from"./app-Bw62I61B.js";const t={},p=e(`<h2 id="特性传参" tabindex="-1"><a class="header-anchor" href="#特性传参"><span>特性传参</span></a></h2><p>需要在A页面传值给B页，可以在B页面创建属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Parameter</span></span><span class="token punctuation">]</span><span class="token comment">//设置参数特性,不设置无法传参</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> IncrementAmount <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//设置默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再A页面进行传参</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">Counter</span> IncrementAmount<span class="token operator">=</span><span class="token string">&quot;10&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Counter<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="级联参数共享信息" tabindex="-1"><a class="header-anchor" href="#级联参数共享信息"><span>级联参数共享信息</span></a></h3><p>Blazor 包含了级联参数。 在组件中设置级联参数的值时，其值将自动提供给所有子组件。 在父组件中，使用 <code>&lt;CascadingValue&gt;</code> 标记指定将级联到所有子组件的信息。 此标记作为内置的 Blazor 组件实现。 在该标记内呈现的任何组件都将能够访问该值。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@page <span class="token string">&quot;/specialoffers&quot;</span>

<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Special Offers<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token class-name">CascadingValue</span> Name<span class="token operator">=</span><span class="token string">&quot;DealName&quot;</span> Value<span class="token operator">=</span><span class="token string">&quot;Throwback Thursday&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Any descendant component rendered here will be able to access the cascading <span class="token keyword">value</span><span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>CascadingValue<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在子组件中，可以通过使用组件成员并使用 [CascadingParameter] 特性对其进行修饰来访问级联值。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Deal<span class="token punctuation">:</span> @DealName<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CascadingParameter</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Name<span class="token operator">=</span><span class="token string">&quot;DealName&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> DealName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用appstate共享信息" tabindex="-1"><a class="header-anchor" href="#使用appstate共享信息"><span>使用AppState共享信息</span></a></h3><p>创建一个定义要存储的属性的类，并将其注册为作用域服务。 在要设置或使用 AppState 值的任何组件中，注入该服务，然后可以访问其属性。 不同于组件参数和级联参数，AppState 中的值可用于应用程序中的所有组件，即使这些组件不是存储该值的组件的子组件也是如此。 比如创建一个存储销售值的类：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaSalesState</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> PizzasSoldToday <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，将该类作为作用域服务添加到 Program.cs 文件中：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token comment">// Add services to the container</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRazorPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddServerSideBlazor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add the AppState class</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddScoped</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>PizzaSalesState<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，在要设置或检索 AppState 值的任何组件中，注入该类，然后访问属性：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@page <span class="token string">&quot;/&quot;</span>
@inject PizzaSalesState SalesState

<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Welcome to Blazing Pizzas<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Today<span class="token punctuation">,</span> we&#39;ve sold <span class="token keyword">this</span> <span class="token class-name">many</span> pizzas<span class="token punctuation">:</span> @SalesState<span class="token punctuation">.</span>PizzasSoldToday<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token class-name">button</span> @onclick<span class="token operator">=</span><span class="token string">&quot;IncrementSales&quot;</span><span class="token operator">&gt;</span>Buy a Pizza<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

@code <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IncrementSales</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        SalesState<span class="token punctuation">.</span>PizzasSoldToday<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[p];function c(l,i){return s(),n("div",null,o)}const d=a(t,[["render",c],["__file","chuancan.html.vue"]]),k=JSON.parse('{"path":"/web/blazor/baseOperator/chuancan.html","title":"传参","lang":"zh-CN","frontmatter":{"title":"传参","lang":"zh-CN","date":"2022-05-15T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":false,"category":["dotNET"],"tag":["无"],"filename":"chuancan","slug":"ems54h","docsId":"67628978","description":"特性传参 需要在A页面传值给B页，可以在B页面创建属性 然后再A页面进行传参 级联参数共享信息 Blazor 包含了级联参数。 在组件中设置级联参数的值时，其值将自动提供给所有子组件。 在父组件中，使用 <CascadingValue> 标记指定将级联到所有子组件的信息。 此标记作为内置的 Blazor 组件实现。 在该标记内呈现的任何组件都将能够访问...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/web/blazor/baseOperator/chuancan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"传参"}],["meta",{"property":"og:description","content":"特性传参 需要在A页面传值给B页，可以在B页面创建属性 然后再A页面进行传参 级联参数共享信息 Blazor 包含了级联参数。 在组件中设置级联参数的值时，其值将自动提供给所有子组件。 在父组件中，使用 <CascadingValue> 标记指定将级联到所有子组件的信息。 此标记作为内置的 Blazor 组件实现。 在该标记内呈现的任何组件都将能够访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-14T12:02:46.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-14T12:02:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"传参\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-14T12:02:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"特性传参","slug":"特性传参","link":"#特性传参","children":[{"level":3,"title":"级联参数共享信息","slug":"级联参数共享信息","link":"#级联参数共享信息","children":[]},{"level":3,"title":"使用AppState共享信息","slug":"使用appstate共享信息","link":"#使用appstate共享信息","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1702555366000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":1.67,"words":500},"filePathRelative":"web/blazor/baseOperator/chuancan.md","localizedDate":"2022年5月15日","excerpt":"<h2>特性传参</h2>\\n<p>需要在A页面传值给B页，可以在B页面创建属性</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">Parameter</span></span><span class=\\"token punctuation\\">]</span><span class=\\"token comment\\">//设置参数特性,不设置无法传参</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">int</span></span> IncrementAmount <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//设置默认值</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
