import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,d as s,e as c,b as l}from"./app-DMmdIwn0.js";const i={},u=l(`<h4 id="获取ip地址" tabindex="-1"><a class="header-anchor" href="#获取ip地址"><span>获取IP地址</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>Request<span class="token punctuation">.</span>UserHostAddress<span class="token punctuation">.</span>ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 或者</span>
string userip <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Context<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>ServerVariables<span class="token punctuation">[</span><span class="token string">&quot;HTTP_VIA&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">null</span><span class="token punctuation">)</span>
{
	userip <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token keyword">Current</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>ServerVariables<span class="token punctuation">[</span><span class="token string">&quot;HTTP_X_FORWARDED_FOR&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
}
<span class="token keyword">else</span>
{
	userip <span class="token operator">=</span> HttpContext<span class="token punctuation">.</span><span class="token keyword">Current</span><span class="token punctuation">.</span>Request<span class="token punctuation">.</span>ServerVariables<span class="token punctuation">[</span><span class="token string">&quot;REMOTE_ADDR&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将字符串转为指定类型的实例" tabindex="-1"><a class="header-anchor" href="#将字符串转为指定类型的实例"><span>将字符串转为指定类型的实例</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">GetValue</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>Convert<span class="token punctuation">.</span><span class="token function">ChangeType</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="和-equals" tabindex="-1"><a class="header-anchor" href="#和-equals"><span>== 和 equals</span></a></h4><p>对于值类型，这两种都是比较的数值内容是否相等。 对于引用类型，比较的是引用的“地址”是否相同。 通过源码查看，<mark>调用的是equals，所以这两个是同样的效果，可以相互替换。 所以这也就是当我们在比较String类型时、不同的引用、数值一样、Equals与</mark>返回的结果一致、相同、所以在进行String类型判断这两个方法内部本质是相同的、当然String类型是一个特例。c## 有运算符重载 语法，字符串 == 被重写为Equals,而Equals里边实际上是比较字符串的值 总结：Equals比较的永远是变量的内容是否相同，而= =比较的则是引用地址是否相同(前提:此种类型内部没有对Equals 或= = 进行重写操作，否则输出可能会有不同)</p>`,6),r={href:"https://www.cnblogs.com/ChenBigBao/p/14807569.html",target:"_blank",rel:"noopener noreferrer"},d=n("h4",{id:"ref和out区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ref和out区别"},[n("span",null,"ref和out区别")])],-1),k=n("p",null,"1、使用ref型参数时，传入的参数必须先被初始化。对out而言，必须在方法中对其完成初始化。 2、使用ref和out时，在方法的参数和执行方法时，都要加Ref或Out关键字。以满足匹配。 3、out适合用在需要retrun多个返回值的地方，而ref则用在需要被调用的方法修改调用者的引用的时候。",-1);function m(h,g){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("blockquote",null,[n("p",null,[s("引用地址："),n("a",r,[s("https://www.cnblogs.com/ChenBigBao/p/14807569.html"),c(a)])])]),d,k])}const q=t(i,[["render",m],["__file","changedaimajiexi.html.vue"]]),y=JSON.parse('{"path":"/dotnet/csharp/changedaimajiexi.html","title":"单个代码解析","lang":"zh-CN","frontmatter":{"title":"单个代码解析","lang":"zh-CN","date":"2023-11-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"changedaimajiexi","slug":"czyzbh","docsId":"30978113","description":"获取IP地址 将字符串转为指定类型的实例 == 和 equals 对于值类型，这两种都是比较的数值内容是否相等。 对于引用类型，比较的是引用的“地址”是否相同。 通过源码查看，调用的是equals，所以这两个是同样的效果，可以相互替换。 所以这也就是当我们在比较String类型时、不同的引用、数值一样、Equals与返回的结果一致、相同、所以在进行St...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/changedaimajiexi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"单个代码解析"}],["meta",{"property":"og:description","content":"获取IP地址 将字符串转为指定类型的实例 == 和 equals 对于值类型，这两种都是比较的数值内容是否相等。 对于引用类型，比较的是引用的“地址”是否相同。 通过源码查看，调用的是equals，所以这两个是同样的效果，可以相互替换。 所以这也就是当我们在比较String类型时、不同的引用、数值一样、Equals与返回的结果一致、相同、所以在进行St..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-11-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单个代码解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":4,"title":"获取IP地址","slug":"获取ip地址","link":"#获取ip地址","children":[]},{"level":4,"title":"将字符串转为指定类型的实例","slug":"将字符串转为指定类型的实例","link":"#将字符串转为指定类型的实例","children":[]},{"level":4,"title":"== 和 equals","slug":"和-equals","link":"#和-equals","children":[]},{"level":4,"title":"ref和out区别","slug":"ref和out区别","link":"#ref和out区别","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.45,"words":436},"filePathRelative":"dotnet/csharp/changedaimajiexi.md","localizedDate":"2023年11月17日","excerpt":"<h4>获取IP地址</h4>\\n<div class=\\"language-sql\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre class=\\"language-sql\\"><code>Request<span class=\\"token punctuation\\">.</span>UserHostAddress<span class=\\"token punctuation\\">.</span>ToString<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 或者</span>\\nstring userip <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Context<span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>ServerVariables<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"HTTP_VIA\\"</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">null</span><span class=\\"token punctuation\\">)</span>\\n{\\n\\tuserip <span class=\\"token operator\\">=</span> HttpContext<span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">Current</span><span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>ServerVariables<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"HTTP_X_FORWARDED_FOR\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n}\\n<span class=\\"token keyword\\">else</span>\\n{\\n\\tuserip <span class=\\"token operator\\">=</span> HttpContext<span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">Current</span><span class=\\"token punctuation\\">.</span>Request<span class=\\"token punctuation\\">.</span>ServerVariables<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"REMOTE_ADDR\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n}\\n</code></pre></div>","autoDesc":true}');export{q as comp,y as data};
