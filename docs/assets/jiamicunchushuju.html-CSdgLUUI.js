import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,b as n,e as s,f as c,d as l}from"./app-CBxp4zeL.js";const i={},r=l(`<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>针对某些数据字段要保存敏感数据的情况，比如银行卡号，我们需要使用一种机制保证存储到数据库的数据是加密的，避免数据泄露风险，但是又能够正常读取出来显示。 下面我们用MySql演示如何操作。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>创建一个ConsoleApp1，然后引用下列NuGet包：</p><ul><li>EntityFrameworkCore.DataEncryption</li><li>Pomelo.EntityFrameworkCore.MySql</li></ul><p>假设数据表User已创建好，包含3个字段:</p><ul><li>Id 主键</li><li>Name 姓名</li><li>BankCard 银行账户</li></ul><p>创建User类，在BankCard上我们加了EncryptedAttribute,表示这个字段需要加密:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Encrypted</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> BankCard <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建DefaultDbContext，在构造函数创建IEncryptionProvider实例，并在OnModelCreating方法中UseEncryption:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultDbContext</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _encryptionKey <span class="token operator">=</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> _encryptionIV <span class="token operator">=</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IEncryptionProvider</span> _provider<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">DefaultDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AesProvider</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_encryptionKey<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_encryptionIV<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> User <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            modelBuilder<span class="token punctuation">.</span><span class="token function">UseEncryption</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnModelCreating</span><span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们增加几个User：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">DefaultDbContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">User</span> zhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> BankCard <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> lisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> BankCard <span class="token operator">=</span> <span class="token string">&quot;67890&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>zhangsan<span class="token punctuation">,</span> lisi<span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> user <span class="token keyword">in</span> users<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">user<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">user<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">user<span class="token punctuation">.</span>BankCard</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到输出正常,但是数据库中已经加密。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>使用这种方式的好处在于，可以实现统一的数据库数据加解密规则，不需要单独在仓储中处理了，方便快速实现业务。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,17),u={href:"https://mp.weixin.qq.com/s/BkUUU5-Olsfpg1XsgBUt5A",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=e("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[n("a",u,[s("https://mp.weixin.qq.com/s/BkUUU5-Olsfpg1XsgBUt5A"),c(a)]),s(" | 暴库也不怕！EF Core加密存储数据")])])}const h=t(i,[["render",k],["__file","jiamicunchushuju.html.vue"]]),b=JSON.parse('{"path":"/orm/efcore/jiamicunchushuju.html","title":"加密存储数据","lang":"zh-CN","frontmatter":{"title":"加密存储数据","lang":"zh-CN","date":"2023-03-05T00:00:00.000Z","publish":true,"author":"MY IO","isOriginal":false,"category":["orm"],"tag":["无"],"filename":"jiamicunchushuju","slug":"xthx1q","docsId":"66778839","description":"目的 针对某些数据字段要保存敏感数据的情况，比如银行卡号，我们需要使用一种机制保证存储到数据库的数据是加密的，避免数据泄露风险，但是又能够正常读取出来显示。 下面我们用MySql演示如何操作。 操作 创建一个ConsoleApp1，然后引用下列NuGet包： EntityFrameworkCore.DataEncryption Pomelo.Entit...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jiamicunchushuju.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"加密存储数据"}],["meta",{"property":"og:description","content":"目的 针对某些数据字段要保存敏感数据的情况，比如银行卡号，我们需要使用一种机制保证存储到数据库的数据是加密的，避免数据泄露风险，但是又能够正常读取出来显示。 下面我们用MySql演示如何操作。 操作 创建一个ConsoleApp1，然后引用下列NuGet包： EntityFrameworkCore.DataEncryption Pomelo.Entit..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-14T13:07:03.000Z"}],["meta",{"property":"article:author","content":"MY IO"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-14T13:07:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"加密存储数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-14T13:07:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MY IO\\"}]}"]]},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1697288823000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.35,"words":405},"filePathRelative":"orm/efcore/jiamicunchushuju.md","localizedDate":"2023年3月5日","excerpt":"<h2>目的</h2>\\n<p>针对某些数据字段要保存敏感数据的情况，比如银行卡号，我们需要使用一种机制保证存储到数据库的数据是加密的，避免数据泄露风险，但是又能够正常读取出来显示。\\n下面我们用MySql演示如何操作。</p>\\n<h2>操作</h2>\\n<p>创建一个ConsoleApp1，然后引用下列NuGet包：</p>\\n<ul>\\n<li>EntityFrameworkCore.DataEncryption</li>\\n<li>Pomelo.EntityFrameworkCore.MySql</li>\\n</ul>\\n<p>假设数据表User已创建好，包含3个字段:</p>\\n<ul>\\n<li>Id 主键</li>\\n<li>Name 姓名</li>\\n<li>BankCard 银行账户</li>\\n</ul>","autoDesc":true}');export{h as comp,b as data};
