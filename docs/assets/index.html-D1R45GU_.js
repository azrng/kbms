import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e,b as r}from"./app-qB9_Bjjp.js";const l={},i=r(`<h2 id="大小优化" tabindex="-1"><a class="header-anchor" href="#大小优化"><span>大小优化</span></a></h2><h3 id="nginx压缩" tabindex="-1"><a class="header-anchor" href="#nginx压缩"><span>Nginx压缩</span></a></h3><p>通过nginx开启gzip压缩，配置如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>http
<span class="token punctuation">{</span>
 <span class="token range operator">..</span><span class="token punctuation">.</span>
   <span class="token preprocessor property">#是否启动gzip压缩,on代表启动,off代表开启</span>
    <span class="token class-name">gzip</span> <span class="token keyword">on</span><span class="token punctuation">;</span>
   <span class="token preprocessor property">#如果文件大于1k就启动压缩</span>
    gzip_min_length  1k<span class="token punctuation">;</span>
   <span class="token preprocessor property">#以16k为单位,按照原始数据的大小以4倍的方式申请内存空间,一般此项不要修改</span>
    gzip_buffers     <span class="token number">4</span> 16k<span class="token punctuation">;</span>
    gzip_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>
   <span class="token preprocessor property">#压缩的等级,数字选择范围是1-9,数字越小压缩的速度越快,消耗cpu就越大</span>
    gzip_comp_level <span class="token number">2</span><span class="token punctuation">;</span>
   <span class="token preprocessor property">#需要压缩的常见静态资源</span>
    gzip_types     text<span class="token operator">/</span>plain application<span class="token operator">/</span>javascript application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>javascript text<span class="token operator">/</span>css application<span class="token operator">/</span>xml application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>
    <span class="token class-name">gzip_vary</span> <span class="token keyword">on</span><span class="token punctuation">;</span>
    gzip_proxied   expired no<span class="token operator">-</span>cache no<span class="token operator">-</span>store <span class="token keyword">private</span> auth<span class="token punctuation">;</span>
   <span class="token preprocessor property">#由于nginx的压缩发生在浏览器端而微软的ie6很坑爹,会导致压缩后图片看不见所以该选项是禁止ie6发生压缩</span>
    gzip_disable   <span class="token string">&quot;MSIE [1-6]\\.&quot;</span><span class="token punctuation">;</span>
<span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启nginx</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token preprocessor property">#用来测试配置文件</span>
nginx <span class="token operator">-</span>t
  
nginx <span class="token operator">-</span>s reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="brotli压缩" tabindex="-1"><a class="header-anchor" href="#brotli压缩"><span>Brotli压缩</span></a></h3><p>发布 Blazor WebAssembly 应用时，将在发布过程中对输出内容进行静态压缩，从而减小应用的大小，并免去运行时压缩的开销。使用Brotli压缩算法。 在 wwwroot/index.html 文件中，在 Blazor 的 <code>&lt;script&gt;</code> 标记上将 autostart 设置为 false，阻止默认启动加载程序集</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">script</span> src<span class="token operator">=</span><span class="token string">&quot;_framework/blazor.webassembly.js&quot;</span> autostart<span class="token operator">=</span><span class="token string">&quot;false&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 Blazor 的 <code>&lt;script&gt;</code> 标记之后和结束 <code>&lt;/body&gt;</code> 标记之前，添加以下 JavaScript 代码 <code>&lt;script&gt;</code> 块：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">script</span> type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>
  import <span class="token punctuation">{</span> BrotliDecode <span class="token punctuation">}</span> from &#39;<span class="token punctuation">.</span><span class="token operator">/</span>decode<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js&#39;<span class="token punctuation">;</span>
  Blazor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    loadBootResource<span class="token punctuation">:</span> function <span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> defaultUri<span class="token punctuation">,</span> integrity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!=</span><span class="token operator">=</span> &#39;dotnetjs&#39; <span class="token operator">&amp;&amp;</span> location<span class="token punctuation">.</span>hostname <span class="token operator">!=</span><span class="token operator">=</span> &#39;localhost&#39;<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">async</span> function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>defaultUri <span class="token operator">+</span> &#39;<span class="token punctuation">.</span>br&#39;<span class="token punctuation">,</span> <span class="token punctuation">{</span> cache<span class="token punctuation">:</span> &#39;no<span class="token operator">-</span>cache&#39; <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">const</span> originalResponseBuffer <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> originalResponseArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Int8Array</span><span class="token punctuation">(</span>originalResponseBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> decompressedResponseArray <span class="token operator">=</span> <span class="token function">BrotliDecode</span><span class="token punctuation">(</span>originalResponseArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> contentType <span class="token operator">=</span> type <span class="token operator">==</span><span class="token operator">=</span> 
            &#39;dotnetwasm&#39; <span class="token punctuation">?</span> &#39;application<span class="token operator">/</span>wasm&#39; <span class="token punctuation">:</span> &#39;application<span class="token operator">/</span>octet<span class="token operator">-</span>stream&#39;<span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Response</span><span class="token punctuation">(</span>decompressedResponseArray<span class="token punctuation">,</span> 
            <span class="token punctuation">{</span> headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> &#39;content<span class="token operator">-</span>type&#39;<span class="token punctuation">:</span> contentType <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),u={href:"https://github.com/google/brotli/blob/master/js/decode.min.js",target:"_blank",rel:"noopener noreferrer"},d=n("h3",{id:"延迟加载程序集",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#延迟加载程序集"},[n("span",null,"延迟加载程序集")])],-1),k={href:"https://www.cnblogs.com/hejiale010426/p/17076817.html",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料"},[n("span",null,"参考资料")])],-1),v={href:"https://www.cnblogs.com/chenyishi/p/17039437.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://learn.microsoft.com/zh-cn/aspnet/core/blazor/host-and-deploy/webassembly?view=aspnetcore-7.0#compression-1",target:"_blank",rel:"noopener noreferrer"},h={href:"https://learn.microsoft.com/zh-cn/dotnet/core/deploying/trimming/trimming-options?pivots=dotnet-7-0",target:"_blank",rel:"noopener noreferrer"};function b(y,w){const a=p("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("注意：如果在不支持静态压缩文件内容协商的静态托管解决方案（例如 GitHub 页面）上进行托管，那么需要将docode文件保存到项目中("),n("a",u,[s("https://github.com/google/brotli/blob/master/js/decode.min.js"),e(a)]),s(")")]),d,n("p",null,[n("a",k,[s("https://www.cnblogs.com/hejiale010426/p/17076817.html"),e(a)])]),m,n("p",null,[s("Blazor WebAssembly的初次访问慢的优化："),n("a",v,[s("https://www.cnblogs.com/chenyishi/p/17039437.html"),e(a)]),s(" 压缩方案："),n("a",g,[s("https://learn.microsoft.com/zh-cn/aspnet/core/blazor/host-and-deploy/webassembly?view=aspnetcore-7.0#compression-1"),e(a)]),s(" 剪裁："),n("a",h,[s("https://learn.microsoft.com/zh-cn/dotnet/core/deploying/trimming/trimming-options?pivots=dotnet-7-0"),e(a)])])])}const x=t(l,[["render",b],["__file","index.html.vue"]]),z=JSON.parse('{"path":"/web/blazor/deploy/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-02-09T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"gaishu","slug":"mwqqzx63euku7uo8","docsId":"113295565","description":"大小优化 Nginx压缩 通过nginx开启gzip压缩，配置如下 重启nginx Brotli压缩 发布 Blazor WebAssembly 应用时，将在发布过程中对输出内容进行静态压缩，从而减小应用的大小，并免去运行时压缩的开销。使用Brotli压缩算法。 在 wwwroot/index.html 文件中，在 Blazor 的 <script> ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/web/blazor/deploy/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"大小优化 Nginx压缩 通过nginx开启gzip压缩，配置如下 重启nginx Brotli压缩 发布 Blazor WebAssembly 应用时，将在发布过程中对输出内容进行静态压缩，从而减小应用的大小，并免去运行时压缩的开销。使用Brotli压缩算法。 在 wwwroot/index.html 文件中，在 Blazor 的 <script> ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-27T14:04:52.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-27T14:04:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-27T14:04:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"大小优化","slug":"大小优化","link":"#大小优化","children":[{"level":3,"title":"Nginx压缩","slug":"nginx压缩","link":"#nginx压缩","children":[]},{"level":3,"title":"Brotli压缩","slug":"brotli压缩","link":"#brotli压缩","children":[]},{"level":3,"title":"延迟加载程序集","slug":"延迟加载程序集","link":"#延迟加载程序集","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1701093892000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.87,"words":562},"filePathRelative":"web/blazor/deploy/readme.md","localizedDate":"2023年2月9日","excerpt":"<h2>大小优化</h2>\\n<h3>Nginx压缩</h3>\\n<p>通过nginx开启gzip压缩，配置如下</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>http\\n<span class=\\"token punctuation\\">{</span>\\n <span class=\\"token range operator\\">..</span><span class=\\"token punctuation\\">.</span>\\n   <span class=\\"token preprocessor property\\">#是否启动gzip压缩,on代表启动,off代表开启</span>\\n    <span class=\\"token class-name\\">gzip</span> <span class=\\"token keyword\\">on</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token preprocessor property\\">#如果文件大于1k就启动压缩</span>\\n    gzip_min_length  1k<span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token preprocessor property\\">#以16k为单位,按照原始数据的大小以4倍的方式申请内存空间,一般此项不要修改</span>\\n    gzip_buffers     <span class=\\"token number\\">4</span> 16k<span class=\\"token punctuation\\">;</span>\\n    gzip_http_version <span class=\\"token number\\">1.1</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token preprocessor property\\">#压缩的等级,数字选择范围是1-9,数字越小压缩的速度越快,消耗cpu就越大</span>\\n    gzip_comp_level <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token preprocessor property\\">#需要压缩的常见静态资源</span>\\n    gzip_types     text<span class=\\"token operator\\">/</span>plain application<span class=\\"token operator\\">/</span>javascript application<span class=\\"token operator\\">/</span>x<span class=\\"token operator\\">-</span>javascript text<span class=\\"token operator\\">/</span>javascript text<span class=\\"token operator\\">/</span>css application<span class=\\"token operator\\">/</span>xml application<span class=\\"token operator\\">/</span>octet<span class=\\"token operator\\">-</span>stream<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">gzip_vary</span> <span class=\\"token keyword\\">on</span><span class=\\"token punctuation\\">;</span>\\n    gzip_proxied   expired no<span class=\\"token operator\\">-</span>cache no<span class=\\"token operator\\">-</span>store <span class=\\"token keyword\\">private</span> auth<span class=\\"token punctuation\\">;</span>\\n   <span class=\\"token preprocessor property\\">#由于nginx的压缩发生在浏览器端而微软的ie6很坑爹,会导致压缩后图片看不见所以该选项是禁止ie6发生压缩</span>\\n    gzip_disable   <span class=\\"token string\\">\\"MSIE [1-6]\\\\.\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token range operator\\">..</span><span class=\\"token punctuation\\">.</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{x as comp,z as data};
