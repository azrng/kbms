import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as n,e as s,f as e,d as l}from"./app-Bfb6-vFH.js";const i={},u=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),r={href:"http://mp.weixin.qq.com/s?__biz=MzAxMjE2NTMxMw==&mid=2456605994&idx=1&sn=5258154acdc235c71b3193aada599fc7&chksm=8c2e7c84bb59f5925ab575ca3c28c4d263c16ada9bc674dd5e7dc968ae1f09d4a4a1d3c579e7&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h2><p>首先来看一个实现效果：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FeatureFlagFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Flag1&quot;</span><span class="token punctuation">,</span> DefaultValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">FeatureEnableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span>
    <span class="token punctuation">{</span>
        Time <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FeatureFlagFilter</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Flag2&quot;</span><span class="token punctuation">,</span> DefaultValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">FeatureDisableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token keyword">new</span>
    <span class="token punctuation">{</span>
        Time <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>UtcNow
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是两个完全一样的 API，为了测试 featureFilter 的功能 启用的 API 效果就是可以正常访问，禁用的效果，默认是返回一个 404，如果需要也可以自定义，只需要实现一个接口，注入进去即可。</p><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>实现代码其实也比较简单，分为两部分，一部分是 IConfiguration 的扩展，从配置中获取某个配置开关的值，另外一部分则是 ASP.NET Core 相关的扩展，上面的示例是一个 MVC Filter 的一个示例，比较简单所以我们就直接看代码 IConfiguration 扩展实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token keyword">string</span></span> FeatureFlagsSectionName <span class="token operator">=</span> <span class="token string">&quot;FeatureFlags&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryGetFeatureFlagValue</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> featureFlagName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">bool</span></span> featureFlagValue<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    featureFlagValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> section <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span>FeatureFlagsSectionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>section<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">bool</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>section<span class="token punctuation">[</span>featureFlagName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">out</span> featureFlagValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsFeatureEnabled</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> featureFlagName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">bool</span></span> defaultValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">TryGetFeatureFlagValue</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> featureFlagName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> defaultValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中的 FeatureFlagFilter 是一个 MVC 的 ResourceFilter，实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IFeatureFlagFilterResponseFactory</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">GetResponse</span><span class="token punctuation">(</span><span class="token class-name">ResourceExecutingContext</span> resourceExecutingContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AttributeUsage</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class <span class="token operator">|</span> AttributeTargets<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> AllowMultiple <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> Inherited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">FeatureFlagFilterAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span><span class="token punctuation">,</span> <span class="token class-name">IAsyncResourceFilter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> DefaultValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FeatureFlagName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token function">FeatureFlagFilterAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> featureFlagName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        FeatureFlagName <span class="token operator">=</span> featureFlagName <span class="token operator">??</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>featureFlagName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">OnResourceExecutionAsync</span><span class="token punctuation">(</span><span class="token class-name">ResourceExecutingContext</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceExecutionDelegate</span> next<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> configuration <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IConfiguration<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">IsFeatureEnabled</span><span class="token punctuation">(</span>FeatureFlagName<span class="token punctuation">,</span> DefaultValue<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> responseFactory <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>RequestServices
                <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IFeatureFlagFilterResponseFactory<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>responseFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">await</span> responseFactory<span class="token punctuation">.</span><span class="token function">GetResponse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotFoundResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>关于 FeatherFlag，上面只是一个简单的封装，微软有一个功能更为丰富的库来支持 Microsoft.FeatureManagement.AspNetCore, 源代码在 Github 上有需要的可以参考 https://github.com/microsoft/FeatureManagement-Dotnet</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,12),d={href:"https://mp.weixin.qq.com/s/bn7voWTZXOkvoN1PzXaIXQ",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("在我们的应用中，可能有一些配置开关的需求，某些功能是否启用使用一个配置开关，用的时候就打开，不用的时候就关掉，于是基于 .NET Core 的里配置体系写了一个简单的 FeatureFlag，类似于之前的 AppSetting 的扩展 "),n("a",r,[s("给 IConfiguration 写一个 GetAppSetting 扩展方法"),e(a)])]),k,n("p",null,[n("a",d,[s("https://mp.weixin.qq.com/s/bn7voWTZXOkvoN1PzXaIXQ"),e(a)]),s(" | 实现一个基于 IConfiguration 的低配版 FeatureFlag")])])}const y=t(i,[["render",m],["__file","dipeibanfeatureflag.html.vue"]]),h=JSON.parse('{"path":"/dotnet/base/peizhikuangjia/peizhikaiguan/dipeibanfeatureflag.html","title":"低配版FeatureFlag","lang":"zh-CN","frontmatter":{"title":"低配版FeatureFlag","lang":"zh-CN","date":"2022-02-01T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"dipeibanfeatureflag","slug":"gllc7g","docsId":"64452911","description":"介绍 在我们的应用中，可能有一些配置开关的需求，某些功能是否启用使用一个配置开关，用的时候就打开，不用的时候就关掉，于是基于 .NET Core 的里配置体系写了一个简单的 FeatureFlag，类似于之前的 AppSetting 的扩展 给 IConfiguration 写一个 GetAppSetting 扩展方法 目的 首先来看一个实现效果： 这...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/peizhikuangjia/peizhikaiguan/dipeibanfeatureflag.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"低配版FeatureFlag"}],["meta",{"property":"og:description","content":"介绍 在我们的应用中，可能有一些配置开关的需求，某些功能是否启用使用一个配置开关，用的时候就打开，不用的时候就关掉，于是基于 .NET Core 的里配置体系写了一个简单的 FeatureFlag，类似于之前的 AppSetting 的扩展 给 IConfiguration 写一个 GetAppSetting 扩展方法 目的 首先来看一个实现效果： 这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"低配版FeatureFlag\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.87,"words":560},"filePathRelative":"dotnet/base/peizhikuangjia/peizhikaiguan/dipeibanfeatureflag.md","localizedDate":"2022年2月1日","excerpt":"<h2>介绍</h2>\\n<p>在我们的应用中，可能有一些配置开关的需求，某些功能是否启用使用一个配置开关，用的时候就打开，不用的时候就关掉，于是基于 .NET Core 的里配置体系写了一个简单的 FeatureFlag，类似于之前的 AppSetting 的扩展 <a href=\\"http://mp.weixin.qq.com/s?__biz=MzAxMjE2NTMxMw==&amp;mid=2456605994&amp;idx=1&amp;sn=5258154acdc235c71b3193aada599fc7&amp;chksm=8c2e7c84bb59f5925ab575ca3c28c4d263c16ada9bc674dd5e7dc968ae1f09d4a4a1d3c579e7&amp;scene=21#wechat_redirect\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">给 IConfiguration 写一个 GetAppSetting 扩展方法</a></p>","autoDesc":true}');export{y as comp,h as data};
