import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,a as n,d as s,e as t,b as e}from"./app-DMmdIwn0.js";const l={},u=e(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>身份验证：用户提供凭据，然后将其和存储在数据库或者其他地方的凭据进行对比。如果凭据匹配，则用户身份验证成功，<strong>是一种识别用户是谁的操作</strong>。 授权：指判断是否允许用户执行操作的过程，是<strong>确定用户是否有权限访问资源的过程</strong>。</p><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证"><span>认证</span></a></h2><p>如果访问要求身份验证的终结点，但是并没有添加身份验证，那么就会提示错误</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>No authenticationScheme <span class="token class-name">was</span> specified<span class="token punctuation">,</span> <span class="token keyword">and</span> there was no DefaultChallengeScheme found<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="匿名用户访问" tabindex="-1"><a class="header-anchor" href="#匿名用户访问"><span>匿名用户访问</span></a></h3><p>当未经身份验证的用户请求要求身份验证的终结点时候，授权就会发起身份验证。会有如下场景</p><ul><li>cookie方案：将用户重定向到登录页面</li><li>JWT 方案：返回具有 www-authenticate: bearer 标头的 401 结果的</li></ul><h3 id="访问无权限访问资源" tabindex="-1"><a class="header-anchor" href="#访问无权限访问资源"><span>访问无权限访问资源</span></a></h3><p>当已经过身份验证的用户尝试访问其无权访问的资源时，授权会调用身份验证方案的禁止操作。</p><ul><li>cookie方案：将用户重定向到标识访问遭到禁止的页面</li><li>jwt方案：返回403结果</li><li>自定义身份验证方案：重定向到用户可请求资源访问权限的页面</li></ul><p>用户通过禁止操作可以得到他们已经通过了身份验证，但是无权访问所请求的资源。</p><h3 id="认证代码" tabindex="-1"><a class="header-anchor" href="#认证代码"><span>认证代码</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//全局禁止匿名访问</span>
services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>Filters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthorizeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加全局的Authorize</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 支持对控制器、方法标注该特性进行授权</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span>

<span class="token comment">// 允许匿名访问，可应用于控制器和方法</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AllowAnonymous</span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="认证接口" tabindex="-1"><a class="header-anchor" href="#认证接口"><span>认证接口</span></a></h3><p>该接口IAuthenticationHandler在命名空间 Microsoft.AspNetCore.Authentication 下，包含3个基本操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAuthenticationHandler</span>
<span class="token punctuation">{</span>
    <span class="token comment">//提供当前请求的上下文信息</span>
    <span class="token return-type class-name">Task</span> <span class="token function">InitializeAsync</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationScheme</span> scheme<span class="token punctuation">,</span> <span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>AuthenticateResult<span class="token punctuation">&gt;</span></span> <span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">Task</span> <span class="token function">ChallengeAsync</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationProperties<span class="token punctuation">?</span></span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token return-type class-name">Task</span> <span class="token function">ForbidAsync</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationProperties<span class="token punctuation">?</span></span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="authenticate-验证" tabindex="-1"><a class="header-anchor" href="#authenticate-验证"><span>Authenticate 验证</span></a></h4><p>验证操作负责基于当前请求的上下文，使用来自请求中的信息，例如请求头、Cookie 等等来构造用户标识。构建的结果是一个 AuthenticateResult 对象，它指示了验证是否成功，如果成功的话，用户标识将可以在验证票据中找到。 常见的验证包括：</p><ul><li>基于 Cookie 的验证，从请求的 Cookie 中验证用户</li><li>基于 JWT Bearer 的验证，从请求头中提取 JWT 令牌进行验证</li></ul><h4 id="challenge-质询" tabindex="-1"><a class="header-anchor" href="#challenge-质询"><span>Challenge 质询</span></a></h4><p>在授权管理阶段，如果用户没有得到验证，但所期望访问的资源要求必须得到验证的时候，授权服务会发出质询。例如，当匿名用户访问受限资源的时候，或者当用户点击登录链接的时候。授权服务会通过质询来相应用户。 例如</p><ul><li>基于 Cookie 的验证会将用户重定向到登录页面</li><li>基于 JWT 的验证会返回一个带有 www-authenticate: bearer 响应头的 401 响应来提醒客户端需要提供访问凭据</li></ul><p>质询操作应该让用户知道应该使用何种验证机制来访问请求的资源。</p><h4 id="forbid-拒绝" tabindex="-1"><a class="header-anchor" href="#forbid-拒绝"><span>Forbid 拒绝</span></a></h4><p>在授权管理阶段，如果用户已经通过了验证，但是对于其访问的资源并没有得到许可，此时会使用拒绝操作。 例如：</p><ul><li>Cookie 验证模式下，已经登录但是没有访问权限的用户，被重定向到一个提示无权访问的页面</li><li>JWT 验证模式下，返回 403</li><li>在自定义验证模式下，将没有权限的用户重定向到申请资源的页面</li></ul><p>拒绝访问处理应该让用户知道：</p><ul><li>它已经通过了验证</li><li>但是没有权限访问请求的资源</li></ul><h2 id="授权" tabindex="-1"><a class="header-anchor" href="#授权"><span>授权</span></a></h2><h3 id="角色授权" tabindex="-1"><a class="header-anchor" href="#角色授权"><span>角色授权</span></a></h3><p>角色授权是指可以对控制器或者控制器内的操作方法应用基于角色的授权检查。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]/[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">// 对一个方法设置指定角色才可以访问</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>授权特定的多个示例 如果遇到多个角色的授权形式，可以用逗号隔开来指定多个角色。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]/[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">&quot;admin,user&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">//或者</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]/[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个角色或运算：多个角色只要有其中一个就可以访问 多个角色且运算：同时得有多个角色才能访问接口 总结：该授权常被称为基于角色的权限访问控制(RBAC)或基于角色的授权。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
	<span class="token comment">//必须角色为admin 和user才可以访问</span>
	options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;adminanduser&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>RequireRole()方法用于管理角色授权的需求</p></blockquote><h3 id="声明授权" tabindex="-1"><a class="header-anchor" href="#声明授权"><span>声明授权</span></a></h3><p>声明(Cliaim)通常基于策略，通过基于声明的授权声明一个策略，然后与Authorize特定中的policy参数结合。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Policy <span class="token operator">=</span><span class="token string">&quot;deleteRole&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>

<span class="token comment">// 设置拥有该策略的用户才可以访问</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Policy <span class="token operator">=</span> <span class="token string">&quot;Over18&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在configureService方法中添加以下配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;deleteRole&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">&quot;deleteRole&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>RequireClaim()方法用于管理声明授权的需求。</p></blockquote><p>在执行过程中，会判断当前用户是否拥有声明deleteRole来确定是否给予授权。</p><blockquote><p>总结：基于声明的授权被称为基于上下文的访问控制协议(CBAC)。</p></blockquote><p>自定义策略：使用func委托方法来创建自定义策略。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
   options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;edit&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span>
    policy<span class="token punctuation">.</span><span class="token function">RequireAssertion</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span> context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">HasClaim</span><span class="token punctuation">(</span>cliaim <span class="token operator">=&gt;</span> cliaim<span class="token punctuation">.</span>Type <span class="token operator">==</span> <span class="token string">&quot;edit role&quot;</span> <span class="token operator">&amp;&amp;</span> cliaim<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    context<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">IsInRole</span><span class="token punctuation">(</span><span class="token string">&quot;super admin&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>RequireAssertion()方法可用于自定义授权的需求。</p></blockquote><p>RequireAssertion()提供了AuthorizationPolicyBuilder实例，可使用RequireAssertion()方法代替RequireClaim()或RequireRole()。RequireAssertion()方法将Func&lt;AuthorizationHandlerContext，bool&gt;作为参数，Fun()方法将AuthorizationHandlerContext作为输入参数，最后返回一个bool值。而通过AuthorizationHandlerContext可以访问用户、角色和声明的方法。<strong>要创建的需求之间具有or关系策略，就要使用RequireAssertion方法。</strong></p><h3 id="角色与策略结合" tabindex="-1"><a class="header-anchor" href="#角色与策略结合"><span>角色与策略结合</span></a></h3><p>创建一个策略，并在该策略中包含一个或者多个角色。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;deleteRole&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span> policy<span class="token punctuation">.</span><span class="token function">RequireClaim</span><span class="token punctuation">(</span><span class="token string">&quot;deleteRole&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;AdminAndUser&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span><span class="token function">RequireRole</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要在策略中包含多个角色，只需要用逗号将其分开。</p><h2 id="如何身份验证" tabindex="-1"><a class="header-anchor" href="#如何身份验证"><span>如何身份验证</span></a></h2><p>通过在ConfigureServices中注册身份验证服务，方式是在调用 <code>services.AddAuthentication</code> 后调用方案特定的扩展方法（例如 <code>AddJwtBearer</code> 或 <code>AddCookie</code>）</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> options <span class="token operator">=&gt;</span> Configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token string">&quot;JwtSettings&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> options <span class="token operator">=&gt;</span> Configuration<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token string">&quot;CookieSettings&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>JwtBearerDefaults.AuthenticationScheme</code> 是方案的名称，未请求特定方案时会默认使用此名称。</p></blockquote><p>如果使用了多个方案，授权策略可指定对用户进行身份验证时候依据一个或者多个身份验证方案。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>AuthenticationSchemes <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MixedController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在configureService中使用具有策略的授权方案</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthorization</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span><span class="token function">AddPolicy</span><span class="token punctuation">(</span><span class="token string">&quot;Over18&quot;</span><span class="token punctuation">,</span> policy <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        policy<span class="token punctuation">.</span>AuthenticationSchemes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>
        policy<span class="token punctuation">.</span><span class="token function">RequireAuthenticatedUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        policy<span class="token punctuation">.</span>Requirements<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MinimumAgeRequirement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62),r={href:"https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/limitingidentitybyscheme?view=aspnetcore-5.0",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>然后在控制器或者方法上标注特性使用角色或者策略</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span><span class="token attribute-arguments"><span class="token punctuation">(</span>Policy <span class="token operator">=</span> <span class="token string">&quot;Over18&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistrationController</span> <span class="token punctuation">:</span> Controller

<span class="token punctuation">[</span><span class="token function">Authorize</span><span class="token punctuation">(</span>Roles <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>切记要在configure中增加</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//认证</span>
app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//授权</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,5),k={href:"https://mp.weixin.qq.com/s/E6M5egwxS6l0MKTsu1gnzQ",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/Rq8cuQoQ6oZF9dxaZ5fKjA",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/xiaoxiaotank/p/16157344.html",target:"_blank",rel:"noopener noreferrer"};function v(g,b){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[s("使用多种身份验证方案请参考："),n("a",r,[s("https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/limitingidentitybyscheme?view=aspnetcore-5.0"),t(a)])])]),d,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/E6M5egwxS6l0MKTsu1gnzQ"),t(a)]),s(" | ASP.NET Core认证原理和实现 基于用户角色的访问权限控制："),n("a",m,[s("https://mp.weixin.qq.com/s/Rq8cuQoQ6oZF9dxaZ5fKjA"),t(a)]),s(" 理解ASP.NET Core - 授权(Authorization)："),n("a",h,[s("https://www.cnblogs.com/xiaoxiaotank/p/16157344.html"),t(a)])])])}const A=p(l,[["render",v],["__file","gaishu.html.vue"]]),y=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/gaishu.html","title":"概述","lang":"zh-CN","frontmatter":{"title":"概述","lang":"zh-CN","date":"2023-02-07T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"gaishu","slug":"yz8e6a","docsId":"30599222","description":"介绍 身份验证：用户提供凭据，然后将其和存储在数据库或者其他地方的凭据进行对比。如果凭据匹配，则用户身份验证成功，是一种识别用户是谁的操作。 授权：指判断是否允许用户执行操作的过程，是确定用户是否有权限访问资源的过程。 认证 如果访问要求身份验证的终结点，但是并没有添加身份验证，那么就会提示错误 匿名用户访问 当未经身份验证的用户请求要求身份验证的终结...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/gaishu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"概述"}],["meta",{"property":"og:description","content":"介绍 身份验证：用户提供凭据，然后将其和存储在数据库或者其他地方的凭据进行对比。如果凭据匹配，则用户身份验证成功，是一种识别用户是谁的操作。 授权：指判断是否允许用户执行操作的过程，是确定用户是否有权限访问资源的过程。 认证 如果访问要求身份验证的终结点，但是并没有添加身份验证，那么就会提示错误 匿名用户访问 当未经身份验证的用户请求要求身份验证的终结..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-02-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"认证","slug":"认证","link":"#认证","children":[{"level":3,"title":"匿名用户访问","slug":"匿名用户访问","link":"#匿名用户访问","children":[]},{"level":3,"title":"访问无权限访问资源","slug":"访问无权限访问资源","link":"#访问无权限访问资源","children":[]},{"level":3,"title":"认证代码","slug":"认证代码","link":"#认证代码","children":[]},{"level":3,"title":"认证接口","slug":"认证接口","link":"#认证接口","children":[{"level":4,"title":"Authenticate 验证","slug":"authenticate-验证","link":"#authenticate-验证","children":[]},{"level":4,"title":"Challenge 质询","slug":"challenge-质询","link":"#challenge-质询","children":[]},{"level":4,"title":"Forbid 拒绝","slug":"forbid-拒绝","link":"#forbid-拒绝","children":[]}]}]},{"level":2,"title":"授权","slug":"授权","link":"#授权","children":[{"level":3,"title":"角色授权","slug":"角色授权","link":"#角色授权","children":[]},{"level":3,"title":"声明授权","slug":"声明授权","link":"#声明授权","children":[]},{"level":3,"title":"角色与策略结合","slug":"角色与策略结合","link":"#角色与策略结合","children":[]}]},{"level":2,"title":"如何身份验证","slug":"如何身份验证","link":"#如何身份验证","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":6.21,"words":1864},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/gaishu.md","localizedDate":"2023年2月7日","excerpt":"<h2>介绍</h2>\\n<p>身份验证：用户提供凭据，然后将其和存储在数据库或者其他地方的凭据进行对比。如果凭据匹配，则用户身份验证成功，<strong>是一种识别用户是谁的操作</strong>。\\n授权：指判断是否允许用户执行操作的过程，是<strong>确定用户是否有权限访问资源的过程</strong>。</p>\\n<h2>认证</h2>\\n<p>如果访问要求身份验证的终结点，但是并没有添加身份验证，那么就会提示错误</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>No authenticationScheme <span class=\\"token class-name\\">was</span> specified<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">and</span> there was no DefaultChallengeScheme found<span class=\\"token punctuation\\">.</span>\\n</code></pre></div>","autoDesc":true}');export{A as comp,y as data};
