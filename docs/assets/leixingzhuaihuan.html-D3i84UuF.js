import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as p}from"./app-Bw62I61B.js";const e={},t=p(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>对象引用可以：</p><ul><li>隐式向上转换为基类的引用</li><li>显式向下转换为子类的引用</li></ul><h3 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换"><span>隐式转换</span></a></h3><p>子类转换为父类，这个时候是隐式转换</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 向上类型转换创建一个基类指向子类的引用</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;二哈&quot;</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> <span class="token string">&quot;公&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Animal</span> animal <span class="token operator">=</span> dog<span class="token punctuation">;</span>
<span class="token comment">// 转换之后，被引用对象本身不会被替换或者改变</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dog<span class="token operator">==</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="显示转换" tabindex="-1"><a class="header-anchor" href="#显示转换"><span>显示转换</span></a></h3><p>从基类引用创建一个子类引用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token comment">// 如果该基类是从dog子类转过来的，那么仍然可以从基类转回去dog类</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> <span class="token string">&quot;公&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Animal</span> animal <span class="token operator">=</span> dog<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog2 <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>animal<span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dog2<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// dog</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dog <span class="token operator">==</span> animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//True</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>dog2 <span class="token operator">==</span> animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//True</span>

<span class="token class-name"><span class="token keyword">var</span></span> animal3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Animal</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> <span class="token string">&quot;公&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span> dog3 <span class="token operator">=</span> <span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>animal3<span class="token punctuation">;</span><span class="token comment">//错误 InvalidCastException</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>向下转换必须是显式转换，因为有可能导致运行时错误。向下转换错误会抛出InvalidCastException错误。 但是如果你还想将父类转为子类可以采用下面的方法（方法不论好坏）</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//直接赋值</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> animal3<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> Sex <span class="token operator">=</span> animal3<span class="token punctuation">.</span>Sex <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//序列化饭序列化</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog2 <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Dog<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>animal3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//反射赋值</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//编译animal的公共属性</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    item<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>dog3<span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>animal3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parse-tryparse-convert" tabindex="-1"><a class="header-anchor" href="#parse-tryparse-convert"><span>Parse/TryParse/Convert</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">double</span></span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token keyword">string</span> s，<span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">double</span></span> result<span class="token punctuation">)</span>
    
<span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> num <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123456  显示转换</span>
<span class="token class-name"><span class="token keyword">int</span></span> num2 <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123456  显示转换</span>
<span class="token class-name"><span class="token keyword">var</span></span> str2 <span class="token operator">=</span> num<span class="token punctuation">;</span><span class="token comment">// 隐式转换  &quot;123456&quot;</span>

<span class="token class-name"><span class="token keyword">string</span></span> str3 <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> issuccess <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>str3<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false  num3=0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者最大的区别是，如果字符串格式不满足转换的要求，Parse方法将会引发一个异常;TryParse方法则不会引发异常，它会返回false，同时将result置为0。</p><h3 id="as" tabindex="-1"><a class="header-anchor" href="#as"><span>AS</span></a></h3><p>as操作符永远不会抛出异常，如果类型不匹配（被转换对象的运行时类型即不是所转换的目标类型，也不是其派生类型），或者类型转换的源对象为null，那么类型转换之后的值也为null。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span> <span class="token punctuation">}</span>


<span class="token class-name"><span class="token keyword">var</span></span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> flag1 <span class="token operator">=</span> animal <span class="token keyword">as</span> <span class="token class-name">Dog</span><span class="token punctuation">;</span><span class="token comment">//null</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> flag2<span class="token operator">=</span>dog <span class="token keyword">as</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span><span class="token comment">//Animal</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不用判断结果是否为null那么推荐使用类型转换，因为如果报错，会抛出更清晰的异常。</p><h3 id="is" tabindex="-1"><a class="header-anchor" href="#is"><span>IS</span></a></h3><p>检查引用的转换是否能够成功，即对象是否从某个特定的类派生(或是实现某个接口)。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Sex <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Animal</span></span>
<span class="token punctuation">{</span> <span class="token punctuation">}</span>


<span class="token class-name"><span class="token keyword">var</span></span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> flag1 <span class="token operator">=</span> animal <span class="token keyword">is</span> <span class="token class-name">Dog</span><span class="token punctuation">;</span><span class="token comment">//false</span>
<span class="token class-name"><span class="token keyword">var</span></span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">&quot;二哈&quot;</span><span class="token punctuation">,</span> Sex <span class="token operator">=</span> <span class="token string">&quot;公&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> flag2 <span class="token operator">=</span> dog <span class="token keyword">is</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token comment">//类型检查并创建实例</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>dog <span class="token keyword">is</span> <span class="token class-name">Animal</span> animal1<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>animal1<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二哈</span>

    <span class="token comment">//属性比较</span>
    <span class="token class-name"><span class="token keyword">var</span></span> flag3 <span class="token operator">=</span> animal1 <span class="token keyword">is</span> <span class="token punctuation">{</span> Sex<span class="token punctuation">:</span> <span class="token string">&quot;公&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//true</span>
    <span class="token class-name"><span class="token keyword">var</span></span> flag <span class="token operator">=</span> animal1 <span class="token keyword">is</span> <span class="token punctuation">{</span> Name<span class="token punctuation">:</span> <span class="token string">&quot;二哈&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">Sex</span><span class="token punctuation">:</span> <span class="token string">&quot;公&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","leixingzhuaihuan.html.vue"]]),d=JSON.parse('{"path":"/dotnet/csharp/leixingzhuaihuan.html","title":"类型转换","lang":"zh-CN","frontmatter":{"title":"类型转换","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"leixingzhuaihuan","slug":"gpwpdc","docsId":"47262157","description":"概述 对象引用可以： 隐式向上转换为基类的引用 显式向下转换为子类的引用 隐式转换 子类转换为父类，这个时候是隐式转换 显示转换 从基类引用创建一个子类引用 向下转换必须是显式转换，因为有可能导致运行时错误。向下转换错误会抛出InvalidCastException错误。 但是如果你还想将父类转为子类可以采用下面的方法（方法不论好坏） Parse/Tr...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/leixingzhuaihuan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"类型转换"}],["meta",{"property":"og:description","content":"概述 对象引用可以： 隐式向上转换为基类的引用 显式向下转换为子类的引用 隐式转换 子类转换为父类，这个时候是隐式转换 显示转换 从基类引用创建一个子类引用 向下转换必须是显式转换，因为有可能导致运行时错误。向下转换错误会抛出InvalidCastException错误。 但是如果你还想将父类转为子类可以采用下面的方法（方法不论好坏） Parse/Tr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类型转换\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":3,"title":"隐式转换","slug":"隐式转换","link":"#隐式转换","children":[]},{"level":3,"title":"显示转换","slug":"显示转换","link":"#显示转换","children":[{"level":4,"title":"Parse/TryParse/Convert","slug":"parse-tryparse-convert","link":"#parse-tryparse-convert","children":[]}]},{"level":3,"title":"AS","slug":"as","link":"#as","children":[]},{"level":3,"title":"IS","slug":"is","link":"#is","children":[]}]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.58,"words":774},"filePathRelative":"dotnet/csharp/leixingzhuaihuan.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>对象引用可以：</p>\\n<ul>\\n<li>隐式向上转换为基类的引用</li>\\n<li>显式向下转换为子类的引用</li>\\n</ul>\\n<h3>隐式转换</h3>\\n<p>子类转换为父类，这个时候是隐式转换</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Animal</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Name <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Sex <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Dog</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">Animal</span></span>\\n<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 向上类型转换创建一个基类指向子类的引用</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> dog <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">Dog</span> <span class=\\"token punctuation\\">{</span> Name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"二哈\\"</span><span class=\\"token punctuation\\">,</span> Sex <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"公\\"</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Animal</span> animal <span class=\\"token operator\\">=</span> dog<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 转换之后，被引用对象本身不会被替换或者改变</span>\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span>dog<span class=\\"token operator\\">==</span>animal<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// True</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,d as data};
