import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as n,e as s,f as c,d as l}from"./app-D8HBJYTp.js";const i={},u=l(`<h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>实现字典值变更时候做一些其他操作</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>关键字：变更 通知 字典</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Text</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">DAL</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueChangedEventArgs<span class="token punctuation">&lt;</span>TK<span class="token punctuation">&gt;</span></span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventArgs</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">TK</span> Key <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token function">ValueChangedEventArgs</span><span class="token punctuation">(</span><span class="token class-name">TK</span> key<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DictionaryWapper<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">object</span></span>  objLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">object</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
        <span class="token keyword">private</span> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">&gt;</span></span> _dict<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler<span class="token punctuation">&lt;</span>ValueChangedEventArgs<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> OnValueChanged<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">DictionaryWapper</span><span class="token punctuation">(</span><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">,</span> TValue<span class="token punctuation">&gt;</span></span> dict<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _dict <span class="token operator">=</span> dict<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">TValue</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token class-name">TKey</span> Key<span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> _dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
            <span class="token keyword">set</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">lock</span><span class="token punctuation">(</span>objLock<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">try</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>_dict<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>_dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">{</span>
                            <span class="token function">OnValueChanged</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValueChangedEventArgs<span class="token punctuation">&lt;</span>TKey<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;检测值变更或者触发值变更事件，发生未知异常</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">finally</span>
                    <span class="token punctuation">{</span>
                        _dict<span class="token punctuation">[</span>Key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>旁白： 1.定义值变更事件OnValueChanged 和变更时传递的事件参数<code>ValueChangedEventArgs&lt;TKey&gt;</code> 2.如何定义值变更，也就是如何判定值类型、引用类型的相等性<br> #equal、hashcode# 3.DictionaryWapper的表征实现也得益于C#索引器特性 订阅值变更事件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> _dictionaryWapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DictionaryWapper<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
_dictionaryWapper<span class="token punctuation">.</span>OnValueChanged <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EventHandler<span class="token punctuation">&lt;</span>ValueChangedEventArgs<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>OnConfigUsedChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//----</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfigUsedChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">ValueChangedEventArgs<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;字典KEY：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>Key</span><span class="token punctuation">}</span></span><span class="token string">的值发生了变更，请注意...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后像正常Dictionary一样为DictionaryWapper添加键值对:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> _dictionaryWapper<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dbConfig</span><span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">connectionConfig<span class="token punctuation">.</span>Provider</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">.</span>ConnectionString<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过本文，重温了C## event 、索引器的用法，基础不牢，地动山摇。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,12),k={href:"https://mp.weixin.qq.com/s/0m1FA4USkncFCFT6viVwJg",target:"_blank",rel:"noopener noreferrer"};function r(d,y){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/0m1FA4USkncFCFT6viVwJg"),c(a)]),s(" | 面试官：C#如何实现带值变更通知能力的Dictionary？")])])}const g=t(i,[["render",r],["__file","zhibiangengtongzhidictionary.html.vue"]]),h=JSON.parse('{"path":"/dotnet/csharp/jigecaozuo/kuozhan/zhibiangengtongzhidictionary.html","title":"值变更通知Dictionary","lang":"zh-CN","frontmatter":{"title":"值变更通知Dictionary","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"zhibiangengtongzhidictionary","slug":"pvchlf","docsId":"65993906","description":"需求 实现字典值变更时候做一些其他操作 操作 关键字：变更 通知 字典 旁白： 1.定义值变更事件OnValueChanged 和变更时传递的事件参数ValueChangedEventArgs<TKey> 2.如何定义值变更，也就是如何判定值类型、引用类型的相等性 #equal、hashcode# 3.DictionaryWapper的表征实现也得益于...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/jigecaozuo/kuozhan/zhibiangengtongzhidictionary.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"值变更通知Dictionary"}],["meta",{"property":"og:description","content":"需求 实现字典值变更时候做一些其他操作 操作 关键字：变更 通知 字典 旁白： 1.定义值变更事件OnValueChanged 和变更时传递的事件参数ValueChangedEventArgs<TKey> 2.如何定义值变更，也就是如何判定值类型、引用类型的相等性 #equal、hashcode# 3.DictionaryWapper的表征实现也得益于..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T15:44:14.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T15:44:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"值变更通知Dictionary\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T15:44:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700235854000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.19,"words":358},"filePathRelative":"dotnet/csharp/jigecaozuo/kuozhan/zhibiangengtongzhidictionary.md","localizedDate":"2023年10月22日","excerpt":"<h2>需求</h2>\\n<p>实现字典值变更时候做一些其他操作</p>\\n<h2>操作</h2>\\n<p>关键字：变更 通知 字典</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Collections<span class=\\"token punctuation\\">.</span>Generic</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">using</span> <span class=\\"token namespace\\">System<span class=\\"token punctuation\\">.</span>Text</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">namespace</span> <span class=\\"token namespace\\">DAL</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ValueChangedEventArgs<span class=\\"token punctuation\\">&lt;</span>TK<span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">EventArgs</span></span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">TK</span> Key <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">ValueChangedEventArgs</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">TK</span> key<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            Key <span class=\\"token operator\\">=</span> key<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DictionaryWapper<span class=\\"token punctuation\\">&lt;</span>TKey<span class=\\"token punctuation\\">,</span> TValue<span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">object</span></span>  objLock <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">object</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n       \\n        <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span>TKey<span class=\\"token punctuation\\">,</span> TValue<span class=\\"token punctuation\\">&gt;</span></span> _dict<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">event</span> <span class=\\"token class-name\\">EventHandler<span class=\\"token punctuation\\">&lt;</span>ValueChangedEventArgs<span class=\\"token punctuation\\">&lt;</span>TKey<span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> OnValueChanged<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">DictionaryWapper</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Dictionary<span class=\\"token punctuation\\">&lt;</span>TKey<span class=\\"token punctuation\\">,</span> TValue<span class=\\"token punctuation\\">&gt;</span></span> dict<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            _dict <span class=\\"token operator\\">=</span> dict<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">TValue</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">[</span><span class=\\"token class-name\\">TKey</span> Key<span class=\\"token punctuation\\">]</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">get</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">return</span> _dict<span class=\\"token punctuation\\">[</span>Key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">set</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">lock</span><span class=\\"token punctuation\\">(</span>objLock<span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token keyword\\">try</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>_dict<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ContainsKey</span><span class=\\"token punctuation\\">(</span>Key<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> _dict<span class=\\"token punctuation\\">[</span>Key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>_dict<span class=\\"token punctuation\\">[</span>Key<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">value</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                        <span class=\\"token punctuation\\">{</span>\\n                            <span class=\\"token function\\">OnValueChanged</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">ValueChangedEventArgs<span class=\\"token punctuation\\">&lt;</span>TKey<span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span>Key<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                        <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> ex<span class=\\"token punctuation\\">)</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        Console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token interpolation-string\\"><span class=\\"token string\\">$\\"检测值变更或者触发值变更事件，发生未知异常</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span><span class=\\"token expression language-csharp\\">ex</span><span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token keyword\\">finally</span>\\n                    <span class=\\"token punctuation\\">{</span>\\n                        _dict<span class=\\"token punctuation\\">[</span>Key<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">value</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,h as data};
