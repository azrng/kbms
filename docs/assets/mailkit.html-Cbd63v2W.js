import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as i,a as n,d as s,e as t,b as e}from"./app-DMmdIwn0.js";const l={},u=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),r={href:"http://www.mimekit.net/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/jstedfast/MimeKit",target:"_blank",rel:"noopener noreferrer"},k=e(`<table><thead><tr><th>Protocol(协议)</th><th>Standard Port（标准端口）</th><th>SSL Port（ssl端口）</th></tr></thead><tbody><tr><td>SMTP</td><td>25 or 587</td><td>465</td></tr><tr><td>POP3</td><td>110</td><td>995</td></tr><tr><td>IMAP</td><td>143</td><td>993</td></tr></tbody></table><p>通过 MailKit 使用 SMTP 协议连接到邮件服务器是用于发送电子邮件的，并不直接支持获取收件箱。 如果您需要访问和操作收件箱中的邮件，您应该使用 IMAP 协议或 POP3 协议。MailKit 提供了 ImapClient 和 Pop3Client 类来支持这两种协议。</p><h3 id="mimekit和mailkit" tabindex="-1"><a class="header-anchor" href="#mimekit和mailkit"><span>MimeKit和MailKit</span></a></h3><p>MimeKit和MailKit都是C#语言编写的开源邮件库，但它们的功能和用途略有不同。 MimeKit是一个专门用于处理电子邮件消息的库，它提供了创建、解析和操作电子邮件消息的API。MimeKit支持各种邮件格式，包括MIME、S/MIME、PGP和TNEF等。MimeKit还提供了对电子邮件消息的验证和签名功能。</p><p>MailKit则是一个用于发送和接收电子邮件的库，它基于MimeKit构建。MailKit支持各种邮件协议，包括SMTP、POP3、IMAP和Exchange Web Services等。MailKit提供了发送和接收电子邮件的API，以及对邮件服务器的连接和身份验证的支持。</p><p>因此，MimeKit和MailKit可以说是相互依存的关系，MimeKit提供了电子邮件消息的处理功能，而MailKit则基于MimeKit提供了邮件发送和接收的功能。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>引用nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;MailKit&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;2.7.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="发送邮件" tabindex="-1"><a class="header-anchor" href="#发送邮件"><span>发送邮件</span></a></h3><p>通过smtp协议进行发送邮件。</p><p>示例：通过网易邮箱用户名和授权码给第三方邮箱发送文本消息邮件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendEmail</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//发送人</span>
    message<span class="token punctuation">.</span>From<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MailboxAddress</span><span class="token punctuation">(</span><span class="token string">&quot;老张&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    message<span class="token punctuation">.</span>To<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MailboxAddress</span><span class="token punctuation">(</span><span class="token string">&quot;老王&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;itzhangyunpeng@outlook.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    message<span class="token punctuation">.</span>Subject <span class="token operator">=</span> <span class="token string">&quot;Test Email&quot;</span><span class="token punctuation">;</span>

    message<span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextPart</span><span class="token punctuation">(</span><span class="token string">&quot;plain&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Text <span class="token operator">=</span> <span class="token string">&quot;这是一个测试邮件.&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SmtpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">&quot;smtp.163.com&quot;</span><span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">,</span> SecureSocketOptions<span class="token punctuation">.</span>SslOnConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">Authenticate</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

    client<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),m={href:"http://www.mimekit.net/docs/html/Creating-Messages.htm",target:"_blank",rel:"noopener noreferrer"},v=e(`<h3 id="获取收件箱" tabindex="-1"><a class="header-anchor" href="#获取收件箱"><span>获取收件箱</span></a></h3><p>通过imap协议进行获取收件箱内容</p><p>示例：获取网易邮箱的收件箱列表内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetEmailList</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> username<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> password<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> server <span class="token operator">=</span> <span class="token string">&quot;imap.163.com&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> port <span class="token operator">=</span> <span class="token number">993</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建IMAP客户端</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ImapClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 连接到服务器</span>
    client<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 登录邮箱</span>
    client<span class="token punctuation">.</span><span class="token function">Authenticate</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加邮箱客户端识别</span>
    <span class="token class-name"><span class="token keyword">var</span></span> clientImplementation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ImapImplementation</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;netcore demo&quot;</span><span class="token punctuation">,</span>
        Version <span class="token operator">=</span> <span class="token string">&quot;1.0.1&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> serverImplementation <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Identify</span><span class="token punctuation">(</span>clientImplementation<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 打开收件箱</span>
    <span class="token class-name"><span class="token keyword">var</span></span> inbox <span class="token operator">=</span> client<span class="token punctuation">.</span>Inbox<span class="token punctuation">;</span>
    <span class="token comment">//打开文件夹并设置为读的方式</span>
    inbox<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>FolderAccess<span class="token punctuation">.</span>ReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构建搜索条件</span>

    <span class="token comment">// 查询未读邮件</span>
    <span class="token comment">//var uids = inbox.Search(SearchQuery.NotSeen);</span>

    <span class="token doc-comment comment">//// 搜索收件箱中的邮件</span>
    <span class="token comment">//var uids = inbox.Search(SearchQuery.All);</span>

    <span class="token comment">// 查询发件时间在6月13号之后的邮件</span>
    <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> SearchQuery<span class="token punctuation">.</span><span class="token function">DeliveredAfter</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;2023-06-13&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> uids <span class="token operator">=</span> inbox<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span>

    <span class="token comment">// 遍历搜索结果</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> uid <span class="token keyword">in</span> uids<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 获取邮件消息</span>
        <span class="token class-name"><span class="token keyword">var</span></span> message <span class="token operator">=</span> inbox<span class="token punctuation">.</span><span class="token function">GetMessage</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 打印邮件主题和发件人</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Subject: {0}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>Subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;   From: {0}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>From<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;   Date: {0}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>Date<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 读取邮件正文</span>
        <span class="token comment">//if (message.Body is TextPart text)</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    Console.WriteLine(&quot;   Body: {0}&quot;, text);</span>
        <span class="token comment">//}</span>
        <span class="token comment">//else if (message.Body is MultipartAlternative multi)</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    Console.WriteLine(&quot;   Body: {0}&quot;, multi.TextBody);</span>
        <span class="token comment">//}</span>

        <span class="token comment">// 打印邮件附件</span>
        <span class="token comment">//foreach (var attachment in message.Attachments)</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    Console.WriteLine(&quot;Attachment: {0},&quot; ,attachment.FileName);</span>
        <span class="token comment">//}</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;--------------------------------------------------------------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 关闭收件箱和IMAP客户端</span>
    inbox<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="收件箱筛选参数" tabindex="-1"><a class="header-anchor" href="#收件箱筛选参数"><span>收件箱筛选参数</span></a></h4>`,5),b={href:"http://www.mimekit.net/docs/html/T_MailKit_Search_SearchQuery.htm",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> inbox <span class="token operator">=</span> client<span class="token punctuation">.</span>Inbox<span class="token punctuation">;</span>
inbox<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>FolderAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> uids <span class="token operator">=</span> inbox<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span>SearchQuery<span class="token punctuation">.</span>NotSeen<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 修改状态为已读</span>
inbox<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> MessageFlags<span class="token punctuation">.</span>Seen<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据时间筛选</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 查询发件时间在6月13号之后的邮件</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> SearchQuery<span class="token punctuation">.</span><span class="token function">DeliveredAfter</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;2023-06-13&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 指定日期DeliveredOn</span>

<span class="token comment">// 在xxx之前的日期DeliveredBefore</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据内容筛选</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 由于服务器里面的邮件都是加密过的，所以searchquery中的大部分查询条件都是没法用的，比如subjectContains，fromContains等等</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> SearchQuery<span class="token punctuation">.</span><span class="token function">SubjectContains</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 MailKit 的 Fetch 方法中使用 SearchQuery 进行筛选条件时，如果你发现 SearchQuery.SubjectContains(&quot;11&quot;) 不生效，可能有以下几个原因：</p><ol><li>邮件服务器不支持搜索功能：并非所有的邮件服务器都支持在 IMAP 协议中进行搜索操作。请确保你连接的邮件服务器支持 IMAP 搜索功能。你可以尝试连接其他支持搜索功能的邮件服务器进行测试。</li><li>邮件的主题字段不包含指定的内容：搜索操作是基于邮件中的字段进行匹配的。如果指定的邮件主题字段中没有包含 &quot;11&quot; 字符串，那么搜索就不会返回结果。可以检查邮件的实际主题内容，或者尝试使用其他字段进行筛选。</li><li>邮件服务器的搜索行为不符合预期：不同的邮件服务器实现搜索功能时可能会有一些差异，有些服务器可能对搜索操作的行为有自己的规则和限制。你可以查阅你所使用的邮件服务器的文档或者联系该邮件服务器的技术支持以了解更多关于搜索操作的信息。</li></ol><p>Fetch</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> uids <span class="token operator">=</span> inbox<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取指定消息uid的消息摘要。</span>
<span class="token class-name"><span class="token keyword">var</span></span> emSummarys <span class="token operator">=</span> inbox<span class="token punctuation">.</span><span class="token function">Fetch</span><span class="token punctuation">(</span>uids<span class="token punctuation">,</span> MessageSummaryItems<span class="token punctuation">.</span>UniqueId
    <span class="token operator">|</span> MessageSummaryItems<span class="token punctuation">.</span>Full <span class="token operator">|</span> MessageSummaryItems<span class="token punctuation">.</span>BodyStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> emSummarys<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取发件箱" tabindex="-1"><a class="header-anchor" href="#获取发件箱"><span>获取发件箱</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> server <span class="token operator">=</span> <span class="token string">&quot;imap.163.com&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> port <span class="token operator">=</span> <span class="token number">993</span><span class="token punctuation">;</span>
<span class="token comment">// 创建IMAP客户端</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ImapClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 连接到服务器</span>
client<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 登录邮箱</span>
client<span class="token punctuation">.</span><span class="token function">Authenticate</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加邮箱客户端识别</span>
<span class="token class-name"><span class="token keyword">var</span></span> clientImplementation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ImapImplementation</span>
<span class="token punctuation">{</span>
    Name <span class="token operator">=</span> <span class="token string">&quot;netcore demo&quot;</span><span class="token punctuation">,</span>
    Version <span class="token operator">=</span> <span class="token string">&quot;1.0.1&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> serverImplementation <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Identify</span><span class="token punctuation">(</span>clientImplementation<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取已发送文件夹</span>
<span class="token class-name"><span class="token keyword">var</span></span> sentFolder <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">GetFolder</span><span class="token punctuation">(</span>SpecialFolder<span class="token punctuation">.</span>Sent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//打开文件夹并设置为读的方式</span>
sentFolder<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>FolderAccess<span class="token punctuation">.</span>ReadWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查询发件时间在6月13号之后的邮件</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> SearchQuery<span class="token punctuation">.</span><span class="token function">DeliveredAfter</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;2023-06-23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> uids <span class="token operator">=</span> sentFolder<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 下面取邮件内容和获取收件箱类似</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="下载邮件附件" tabindex="-1"><a class="header-anchor" href="#下载邮件附件"><span>下载邮件附件</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> attachments <span class="token operator">=</span> message<span class="token punctuation">.</span>Attachments<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>attachments<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> attachment <span class="token keyword">in</span> attachments<span class="token punctuation">)</span>
        <span class="token function">DownloadAttachment</span><span class="token punctuation">(</span>attachment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DownloadAttachment</span><span class="token punctuation">(</span><span class="token class-name">MimeEntity</span> attachment<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attachment <span class="token keyword">is</span> <span class="token class-name">MessagePart</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> attachment<span class="token punctuation">.</span>ContentDisposition<span class="token punctuation">?.</span>FileName<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> rfc822 <span class="token operator">=</span> <span class="token punctuation">(</span>MessagePart<span class="token punctuation">)</span>attachment<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>
            fileName <span class="token operator">=</span> <span class="token string">&quot;attached-message.eml&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>DIRECTORY<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            rfc822<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> part <span class="token operator">=</span> <span class="token punctuation">(</span>MimePart<span class="token punctuation">)</span>attachment<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> fileName <span class="token operator">=</span> part<span class="token punctuation">.</span>FileName<span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>DIRECTORY<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
            part<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">DecodeTo</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移动邮件" tabindex="-1"><a class="header-anchor" href="#移动邮件"><span>移动邮件</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 移动到删除文件夹</span>
client<span class="token punctuation">.</span>Inbox<span class="token punctuation">.</span><span class="token function">MoveTo</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">GetFolder</span><span class="token punctuation">(</span>SpecialFolder<span class="token punctuation">.</span>Trash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除邮件" tabindex="-1"><a class="header-anchor" href="#删除邮件"><span>删除邮件</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 将邮件标记为删除然后删除</span>
client<span class="token punctuation">.</span>Inbox<span class="token punctuation">.</span><span class="token function">AddFlags</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> MessageFlags<span class="token punctuation">.</span>Deleted<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
client<span class="token punctuation">.</span>Inbox<span class="token punctuation">.</span><span class="token function">Expunge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="乱码处理" tabindex="-1"><a class="header-anchor" href="#乱码处理"><span>乱码处理</span></a></h3><p>如果你在使用过程中发现了乱码问题，那是因为缺少中文字符集，这个时候就需要安装nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet <span class="token keyword">add</span> package System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>CodePages
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并且注册字符集</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//注册字符集，缺失字符集，一些中文编码数据为乱码</span>
Encoding<span class="token punctuation">.</span><span class="token function">RegisterProvider</span><span class="token punctuation">(</span>CodePagesEncodingProvider<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function g(y,w){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("使用 MimeKit 强大的 MIME 解析器解析任何消息。正确处理任何字符编码。 官网地址："),n("a",r,[s("http://www.mimekit.net/"),t(a)]),s(" 仓库地址："),n("a",d,[s("https://github.com/jstedfast/MimeKit"),t(a)])]),k,n("p",null,[s("资料： 创建消息："),n("a",m,[s("http://www.mimekit.net/docs/html/Creating-Messages.htm"),t(a)])]),v,n("p",null,[s("筛选条件参数："),n("a",b,[s("http://www.mimekit.net/docs/html/T_MailKit_Search_SearchQuery.htm"),t(a)]),s(" 获取未读邮件")]),h])}const q=p(l,[["render",g],["__file","mailkit.html.vue"]]),x=JSON.parse('{"path":"/middleware/office/youjian/mailkit.html","title":"MailKit","lang":"zh-CN","frontmatter":{"title":"MailKit","lang":"zh-CN","date":"2023-06-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"mailkit","slug":"noghmb","docsId":"74881263","description":"介绍 使用 MimeKit 强大的 MIME 解析器解析任何消息。正确处理任何字符编码。 官网地址：http://www.mimekit.net/ 仓库地址：https://github.com/jstedfast/MimeKit 通过 MailKit 使用 SMTP 协议连接到邮件服务器是用于发送电子邮件的，并不直接支持获取收件箱。 如果您需要访问和...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/office/youjian/mailkit.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"MailKit"}],["meta",{"property":"og:description","content":"介绍 使用 MimeKit 强大的 MIME 解析器解析任何消息。正确处理任何字符编码。 官网地址：http://www.mimekit.net/ 仓库地址：https://github.com/jstedfast/MimeKit 通过 MailKit 使用 SMTP 协议连接到邮件服务器是用于发送电子邮件的，并不直接支持获取收件箱。 如果您需要访问和..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MailKit\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[{"level":3,"title":"MimeKit和MailKit","slug":"mimekit和mailkit","link":"#mimekit和mailkit","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"发送邮件","slug":"发送邮件","link":"#发送邮件","children":[]},{"level":3,"title":"获取收件箱","slug":"获取收件箱","link":"#获取收件箱","children":[{"level":4,"title":"收件箱筛选参数","slug":"收件箱筛选参数","link":"#收件箱筛选参数","children":[]}]},{"level":3,"title":"获取发件箱","slug":"获取发件箱","link":"#获取发件箱","children":[]},{"level":3,"title":"下载邮件附件","slug":"下载邮件附件","link":"#下载邮件附件","children":[]},{"level":3,"title":"移动邮件","slug":"移动邮件","link":"#移动邮件","children":[]},{"level":3,"title":"删除邮件","slug":"删除邮件","link":"#删除邮件","children":[]},{"level":3,"title":"乱码处理","slug":"乱码处理","link":"#乱码处理","children":[]}]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.56,"words":1668},"filePathRelative":"middleware/office/youjian/mailkit.md","localizedDate":"2023年6月24日","excerpt":"<h2>介绍</h2>\\n<p>使用 MimeKit 强大的 MIME 解析器解析任何消息。正确处理任何字符编码。\\n官网地址：<a href=\\"http://www.mimekit.net/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://www.mimekit.net/</a>\\n仓库地址：<a href=\\"https://github.com/jstedfast/MimeKit\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/jstedfast/MimeKit</a></p>","autoDesc":true}');export{q as comp,x as data};
