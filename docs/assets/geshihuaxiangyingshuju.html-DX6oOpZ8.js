import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as s,d as n,e as t,b as l}from"./app-qB9_Bjjp.js";const i={},u=l(`<blockquote><p>本文示例环境：vs2022、.net5</p></blockquote><h2 id="返回内容协商" tabindex="-1"><a class="header-anchor" href="#返回内容协商"><span>返回内容协商</span></a></h2><p>WebApi提供了多种内容格式，那么可以通过accept header来选择最好的内容返回格式，比如application/json, application/xml等等，如果没有专门设置，那么webapi就会使用默认的格式。默认是json格式，也可以配置xml等格式。</p><h2 id="配置格式化程序" tabindex="-1"><a class="header-anchor" href="#配置格式化程序"><span>配置格式化程序</span></a></h2><p>要想支持额外的格式可以添加相应的nuget包并配置来支持。输入和输出的格式化程序不同。 模型绑定使用输入格式化程序。 格式响应使用输出格式化程序。</p><h3 id="添加xml格式支持" tabindex="-1"><a class="header-anchor" href="#添加xml格式支持"><span>添加XML格式支持</span></a></h3><p>若要配置使用 XmlSerializer 实现的 XML 格式化程序，请调用 AddXmlSerializerFormatters：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddXmlSerializerFormatters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再请求接口的时候，当你不传Accept的时候返回json格式，当你传递的值为application/xml，那么该接口就会返回xml格式</p><p>或者也可以直接清除其他输出类型，只保留xml格式输出</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 如果没有选择格式化程序会返回406</span>
    options<span class="token punctuation">.</span>ReturnHttpNotAcceptable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// 清除其他输出类型</span>
    options<span class="token punctuation">.</span>OutputFormatters<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 修改输出类型为xml</span>
    options<span class="token punctuation">.</span>OutputFormatters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDataContractSerializerOutputFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddXmlSerializerFormatters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置基于system-text-json的格式化程序" tabindex="-1"><a class="header-anchor" href="#配置基于system-text-json的格式化程序"><span>配置基于System.Text.Json的格式化程序</span></a></h3><p>默认配置下</p><ul><li>接口地址是原样输出，WeatherForecastController输出为WeatherForecast</li><li>路由地址是原样输出，GetUserName接口输出为GetUserName</li><li>属性名称是小驼峰输出，属性UsetName输出为usetName</li></ul><p>以下突出显示的代码配置 PascalCase 格式，而不是默认的 camelCase 格式：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddJsonOptions</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>JsonSerializerOptions<span class="token punctuation">.</span>PropertyNamingPolicy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="属性驼峰设置" tabindex="-1"><a class="header-anchor" href="#属性驼峰设置"><span>属性驼峰设置</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddJsonOptions</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//options.JsonSerializerOptions.PropertyNamingPolicy = null;//大驼峰:UserName</span>
        options<span class="token punctuation">.</span>JsonSerializerOptions<span class="token punctuation">.</span>PropertyNamingPolicy <span class="token operator">=</span> JsonNamingPolicy<span class="token punctuation">.</span>CamelCase<span class="token punctuation">;</span><span class="token comment">//小驼峰:userName</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解决中文编码" tabindex="-1"><a class="header-anchor" href="#解决中文编码"><span>解决中文编码</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddJsonOptions</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                options<span class="token punctuation">.</span>JsonSerializerOptions<span class="token punctuation">.</span>Encoder <span class="token operator">=</span> JavaScriptEncoder<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>UnicodeRanges<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解决后端返回数据中文被编码</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改返回类成员名称" tabindex="-1"><a class="header-anchor" href="#修改返回类成员名称"><span>修改返回类成员名称</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> aaaa <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonPropertyName</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> bbbb <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonIgnore</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ddd <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1111&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;222&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置基于newtonsoft-json-的-json-格式支持" tabindex="-1"><a class="header-anchor" href="#配置基于newtonsoft-json-的-json-格式支持"><span>配置基于Newtonsoft.Json 的 JSON 格式支持</span></a></h3><p>默认的 JSON 格式化程序使用 System.Text.Json。 若要使用基于 Newtonsoft.Json 的格式化程序，请安装 Microsoft.AspNetCore.Mvc.NewtonsoftJson NuGet 包并在 Program.cs 中进行配置：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据首字母大写-原样输出" tabindex="-1"><a class="header-anchor" href="#数据首字母大写-原样输出"><span>数据首字母大写，原样输出</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//json字符串大小写原样输出  默认是小驼峰</span>
    options<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>ContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DefaultContractResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); //序列化时key为驼峰样式</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//比如说Name字段，默认输出是name，加上就原样输出了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置字段的数据格式" tabindex="-1"><a class="header-anchor" href="#设置字段的数据格式"><span>设置字段的数据格式</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置返回的DataTime时间格式</span>
    options<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>DateFormatString <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="忽略返回值为null的字段" tabindex="-1"><a class="header-anchor" href="#忽略返回值为null的字段"><span>忽略返回值为null的字段</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//忽略空值 序列化和反序列化时候需要忽略值为null的属性</span>
    <span class="token comment">//options.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;</span>
    <span class="token comment">//序列化和反序列化需要忽略默认值属性  </span>
    options<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>DefaultValueHandling <span class="token operator">=</span> DefaultValueHandling<span class="token punctuation">.</span>Ignore<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对象某一个字段值为null，那么就直接忽略该字段。</p><h4 id="忽略循环引用" tabindex="-1"><a class="header-anchor" href="#忽略循环引用"><span>忽略循环引用</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//忽略循环引用</span>
    options<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>ReferenceLoopHandling <span class="token operator">=</span> ReferenceLoopHandling<span class="token punctuation">.</span>Ignore<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="首字母小写" tabindex="-1"><a class="header-anchor" href="#首字母小写"><span>首字母小写</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>services.AddControllers<span class="token punctuation">(</span><span class="token punctuation">)</span>
    .AddNewtonsoftJson<span class="token punctuation">(</span>options <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        //修改属性名称的序列化方式，首字母小写
        options.SerializerSettings.ContractResolver <span class="token operator">=</span> new DefaultContractResolver <span class="token punctuation">{</span>
            NamingStrategy <span class="token operator">=</span> new CamelCaseNamingStrategy <span class="token punctuation">{</span>
                OverrideSpecifiedNames <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改返回类成员名称-1" tabindex="-1"><a class="header-anchor" href="#修改返回类成员名称-1"><span>修改返回类成员名称</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> aaaa <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonProperty</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> 
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> bbbb <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">JsonIgnore</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ddd <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1111&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;bbbb&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;222&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;ddd&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;333&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因是因为在3.0以后Newtonsoft.Json不再是默认的Json解析器，而是使用System.Text.Json，如果我们还想使用Newtonsoft.Json作为默认的json解析器，那么就需要修改</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改后重新运行</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1111&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;222&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指定格式" tabindex="-1"><a class="header-anchor" href="#指定格式"><span>指定格式</span></a></h2><p>通过使用Produces筛选器，可以在Action、控制器上或者全局范围设置相应格式，比如在控制器上指定</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Produces</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TodoItemsController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通过url指定相应格式" tabindex="-1"><a class="header-anchor" href="#通过url指定相应格式"><span>通过Url指定相应格式</span></a></h3><p>可以在url中请求特定的格式，使用固定的文件扩展名来返回指定的格式，如果想返回xml格式需要添加该序列化程序</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddXmlSerializerFormatters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后操作如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FormatFilter</span></span><span class="token punctuation">]</span> <span class="token comment">// 配置过滤器</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherForecastController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> Summaries <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;Freezing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Bracing&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Chilly&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cool&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mild&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Warm&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Balmy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hot&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sweltering&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Scorching&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>WeatherForecastController<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">WeatherForecastController</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>WeatherForecastController<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;content/{format?}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 配置路由</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>WeatherForecast<span class="token punctuation">&gt;</span></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>index <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WeatherForecast</span>
        <span class="token punctuation">{</span>
            Date <span class="token operator">=</span> DateOnly<span class="token punctuation">.</span><span class="token function">FromDateTime</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">AddDays</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            TemperatureC <span class="token operator">=</span> Random<span class="token punctuation">.</span>Shared<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Summary <span class="token operator">=</span> Summaries<span class="token punctuation">[</span>Random<span class="token punctuation">.</span>Shared<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>Summaries<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义返回格式" tabindex="-1"><a class="header-anchor" href="#自定义返回格式"><span>自定义返回格式</span></a></h3><p>比如一个系统中返回类的格式大多数都是小驼峰，但是我们其中一些接口想给第三方暴露，并且对方要求大驼峰等，我们就可以使用下面的方法实现自定义返回类型。</p><h4 id="动态操作返回格式-方案一" tabindex="-1"><a class="header-anchor" href="#动态操作返回格式-方案一"><span>动态操作返回格式(方案一)</span></a></h4><p>通过动态去操作返回的SystemTextJsonOutputFormatter格式来实现，添加默认的自定义数据格式</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义返回类格式</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomJsonOutputFormatter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SystemTextJsonOutputFormatter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SystemTextJsonOutputFormatter</span> _pascalCaseFormatter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomJsonOutputFormatter</span><span class="token punctuation">(</span><span class="token class-name">JsonSerializerOptions</span> jsonSerializerOptions<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>jsonSerializerOptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span><span class="token punctuation">(</span>jsonSerializerOptions<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//设置格式 大驼峰风格</span>
            PropertyNamingPolicy <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        _pascalCaseFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SystemTextJsonOutputFormatter</span><span class="token punctuation">(</span>newOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token class-name">OutputFormatterWriteContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetFormat</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;json2&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> _pascalCaseFormatter<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFormat</span><span class="token punctuation">(</span><span class="token class-name">OutputFormatterWriteContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>RouteValues<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token string">&quot;format&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> routeValue <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> CultureInfo<span class="token punctuation">.</span>InvariantCulture<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>routeValue<span class="token punctuation">)</span> <span class="token punctuation">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> routeValue<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Query<span class="token punctuation">[</span><span class="token string">&quot;format&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> query<span class="token punctuation">.</span>Count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">?</span> query<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在startup中进行配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>FormatterMappings<span class="token punctuation">.</span>SetMediaTypeMappingForFormat
        <span class="token punctuation">(</span><span class="token string">&quot;json2&quot;</span><span class="token punctuation">,</span> MediaTypeHeaderValue<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> options<span class="token punctuation">.</span>OutputFormatters<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>OutputFormatters<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token class-name">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>Formatters<span class="token punctuation">.</span>SystemTextJsonOutputFormatter</span> jsonOutputFormatter<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            options<span class="token punctuation">.</span>OutputFormatters<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomJsonOutputFormatter</span><span class="token punctuation">(</span>jsonOutputFormatter<span class="token punctuation">.</span>SerializerOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就可以实现如果请求的参数中包含format并且值是json2，那么就使用大驼峰，否则使用小驼峰，示例请求</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>Home<span class="token operator">/</span>Get<span class="token punctuation">?</span>format<span class="token operator">=</span>json2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的这种方法是通过url中传递参数的，我更喜欢过请求头中设置参数，下面我们将其修改</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义返回类格式</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomJsonOutputFormatter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">SystemTextJsonOutputFormatter</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">SystemTextJsonOutputFormatter</span> _pascalCaseFormatter<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">CustomJsonOutputFormatter</span><span class="token punctuation">(</span><span class="token class-name">JsonSerializerOptions</span> jsonSerializerOptions<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>jsonSerializerOptions<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonSerializerOptions</span><span class="token punctuation">(</span>jsonSerializerOptions<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//还原默认格式 大驼峰风格</span>
            PropertyNamingPolicy <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        _pascalCaseFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SystemTextJsonOutputFormatter</span><span class="token punctuation">(</span>newOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task</span> <span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token class-name">OutputFormatterWriteContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token string">&quot;format&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">StringValues</span> format<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> format<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;json2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> _pascalCaseFormatter<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过在header中传递{format:json2}来显示大驼峰规则</p><h4 id="修改格式化-方案二" tabindex="-1"><a class="header-anchor" href="#修改格式化-方案二"><span>修改格式化(方案二)</span></a></h4><p>在ASP.NET Core 3.0或更高版本中，默认JSON格式化程序基于 System.Text.Json，可以配置Microsoft.AspNetCore.Mvc.JsonOptions.JsonSerializerOptions实现自定义功能。 比如，设置返回值属性名是PascalCase格式：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddJsonOptions</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> 
               options<span class="token punctuation">.</span>JsonSerializerOptions<span class="token punctuation">.</span>PropertyNamingPolicy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，这种只能实现固定设置，不能满足不同请求返回不同格式的需求。 这时，我们可以利用Newtonsoft.Json实现更灵活的配置。</p><h4 id="newtonsoft-json支持" tabindex="-1"><a class="header-anchor" href="#newtonsoft-json支持"><span>Newtonsoft.Json支持</span></a></h4><p>引用nuget包Microsoft.AspNetCore.Mvc.NewtonsoftJson，并修改Startup.cs，代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token range operator">..</span><span class="token punctuation">.</span>
        
    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddNewtonsoftJson</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>ContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyCustomContractResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义类MyCustomContractResolver格式化JSON。</p><p>MyCustomContractResolver实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCustomContractResolver</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DefaultContractResolver</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">CamelCaseNamingStrategy</span> _camelCase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CamelCaseNamingStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name">JsonContract</span> <span class="token function">ResolveContract</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">CreateContract</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ResolvePropertyName</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> propertyName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;json2&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> propertyName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> _camelCase<span class="token punctuation">.</span><span class="token function">GetPropertyName</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Primitives<span class="token punctuation">.</span>StringValues</span> headerValues<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>AppContext<span class="token punctuation">.</span>Current<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span><span class="token string">&quot;x-format&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> headerValues<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> headerValues<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认的ResolveContract缓存了指定类型的格式化设置，以加快运行速度，不能满足不同请求对同一类型执行不同的格式化要求。因此，为演示方便，这里去掉了缓存，你也可以实现自定义缓存</li><li>GetFormat是判断当前请求格式化方式的自定义方法。为演示方便，这里判断的是x-format Header，你也可以改成其他方式，比如根据当前用户凭证进行判断</li><li>AppContext.Current是对当前请求的HttpContext的封装.</li></ul><p>完全满足了要求，只需要客户在每个API请求加上x-format Header即可.</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,79),r={href:"https://mp.weixin.qq.com/s/3QTR5qBVpHJcFhfv7McOnA",target:"_blank",rel:"noopener noreferrer"},d={href:"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/advanced/custom-formatters?view=aspnetcore-6.0",target:"_blank",rel:"noopener noreferrer"},k={href:"http://furion.baiqian.ltd/docs/json-serialization",target:"_blank",rel:"noopener noreferrer"},v=s("p",null,"细聊ASP.NET Core WebAPI格式化程序：https://mp.weixin.qq.com/s/cxBm9ot3mbloWja-Ofqacw",-1);function m(b,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[s("a",r,[n("https://mp.weixin.qq.com/s/3QTR5qBVpHJcFhfv7McOnA"),t(a)]),n(" | 客户要求ASP.NET Core API返回特定格式，怎么办？(续) "),s("a",d,[n("https://docs.microsoft.com/zh-cn/aspnet/core/web-api/advanced/custom-formatters?view=aspnetcore-6.0"),t(a)]),n("：自定义格式序列化程序 json序列化："),s("a",k,[n("http://furion.baiqian.ltd/docs/json-serialization"),t(a)])]),v])}const f=e(i,[["render",m],["__file","geshihuaxiangyingshuju.html.vue"]]),w=JSON.parse('{"path":"/dotnet/api/controllerApi/geshihuaxiangyingshuju.html","title":"格式化响应数据","lang":"zh-CN","frontmatter":{"title":"格式化响应数据","lang":"zh-CN","date":"2023-10-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"geshihuaxiangyingshuju","slug":"qvrc31","docsId":"30020427","description":"本文示例环境：vs2022、.net5 返回内容协商 WebApi提供了多种内容格式，那么可以通过accept header来选择最好的内容返回格式，比如application/json, application/xml等等，如果没有专门设置，那么webapi就会使用默认的格式。默认是json格式，也可以配置xml等格式。 配置格式化程序 要想支持额外...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/geshihuaxiangyingshuju.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"格式化响应数据"}],["meta",{"property":"og:description","content":"本文示例环境：vs2022、.net5 返回内容协商 WebApi提供了多种内容格式，那么可以通过accept header来选择最好的内容返回格式，比如application/json, application/xml等等，如果没有专门设置，那么webapi就会使用默认的格式。默认是json格式，也可以配置xml等格式。 配置格式化程序 要想支持额外..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-09T07:25:08.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T07:25:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"格式化响应数据\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-09T07:25:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"返回内容协商","slug":"返回内容协商","link":"#返回内容协商","children":[]},{"level":2,"title":"配置格式化程序","slug":"配置格式化程序","link":"#配置格式化程序","children":[{"level":3,"title":"添加XML格式支持","slug":"添加xml格式支持","link":"#添加xml格式支持","children":[]},{"level":3,"title":"配置基于System.Text.Json的格式化程序","slug":"配置基于system-text-json的格式化程序","link":"#配置基于system-text-json的格式化程序","children":[{"level":4,"title":"属性驼峰设置","slug":"属性驼峰设置","link":"#属性驼峰设置","children":[]},{"level":4,"title":"解决中文编码","slug":"解决中文编码","link":"#解决中文编码","children":[]},{"level":4,"title":"修改返回类成员名称","slug":"修改返回类成员名称","link":"#修改返回类成员名称","children":[]}]},{"level":3,"title":"配置基于Newtonsoft.Json 的 JSON 格式支持","slug":"配置基于newtonsoft-json-的-json-格式支持","link":"#配置基于newtonsoft-json-的-json-格式支持","children":[{"level":4,"title":"数据首字母大写，原样输出","slug":"数据首字母大写-原样输出","link":"#数据首字母大写-原样输出","children":[]},{"level":4,"title":"设置字段的数据格式","slug":"设置字段的数据格式","link":"#设置字段的数据格式","children":[]},{"level":4,"title":"忽略返回值为null的字段","slug":"忽略返回值为null的字段","link":"#忽略返回值为null的字段","children":[]},{"level":4,"title":"忽略循环引用","slug":"忽略循环引用","link":"#忽略循环引用","children":[]},{"level":4,"title":"首字母小写","slug":"首字母小写","link":"#首字母小写","children":[]},{"level":4,"title":"修改返回类成员名称","slug":"修改返回类成员名称-1","link":"#修改返回类成员名称-1","children":[]}]}]},{"level":2,"title":"指定格式","slug":"指定格式","link":"#指定格式","children":[{"level":3,"title":"通过Url指定相应格式","slug":"通过url指定相应格式","link":"#通过url指定相应格式","children":[]},{"level":3,"title":"自定义返回格式","slug":"自定义返回格式","link":"#自定义返回格式","children":[{"level":4,"title":"动态操作返回格式(方案一)","slug":"动态操作返回格式-方案一","link":"#动态操作返回格式-方案一","children":[]},{"level":4,"title":"修改格式化(方案二)","slug":"修改格式化-方案二","link":"#修改格式化-方案二","children":[]},{"level":4,"title":"Newtonsoft.Json支持","slug":"newtonsoft-json支持","link":"#newtonsoft-json支持","children":[]}]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1709969108000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":6.59,"words":1976},"filePathRelative":"dotnet/api/controllerApi/geshihuaxiangyingshuju.md","localizedDate":"2023年10月17日","excerpt":"<blockquote>\\n<p>本文示例环境：vs2022、.net5</p>\\n</blockquote>\\n<h2>返回内容协商</h2>\\n<p>WebApi提供了多种内容格式，那么可以通过accept header来选择最好的内容返回格式，比如application/json, application/xml等等，如果没有专门设置，那么webapi就会使用默认的格式。默认是json格式，也可以配置xml等格式。</p>\\n<h2>配置格式化程序</h2>\\n<p>要想支持额外的格式可以添加相应的nuget包并配置来支持。输入和输出的格式化程序不同。 模型绑定使用输入格式化程序。 格式响应使用输出格式化程序。</p>","autoDesc":true}');export{f as comp,w as data};
