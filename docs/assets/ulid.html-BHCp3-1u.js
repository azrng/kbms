import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as i,a as n,d as s,e as t,b as l}from"./app-qB9_Bjjp.js";const c={},u=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),r=n("p",null,"一种可排序的随机标识生成方式以及在 .NET 中的使用",-1),d={href:"https://github.com/ultimicro/netulid",target:"_blank",rel:"noopener noreferrer"},k=l(`<h2 id="对比uuid" tabindex="-1"><a class="header-anchor" href="#对比uuid"><span>对比UUId</span></a></h2><h3 id="_1-1-可排序性" tabindex="-1"><a class="header-anchor" href="#_1-1-可排序性"><span>1.1 可排序性</span></a></h3><p>ULID 能够根据生成时的时间戳进行排序，使得生成的标识能够按照时间顺序排列，并且支持范围查询和快速索引。</p><h3 id="_1-2-长度更短" tabindex="-1"><a class="header-anchor" href="#_1-2-长度更短"><span>1.2 长度更短</span></a></h3><p>ULID 使用 26 个字符的 Base32 编码表示，相比标准的 UUID 使用的 36 个字符长度更短，减少网络传输和存储的开销。</p><h3 id="_1-3-高性能" tabindex="-1"><a class="header-anchor" href="#_1-3-高性能"><span>1.3 高性能</span></a></h3><p>由于 ULID 可以根据时间戳排序，它非常适合在分布式系统中使用，尤其是在高并发环境下，可以有效减少冲突和竞争。 尽管 ULID 的冲突概率很低，但并不能保证完全唯一。因此，在高度依赖唯一性的场景中，仍建议使用更长的 UUID。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h3><p>生成ULID</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token comment">// 生成一个新的 ULID</span>
<span class="token class-name">Ulid</span> ulid <span class="token operator">=</span> Ulid<span class="token punctuation">.</span><span class="token function">NewUlid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将 ULID 转换为字符串形式</span>
<span class="token class-name"><span class="token keyword">string</span></span> ulidString <span class="token operator">=</span> ulid<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对ULID进行解析和比较</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>
<span class="token comment">// 解析 ULID 字符串</span>
<span class="token class-name"><span class="token keyword">string</span></span> ulidString <span class="token operator">=</span> <span class="token string">&quot;01ARYZ6S41TSV4RRFFQ69G5FAV&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Ulid</span> ulid <span class="token operator">=</span> Ulid<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>ulidString<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 比较 ULID</span>
<span class="token class-name">Ulid</span> ulid1 <span class="token operator">=</span> Ulid<span class="token punctuation">.</span><span class="token function">NewUlid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Ulid</span> ulid2 <span class="token operator">=</span> Ulid<span class="token punctuation">.</span><span class="token function">NewUlid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">int</span></span> comparisonResult <span class="token operator">=</span> ulid1<span class="token punctuation">.</span><span class="token function">CompareTo</span><span class="token punctuation">(</span>ulid2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">bool</span></span> isEqual <span class="token operator">=</span> ulid1<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>ulid2<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;ULID1: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ulid1</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;ULID2: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ulid2</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Comparison result: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">comparisonResult</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Equal?: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">isEqual</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,14),m={href:"https://mp.weixin.qq.com/s/_o6BoxH3PWX7_2Qjhg3lzA",target:"_blank",rel:"noopener noreferrer"};function h(g,v){const a=p("ExternalLinkIcon");return o(),i("div",null,[u,r,n("p",null,[s("仓库地址："),n("a",d,[s("https://github.com/ultimicro/netulid"),t(a)])]),k,n("p",null,[n("a",m,[s("https://mp.weixin.qq.com/s/_o6BoxH3PWX7_2Qjhg3lzA"),t(a)]),s(" | ULID : 一种可排序的随机标识生成方式以及在 .NET 中的使用")])])}const _=e(c,[["render",h],["__file","ulid.html.vue"]]),f=JSON.parse('{"path":"/middleware/identityId/ulid.html","title":"ULID","lang":"zh-CN","frontmatter":{"title":"ULID","lang":"zh-CN","date":"2023-09-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"ulid","slug":"sz2ktb131uqq5g5x","docsId":"135411826","description":"概述 一种可排序的随机标识生成方式以及在 .NET 中的使用 仓库地址：https://github.com/ultimicro/netulid 对比UUId 1.1 可排序性 ULID 能够根据生成时的时间戳进行排序，使得生成的标识能够按照时间顺序排列，并且支持范围查询和快速索引。 1.2 长度更短 ULID 使用 26 个字符的 Base32 编码...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/identityId/ulid.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"ULID"}],["meta",{"property":"og:description","content":"概述 一种可排序的随机标识生成方式以及在 .NET 中的使用 仓库地址：https://github.com/ultimicro/netulid 对比UUId 1.1 可排序性 ULID 能够根据生成时的时间戳进行排序，使得生成的标识能够按照时间顺序排列，并且支持范围查询和快速索引。 1.2 长度更短 ULID 使用 26 个字符的 Base32 编码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ULID\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"对比UUId","slug":"对比uuid","link":"#对比uuid","children":[{"level":3,"title":"1.1 可排序性","slug":"_1-1-可排序性","link":"#_1-1-可排序性","children":[]},{"level":3,"title":"1.2 长度更短","slug":"_1-2-长度更短","link":"#_1-2-长度更短","children":[]},{"level":3,"title":"1.3 高性能","slug":"_1-3-高性能","link":"#_1-3-高性能","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.24,"words":371},"filePathRelative":"middleware/identityId/ulid.md","localizedDate":"2023年9月29日","excerpt":"<h2>概述</h2>\\n<p>一种可排序的随机标识生成方式以及在 .NET 中的使用</p>\\n<p>仓库地址：<a href=\\"https://github.com/ultimicro/netulid\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/ultimicro/netulid</a></p>\\n<h2>对比UUId</h2>\\n<h3>1.1 可排序性</h3>\\n<p>ULID 能够根据生成时的时间戳进行排序，使得生成的标识能够按照时间顺序排列，并且支持范围查询和快速索引。</p>\\n<h3>1.2 长度更短</h3>","autoDesc":true}');export{_ as comp,f as data};
