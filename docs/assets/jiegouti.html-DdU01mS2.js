import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,b as n,e as s,f as c,d as l}from"./app-Bfb6-vFH.js";const i={},r=l(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>和类相似不过和类不同的是，结构体是值类型，而类是引用类型，不支持继承(除了隐式派生自object类型)，结构体可以包含类的所有成员，除了后面这些：无参数的构造器、字段初始化器、终结器、虚成员。 当表示一个值类型语义时候，应该推荐使用结构体。</p><h2 id="结构体构造" tabindex="-1"><a class="header-anchor" href="#结构体构造"><span>结构体构造</span></a></h2><p>不隐式包含一个无法重写的无参数构造函数，不能重写。 在使用构造函数的时候，必须为每个字段进行赋值操作。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token comment">//错误：在控制方法返回调用方之前，自定实现的属性“UserInfo。Age”必须完全赋值</span>
    <span class="token keyword">public</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token comment">//Age = age;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Account <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//错误：virtual对该项无效</span>

    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Birthday <span class="token operator">=&gt;</span> <span class="token string">&quot;2021-07-16&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//错误：结构中不能实例化属性或者字段初始值设定项</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Creater <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将上面结构体改为类，那么将没有那些错误。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserInfo</span>
        <span class="token punctuation">{</span>
            Age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
            Name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> newUserInfo <span class="token operator">=</span> userInfo<span class="token punctuation">;</span>
        newUserInfo<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//张三</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">UserInfo</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是类，那么将输出 “李四”。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,9),u={href:"https://mp.weixin.qq.com/s/oKC4pwbZtxXCvPOXgDOo3Q",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[s("性能优化结构化替代类："),n("a",u,[s("https://mp.weixin.qq.com/s/oKC4pwbZtxXCvPOXgDOo3Q"),c(a)])])])}const g=e(i,[["render",k],["__file","jiegouti.html.vue"]]),b=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/jiegouti.html","title":"结构体","lang":"zh-CN","frontmatter":{"title":"结构体","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"jiegouti","slug":"yoec3m","docsId":"49181457","description":"介绍 和类相似不过和类不同的是，结构体是值类型，而类是引用类型，不支持继承(除了隐式派生自object类型)，结构体可以包含类的所有成员，除了后面这些：无参数的构造器、字段初始化器、终结器、虚成员。 当表示一个值类型语义时候，应该推荐使用结构体。 结构体构造 不隐式包含一个无法重写的无参数构造函数，不能重写。 在使用构造函数的时候，必须为每个字段进行赋...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/jiegouti.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"结构体"}],["meta",{"property":"og:description","content":"介绍 和类相似不过和类不同的是，结构体是值类型，而类是引用类型，不支持继承(除了隐式派生自object类型)，结构体可以包含类的所有成员，除了后面这些：无参数的构造器、字段初始化器、终结器、虚成员。 当表示一个值类型语义时候，应该推荐使用结构体。 结构体构造 不隐式包含一个无法重写的无参数构造函数，不能重写。 在使用构造函数的时候，必须为每个字段进行赋..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"结构体\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"结构体构造","slug":"结构体构造","link":"#结构体构造","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.27,"words":381},"filePathRelative":"dotnet/csharp/duixiangheleixing/jiegouti.md","localizedDate":"2023年10月22日","excerpt":"<h2>介绍</h2>\\n<p>和类相似不过和类不同的是，结构体是值类型，而类是引用类型，不支持继承(除了隐式派生自object类型)，结构体可以包含类的所有成员，除了后面这些：无参数的构造器、字段初始化器、终结器、虚成员。\\n当表示一个值类型语义时候，应该推荐使用结构体。</p>\\n<h2>结构体构造</h2>\\n<p>不隐式包含一个无法重写的无参数构造函数，不能重写。\\n在使用构造函数的时候，必须为每个字段进行赋值操作。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">UserInfo</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//错误：在控制方法返回调用方之前，自定实现的属性“UserInfo。Age”必须完全赋值</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token function\\">UserInfo</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> name<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> age<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        Name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">//Age = age;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Name <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">int</span></span> Age <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">virtual</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Account <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span><span class=\\"token comment\\">//错误：virtual对该项无效</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Birthday <span class=\\"token operator\\">=&gt;</span> <span class=\\"token string\\">\\"2021-07-16\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//错误：结构中不能实例化属性或者字段初始值设定项</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Creater <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"admin\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,b as data};
