import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,b as n,e as s,f as t,d as e}from"./app-D8HBJYTp.js";const i="/kbms/common/1612940477013-50250d61-01c1-47aa-a3d6-db5aadf175fc.png",u={},r=e(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>Autofac是一个第三方的IOC容器，管理类之间的依赖关系，使得应用程序随着大小和复杂性的增长而保持易于更改的状态。</p><h2 id="基础配置" tabindex="-1"><a class="header-anchor" href="#基础配置"><span>基础配置</span></a></h2><h3 id="老版本-net6前" tabindex="-1"><a class="header-anchor" href="#老版本-net6前"><span>老版本(.net6前)</span></a></h3><p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Autofac&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.2.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Autofac.Extensions.DependencyInjection&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;7.1.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在Program中设置替换原有的依赖注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseServiceProviderFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutofacServiceProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册需要的服务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新版本" tabindex="-1"><a class="header-anchor" href="#新版本"><span>新版本</span></a></h3><p>添加 Nuget 引用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Autofac<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>program.cs文件添加autofac的使用和注入配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token function">UseServiceProviderFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutofacServiceProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Host<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConfigureContainer</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ContainerBuilder<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>builder <span class="token operator">=&gt;</span>
 <span class="token punctuation">{</span>
     <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;Service.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>assembly<span class="token punctuation">)</span>
            <span class="token comment">//.AsImplementedInterfaces()// 无接口的注入方式</span>
            <span class="token punctuation">.</span><span class="token function">InstancePerDependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 单例模式</span>
    builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="瞬时模式" tabindex="-1"><a class="header-anchor" href="#瞬时模式"><span>瞬时模式</span></a></h3><h2 id="服务注册" tabindex="-1"><a class="header-anchor" href="#服务注册"><span>服务注册</span></a></h2><h3 id="反射注册" tabindex="-1"><a class="header-anchor" href="#反射注册"><span>反射注册</span></a></h3><h4 id="按照类型注册" tabindex="-1"><a class="header-anchor" href="#按照类型注册"><span>按照类型注册</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//builder.RegisterType(typeof(UserService)).As(typeof(IUserService));</span>

<span class="token comment">// 注册两个实现，选择</span>
builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConsoleLogger<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FileLogger<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PreserveExistingDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ContainerBuilder 提供了 <code>Register</code> 方法注册组件。</li><li>ContainerBuilder 提供了 <code>As</code>方法暴露服务。</li><li>ContainerBuilder 提供了 <code>Resolve</code>方法解析服务。</li></ul><h4 id="指定构造函数" tabindex="-1"><a class="header-anchor" href="#指定构造函数"><span>指定构造函数</span></a></h4><p>如果要注入的类中包含多个构造函数，那么可以使用UsingContructor来指定构造函数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MyComponent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">UsingConstructor</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ILogger</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IConfigReader</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>必要的依赖还得自己注册</p><h3 id="实例注册" tabindex="-1"><a class="header-anchor" href="#实例注册"><span>实例注册</span></a></h3><p>特殊情况下需要预先声成对象实例并将其添加到容器中以供注册组件使用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token function">RegisterInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制器中使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IUserService</span> _userService <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 查询用户列表</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _userService<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lambda表达式组件" tabindex="-1"><a class="header-anchor" href="#lambda表达式组件"><span>Lambda表达式组件</span></a></h3><p>当组件创建逻辑超出简单的构造函数是，更推荐接受委托或者lambda表达式以用作组件创建者。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">A</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>B<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,35),k={href:"https://autofac.readthedocs.io/en/latest/register/registration.html#lambda-expression-components",target:"_blank",rel:"noopener noreferrer"},d=e(`<h3 id="属性注册" tabindex="-1"><a class="header-anchor" href="#属性注册"><span>属性注册</span></a></h3><p>修改ConfigureServices配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//替换控制器的所有者</span>
    services<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Transient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IControllerActivator<span class="token punctuation">,</span> ServiceBasedControllerActivator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不替换注入的服务会是null，因为控制器本身的实例是由框架创建的，不是由容器所有。</p>`,4),m={href:"https://mp.weixin.qq.com/s/qcBci3iXaPBtsJsPyZnd8w",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//找到所有的controller进行注册，并使用属性注入功能</span>
    <span class="token class-name"><span class="token keyword">var</span></span> controllerTypesInassembly <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Startup</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetExportedTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>type <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ControllerBase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">RegisterTypes</span><span class="token punctuation">(</span>controllerTypesInassembly<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//属性注册</span>
    builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure中获取</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>            <span class="token class-name"><span class="token keyword">var</span></span> containerBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContainerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            containerBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> container <span class="token operator">=</span> containerBuilder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取服务</span>
            <span class="token class-name"><span class="token keyword">var</span></span> info <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制器中获取</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IUserService</span> _userService <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 查询用户列表</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">[</span>HttpGet<span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
      <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _userService<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型注册" tabindex="-1"><a class="header-anchor" href="#泛型注册"><span>泛型注册</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token function">RegisterGeneric</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">NHibernateRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">As</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="程序集注册" tabindex="-1"><a class="header-anchor" href="#程序集注册"><span>程序集注册</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> basePath <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">;</span><span class="token comment">//获取项目路径</span>
    <span class="token class-name"><span class="token keyword">var</span></span> servicesDllFile <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">&quot;Net5ByDocker.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> assemblysServices <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span>servicesDllFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接采用加载文件的方法</span>
    builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>assemblysServices<span class="token punctuation">)</span><span class="token comment">//获取程序集内所有类</span>
        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Service&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>IsClass<span class="token punctuation">)</span><span class="token comment">//增加注册类限定</span>
        <span class="token punctuation">.</span><span class="token function">PublicOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//限定是public访问权限的</span>
        <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基础配置-1" tabindex="-1"><a class="header-anchor" href="#基础配置-1"><span>基础配置</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> containerBuilder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//反射注册</span>
    containerBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//属性注册</span>
    containerBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//注册实现 以下四种写法是等效的</span>
    <span class="token comment">//containerBuilder.RegisterType&lt;UserService&gt;();</span>
    <span class="token comment">//containerBuilder.RegisterType&lt;UserService&gt;().AsSelf();</span>
    <span class="token comment">//containerBuilder.RegisterType&lt;UserService&gt;().As&lt;UserService&gt;();</span>
    <span class="token comment">//containerBuilder.RegisterType&lt;UserService&gt;().As(typeof(UserService));</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接注入整个程序集</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> basePath <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">;</span><span class="token comment">//获取项目路径</span>
    <span class="token class-name"><span class="token keyword">var</span></span> servicesDllFile <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">&quot;Net5ByDocker.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> assemblysServices <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span>servicesDllFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接采用加载文件的方法</span>
    builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>assemblysServices<span class="token punctuation">)</span><span class="token comment">//获取程序集内所有类</span>
        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Service&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>IsClass<span class="token punctuation">)</span><span class="token comment">//增加注册类限定</span>
        <span class="token punctuation">.</span><span class="token function">PublicOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//限定是public访问权限的</span>
        <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注册方式" tabindex="-1"><a class="header-anchor" href="#注册方式"><span>注册方式</span></a></h2><blockquote><p>注意：需要安装组件Autofac</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户接口</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span>
    <span class="token punctuation">{</span>
        <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 用户实现</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IUserService</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;AZRNG&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数注入" tabindex="-1"><a class="header-anchor" href="#构造函数注入"><span>构造函数注入</span></a></h3><p>反射注册</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//builder.RegisterType(typeof(UserService)).As(typeof(IUserService));</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IUserService</span> _userService<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span>  userService<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">ActionResult</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>_userService<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基于名称注册" tabindex="-1"><a class="header-anchor" href="#基于名称注册"><span>基于名称注册</span></a></h3><p>注册</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">//命名注册  比如想将一个服务注册多次，这个时候可以使用名称来区分</span>
    builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Named</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Configure中获取</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>AutofacContainer <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token function">GetAutofacRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> AutofacContainer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ResolveNamed</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性注册-1" tabindex="-1"><a class="header-anchor" href="#属性注册-1"><span>属性注册</span></a></h3><p>注入</p><h3 id="基于动态代理aop" tabindex="-1"><a class="header-anchor" href="#基于动态代理aop"><span>基于动态代理AOP</span></a></h3><h3 id="方法注入" tabindex="-1"><a class="header-anchor" href="#方法注入"><span>方法注入</span></a></h3><figure><img src="`+i+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="获取服务" tabindex="-1"><a class="header-anchor" href="#获取服务"><span>获取服务</span></a></h2><h3 id="configure获取服务" tabindex="-1"><a class="header-anchor" href="#configure获取服务"><span>Configure获取服务</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">ILifetimeScope</span> AutofacContainer <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">IApplicationBuilder</span> app<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> env<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span><span class="token function">UseDeveloperExceptionPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token preprocessor property">#<span class="token directive keyword">region</span> autofac</span>
        AutofacContainer <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token function">GetAutofacRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// var service=AutofacContainer.Resolve&lt;IUserService&gt;(); // 获取服务</span>
    <span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> AutofacContainer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ResolveNamed</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取指定名称的服务</span>
    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">GetListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//using (var myscope = AutofacContainer.BeginLifetimeScope(&quot;myscope&quot;))</span>
    <span class="token comment">//{</span>
    <span class="token comment">//    var userserice1 = myscope.Resolve&lt;UserService&gt;();</span>
    <span class="token comment">//    using (var scope = myscope.BeginLifetimeScope())</span>
    <span class="token comment">//    {</span>
    <span class="token comment">//        var userService2 = scope.Resolve&lt;UserService&gt;();</span>
    <span class="token comment">//        // 不管我们再怎么创建子容器的生命周期，得到的都是同一个对象</span>
    <span class="token comment">//        Console.WriteLine(userserice1 == userService2);</span>
    <span class="token comment">//    }</span>
    <span class="token comment">//}</span>

    <span class="token preprocessor property">#</span><span class="token return-type class-name">endregion</span>
        app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>
                     <span class="token punctuation">{</span>
                         endpoints<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Netcore3.x之前的代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">IServiceProvider</span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 第一步：替换系统默认Controller创建器（否则Controller下面无法使用属性注入）</span>
    <span class="token comment">// 在 services.AddMvc() 之前</span>
    services<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>ServiceDescriptor<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Transient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IControllerActivator<span class="token punctuation">,</span> ServiceBasedControllerActivator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddMvc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContainerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第二步：找到所有Controller的类型</span>
    <span class="token comment">// 通过Autofac对Controller类型进行属性注册 PropertiesAutowired()</span>
    <span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApplicationPartManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manager<span class="token punctuation">.</span>ApplicationParts<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssemblyPart</span><span class="token punctuation">(</span>assembly<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manager<span class="token punctuation">.</span>FeatureProviders<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ControllerFeatureProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> feature <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ControllerFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    manager<span class="token punctuation">.</span><span class="token function">PopulateFeature</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">RegisterTypes</span><span class="token punctuation">(</span>feature<span class="token punctuation">.</span>Controllers<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>ti <span class="token operator">=&gt;</span> ti<span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 第三步：配置 ContainerBuilder，返回 IServiceProvider </span>
    builder<span class="token punctuation">.</span><span class="token function">Populate</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AutofacServiceProvider</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Netcore 3.x之后 在Nuget中引入两个**：Autofac.Extras.DynamicProxy**（Autofac的动态代理，它依赖Autofac，所以可以不用单独引入Autofac）<strong>、Autofac.Extensions.DependencyInjection</strong>（Autofac的扩展），注意是最新版本的。 在<strong>startup文件中增加一个方法，用来配置Autofac服务容器</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureContainer</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> basePath <span class="token operator">=</span> Microsoft<span class="token punctuation">.</span>DotNet<span class="token punctuation">.</span>PlatformAbstractions<span class="token punctuation">.</span>ApplicationEnvironment<span class="token punctuation">.</span>ApplicationBasePath<span class="token punctuation">;</span>

            <span class="token comment">//直接注册某一个类和接口</span>
            <span class="token comment">//左边的是实现类，右边的As是接口</span>
            builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AdvertisementServices<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IAdvertisementServices<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//注册要通过反射创建的组件</span>
            <span class="token class-name"><span class="token keyword">var</span></span> servicesDllFile <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>basePath<span class="token punctuation">,</span> <span class="token string">&quot;Services.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> assemblysServices <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFrom</span><span class="token punctuation">(</span>servicesDllFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

            builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>assemblysServices<span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                      <span class="token punctuation">.</span><span class="token function">EnableInterfaceInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,41),g={href:"https://www.yuque.com/wangjie-iwmmn/hg173a/gk5rw0",target:"_blank",rel:"noopener noreferrer"},b={href:"http://www.cnblogs.com/wolegequ/archive/2012/06/03/2532605.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/huanghuangtongxue/article/details/78914306",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.csdn.net/huanghuangtongxue/article/details/78937494",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/huanghuangtongxue/article/details/79215136",target:"_blank",rel:"noopener noreferrer"};function w(A,S){const a=c("ExternalLinkIcon");return o(),l("div",null,[r,n("blockquote",null,[n("p",null,[s("不明白："),n("a",k,[s("https://autofac.readthedocs.io/en/latest/register/registration.html#lambda-expression-components"),t(a)])])]),d,n("blockquote",null,[n("p",null,[s("参考文档："),n("a",m,[s("https://mp.weixin.qq.com/s/qcBci3iXaPBtsJsPyZnd8w"),t(a)])])]),v,n("blockquote",null,[n("p",null,[n("a",g,[s("https://www.yuque.com/wangjie-iwmmn/hg173a/gk5rw0"),t(a)])])]),n("p",null,[n("a",b,[s("AutoFac三种注入方式：按类型、按名称、按键"),t(a)]),n("a",h,[s("Asp.Net Core 2.0 之旅---AutoFacIOC容器的使用教程（批量注入）"),t(a)]),n("a",f,[s("Asp.Net Core 2.0 之旅---AutoFac仓储泛型的依赖注入（泛型注入）"),t(a)]),n("a",y,[s("Asp.Net Core 2.0 之旅---数据访问仓储模式的事务管理（uow+rp）"),t(a)])])])}const I=p(u,[["render",w],["__file","autofac.html.vue"]]),R=JSON.parse('{"path":"/dotnet/base/yilaizhuru/autofac/autofac.html","title":"Autofac","lang":"zh-CN","frontmatter":{"title":"Autofac","lang":"zh-CN","date":"2022-10-06T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"autofac","slug":"ez795d","docsId":"29988191","description":"介绍 Autofac是一个第三方的IOC容器，管理类之间的依赖关系，使得应用程序随着大小和复杂性的增长而保持易于更改的状态。 基础配置 老版本(.net6前) 引用组件 在Program中设置替换原有的依赖注入 注册需要的服务 新版本 添加 Nuget 引用 program.cs文件添加autofac的使用和注入配置 生命周期 瞬时模式 服务注册 反射...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/autofac/autofac.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Autofac"}],["meta",{"property":"og:description","content":"介绍 Autofac是一个第三方的IOC容器，管理类之间的依赖关系，使得应用程序随着大小和复杂性的增长而保持易于更改的状态。 基础配置 老版本(.net6前) 引用组件 在Program中设置替换原有的依赖注入 注册需要的服务 新版本 添加 Nuget 引用 program.cs文件添加autofac的使用和注入配置 生命周期 瞬时模式 服务注册 反射..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1612940477013-50250d61-01c1-47aa-a3d6-db5aadf175fc.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-10-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Autofac\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1612940477013-50250d61-01c1-47aa-a3d6-db5aadf175fc.png\\"],\\"datePublished\\":\\"2022-10-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"基础配置","slug":"基础配置","link":"#基础配置","children":[{"level":3,"title":"老版本(.net6前)","slug":"老版本-net6前","link":"#老版本-net6前","children":[]},{"level":3,"title":"新版本","slug":"新版本","link":"#新版本","children":[]}]},{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[{"level":3,"title":"瞬时模式","slug":"瞬时模式","link":"#瞬时模式","children":[]}]},{"level":2,"title":"服务注册","slug":"服务注册","link":"#服务注册","children":[{"level":3,"title":"反射注册","slug":"反射注册","link":"#反射注册","children":[{"level":4,"title":"按照类型注册","slug":"按照类型注册","link":"#按照类型注册","children":[]},{"level":4,"title":"指定构造函数","slug":"指定构造函数","link":"#指定构造函数","children":[]}]},{"level":3,"title":"实例注册","slug":"实例注册","link":"#实例注册","children":[]},{"level":3,"title":"Lambda表达式组件","slug":"lambda表达式组件","link":"#lambda表达式组件","children":[]},{"level":3,"title":"属性注册","slug":"属性注册","link":"#属性注册","children":[]},{"level":3,"title":"泛型注册","slug":"泛型注册","link":"#泛型注册","children":[]},{"level":3,"title":"程序集注册","slug":"程序集注册","link":"#程序集注册","children":[]}]},{"level":2,"title":"基础配置","slug":"基础配置-1","link":"#基础配置-1","children":[]},{"level":2,"title":"注册方式","slug":"注册方式","link":"#注册方式","children":[{"level":3,"title":"构造函数注入","slug":"构造函数注入","link":"#构造函数注入","children":[]},{"level":3,"title":"基于名称注册","slug":"基于名称注册","link":"#基于名称注册","children":[]},{"level":3,"title":"属性注册","slug":"属性注册-1","link":"#属性注册-1","children":[]},{"level":3,"title":"基于动态代理AOP","slug":"基于动态代理aop","link":"#基于动态代理aop","children":[]},{"level":3,"title":"方法注入","slug":"方法注入","link":"#方法注入","children":[]}]},{"level":2,"title":"获取服务","slug":"获取服务","link":"#获取服务","children":[{"level":3,"title":"Configure获取服务","slug":"configure获取服务","link":"#configure获取服务","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.26,"words":1579},"filePathRelative":"dotnet/base/yilaizhuru/autofac/autofac.md","localizedDate":"2022年10月6日","excerpt":"<h2>介绍</h2>\\n<p>Autofac是一个第三方的IOC容器，管理类之间的依赖关系，使得应用程序随着大小和复杂性的增长而保持易于更改的状态。</p>\\n<h2>基础配置</h2>\\n<h3>老版本(.net6前)</h3>\\n<p>引用组件</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Autofac\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"6.2.0\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Autofac.Extensions.DependencyInjection\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"7.1.0\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{I as comp,R as data};
