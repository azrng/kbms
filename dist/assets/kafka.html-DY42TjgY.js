import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,a,b as n,d as t,e as l}from"./app-vSdX8vi3.js";const i="/kbms/common/1615282098271-a59d460c-3027-4fda-bf31-4bab916b0e04.png",r={},u=l('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>是一个开源的、分布式、可扩展的、高性能的发布订阅模式的消息中间件。</p><h2 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h2><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="简单例子" tabindex="-1"><a class="header-anchor" href="#简单例子"><span>简单例子</span></a></h2><blockquote><p>安装组件：Install-Package kafka-net</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//构建生产者</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> payload <span class="token operator">=</span><span class="token string">&quot;Welcome to Kafka!&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> topic <span class="token operator">=</span><span class="token string">&quot;IDGTestTopic&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Message</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KafkaOptions</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BrokerRouter</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Producer</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>
            client<span class="token punctuation">.</span><span class="token function">SendMessageAsync</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Message<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

<span class="token comment">//构建消费者</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">string</span></span> topic <span class="token operator">=</span><span class="token string">&quot;IDGTestTopic&quot;</span><span class="token punctuation">;</span>
            <span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KafkaOptions</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">BrokerRouter</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Consumer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConsumerOptions</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> router<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> message <span class="token keyword">in</span> consumer<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="文章" tabindex="-1"><a class="header-anchor" href="#文章"><span>文章</span></a></h2>`,8),k={href:"https://www.cnblogs.com/whuanle/p/17069128.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://kafka.whuanle.cn",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/hsxian/p/12907542.html",target:"_blank",rel:"noopener noreferrer"};function g(h,v){const s=o("ExternalLinkIcon");return p(),c("div",null,[u,a("p",null,[a("a",k,[n("https://www.cnblogs.com/whuanle/p/17069128.html"),t(s)]),n(" | 1.5万字长文：从 C## 入门 Kafka - 痴者工良 - 博客园 从 C## 入门 Kafka："),a("a",d,[n("https://kafka.whuanle.cn"),t(s)]),a("a",m,[n("https://www.cnblogs.com/hsxian/p/12907542.html"),t(s)]),n(" | .Net(c#)使用 Kafka 小结 - 麦比乌斯皇 - 博客园")])])}const w=e(r,[["render",g],["__file","kafka.html.vue"]]),y=JSON.parse('{"path":"/middleware/xiaoxiduilie/kafka.html","title":"Kafka","lang":"zh-CN","frontmatter":{"title":"Kafka","lang":"zh-CN","date":"2023-07-25T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"kafka","slug":"otplne","docsId":"29411648","description":"描述 是一个开源的、分布式、可扩展的、高性能的发布订阅模式的消息中间件。 架构 简单例子 安装组件：Install-Package kafka-net 文章 https://www.cnblogs.com/whuanle/p/17069128.html | 1.5万字长文：从 C## 入门 Kafka - 痴者工良 - 博客园 从 C## 入门 Kaf...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/xiaoxiduilie/kafka.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Kafka"}],["meta",{"property":"og:description","content":"描述 是一个开源的、分布式、可扩展的、高性能的发布订阅模式的消息中间件。 架构 简单例子 安装组件：Install-Package kafka-net 文章 https://www.cnblogs.com/whuanle/p/17069128.html | 1.5万字长文：从 C## 入门 Kafka - 痴者工良 - 博客园 从 C## 入门 Kaf..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1615282098271-a59d460c-3027-4fda-bf31-4bab916b0e04.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1615282098271-a59d460c-3027-4fda-bf31-4bab916b0e04.png\\"],\\"datePublished\\":\\"2023-07-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"架构","slug":"架构","link":"#架构","children":[]},{"level":2,"title":"简单例子","slug":"简单例子","link":"#简单例子","children":[]},{"level":2,"title":"文章","slug":"文章","link":"#文章","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.77,"words":230},"filePathRelative":"middleware/xiaoxiduilie/kafka.md","localizedDate":"2023年7月25日","excerpt":"<h2>描述</h2>\\n<p>是一个开源的、分布式、可扩展的、高性能的发布订阅模式的消息中间件。</p>\\n<h2>架构</h2>\\n<figure><img src=\\"/common/1615282098271-a59d460c-3027-4fda-bf31-4bab916b0e04.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>简单例子</h2>\\n<blockquote>\\n<p>安装组件：Install-Package&nbsp;kafka-net</p>\\n</blockquote>","autoDesc":true}');export{w as comp,y as data};
