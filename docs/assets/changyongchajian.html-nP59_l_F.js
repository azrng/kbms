import{_ as i}from"./1611537637247-5f5aa764-7b56-4fa6-9377-26938a4c05a8-DzC_meP0.js";import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as t,d as a}from"./app-S-drW72G.js";const n="/kbms/common/1611561458149-4b924283-86c8-423a-ab09-f721a8a61fbf.png",l={},r=a('<h2 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像"><span>镜像</span></a></h2><p>Role-based Authorization Strategy jenkins是通过插件对用户的权限进行控制的</p><p>部署插件 Generic WebHook Trigger =&gt; 触发WebHook必备 Gogs Plugin =&gt; 因为我使用的Git Server是Gogs搭建的 gitlab=》gitlab支持插件 Gitee=》Gitee使用的插件 MSBuild Plugin/MSBuild =&gt; 进行sln、csproj项目文件的编译 MSTest &amp; xUnit =&gt; 进行基于MSTest或基于xUnit的单元测试 Nuget Plugin =&gt; 拉取Nuget包必备 Pipeline =&gt; 实现Pipeline任务必备，建议将Pipeline相关插件都安装上 Powershell Plugin =&gt; 如果你的CI服务器是基于Windows的，那么安装一下Powershell插件来执行命令吧 WallDisplay =&gt; 电视投屏构建任务列表必备 Git Parameter=&gt;参数化分支构建可以选择不同的分支进行自动化部署</p><h3 id="publish-over-ssh" tabindex="-1"><a class="header-anchor" href="#publish-over-ssh"><span>Publish Over SSH</span></a></h3><p>远程发布Release必备 <img src="'+n+'" alt="" loading="lazy"></p><p>Passphrase：SSH密码 Path to key：SSH私钥的文件路径 Key：私钥串，如果“Key”和“Path to key”都设置，则“Key”的优先级较高 Disable exec：禁止在目标机上执行命令 SSH Server 配置（指定远程服务器的ip，可以配置多个ssh server ） Name：SSH节点配置的名称，在Job中使用Publish over SSH插件时，此名称将出现在“SSH Server”中“Name”的下拉列表中，如下图： Hostname：通过SSH连接到的远程主机名或IP Username：SSH服务使用的用户名，使用key进行连接时为key指定的用户名</p><h3 id="docker-compose-build-step-plugin" tabindex="-1"><a class="header-anchor" href="#docker-compose-build-step-plugin"><span>Docker Compose Build Step Plugin</span></a></h3><p>构建的时候出来docker-compose选项 <img src="'+i+`" alt="image.png" loading="lazy"> 构建时候生成的命令是：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">docker</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">compose</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">jenkins_home</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">workspace</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">测试</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">build</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">docker</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">compose</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">yaml</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> up</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Docker build step=&gt;自动化管理docker</p><p>部署远程服务 Publish over SSH</p><h2 id="插件镜像" tabindex="-1"><a class="header-anchor" href="#插件镜像"><span>插件镜像</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">清华软件镜像站</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),h=[r];function o(p,g){return t(),s("div",null,h)}const m=e(l,[["render",o],["__file","changyongchajian.html.vue"]]),u=JSON.parse('{"path":"/cloud/ciAndCd/jenkins/changyongchajian.html","title":"常用插件","lang":"zh-CN","frontmatter":{"title":"常用插件","lang":"zh-CN","date":"2021-06-26T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"changyongchajian","slug":"lc7zs4","docsId":"30369096","description":"镜像 Role-based Authorization Strategy jenkins是通过插件对用户的权限进行控制的 部署插件 Generic WebHook Trigger => 触发WebHook必备 Gogs Plugin => 因为我使用的Git Server是Gogs搭建的 gitlab=》gitlab支持插件 Gitee=》Gitee使...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/ciAndCd/jenkins/changyongchajian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"常用插件"}],["meta",{"property":"og:description","content":"镜像 Role-based Authorization Strategy jenkins是通过插件对用户的权限进行控制的 部署插件 Generic WebHook Trigger => 触发WebHook必备 Gogs Plugin => 因为我使用的Git Server是Gogs搭建的 gitlab=》gitlab支持插件 Gitee=》Gitee使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1611561458149-4b924283-86c8-423a-ab09-f721a8a61fbf.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T07:50:54.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T07:50:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用插件\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1611561458149-4b924283-86c8-423a-ab09-f721a8a61fbf.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1611537637247-5f5aa764-7b56-4fa6-9377-26938a4c05a8.png\\"],\\"datePublished\\":\\"2021-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-24T07:50:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"镜像","slug":"镜像","link":"#镜像","children":[{"level":3,"title":"Publish Over SSH","slug":"publish-over-ssh","link":"#publish-over-ssh","children":[]},{"level":3,"title":"Docker Compose Build Step Plugin","slug":"docker-compose-build-step-plugin","link":"#docker-compose-build-step-plugin","children":[]}]},{"level":2,"title":"插件镜像","slug":"插件镜像","link":"#插件镜像","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1695541854000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.54,"words":461},"filePathRelative":"cloud/ciAndCd/jenkins/changyongchajian.md","localizedDate":"2021年6月26日","excerpt":"<h2>镜像</h2>\\n<p>Role-based Authorization Strategy jenkins是通过插件对用户的权限进行控制的</p>\\n<p>部署插件\\nGeneric WebHook Trigger =&gt; 触发WebHook必备\\nGogs Plugin =&gt; 因为我使用的Git Server是Gogs搭建的\\ngitlab=》gitlab支持插件\\nGitee=》Gitee使用的插件\\nMSBuild Plugin/MSBuild =&gt; 进行sln、csproj项目文件的编译\\nMSTest &amp; xUnit =&gt; 进行基于MSTest或基于xUnit的单元测试\\nNuget Plugin =&gt; 拉取Nuget包必备\\nPipeline =&gt; 实现Pipeline任务必备，建议将Pipeline相关插件都安装上\\nPowershell Plugin =&gt; 如果你的CI服务器是基于Windows的，那么安装一下Powershell插件来执行命令吧\\nWallDisplay =&gt; 电视投屏构建任务列表必备\\nGit Parameter=&gt;参数化分支构建可以选择不同的分支进行自动化部署</p>","autoDesc":true}');export{m as comp,u as data};
