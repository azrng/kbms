import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as n,e as s,f as c,d as l}from"./app-Bfb6-vFH.js";const i={},u=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>有些场景需要我们使用类库来运行WebApi(例如加载dll创建控制器)。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>创建一个控制台项目作为主程序，然后我们创建一个Embed.WebApi的类库来运行WebApi项目。我们在该类库中创建下面的接口，并实现相关的方法来运行WebApi</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IInitTest</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            endpoints<span class="token punctuation">.</span><span class="token function">MapDefaultControllerRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IInitTest</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 初始化服务</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为Embed.WebApi项目我们创建的是一个类库，但是有为了WebApi里面的Api等，所以我们需要引用框架，完整的Embed.WebApi.csproj内容如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">Project</span> Sdk<span class="token operator">=</span><span class="token string">&quot;Microsoft.NET.Sdk&quot;</span><span class="token operator">&gt;</span>

	<span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>TargetFramework<span class="token operator">&gt;</span>net6<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>TargetFramework<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>ImplicitUsings<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span><span class="token operator">/</span>ImplicitUsings<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>Nullable<span class="token operator">&gt;</span>enable<span class="token operator">&lt;</span><span class="token operator">/</span>Nullable<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">&gt;</span>

	<span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token class-name">FrameworkReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.App&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Project<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候我们在该类库中创建Controllers文件夹，并创建测试控制器，如下所示</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Embed<span class="token punctuation">.</span>WebApi<span class="token punctuation">.</span>Controllers</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]/[action]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后在控制台主程序中注册上面的接口并调用初始化方法(记得让主程序引用该类库项目)，如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddTransient</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IInitTest<span class="token punctuation">,</span> InitTest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> serviceProvider <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> initTest <span class="token operator">=</span> serviceProvider<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IInitTest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

initTest<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启用项目，然后我们调用接口：/api/test/test 提示404，但是当我们将类库里面的控制器移动到控制台中的时候，此时请求可以成功，这是因为WebApi控制器的激活是以入口的主程序集来查询控制器并且激活的。</p><h3 id="addapplicationpart" tabindex="-1"><a class="header-anchor" href="#addapplicationpart"><span>AddApplicationPart</span></a></h3><p>虽然移动控制器可以实现效果，但是这样子属于代码入侵了，我们想要让类库作为WebApi程序的一部分应用手动加载并激活，在初始化方法里面做如下修改即可让我们的接口请求成功。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitTest</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IInitTest</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> _assemblyName <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">InitTest</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token operator">!</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//如果不配置AddApplicationPart，那么我们的控制器只能写在启用的项目中才能被找到</span>
        builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AddApplicationPart</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssemblyName</span><span class="token punctuation">(</span>_assemblyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">UseEndpoints</span><span class="token punctuation">(</span>endpoints <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            endpoints<span class="token punctuation">.</span><span class="token function">MapDefaultControllerRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IInitTest</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 初始化服务</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个情况更适合于底层的主入口已经封装好，所以只能采用这种方式，如果主入口我们可控，那么可以采用另外一个方式。</p><h3 id="主入口可控" tabindex="-1"><a class="header-anchor" href="#主入口可控"><span>主入口可控</span></a></h3><p>来看一段关键性源码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// Populates the given <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>paramref</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>feature<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> using the list of</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>see</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IApplicationFeatureProvider{TFeature}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>s configured on the</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>see</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ApplicationPartManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>.</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TFeature<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>The type of the feature.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>feature<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>The feature instance to populate.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">PopulateFeature</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TFeature<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">TFeature</span> feature<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>feature <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> provider <span class="token keyword">in</span> FeatureProviders<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">OfType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IApplicationFeatureProvider<span class="token punctuation">&lt;</span>TFeature<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        provider<span class="token punctuation">.</span><span class="token function">PopulateFeature</span><span class="token punctuation">(</span>ApplicationParts<span class="token punctuation">,</span> feature<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PopulateDefaultParts</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> entryAssemblyName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> assemblies <span class="token operator">=</span> <span class="token function">GetApplicationPartAssemblies</span><span class="token punctuation">(</span>entryAssemblyName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> seenAssemblies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HashSet<span class="token punctuation">&lt;</span>Assembly<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token keyword">in</span> assemblies<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seenAssemblies<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>assembly<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// &quot;assemblies&quot; may contain duplicate values, but we want unique ApplicationPart instances.</span>
            <span class="token comment">// Note that we prefer using a HashSet over Distinct since the latter isn&#39;t</span>
            <span class="token comment">// guaranteed to preserve the original ordering.</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name"><span class="token keyword">var</span></span> partFactory <span class="token operator">=</span> ApplicationPartFactory<span class="token punctuation">.</span><span class="token function">GetApplicationPartFactory</span><span class="token punctuation">(</span>assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> applicationPart <span class="token keyword">in</span> partFactory<span class="token punctuation">.</span><span class="token function">GetApplicationParts</span><span class="token punctuation">(</span>assembly<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ApplicationParts<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>applicationPart<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Assembly<span class="token punctuation">&gt;</span></span> <span class="token function">GetApplicationPartAssemblies</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> entryAssemblyName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> entryAssembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssemblyName</span><span class="token punctuation">(</span>entryAssemblyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Use ApplicationPartAttribute to get the closure of direct or transitive dependencies</span>
    <span class="token comment">// that reference MVC.</span>
    <span class="token class-name"><span class="token keyword">var</span></span> assembliesFromAttributes <span class="token operator">=</span> entryAssembly<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCustomAttributes</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationPartAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>name <span class="token operator">=&gt;</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>assembly <span class="token operator">=&gt;</span> assembly<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> StringComparer<span class="token punctuation">.</span>Ordinal<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>GetAssemblyClosure<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// The SDK will not include the entry assembly as an application part. We&#39;ll explicitly list it</span>
    <span class="token comment">// and have it appear before all other assemblies \\ ApplicationParts.</span>
    <span class="token keyword">return</span> <span class="token function">GetAssemblyClosure</span><span class="token punctuation">(</span>entryAssembly<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>assembliesFromAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Assembly<span class="token punctuation">&gt;</span></span> <span class="token function">GetAssemblyClosure</span><span class="token punctuation">(</span><span class="token class-name">Assembly</span> assembly<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> assembly<span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> relatedAssemblies <span class="token operator">=</span> RelatedAssemblyAttribute<span class="token punctuation">.</span><span class="token function">GetRelatedAssemblies</span><span class="token punctuation">(</span>assembly<span class="token punctuation">,</span> <span class="token named-parameter punctuation">throwOnError</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>assembly <span class="token operator">=&gt;</span> assembly<span class="token punctuation">.</span>FullName<span class="token punctuation">,</span> StringComparer<span class="token punctuation">.</span>Ordinal<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> relatedAssembly <span class="token keyword">in</span> relatedAssemblies<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">yield</span> <span class="token keyword">return</span> relatedAssembly<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上述源码可知，通过主入口程序集还会加载引用的程序集去查找并激活相关特性（比如控制器），当然前提是实现ApplicationPartAttribute特性，此特性必须在主入口程序集里定义，定义在程序集上.</p><p>所以我们就只需要一行代码即可搞定，我们在控制台入口命名空间顶部加入特性，引入Web APi类库作为程序集作为引用程序一部分，比如在控制台的Program最上面添加</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Embed<span class="token punctuation">.</span>WebApi</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>ApplicationParts</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">ApplicationPart</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;Embed.WebApi&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span> <span class="token comment">// 引入程序集</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过测试我们是可以调用成功的。</p><h3 id="运行多个webapi" tabindex="-1"><a class="header-anchor" href="#运行多个webapi"><span>运行多个WebApi</span></a></h3><p>当我们需要运行多个WebApi类库的时候，我们也可以通过MSBuild任务来进行构建将相关特性自动添加到主入口程序集描述信息里面去，例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token class-name">AssemblyAttribute</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>_Parameter1<span class="token operator">&gt;</span>Embed<span class="token punctuation">.</span>WebApi<span class="token operator">&lt;</span><span class="token operator">/</span>_Parameter1<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>AssemblyAttribute<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token class-name">AssemblyAttribute</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>_Parameter1<span class="token operator">&gt;</span>Embed<span class="token punctuation">.</span>WebApi2<span class="token operator">&lt;</span><span class="token operator">/</span>_Parameter1<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>AssemblyAttribute<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注入：如果两个控制器包含相同的路由地址，那么会出错</p></blockquote><p>这样子一个一个写，或者将多个WebApi放在同一个解决方案下，然后在此解决发难下创建可构建任务的.targets文件，并在主项目中引用，将程序集名称作为变量引入。 配置文件如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">AssemblyAttribute</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>_Parameter1<span class="token operator">&gt;</span>$<span class="token punctuation">(</span>AssemblyName<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>_Parameter1<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>AssemblyAttribute<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,30),r={href:"https://mp.weixin.qq.com/s/b8j_sXJyl0e1w4rH_SEtcw",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("汪鹏老师的WebApi类库如何内嵌运行："),n("a",r,[s("https://mp.weixin.qq.com/s/b8j_sXJyl0e1w4rH_SEtcw"),c(a)])])])}const g=t(i,[["render",k],["__file","leikuyunhangwebapi.html.vue"]]),y=JSON.parse('{"path":"/dotnet/api/controllerApi/extensions/leikuyunhangwebapi.html","title":"类库运行WebApi","lang":"zh-CN","frontmatter":{"title":"类库运行WebApi","lang":"zh-CN","date":"2023-06-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"leikuyunhangwebapi","slug":"pux56b","docsId":"94420176","description":"概述 有些场景需要我们使用类库来运行WebApi(例如加载dll创建控制器)。 操作 创建一个控制台项目作为主程序，然后我们创建一个Embed.WebApi的类库来运行WebApi项目。我们在该类库中创建下面的接口，并实现相关的方法来运行WebApi 因为Embed.WebApi项目我们创建的是一个类库，但是有为了WebApi里面的Api等，所以我们需...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/extensions/leikuyunhangwebapi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"类库运行WebApi"}],["meta",{"property":"og:description","content":"概述 有些场景需要我们使用类库来运行WebApi(例如加载dll创建控制器)。 操作 创建一个控制台项目作为主程序，然后我们创建一个Embed.WebApi的类库来运行WebApi项目。我们在该类库中创建下面的接口，并实现相关的方法来运行WebApi 因为Embed.WebApi项目我们创建的是一个类库，但是有为了WebApi里面的Api等，所以我们需..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类库运行WebApi\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"AddApplicationPart","slug":"addapplicationpart","link":"#addapplicationpart","children":[]},{"level":3,"title":"主入口可控","slug":"主入口可控","link":"#主入口可控","children":[]},{"level":3,"title":"运行多个WebApi","slug":"运行多个webapi","link":"#运行多个webapi","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.15,"words":1245},"filePathRelative":"dotnet/api/controllerApi/extensions/leikuyunhangwebapi.md","localizedDate":"2023年6月24日","excerpt":"<h2>概述</h2>\\n<p>有些场景需要我们使用类库来运行WebApi(例如加载dll创建控制器)。</p>\\n<h2>操作</h2>\\n<p>创建一个控制台项目作为主程序，然后我们创建一个Embed.WebApi的类库来运行WebApi项目。我们在该类库中创建下面的接口，并实现相关的方法来运行WebApi</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">InitTest</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">IInitTest</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> builder <span class=\\"token operator\\">=</span> WebApplication<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateBuilder</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        builder<span class=\\"token punctuation\\">.</span>Services<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddControllers</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> app <span class=\\"token operator\\">=</span> builder<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Build</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        app<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseRouting</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        app<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">UseEndpoints</span><span class=\\"token punctuation\\">(</span>endpoints <span class=\\"token operator\\">=&gt;</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            endpoints<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">MapDefaultControllerRoute</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        app<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">IInitTest</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token doc-comment comment\\">/// 初始化服务</span>\\n    <span class=\\"token doc-comment comment\\">/// <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>summary</span><span class=\\"token punctuation\\">&gt;</span></span></span>\\n    <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">Init</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{g as comp,y as data};
