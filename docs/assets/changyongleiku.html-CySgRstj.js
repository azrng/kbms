import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,f as t,d as e}from"./app-CBxp4zeL.js";const i={},u=n("h2",{id:"模拟工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#模拟工具"},[n("span",null,"模拟工具")])],-1),r=n("h3",{id:"nsubstitute",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nsubstitute"},[n("span",null,"NSubstitute")])],-1),k={href:"https://nsubstitute.github.io/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#number-of-invocations-timesexactlyn--receivedn",target:"_blank",rel:"noopener noreferrer"},m={href:"https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-without-arguments",target:"_blank",rel:"noopener noreferrer"},g=n("h3",{id:"moq-261m",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#moq-261m"},[n("span",null,"Moq(261M)")])],-1),v={href:"https://github.com/moq/moq4",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>https://mp.weixin.qq.com/s/izO_hYmXjEYkViWRl0xiIw | 使用 Moq.AutoMock 简化 moq 的使用</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h4><h5 id="基本示例" tabindex="-1"><a class="header-anchor" href="#基本示例"><span>基本示例</span></a></h5><p>在进行单元测试的时候, 可以使用Moq对_userService.GetUser进行模拟返回值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GetUser_ShouldReturnNotFound_WhenCannotFoundUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// arrange</span>
    <span class="token comment">// 新建一个IUserService的mock对象</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mockUserService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>IUserService<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用moq对IUserService的GetUs方法进行mock: 当入参为233时返回null</span>
    mockUserService
      <span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>it <span class="token operator">=&gt;</span> it<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserController</span><span class="token punctuation">(</span>mockUserService<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// act</span>
    <span class="token class-name"><span class="token keyword">var</span></span> actual <span class="token operator">=</span> controller<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">NotFoundResult</span><span class="token punctuation">;</span>
    
    <span class="token comment">// assert</span>
    <span class="token comment">// 验证调用过userService的GetUser方法一次，且入参为233</span>
    mockUserService<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>it <span class="token operator">=&gt;</span> it<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Times<span class="token punctuation">.</span><span class="token function">AtMostOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="模拟ilogger" tabindex="-1"><a class="header-anchor" href="#模拟ilogger"><span>模拟ILogger</span></a></h5><p>由于ILogger的LogError等方法都是属于扩展方法，所以不需要特别的进行方法级别的mock。 针对平时的一些使用场景封装了一个帮助类, 可以使用如下的帮助类进行Mock和Verify</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoggerHelper</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Mock<span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token generic-method"><span class="token function">LoggerMock</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">VerifyLog</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> loggerMock<span class="token punctuation">,</span> <span class="token class-name">LogLevel</span> level<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> containMessage<span class="token punctuation">,</span> <span class="token class-name">Times</span> times<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        loggerMock<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>
        x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>
            level<span class="token punctuation">,</span>
            It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventId<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Is</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>containMessage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        times<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">VerifyLog</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Mock<span class="token punctuation">&lt;</span>ILogger<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> loggerMock<span class="token punctuation">,</span> <span class="token class-name">LogLevel</span> level<span class="token punctuation">,</span> <span class="token class-name">Times</span> times<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        loggerMock<span class="token punctuation">.</span><span class="token function">Verify</span><span class="token punctuation">(</span>
        x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>
            level<span class="token punctuation">,</span>
            It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>EventId<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>It<span class="token punctuation">.</span>IsAnyType<span class="token punctuation">,</span> Exception<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>It<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">IsAny</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        times<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Echo_ShouldLogInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// arrange</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mockLogger <span class="token operator">=</span> LoggerHelper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LoggerMock</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserController<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserController</span><span class="token punctuation">(</span>mockLogger<span class="token punctuation">.</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// act</span>
    controller<span class="token punctuation">.</span><span class="token function">Echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// assert</span>
    mockLogger<span class="token punctuation">.</span><span class="token function">VerifyLog</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>Information<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> Times<span class="token punctuation">.</span><span class="token function">Once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mockqueryable" tabindex="-1"><a class="header-anchor" href="#mockqueryable"><span>MockQueryable</span></a></h3><h4 id="mockqueryable-core-11-1m-2023年9月2日15-08-27" tabindex="-1"><a class="header-anchor" href="#mockqueryable-core-11-1m-2023年9月2日15-08-27"><span>MockQueryable.Core(11.1M 2023年9月2日15:08:27)</span></a></h4><p>MockQueryable扩展的核心包，用于模仿ToListAsync, FirstOrDefaultAsync等操作。</p><h4 id="mockqueryable-moq-8-95m-2023年9月2日15-07-41" tabindex="-1"><a class="header-anchor" href="#mockqueryable-moq-8-95m-2023年9月2日15-07-41"><span>MockQueryable.Moq(8.95M 2023年9月2日15:07:41)</span></a></h4>`,14),b={href:"https://github.com/romantitov/MockQueryable",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;MockQueryable.Moq&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;5.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该组件依赖于Moq、MockQueryable.EntityFrameworkCore、MockQueryable.Core</p><h5 id="模拟dbset" tabindex="-1"><a class="header-anchor" href="#模拟dbset"><span>模拟DbSet</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 1. 测试时创建一个模拟的List&lt;T&gt;</span>
<span class="token class-name"><span class="token keyword">var</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>UserEntity<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UserEntity</span><span class="token punctuation">{</span>LastName <span class="token operator">=</span> <span class="token string">&quot;ExistLastName&quot;</span><span class="token punctuation">,</span> DateOfBirth <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;01/20/2012&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token range operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 通过扩展方法转换成DbSet&lt;UserEntity&gt;</span>
<span class="token class-name"><span class="token keyword">var</span></span> mockUsers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">AsQueryable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BuildMock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 赋值给给mock的DbContext中的Users属性</span>
<span class="token class-name"><span class="token keyword">var</span></span> mockDbContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mock<span class="token punctuation">&lt;</span>DbContext<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mockDbContext
  <span class="token punctuation">.</span><span class="token function">Setup</span><span class="token punctuation">(</span>it <span class="token operator">=&gt;</span> it<span class="token punctuation">.</span>Users<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span>mockUsers<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="填充库" tabindex="-1"><a class="header-anchor" href="#填充库"><span>填充库</span></a></h2><h3 id="autofixture-54-6m" tabindex="-1"><a class="header-anchor" href="#autofixture-54-6m"><span>AutoFixture(54.6M)</span></a></h3>`,7),f={href:"https://github.com/AutoFixture/AutoFixture",target:"_blank",rel:"noopener noreferrer"},w=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AutoFixture&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;4.17.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h4><p>直接使用如下的方式创建强类型的假数据</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">Fixture</span> fixture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> expectedNumber <span class="token operator">=</span> fixture<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> sut <span class="token operator">=</span> fixture<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="生成数据" tabindex="-1"><a class="header-anchor" href="#生成数据"><span>生成数据</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 生成指定数据量的TestDataModel数据</span>
<span class="token class-name"><span class="token keyword">var</span></span> fixture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Fixture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> fixture<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMany</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TestDataModel<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">600000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="与xunit测试框架结合" tabindex="-1"><a class="header-anchor" href="#与xunit测试框架结合"><span>与xUnit测试框架结合</span></a></h4><p>上述示例也可以和测试框架本身结合，比如xUnit</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Theory</span><span class="token punctuation">,</span> <span class="token class-name">AutoData</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">IntroductoryTest</span><span class="token punctuation">(</span>
    <span class="token class-name"><span class="token keyword">int</span></span> expectedNumber<span class="token punctuation">,</span> <span class="token class-name">MyClass</span> sut<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// act</span>
    <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> sut<span class="token punctuation">.</span><span class="token function">Echo</span><span class="token punctuation">(</span>expectedNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// assert</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>expectedNumber<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bogus-21-9m" tabindex="-1"><a class="header-anchor" href="#bogus-21-9m"><span>Bogus(21.9M)</span></a></h3>`,10),x={href:"https://github.com/bchavez/Bogus",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>Bogus 实战：使用 Bogus 和 EFCore 生成模拟数据和种子数据【完整教程】https://www.cnblogs.com/ruipeng/p/18138134本文介绍了在 xUnit 单元测试中结合 xUnit.DependencyInject 使用依赖注入的方法，并展示了如何使用 Bogus 库创建模拟数据以及 EFCore 生成种子数据。Bogus 是一个.NET 下的假数据生成器，具有丰富的数据类型支持、可重复性、易用性、内置规则、灵活性和社区支持。文章通过示例展示了 Bogus 生成测试数据的过程，并提供了单元测试成功的证明。还介绍了 Bogus 的国际化特性，包括各种地区设置和语言的支持。</p><p>引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Bogus&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;34.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h4><p>生成一些模拟数据，先定义模型类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Country <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ZipCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Phone <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Email <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ContactName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span> Orders <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Guid</span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> Date <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Decimal</span> OrderValue <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Shipped <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现代码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//为Randomizer.Seed属性指定一个固定的随机种子，因此每次生成的数据都是一样的</span>
Randomizer<span class="token punctuation">.</span>Seed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> ordergenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Faker<span class="token punctuation">&lt;</span>Order<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Guid<span class="token punctuation">.</span>NewGuid<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Date<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Date<span class="token punctuation">.</span><span class="token function">Past</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>OrderValue<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Finance<span class="token punctuation">.</span><span class="token function">Amount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>Shipped<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token number">0.9f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> customerGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Faker<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Company<span class="token punctuation">.</span><span class="token function">CompanyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Address<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Address<span class="token punctuation">.</span><span class="token function">FullAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>City<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Address<span class="token punctuation">.</span><span class="token function">City</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Country<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Address<span class="token punctuation">.</span><span class="token function">Country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>ZipCode<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Address<span class="token punctuation">.</span><span class="token function">ZipCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Phone<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Phone<span class="token punctuation">.</span><span class="token function">PhoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Internet<span class="token punctuation">.</span><span class="token function">Email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>ContactName<span class="token punctuation">,</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> f<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">FullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">RuleFor</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Orders<span class="token punctuation">,</span> f <span class="token operator">=&gt;</span> ordergenerator<span class="token punctuation">.</span><span class="token function">Generate</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>Random<span class="token punctuation">.</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> customerGenerator<span class="token punctuation">.</span><span class="token function">Generate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="断言工具" tabindex="-1"><a class="header-anchor" href="#断言工具"><span>断言工具</span></a></h2><h3 id="fluentassertions-web" tabindex="-1"><a class="header-anchor" href="#fluentassertions-web"><span>FluentAssertions.Web</span></a></h3><p>Fluent Assertions 是.NET 平台下的一组扩展方法,用于单元测试中的断言。它使你的单元测试中的断言看起来更自然流畅。</p>`,11),q={href:"https://mp.weixin.qq.com/s/SEhC8MOsicSL8q1n67C5Sw",target:"_blank",rel:"noopener noreferrer"},M=n("h3",{id:"shouldly",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#shouldly"},[n("span",null,"Shouldly")])],-1),A={href:"https://github.com/shouldly/shouldly",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"testcontainers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#testcontainers"},[n("span",null,"Testcontainers")])],-1),I=n("p",null,".NET 的 Testcontainers 是一个库，用于支持所有兼容的 .NET 标准版本的 Docker 容器的一次性实例进行测试。该库基于 .NET Docker 远程 API 构建，并提供轻量级实现，可在所有情况下支持测试环境。",-1),N={href:"https://dotnet.testcontainers.org/",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"使用 testcontainers 进行功能测试：https://www.dejandjenic.com/blogs/functional-testing-with-testcontainers.html",-1),F=n("h2",{id:"respawn",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#respawn"},[n("span",null,"Respawn")])],-1),S=n("p",null,"Respawn 是一个非常小但是实用的工具，它可以很方便的将测试或开发数据库重置为空状态。 这特别适合在集成测试中使用，集成测试运行之后，通过 Respawn 自动化的清除数据，回到测试之前的数据库状态。",-1),E={href:"https://mp.weixin.qq.com/s/AvV7MJk7iEDQdidKoHQNfQ",target:"_blank",rel:"noopener noreferrer"},L=n("h2",{id:"日志",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#日志"},[n("span",null,"日志")])],-1),U=n("h3",{id:"martincostello-logging-xunit",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#martincostello-logging-xunit"},[n("span",null,"MartinCostello.Logging.XUnit")])],-1),D={href:"https://github.com/martincostello/xunit-logging",target:"_blank",rel:"noopener noreferrer"},R=n("h3",{id:"meziantou-extensions-logging-xunit",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#meziantou-extensions-logging-xunit"},[n("span",null,"Meziantou.Extensions.Logging.Xunit")])],-1),z=n("p",null,"在xunit测试中输出日志操作",-1),V={href:"https://www.meziantou.net/how-to-get-asp-net-core-logs-in-the-output-of-xunit-tests.htm",target:"_blank",rel:"noopener noreferrer"},Q=n("h2",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料"},[n("span",null,"资料")])],-1),O={href:"https://mp.weixin.qq.com/s/lVhTd4bjmMn12U1QUDZTsg",target:"_blank",rel:"noopener noreferrer"};function B(G,P){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("p",null,[s("NSubstitute 是 .NET 模拟库的友好替代品。它具有简单、简洁的语法，可帮助开发人员编写更清晰的测试。NSubstitute专为Arrange-Act-Assert（AAA）测试而设计，并考虑了测试驱动开发（TDD）。 官网文档："),n("a",k,[s("https://nsubstitute.github.io/"),t(a)])]),n("p",null,[s("资料 从Moq迁移到NSubstitute："),n("a",d,[s("https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute"),t(a)]),s(" moq迁移 "),n("a",m,[s("https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-without-arguments"),t(a)])]),g,n("p",null,[s("Moq是一个非常流行的模拟库, 只要有一个接口它就可以动态生成一个对象, 底层使用的是Castle的动态代理功能. 官方地址："),n("a",v,[s("https://github.com/moq/moq4"),t(a)])]),h,n("p",null,[s("模拟实体框架操作的扩展，例如ToListAsync, FirstOrDefaultAsync等,避免访问数据库。也可以Mock Dbset等。 仓库地址："),n("a",b,[s("https://github.com/romantitov/MockQueryable"),t(a)])]),y,n("p",null,[s("AutoFixture是一个假数据填充库，旨在最小化3A中的arrange阶段，使开发人员更容易创建包含测试数据的对象，从而可以更专注与测试用例的设计本身。 官方仓库："),n("a",f,[s("https://github.com/AutoFixture/AutoFixture"),t(a)]),s(" 引用组件")]),w,n("p",null,[s("Bogus是一个简单的假数据生成器，适用于C#、F#和VB.NET等.NET语言。 Github："),n("a",x,[s("https://github.com/bchavez/Bogus"),t(a)])]),_,n("blockquote",null,[n("p",null,[n("a",q,[s("https://mp.weixin.qq.com/s/SEhC8MOsicSL8q1n67C5Sw"),t(a)])])]),M,n("p",null,[s("仓库地址："),n("a",A,[s("https://github.com/shouldly/shouldly"),t(a)])]),T,I,n("p",null,[s("官网："),n("a",N,[s("https://dotnet.testcontainers.org/"),t(a)])]),C,F,S,n("p",null,[n("a",E,[s("https://mp.weixin.qq.com/s/AvV7MJk7iEDQdidKoHQNfQ"),t(a)]),s(" | 使用 Respawn 在 .NET 测试中轻松重置数据库")]),L,U,n("p",null,[s("此包允许使用打印打印的日志，并将其记录在测试运行日志中。 此外，通过调整日志级别，您可以进行调整，例如在生产执行期间不显示它，以便您可以根据需要将日志输出代码保留在库中。 以下是使用它的方法：ILogger、ITestOutputHelper 文档地址："),n("a",D,[s("https://github.com/martincostello/xunit-logging"),t(a)])]),R,z,n("p",null,[s("文档地址："),n("a",V,[s("https://www.meziantou.net/how-to-get-asp-net-core-logs-in-the-output-of-xunit-tests.htm"),t(a)])]),Q,n("p",null,[n("a",O,[s("https://mp.weixin.qq.com/s/lVhTd4bjmMn12U1QUDZTsg"),t(a)]),s(" | 浅谈.Net Core后端单元测试")])])}const H=p(i,[["render",B],["__file","changyongleiku.html.vue"]]),X=JSON.parse('{"path":"/middleware/testMange/changyongleiku.html","title":"常用类库","lang":"zh-CN","frontmatter":{"title":"常用类库","lang":"zh-CN","date":"2023-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"changyongleiku","slug":"khwyom","docsId":"66006048","description":"模拟工具 NSubstitute NSubstitute 是 .NET 模拟库的友好替代品。它具有简单、简洁的语法，可帮助开发人员编写更清晰的测试。NSubstitute专为Arrange-Act-Assert（AAA）测试而设计，并考虑了测试驱动开发（TDD）。 官网文档：https://nsubstitute.github.io/ 资料 从Moq迁...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/changyongleiku.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"常用类库"}],["meta",{"property":"og:description","content":"模拟工具 NSubstitute NSubstitute 是 .NET 模拟库的友好替代品。它具有简单、简洁的语法，可帮助开发人员编写更清晰的测试。NSubstitute专为Arrange-Act-Assert（AAA）测试而设计，并考虑了测试驱动开发（TDD）。 官网文档：https://nsubstitute.github.io/ 资料 从Moq迁..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-06T14:36:39.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-06T14:36:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用类库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-06T14:36:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"模拟工具","slug":"模拟工具","link":"#模拟工具","children":[{"level":3,"title":"NSubstitute","slug":"nsubstitute","link":"#nsubstitute","children":[]},{"level":3,"title":"Moq(261M)","slug":"moq-261m","link":"#moq-261m","children":[{"level":4,"title":"示例","slug":"示例","link":"#示例","children":[{"level":5,"title":"基本示例","slug":"基本示例","link":"#基本示例","children":[]},{"level":5,"title":"模拟ILogger","slug":"模拟ilogger","link":"#模拟ilogger","children":[]}]}]},{"level":3,"title":"MockQueryable","slug":"mockqueryable","link":"#mockqueryable","children":[{"level":4,"title":"MockQueryable.Core(11.1M 2023年9月2日15:08:27)","slug":"mockqueryable-core-11-1m-2023年9月2日15-08-27","link":"#mockqueryable-core-11-1m-2023年9月2日15-08-27","children":[]},{"level":4,"title":"MockQueryable.Moq(8.95M 2023年9月2日15:07:41)","slug":"mockqueryable-moq-8-95m-2023年9月2日15-07-41","link":"#mockqueryable-moq-8-95m-2023年9月2日15-07-41","children":[{"level":5,"title":"模拟DbSet","slug":"模拟dbset","link":"#模拟dbset","children":[]}]}]}]},{"level":2,"title":"填充库","slug":"填充库","link":"#填充库","children":[{"level":3,"title":"AutoFixture(54.6M)","slug":"autofixture-54-6m","link":"#autofixture-54-6m","children":[{"level":4,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":4,"title":"生成数据","slug":"生成数据","link":"#生成数据","children":[]},{"level":4,"title":"与xUnit测试框架结合","slug":"与xunit测试框架结合","link":"#与xunit测试框架结合","children":[]}]},{"level":3,"title":"Bogus(21.9M)","slug":"bogus-21-9m","link":"#bogus-21-9m","children":[{"level":4,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]}]}]},{"level":2,"title":"断言工具","slug":"断言工具","link":"#断言工具","children":[{"level":3,"title":"FluentAssertions.Web","slug":"fluentassertions-web","link":"#fluentassertions-web","children":[]},{"level":3,"title":"Shouldly","slug":"shouldly","link":"#shouldly","children":[]}]},{"level":2,"title":"Testcontainers","slug":"testcontainers","link":"#testcontainers","children":[]},{"level":2,"title":"Respawn","slug":"respawn","link":"#respawn","children":[]},{"level":2,"title":"日志","slug":"日志","link":"#日志","children":[{"level":3,"title":"MartinCostello.Logging.XUnit","slug":"martincostello-logging-xunit","link":"#martincostello-logging-xunit","children":[]},{"level":3,"title":"Meziantou.Extensions.Logging.Xunit","slug":"meziantou-extensions-logging-xunit","link":"#meziantou-extensions-logging-xunit","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1715006199000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":5.82,"words":1745},"filePathRelative":"middleware/testMange/changyongleiku.md","localizedDate":"2023年10月18日","excerpt":"<h2>模拟工具</h2>\\n<h3>NSubstitute</h3>\\n<p>NSubstitute 是 .NET 模拟库的友好替代品。它具有简单、简洁的语法，可帮助开发人员编写更清晰的测试。NSubstitute专为Arrange-Act-Assert（AAA）测试而设计，并考虑了测试驱动开发（TDD）。\\n官网文档：<a href=\\"https://nsubstitute.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://nsubstitute.github.io/</a></p>\\n<p>资料\\n从Moq迁移到NSubstitute：<a href=\\"https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#number-of-invocations-timesexactlyn--receivedn\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute</a>\\nmoq迁移\\n<a href=\\"https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-without-arguments\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://timdeschryver.dev/blog/a-cheat-sheet-to-migrate-from-moq-to-nsubstitute#method-without-arguments</a></p>","autoDesc":true}');export{H as comp,X as data};
