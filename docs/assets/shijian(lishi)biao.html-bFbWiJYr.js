import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as i,b as a,e as n,f as e,d as c}from"./app-Bfb6-vFH.js";const l={},r=c(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p>该方案仅支持SqlServer</p></blockquote><p>SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版本也会插入到历史表中。</p><p>通过这种方式跟踪更改，您可以捕获特定表的整个历史记录。这对于保留更改的审核日志很有用。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>要将实体标记为时态表，请IsTemporal在配置模型时使用。当您生成新的数据库模式时，您会注意到历史表包含在新脚本中。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">CustomerEntityConfiguration</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEntityTypeConfiguration<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Configure</span><span class="token punctuation">(</span><span class="token class-name">EntityTypeBuilder<span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">ToTable</span><span class="token punctuation">(</span><span class="token string">&quot;Customers&quot;</span><span class="token punctuation">,</span> o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span><span class="token function">IsTemporal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建表后，您可以使用各种内置方法查询和检索表的历史数据。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> customerHistory <span class="token operator">=</span> <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">TemporalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，检索了所有历史数据，但也可以检索特定时间范围内的历史数据。我发现这对于查询基于年份的数据很有用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> customerHistory <span class="token operator">=</span> <span class="token keyword">await</span> dbContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Customer<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">TemporalFromTo</span><span class="token punctuation">(</span>startOfYear<span class="token punctuation">,</span> endOfYear<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>请记住，自动包含的所有实体也包含在时间查询中，这通常会引发异常。 为了避免这种情况，您可以使用IgnoreAutoIncludes和IgnoreQueryFilters方法来禁用此功能。</p></blockquote><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,13),u={href:"https://learn.microsoft.com/zh-cn/sql/relational-databases/tables/temporal-tables?view=sql-server-ver16",target:"_blank",rel:"noopener noreferrer"},d={href:"https://timdeschryver.dev/blog/entity-framework-features-i-wish-i-knew-earlier#temporal-history-table",target:"_blank",rel:"noopener noreferrer"};function m(k,h){const s=o("ExternalLinkIcon");return p(),i("div",null,[r,a("p",null,[n("临时表："),a("a",u,[n("https://learn.microsoft.com/zh-cn/sql/relational-databases/tables/temporal-tables?view=sql-server-ver16"),e(s)]),n(" 时态历史记录表："),a("a",d,[n("https://timdeschryver.dev/blog/entity-framework-features-i-wish-i-knew-earlier#temporal-history-table"),e(s)])])])}const b=t(l,[["render",m],["__file","shijian(lishi)biao.html.vue"]]),y=JSON.parse('{"path":"/orm/efcore/shijian(lishi)biao.html","title":"时间(历史)表","lang":"zh-CN","frontmatter":{"title":"时间(历史)表","lang":"zh-CN","date":"2023-07-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"shijian(lishi)biao","slug":"ep6go1q7d49xiqz6","docsId":"133728967","description":"概述 该方案仅支持SqlServer SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/shijian(lishi)biao.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"时间(历史)表"}],["meta",{"property":"og:description","content":"概述 该方案仅支持SqlServer SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-22T16:22:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-22T16:22:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"时间(历史)表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-22T16:22:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1690042937000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.59,"words":476},"filePathRelative":"orm/efcore/shijian(lishi)biao.md","localizedDate":"2023年7月19日","excerpt":"<h2>概述</h2>\\n<blockquote>\\n<p>该方案仅支持SqlServer</p>\\n</blockquote>\\n<p>SQL时态表很有用，因为它捕获 SQL 表中所有与数据相关的更改。其工作原理是创建一个新表（默认约定是表名后缀为History），其结构与原始表相同。在新创建的表中还将创建另外两列PeriodStart和PeriodEnd（这些是默认名称）。当原始表中的记录被更新时，旧版本将被插入到历史表中。当删除一条记录时，旧版本也会插入到历史表中。</p>\\n<p>通过这种方式跟踪更改，您可以捕获特定表的整个历史记录。这对于保留更改的审核日志很有用。</p>\\n<h2>操作</h2>","autoDesc":true}');export{b as comp,y as data};
