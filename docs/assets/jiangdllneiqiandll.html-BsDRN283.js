import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,b as n,e as s,f as c,d as l}from"./app-D8HBJYTp.js";const u={},i=l(`<h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>希望能够将第三方DLL构建到我的DLL中，而不是在可能的情况下将它们放在一起</p><h2 id="解决方案参考" tabindex="-1"><a class="header-anchor" href="#解决方案参考"><span>解决方案参考</span></a></h2><p>embeddedResourcePrefix是嵌入资源的字符串路径，它通常是程序集的名称，后跟包含资源的任何文件夹结构(例如&quot;MyComapny.MyProduct.MyAssembly.Resources“，如果dll位于项目中一个名为Resources的文件夹中)。它还假设dll具有.dll.resource扩展名。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">EnableDynamicLoadingForDlls</span><span class="token punctuation">(</span><span class="token class-name">Assembly</span> assemblyToLoadFrom<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> embeddedResourcePrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>AssemblyResolve <span class="token operator">+=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// had to add =&gt;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> resName <span class="token operator">=</span> embeddedResourcePrefix <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;.dll.resource&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Stream</span> input <span class="token operator">=</span> assemblyToLoadFrom<span class="token punctuation">.</span><span class="token function">GetManifestResourceStream</span><span class="token punctuation">(</span>resName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> input <span class="token operator">!=</span> <span class="token keyword">null</span>
                         <span class="token punctuation">?</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token function">StreamToBytes</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span>
                         <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                _log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Error dynamically loading dll: &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Had to add colon</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">StreamToBytes</span><span class="token punctuation">(</span><span class="token class-name">Stream</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> capacity <span class="token operator">=</span> input<span class="token punctuation">.</span>CanSeek <span class="token punctuation">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span>Length <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">MemoryStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">int</span></span> readLength<span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                readLength <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// had to change to buffer.Length</span>
                output<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>readLength <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> output<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我已经成功地完成了您所描述的操作，但是因为第三方DLL也是一个.NET程序集，所以我从不将它写到磁盘上，我只是从内存中加载它。 我将嵌入式资源程序集作为一个字节数组，如下所示：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token class-name">Assembly</span> resAssembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">LoadFile</span><span class="token punctuation">(</span>assemblyPathName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> assemblyData<span class="token punctuation">;</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">Stream</span> stream <span class="token operator">=</span> resAssembly<span class="token punctuation">.</span><span class="token function">GetManifestResourceStream</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            assemblyData <span class="token operator">=</span> <span class="token function">ReadBytesFromStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            stream<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我用Assembly.Load()加载数据。 最后，我向AppDomain.CurrentDomain.AssemblyResolve添加了一个处理程序，以便在类型加载器查看程序集时返回加载的程序集。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,9),r={href:"https://cloud.tencent.com/developer/ask/sof/124155",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[i,n("p",null,[s("参考资料："),n("a",r,[s("https://cloud.tencent.com/developer/ask/sof/124155"),c(a)])])])}const v=t(u,[["render",k],["__file","jiangdllneiqiandll.html.vue"]]),g=JSON.parse(`{"path":"/dotnet/chengxujicaozuo/jiangdllneiqiandll.html","title":"将DLL内嵌DLL","lang":"zh-CN","frontmatter":{"title":"将DLL内嵌DLL","lang":"zh-CN","date":"2023-08-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jiangdllneiqiandll","slug":"bzwrlb76r28nsfa1","docsId":"120401898","description":"需求 希望能够将第三方DLL构建到我的DLL中，而不是在可能的情况下将它们放在一起 解决方案参考 embeddedResourcePrefix是嵌入资源的字符串路径，它通常是程序集的名称，后跟包含资源的任何文件夹结构(例如\\"MyComapny.MyProduct.MyAssembly.Resources“，如果dll位于项目中一个名为Resources...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/chengxujicaozuo/jiangdllneiqiandll.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"将DLL内嵌DLL"}],["meta",{"property":"og:description","content":"需求 希望能够将第三方DLL构建到我的DLL中，而不是在可能的情况下将它们放在一起 解决方案参考 embeddedResourcePrefix是嵌入资源的字符串路径，它通常是程序集的名称，后跟包含资源的任何文件夹结构(例如\\"MyComapny.MyProduct.MyAssembly.Resources“，如果dll位于项目中一个名为Resources..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"将DLL内嵌DLL\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":2,"title":"解决方案参考","slug":"解决方案参考","link":"#解决方案参考","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.29,"words":386},"filePathRelative":"dotnet/chengxujicaozuo/jiangdllneiqiandll.md","localizedDate":"2023年8月12日","excerpt":"<h2>需求</h2>\\n<p>希望能够将第三方DLL构建到我的DLL中，而不是在可能的情况下将它们放在一起</p>\\n<h2>解决方案参考</h2>\\n<p>embeddedResourcePrefix是嵌入资源的字符串路径，它通常是程序集的名称，后跟包含资源的任何文件夹结构(例如\\"MyComapny.MyProduct.MyAssembly.Resources“，如果dll位于项目中一个名为Resources的文件夹中)。它还假设dll具有.dll.resource扩展名。</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>   <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">EnableDynamicLoadingForDlls</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Assembly</span> assemblyToLoadFrom<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> embeddedResourcePrefix<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        AppDomain<span class=\\"token punctuation\\">.</span>CurrentDomain<span class=\\"token punctuation\\">.</span>AssemblyResolve <span class=\\"token operator\\">+=</span> <span class=\\"token punctuation\\">(</span>sender<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// had to add =&gt;</span>\\n            <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> resName <span class=\\"token operator\\">=</span> embeddedResourcePrefix <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\".\\"</span> <span class=\\"token operator\\">+</span> args<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Split</span><span class=\\"token punctuation\\">(</span><span class=\\"token char\\">','</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\".dll.resource\\"</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Stream</span> input <span class=\\"token operator\\">=</span> assemblyToLoadFrom<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetManifestResourceStream</span><span class=\\"token punctuation\\">(</span>resName<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token keyword\\">return</span> input <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span>\\n                         <span class=\\"token punctuation\\">?</span> Assembly<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Load</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">StreamToBytes</span><span class=\\"token punctuation\\">(</span>input<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n                         <span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> ex<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                _log<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Error dynamically loading dll: \\"</span> <span class=\\"token operator\\">+</span> args<span class=\\"token punctuation\\">.</span>Name<span class=\\"token punctuation\\">,</span> ex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Had to add colon</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> <span class=\\"token function\\">StreamToBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Stream</span> input<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> capacity <span class=\\"token operator\\">=</span> input<span class=\\"token punctuation\\">.</span>CanSeek <span class=\\"token punctuation\\">?</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">)</span>input<span class=\\"token punctuation\\">.</span>Length <span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">using</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">MemoryStream</span> output <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">MemoryStream</span><span class=\\"token punctuation\\">(</span>capacity<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> readLength<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> buffer <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\"><span class=\\"token keyword\\">byte</span></span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">4096</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token keyword\\">do</span> <span class=\\"token punctuation\\">{</span>\\n                readLength <span class=\\"token operator\\">=</span> input<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Read</span><span class=\\"token punctuation\\">(</span>buffer<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> buffer<span class=\\"token punctuation\\">.</span>Length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// had to change to buffer.Length</span>\\n                output<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Write</span><span class=\\"token punctuation\\">(</span>buffer<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> readLength<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>readLength <span class=\\"token operator\\">!=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token keyword\\">return</span> output<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToArray</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{v as comp,g as data};
