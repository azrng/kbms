import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,f as t,d as e}from"./app-Bfb6-vFH.js";const i="/kbms/common/1620891320700-cdaee58d-cfff-4bb2-b590-2f1823c5e595.png",u="/kbms/common/1620891320662-0266f70c-87a8-4c05-9138-e498f773017b.png",k="/kbms/common/1620891320658-04447a86-2dd4-477e-b67c-37e5368b37aa.png",r={},d=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),m=n("p",null,"现如今大部分服务都会有用户输入，为了服务的正常运行，很多时候不得不针对输入进行敏感词的检测、替换。如果人工做这样的工作，不仅效率低，成本也高。所以，先让代码去处理输入，成为了经济方便的途径。",-1),v=n("h2",{id:"toolgood-words",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#toolgood-words"},[n("span",null,"ToolGood.Words")])],-1),b={href:"https://github.com/toolgood/ToolGood.Words",target:"_blank",rel:"noopener noreferrer"},g=n("img",{src:i,alt:"",loading:"lazy"},null,-1),y={href:"https://www.cnblogs.com/chenug/p/9848852.html",target:"_blank",rel:"noopener noreferrer"},h=e(`<h3 id="validationattribute" tabindex="-1"><a class="header-anchor" href="#validationattribute"><span>ValidationAttribute</span></a></h3><p>我们先定义两个简单的模型来绑定输入参数，一个是只要输入含有敏感词就会报错，一个是只要输入含有敏感词就会把相关的字符串替换为 * ，代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinganCheckInput</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MinGanCheck</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinganReplaceInput</span>
    <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MinGanReplace</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Text <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w=n("code",null,"[MinGanCheck]",-1),f=n("code",null,"[MinGanReplace]",-1),_={href:"https://docs.microsoft.com/zh-cn/dotnet/api/system.componentmodel.dataannotations.validationattribute?view=net-5.0",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"[Required]",-1),x=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 敏感词检查的特性，一匹配就抛异常</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinGanCheck</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidationAttribute</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValidationResult</span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NotImplementedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 敏感词替换</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Property<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinGanReplace</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ValidationAttribute</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValidationResult</span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ValidationResult<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是实现 ValidationAttribute 的功能，如果看过我写过的 aop 文章，这时候就不会直接在校验的方法中直接引入 <code>ToolGood.Words</code> ，这样会带来很大的耦合，也不便于我们替换为其他的敏感词组件或服务。所以我们只要再多一层抽象就可以了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 检查</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValidationResult</span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> validationContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMinGanCheckValidator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> validationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 替换</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">ValidationResult</span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            validationContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMinGanReplaceValidator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> validationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ValidationResult<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们分别实现 <code>IMinGanCheckValidator</code> 和 <code>IMinGanReplaceValidator</code> 的功能，也即检查和替换功能。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 检查</span>
   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinGanCheckValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMinGanCheckValidator</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">ValidationResult</span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">string</span></span> v<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>String<span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                   <span class="token comment">// 文字检查</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>MinGanProvider<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>IllegalWordsSearch<span class="token punctuation">.</span><span class="token function">ContainsAny</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token string">&quot;存在敏感词&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> validationContext<span class="token punctuation">.</span>MemberName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// 检查拼音</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>MinGanProvider<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>IllegalWordsSearch<span class="token punctuation">.</span><span class="token function">ContainsAny</span><span class="token punctuation">(</span>WordsHelper<span class="token punctuation">.</span><span class="token function">GetPinyin</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ValidationResult</span><span class="token punctuation">(</span><span class="token string">&quot;存在敏感词&quot;</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> validationContext<span class="token punctuation">.</span>MemberName <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// todo:其他变种</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> ValidationResult<span class="token punctuation">.</span>Success<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token comment">//替换</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinGanReplaceValidator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMinGanReplaceValidator</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Replace</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token class-name">ValidationContext</span> validationContext<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">is</span> <span class="token class-name"><span class="token keyword">string</span></span> v<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>String<span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    v <span class="token operator">=</span> MinGanProvider<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>IllegalWordsSearch<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">SetPropertyByName</span><span class="token punctuation">(</span>validationContext<span class="token punctuation">.</span>ObjectInstance<span class="token punctuation">,</span>validationContext<span class="token punctuation">.</span>MemberName<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">SetPropertyByName</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> <span class="token keyword">value</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> prop <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> BindingFlags<span class="token punctuation">.</span>Public <span class="token operator">|</span> BindingFlags<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> prop <span class="token operator">||</span> <span class="token operator">!</span>prop<span class="token punctuation">.</span>CanWrite<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            prop<span class="token punctuation">.</span><span class="token function">SetValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>MinGanProvider.Instance.IllegalWordsSearch</code> 是 <code>ToolGood.Words</code> 中的检测类单例，这里不详细展开。这样我们就有一个大概能用的敏感词检测组件了，然而在实际过程中，我们还需要对敏感词进行管理，特别是需要实时更新敏感词。</p><h3 id="敏感词热重载" tabindex="-1"><a class="header-anchor" href="#敏感词热重载"><span>敏感词热重载</span></a></h3><p>以 json 配置文件存放敏感词为例，只需要配置热重载就行了。 首先是 <code>Program.cs</code> 文件中让 json 配置文件热重载。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ConfigureAppConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">(</span>builderContext<span class="token punctuation">,</span> config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    config<span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">&quot;IllegalKeywords.json&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">optional</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">reloadOnChange</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 配置可热重载</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是在 <code>Startup.cs</code> 中文件处理重载事件。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>ChangeToken<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Configuration<span class="token punctuation">.</span><span class="token function">GetReloadToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 敏感词重载</span>
            <span class="token class-name"><span class="token keyword">var</span></span> keys<span class="token operator">=</span> Configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;IllegalKeywords&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Get</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>keys<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> allKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> k <span class="token keyword">in</span> keys<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    allKeys<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加词汇</span>
                    allKeys<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>WordsHelper<span class="token punctuation">.</span><span class="token function">ToTraditionalChinese</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加繁体</span>
                    allKeys<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>WordsHelper<span class="token punctuation">.</span><span class="token function">GetPinyin</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加拼音</span>
                <span class="token punctuation">}</span>
                IllegalWordsSearch<span class="token punctuation">.</span><span class="token function">SetKeywords</span><span class="token punctuation">(</span>allKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="效果" tabindex="-1"><a class="header-anchor" href="#效果"><span>效果</span></a></h3><p><img src="`+u+'" alt="" loading="lazy"><img src="'+k+'" alt="" loading="lazy"></p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>',14),V={href:"http://www.cnblogs.com/chenug",target:"_blank",rel:"noopener noreferrer"},G=n("strong",null,"张蘅水",-1),I={href:"https://www.cnblogs.com/chenug/p/ToolGood_Words_Sample.html",target:"_blank",rel:"noopener noreferrer"};function T(z,S){const a=o("ExternalLinkIcon");return c(),l("div",null,[d,m,v,n("p",null,[s("首先我们要使用的开源组件是 "),n("a",b,[s("ToolGood.Words"),t(a)]),g,s(" 通过简单的了解，我们可以知道它可以针对敏感词及其拼音、跳词等变形进行检测，在实际的应用场景中能满足大部分的需求。 具体的用法在这里不做过多的介绍，接下来我们需要做的事情是如何在现有代码中快速且方便的情况下接入敏感词组件。很显然，如果我们按照组件写的示例去操作，会发现需要在现有的代码中进行大量重构的操作，这显然会累垮 VS 。熟悉我的朋友首先就会想到使用 AOP 的方式去优化处理。（这里不过多介绍AOP，如果想了解更多，请移步 "),n("a",y,[s("C## 中使用面向切面编程（AOP）中实践代码整洁"),t(a)]),s(" )")]),h,n("p",null,[s("其中 "),w,s(" 和 "),f,s(" 是我们定义的特性标记，将其继承 "),n("a",_,[s("ValidationAttribute"),t(a)]),s("，就和我们常用的 "),C,s(" 一样方便，哪里敏感点哪里。")]),x,n("blockquote",null,[n("p",null,[s("作者："),n("a",V,[G,t(a)]),n("a",I,[s("https://www.cnblogs.com/chenug/p/ToolGood_Words_Sample.html"),t(a)])])])])}const M=p(r,[["render",T],["__file","mingancizujian.html.vue"]]),R=JSON.parse('{"path":"/middleware/fenci/mingancizujian.html","title":"敏感词组件","lang":"zh-CN","frontmatter":{"title":"敏感词组件","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"mingancizujian","slug":"avllbk","docsId":"45236132","description":"概述 现如今大部分服务都会有用户输入，为了服务的正常运行，很多时候不得不针对输入进行敏感词的检测、替换。如果人工做这样的工作，不仅效率低，成本也高。所以，先让代码去处理输入，成为了经济方便的途径。 ToolGood.Words 首先我们要使用的开源组件是 ToolGood.Words 通过简单的了解，我们可以知道它可以针对敏感词及其拼音、跳词等变形进行...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/fenci/mingancizujian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"敏感词组件"}],["meta",{"property":"og:description","content":"概述 现如今大部分服务都会有用户输入，为了服务的正常运行，很多时候不得不针对输入进行敏感词的检测、替换。如果人工做这样的工作，不仅效率低，成本也高。所以，先让代码去处理输入，成为了经济方便的途径。 ToolGood.Words 首先我们要使用的开源组件是 ToolGood.Words 通过简单的了解，我们可以知道它可以针对敏感词及其拼音、跳词等变形进行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1620891320700-cdaee58d-cfff-4bb2-b590-2f1823c5e595.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-31T06:13:40.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-31T06:13:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"敏感词组件\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1620891320700-cdaee58d-cfff-4bb2-b590-2f1823c5e595.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620891320662-0266f70c-87a8-4c05-9138-e498f773017b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1620891320658-04447a86-2dd4-477e-b67c-37e5368b37aa.png\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-31T06:13:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"ToolGood.Words","slug":"toolgood-words","link":"#toolgood-words","children":[{"level":3,"title":"ValidationAttribute","slug":"validationattribute","link":"#validationattribute","children":[]},{"level":3,"title":"敏感词热重载","slug":"敏感词热重载","link":"#敏感词热重载","children":[]},{"level":3,"title":"效果","slug":"效果","link":"#效果","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1706681620000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.54,"words":1061},"filePathRelative":"middleware/fenci/mingancizujian.md","localizedDate":"2023年9月24日","excerpt":"<h2>概述</h2>\\n<p>现如今大部分服务都会有用户输入，为了服务的正常运行，很多时候不得不针对输入进行敏感词的检测、替换。如果人工做这样的工作，不仅效率低，成本也高。所以，先让代码去处理输入，成为了经济方便的途径。</p>\\n<h2>ToolGood.Words</h2>\\n<p>首先我们要使用的开源组件是 <a href=\\"https://github.com/toolgood/ToolGood.Words\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ToolGood.Words</a>\\n<img src=\\"/common/1620891320700-cdaee58d-cfff-4bb2-b590-2f1823c5e595.png\\" alt=\\"\\" loading=\\"lazy\\">\\n通过简单的了解，我们可以知道它可以针对敏感词及其拼音、跳词等变形进行检测，在实际的应用场景中能满足大部分的需求。\\n具体的用法在这里不做过多的介绍，接下来我们需要做的事情是如何在现有代码中快速且方便的情况下接入敏感词组件。很显然，如果我们按照组件写的示例去操作，会发现需要在现有的代码中进行大量重构的操作，这显然会累垮 VS 。熟悉我的朋友首先就会想到使用 AOP 的方式去优化处理。（这里不过多介绍AOP，如果想了解更多，请移步 <a href=\\"https://www.cnblogs.com/chenug/p/9848852.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">C## 中使用面向切面编程（AOP）中实践代码整洁</a> )</p>","autoDesc":true}');export{M as comp,R as data};
