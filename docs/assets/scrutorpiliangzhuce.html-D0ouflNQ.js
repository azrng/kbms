import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as p,a as n,d as a,e,b as i}from"./app-DMmdIwn0.js";const r={},l=n("h2",{id:"介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#介绍"},[n("span",null,"介绍")])],-1),u={href:"https://github.com/khellang/Scrutor",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>引用nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Scrutor&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;4.2.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注册示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// Add services to the container.</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>selector <span class="token operator">=&gt;</span> selector
<span class="token comment">//加载指定类对应的程序集</span>
             <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">FromAssemblyOf</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Program<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token comment">//过滤程序集中需要注册的类，可以添加多个class</span>
             <span class="token punctuation">.</span><span class="token function">AddClasses</span><span class="token punctuation">(</span>classes <span class="token operator">=&gt;</span> classes<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Service&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
             <span class="token comment">//暴露匹配的接口</span>
             <span class="token punctuation">.</span><span class="token function">AsMatchingInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token comment">//暴露每一个接口  将实现的继承的所有接口都注入</span>
             <span class="token comment">//.AsImplementedInterfaces()</span>
             <span class="token comment">//暴露所有接口</span>
             <span class="token comment">//.As(t =&gt; t.GetInterfaces())</span>
             <span class="token comment">//暴露自己，因为是单一类型 没有接口,只有实现</span>
             <span class="token punctuation">.</span><span class="token function">AsSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token comment">//设置重复注册服务的替换策略</span>
             <span class="token comment">//.UsingRegistrationStrategy(RegistrationStrategy.Skip)</span>
             <span class="token comment">//设置生命周期 单例 作用域 瞬时</span>
             <span class="token punctuation">.</span><span class="token function">WithScopedLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用就是正常的构造函数注入方案。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,7),m={href:"https://cat.aiursoft.cn/post/2023/3/12/do-you-really-need-autofac-scrutor-a-lightweight-container-companion",target:"_blank",rel:"noopener noreferrer"};function h(g,k){const s=o("ExternalLinkIcon");return c(),p("div",null,[l,n("p",null,[a("Microsoft.Extensions.DependencyInjection 的程序集扫描和装饰扩展。 仓库地址："),n("a",u,[a("https://github.com/khellang/Scrutor"),e(s)])]),d,n("p",null,[a("你真的需要 Autofac 吗？Scrutor：更轻量的容器伴侣："),n("a",m,[a("https://cat.aiursoft.cn/post/2023/3/12/do-you-really-need-autofac-scrutor-a-lightweight-container-companion"),e(s)])])])}const b=t(r,[["render",h],["__file","scrutorpiliangzhuce.html.vue"]]),y=JSON.parse('{"path":"/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/scrutorpiliangzhuce.html","title":"Scrutor批量注册","lang":"zh-CN","frontmatter":{"title":"Scrutor批量注册","lang":"zh-CN","date":"2023-06-28T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"scrutorpiliangzhuce","slug":"rdtsat","docsId":"81667638","description":"介绍 Microsoft.Extensions.DependencyInjection 的程序集扫描和装饰扩展。 仓库地址：https://github.com/khellang/Scrutor 操作 引用nuget包 注册示例 使用就是正常的构造函数注入方案。 资料 你真的需要 Autofac 吗？Scrutor：更轻量的容器伴侣：https://c...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/scrutorpiliangzhuce.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Scrutor批量注册"}],["meta",{"property":"og:description","content":"介绍 Microsoft.Extensions.DependencyInjection 的程序集扫描和装饰扩展。 仓库地址：https://github.com/khellang/Scrutor 操作 引用nuget包 注册示例 使用就是正常的构造函数注入方案。 资料 你真的需要 Autofac 吗？Scrutor：更轻量的容器伴侣：https://c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Scrutor批量注册\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.89,"words":267},"filePathRelative":"dotnet/base/yilaizhuru/morenyilaizhuru/piliangzhuce/scrutorpiliangzhuce.md","localizedDate":"2023年6月28日","excerpt":"<h2>介绍</h2>\\n<p>Microsoft.Extensions.DependencyInjection 的程序集扫描和装饰扩展。\\n仓库地址：<a href=\\"https://github.com/khellang/Scrutor\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/khellang/Scrutor</a></p>\\n<h2>操作</h2>\\n<p>引用nuget包</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Scrutor\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"4.2.0\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,y as data};
