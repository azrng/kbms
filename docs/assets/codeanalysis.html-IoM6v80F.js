import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as s,e as n,f as t,d as l}from"./app-CBxp4zeL.js";const i={},r=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Microsoft.CodeAnalysis.CSharp is a package that provides support for C## in the .NET Compiler Platform (&quot;Roslyn&quot;).</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.CodeAnalysis.CSharp&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;4.5.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h3><p>此代码从包含 C## 代码的字符串创建一个CSharpSyntaxTree，然后CSharpCompilation使用该语法树创建一个对象。编译被命名为“MyAssembly”，并且对mscorlib程序集的引用被添加到它的引用中。语法树也被添加到编译的语法树中。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>CodeAnalysis<span class="token punctuation">.</span>CSharp</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> syntaxTree <span class="token operator">=</span> CSharpSyntaxTree<span class="token punctuation">.</span><span class="token function">ParseText</span><span class="token punctuation">(</span><span class="token string">&quot;class MyClass {}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> compilation <span class="token operator">=</span> CSharpCompilation<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;MyAssembly&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddReferences</span><span class="token punctuation">(</span>MetadataReference<span class="token punctuation">.</span><span class="token function">CreateFromFile</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddSyntaxTrees</span><span class="token punctuation">(</span>syntaxTree<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建方法并执行" tabindex="-1"><a class="header-anchor" href="#创建方法并执行"><span>创建方法并执行</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> syntaxTree <span class="token operator">=</span> CSharpSyntaxTree<span class="token punctuation">.</span><span class="token function">ParseText</span><span class="token punctuation">(</span><span class="token string">&quot;class MyClass { public int MyMethod() { return 42; }  static void Main(string[] args){}}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> compilation <span class="token operator">=</span> CSharpCompilation<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;MyAssembly&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddReferences</span><span class="token punctuation">(</span>MetadataReference<span class="token punctuation">.</span><span class="token function">CreateFromFile</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">object</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddSyntaxTrees</span><span class="token punctuation">(</span>syntaxTree<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> emitResult <span class="token operator">=</span> compilation<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>emitResult<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> diagnostic <span class="token keyword">in</span> emitResult<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>diagnostic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> myClassType <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;MyClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> instance <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>myClassType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> method <span class="token operator">=</span> myClassType<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;MyMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,11),u={href:"https://blog.csdn.net/wpwalter/article/details/79616402",target:"_blank",rel:"noopener noreferrer"},d={href:"https://lindexi.gitee.io/lindexi/post/Roslyn-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://blog.walterlv.com/post/compile-and-invoke-code-using-roslyn.html",target:"_blank",rel:"noopener noreferrer"};function m(h,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("Roslyn 入门：使用 Roslyn 静态分析现有项目中的代码："),s("a",u,[n("https://blog.csdn.net/wpwalter/article/details/79616402"),t(a)]),n(" Roslyn 静态分析："),s("a",d,[n("https://lindexi.gitee.io/lindexi/post/Roslyn-%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90.html"),t(a)]),n(" Roslyn 入门：使用 .NET Core 版本的 Roslyn 编译并执行跨平台的静态的源码："),s("a",k,[n("http://blog.walterlv.com/post/compile-and-invoke-code-using-roslyn.html"),t(a)])])])}const b=e(i,[["render",m],["__file","codeanalysis.html.vue"]]),f=JSON.parse('{"path":"/dotnet/csharp/roslyn/codeanalysis.html","title":"CodeAnalysis","lang":"zh-CN","frontmatter":{"title":"CodeAnalysis","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"codeanalysis","slug":"lh3ga1z9srv5122g","docsId":"116220678","description":"概述 Microsoft.CodeAnalysis.CSharp is a package that provides support for C## in the .NET Compiler Platform (\\"Roslyn\\"). 安装 操作 快速上手 此代码从包含 C## 代码的字符串创建一个CSharpSyntaxTree，然后CSharpCo...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/roslyn/codeanalysis.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"CodeAnalysis"}],["meta",{"property":"og:description","content":"概述 Microsoft.CodeAnalysis.CSharp is a package that provides support for C## in the .NET Compiler Platform (\\"Roslyn\\"). 安装 操作 快速上手 此代码从包含 C## 代码的字符串创建一个CSharpSyntaxTree，然后CSharpCo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CodeAnalysis\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[]},{"level":3,"title":"创建方法并执行","slug":"创建方法并执行","link":"#创建方法并执行","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.08,"words":325},"filePathRelative":"dotnet/csharp/roslyn/codeanalysis.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>Microsoft.CodeAnalysis.CSharp is a package that provides support for C## in the .NET Compiler Platform (\\"Roslyn\\").</p>\\n<h2>安装</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Microsoft.CodeAnalysis.CSharp\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"4.5.0\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,f as data};
