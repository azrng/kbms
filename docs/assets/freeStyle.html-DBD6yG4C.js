import{_ as i,a as l,b as o,c,d as p,e as r}from"./1624778192446-1a2fafd9-1de3-401b-afde-cccf8036dbd5-BqlgeqWK.js";import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as m,o as g,c as b,b as a,e,f as s,d as t}from"./app-D8HBJYTp.js";const h="/kbms/common/1624730955330-564e6e0f-b89e-4720-a4cd-43136753aec8.png",k="/kbms/common/1624731269367-be668e6d-0e82-480e-94de-9442020693bd.png",u="/kbms/common/1624731497867-cff66d34-fad8-4888-bc15-f517fa1424e8.png",_="/kbms/common/1624731600568-e5a1a4dc-30a0-4366-99ac-eca5465bd2fa.png",f="/kbms/common/1624777591978-460a7ff2-654f-4067-a42a-c46dbd31ba1c.png",v="/kbms/common/1624731664605-cd023e1c-af88-4be0-b194-76d62f13d89a.png",y="/kbms/common/1624731976317-34c56b36-b5aa-4aa8-bb43-f4d0cdad591d.png",x={},z=t('<blockquote><p>实现目的：通过jenkins在服务器部署一个简单的.Net程序</p></blockquote><h2 id="_1-登录并创建任务" tabindex="-1"><a class="header-anchor" href="#_1-登录并创建任务"><span>1. 登录并创建任务</span></a></h2><p>输入任务名称并选择构建一个自由风格的任务 <img src="'+h+'" alt="image.png" loading="lazy"></p><h2 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置"><span>2. 配置</span></a></h2><h3 id="_2-1-常规" tabindex="-1"><a class="header-anchor" href="#_2-1-常规"><span>2.1 常规</span></a></h3><p>设置描述和丢弃规则 <img src="'+k+'" alt="image.png" loading="lazy"></p><h3 id="_2-2-源码管理" tabindex="-1"><a class="header-anchor" href="#_2-2-源码管理"><span>2.2 源码管理</span></a></h3><p>配置源代码和凭据 <img src="'+u+'" alt="image.png" loading="lazy"></p><h3 id="_2-3-构建触发器" tabindex="-1"><a class="header-anchor" href="#_2-3-构建触发器"><span>2.3 构建触发器</span></a></h3><figure><img src="'+_+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_2-4-构建环境" tabindex="-1"><a class="header-anchor" href="#_2-4-构建环境"><span>2.4 构建环境</span></a></h3><p>设置每次构建的时候删除之前的文件(我主要是想保持文件最新，奈何没找到拉取代码的方式，参考文档里面有方法) <img src="'+f+'" alt="image.png" loading="lazy"></p><h3 id="_2-5-构建" tabindex="-1"><a class="header-anchor" href="#_2-5-构建"><span>2.5 构建</span></a></h3><p>通过执行shell脚本来来构建 <img src="'+v+`" alt="image.png" loading="lazy"> 通过编写shell脚本来部署.NetCore项目</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token assign-left variable">image_tag</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> +%Y%m%d%H%M%S<span class="token variable">\`</span></span><span class="token punctuation">;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$image_tag</span><span class="token punctuation">;</span>

<span class="token comment">## build镜像并且打上tag  dockerfile路径根据不同项目地址不同</span>
<span class="token function">docker</span> build <span class="token parameter variable">-f</span> ./Net5ByDocker/Dockerfile <span class="token parameter variable">-t</span> net5bydocker:<span class="token variable">$image_tag</span> <span class="token builtin class-name">.</span><span class="token punctuation">;</span>
<span class="token function">docker</span> images<span class="token punctuation">;</span>

<span class="token comment">## 停止并删除旧版 net5bydocker 容器</span>
<span class="token assign-left variable">CID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;net5bydocker&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span><span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable">$CID</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$CID</span>&quot;</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
  <span class="token function">docker</span> stop <span class="token variable">$CID</span>
  <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable">$CID</span>
<span class="token keyword">fi</span>

<span class="token comment">## 把刚刚build出来的镜像跑起来</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8012</span>:80 <span class="token parameter variable">--name</span> net5bydocker <span class="token parameter variable">-d</span> net5bydocker:<span class="token variable">$image_tag</span><span class="token punctuation">;</span>
<span class="token function">docker</span> <span class="token function">ps</span> -a<span class="token punctuation">;</span>
<span class="token function">docker</span> logs net5bydocker<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),w={href:"https://www.cnblogs.com/xiaoxiaotank/p/14762665.html",target:"_blank",rel:"noopener noreferrer"},N=t('<h3 id="_2-6-构建后操作" tabindex="-1"><a class="header-anchor" href="#_2-6-构建后操作"><span>2.6 构建后操作</span></a></h3><figure><img src="'+y+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="_3-开始构建" tabindex="-1"><a class="header-anchor" href="#_3-开始构建"><span>3. 开始构建</span></a></h2><p>点击保存后点击立即构建，就会在下面可以看到构建历史列表(出现蓝色代表构建成功，红色代表有问题) <img src="'+i+'" alt="image.png" loading="lazy"> 构建完成后我们查看linux服务器是否已经有刚部署项目的容器 <img src="'+l+'" alt="image.png" loading="lazy"></p><h3 id="_2-3-查看输出" tabindex="-1"><a class="header-anchor" href="#_2-3-查看输出"><span>2.3 查看输出</span></a></h3><p>通过在指定的build ID下选择输出控制台查看详细信息 <img src="'+o+`" alt="image.png" loading="lazy"></p><h3 id="_2-4-默认工作目录" tabindex="-1"><a class="header-anchor" href="#_2-4-默认工作目录"><span>2.4 默认工作目录</span></a></h3><p>通过输出信息我们可以看到jenkins默认的工作目录是我们配置的目录</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>/var/jenkins_home/workspace/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="_4-预览效果" tabindex="-1"><a class="header-anchor" href="#_4-预览效果"><span>4. 预览效果</span></a></h2><p>通过我们的shell配置，我们访问我们的swagger地址</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>http://192.168.1.14:8012/swagger/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+p+'" alt="image.png" loading="lazy"> 调用接口发现可以查询到数据 <img src="'+r+`" alt="image.png" loading="lazy"> 这点常见的错误就是连接数据库的地址配置有问题，如果这里有问题，可以通过命令去查看docker日志</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs 容器Id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-参考文档" tabindex="-1"><a class="header-anchor" href="#_5-参考文档"><span>5. 参考文档</span></a></h2>`,16),C={href:"https://www.cnblogs.com/yanjieli/p/10613212.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.cnblogs.com/xiaoxiaotank/p/14762665.html",target:"_blank",rel:"noopener noreferrer"};function q($,D){const n=m("ExternalLinkIcon");return g(),b("div",null,[z,a("blockquote",null,[a("p",null,[e("脚本参考自："),a("a",w,[e("https://www.cnblogs.com/xiaoxiaotank/p/14762665.html"),s(n)])])]),N,a("blockquote",null,[a("p",null,[e("GitLab+Jenkins持续集成+自动化部署： "),a("a",C,[e("https://www.cnblogs.com/yanjieli/p/10613212.html"),s(n)]),e(" xiaoxiaotank："),a("a",j,[e("https://www.cnblogs.com/xiaoxiaotank/p/14762665.html"),s(n)])])])])}const Z=d(x,[["render",q],["__file","freeStyle.html.vue"]]),A=JSON.parse('{"path":"/cloud/ciAndCd/jenkins/release/freeStyle.html","title":"构建自由风格任务","lang":"zh-CN","frontmatter":{"title":"构建自由风格任务","lang":"zh-CN","date":"2021-06-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["cloud"],"tag":["无"],"filename":"freeStyle","slug":"noa3fg","docsId":"32711347","description":"实现目的：通过jenkins在服务器部署一个简单的.Net程序 1. 登录并创建任务 输入任务名称并选择构建一个自由风格的任务 image.png 2. 配置 2.1 常规 设置描述和丢弃规则 image.png 2.2 源码管理 配置源代码和凭据 image.png 2.3 构建触发器 image.pngimage.png 2.4 构建环境 设置每次...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/cloud/ciAndCd/jenkins/release/freeStyle.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"构建自由风格任务"}],["meta",{"property":"og:description","content":"实现目的：通过jenkins在服务器部署一个简单的.Net程序 1. 登录并创建任务 输入任务名称并选择构建一个自由风格的任务 image.png 2. 配置 2.1 常规 设置描述和丢弃规则 image.png 2.2 源码管理 配置源代码和凭据 image.png 2.3 构建触发器 image.pngimage.png 2.4 构建环境 设置每次..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1624730955330-564e6e0f-b89e-4720-a4cd-43136753aec8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-24T08:50:00.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2021-06-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-24T08:50:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"构建自由风格任务\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1624730955330-564e6e0f-b89e-4720-a4cd-43136753aec8.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624731269367-be668e6d-0e82-480e-94de-9442020693bd.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624731497867-cff66d34-fad8-4888-bc15-f517fa1424e8.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624731600568-e5a1a4dc-30a0-4366-99ac-eca5465bd2fa.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624777591978-460a7ff2-654f-4067-a42a-c46dbd31ba1c.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624731664605-cd023e1c-af88-4be0-b194-76d62f13d89a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624731976317-34c56b36-b5aa-4aa8-bb43-f4d0cdad591d.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624777879835-1b27aa76-e67d-4c19-970d-6c6bc41d1da2.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624778314838-53227adc-9037-4752-8875-271f1b982d35.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624777991962-112f230d-92b1-4608-9489-cf644647412a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624778083657-db0fb380-43f7-47dd-89b9-5ccadd761e9f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624778166509-8aa42a2d-73e1-4e39-a170-c0fd964f5e1a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1624778192446-1a2fafd9-1de3-401b-afde-cccf8036dbd5.png\\"],\\"datePublished\\":\\"2021-06-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-24T08:50:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"1. 登录并创建任务","slug":"_1-登录并创建任务","link":"#_1-登录并创建任务","children":[]},{"level":2,"title":"2. 配置","slug":"_2-配置","link":"#_2-配置","children":[{"level":3,"title":"2.1 常规","slug":"_2-1-常规","link":"#_2-1-常规","children":[]},{"level":3,"title":"2.2 源码管理","slug":"_2-2-源码管理","link":"#_2-2-源码管理","children":[]},{"level":3,"title":"2.3 构建触发器","slug":"_2-3-构建触发器","link":"#_2-3-构建触发器","children":[]},{"level":3,"title":"2.4 构建环境","slug":"_2-4-构建环境","link":"#_2-4-构建环境","children":[]},{"level":3,"title":"2.5 构建","slug":"_2-5-构建","link":"#_2-5-构建","children":[]},{"level":3,"title":"2.6 构建后操作","slug":"_2-6-构建后操作","link":"#_2-6-构建后操作","children":[]}]},{"level":2,"title":"3. 开始构建","slug":"_3-开始构建","link":"#_3-开始构建","children":[{"level":3,"title":"2.3 查看输出","slug":"_2-3-查看输出","link":"#_2-3-查看输出","children":[]},{"level":3,"title":"2.4 默认工作目录","slug":"_2-4-默认工作目录","link":"#_2-4-默认工作目录","children":[]}]},{"level":2,"title":"4. 预览效果","slug":"_4-预览效果","link":"#_4-预览效果","children":[]},{"level":2,"title":"5. 参考文档","slug":"_5-参考文档","link":"#_5-参考文档","children":[]}],"git":{"createdTime":1695541854000,"updatedTime":1695545400000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.17,"words":651},"filePathRelative":"cloud/ciAndCd/jenkins/release/freeStyle.md","localizedDate":"2021年6月27日","excerpt":"<blockquote>\\n<p>实现目的：通过jenkins在服务器部署一个简单的.Net程序</p>\\n</blockquote>\\n<h2>1. 登录并创建任务</h2>\\n<p>输入任务名称并选择构建一个自由风格的任务\\n<img src=\\"/common/1624730955330-564e6e0f-b89e-4720-a4cd-43136753aec8.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>\\n<h2>2. 配置</h2>\\n<h3>2.1 常规</h3>\\n<p>设置描述和丢弃规则\\n<img src=\\"/common/1624731269367-be668e6d-0e82-480e-94de-9442020693bd.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{Z as comp,A as data};
