import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,d as n}from"./app-2OrQE2Jp.js";const o={},h=n('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>重构时候需要注意：重构的目的(why)、对象(what)、时机(when)、方法(how) 保证重构不出错的技术手段：单元测试和代码的可测试性。 不同规模的重构，重点讲解大规模高层次(比如系统、模块、代码结构、类与类之间的交互等重构)和小规模低层次重构(类、函数、变量等的重构)。</p><p>重构需要你能够洞察代码存在的坏味道或者设计上的不足，并且能够合理、熟练地利用设计思想、原则、模式、编程规范等理论知识解决这些问题。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="目的" tabindex="-1"><a class="header-anchor" href="#目的"><span>目的</span></a></h3><blockquote><p>为什么要重构(why)？</p></blockquote><p>在不改变软件可见行为的情况下(在保持功能不变的前提下)，使其更容易理解，修改成本更低。 保持代码质量不下降的有效手段，利用的就是面向对象、设计原则、设计模式、编程规范这些理论，修改设计上的不足，提高代码质量。</p><p>重构也是避免过度设计的有效手段，在我们维护代码的过程中，遇到问题了再对代码进行重构，能有效避免前期投入太多时间做过度设计。</p><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h3><blockquote><p>到底重构什么(what)？</p></blockquote><p>根据规模进行划分可以分为大规模高层次重构和小规模低层次重构。</p><p>大规模重构指的是对顶层代码设计的重构，包含：系统、模块、代码结构、类与类之间的关系等的重构，重构的手段有：分层、模块化、解耦、抽象可复用组件等等，这类重构利用的就是我们学过的设计思想、原则和模式。代码改动比较多，影响面比较大，所以难度也较大，耗时会比较长，引入bug风险也相对比较大。</p><p>小规模重构指的是对代码细节的重构，主要是针对类、函数、变量等代码级别的重构，比如规范命名、规范注释、消除超大类或者函数、提取重复代码等等。小型重构更多的是利用我们的编码规范。这种重构要修改的地方比较集中比较简单并且可操作性较强，耗时比较短，引入bug的风险相对来说也会比较小。</p><h3 id="时机" tabindex="-1"><a class="header-anchor" href="#时机"><span>时机</span></a></h3><blockquote><p>什么时候进行重构(when)?</p></blockquote><p>不能等到代码烂到一定程度后再去重构。需要探索一条可持续、可演进的方式。应该是持续重构，比如在工作中没事的事情，就可以看看项目中有哪些写得不够好的、可以优化的代码，主动去重构一下或者在修改、添加某一个功能代码的时候，也可以顺手把不符合编码规范、不好的设计重构一下。总之，就像把单元测试、Code Review作为开发的一部分，我们如果能够持续把持续重构也作为开发的一部分，成为一种开发习惯，对项目、对自己都会很有好处。</p><p>技术在更新、需求在变化、人员在流动，代码质量总会在下降，代码总会存在不完美，重构就会持续在进行。时刻具备持续重构的意思，才能避免在开发初期就过度设计，避免代码维护的过程中质量的下降。</p><blockquote><p>树立正确的代码质量观，保持持续重构的意识。</p></blockquote><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><blockquote><p>又该如何进行重构(how)？</p></blockquote><p>对于大型重构，因为涉及的模块、代码比较多，容易牵一发而动全身，所以在进行大型重构的时候，我们要提前做好完善的重构计划，按照计划分阶段来进行，每个阶段完成一小部分的代码重构，然后提交、测试、运行，发现没有问题之后，再继续进行下一个节阶段的重构，保证代码仓库的代码处于可运行、逻辑正确的状态。每个阶段要控制好重构影响的代码范围，考虑好如何兼容老的代码逻辑，必要的时候还得编写一些兼容过度代码。这样子才不会让每个阶段的重构耗时太长，不至于与新的功能开发相冲突。</p><p>大规模的重构一定是有组织、有计划的，并且是非常谨慎，需要有经验、熟悉业务的资深同事来主导。而小规模低层次的重构，因为影响的范围小，改动耗时端，所以只要你愿意并且有时间，随时都可以去做。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>读设计模式之美学习笔记</p>',24),i=[h];function l(p,r){return a(),t("div",null,i)}const g=e(o,[["render",l],["__file","chonggougaishu.html.vue"]]),u=JSON.parse('{"path":"/softwareDesign/highQualityCode/guifanyuchonggou/chonggougaishu.html","title":"重构概述","lang":"zh-CN","frontmatter":{"title":"重构概述","lang":"zh-CN","date":"2023-07-15T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"chonggougaishu","slug":"gzkt1g","docsId":"67108154","description":"介绍 重构时候需要注意：重构的目的(why)、对象(what)、时机(when)、方法(how) 保证重构不出错的技术手段：单元测试和代码的可测试性。 不同规模的重构，重点讲解大规模高层次(比如系统、模块、代码结构、类与类之间的交互等重构)和小规模低层次重构(类、函数、变量等的重构)。 重构需要你能够洞察代码存在的坏味道或者设计上的不足，并且能够合理、...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/guifanyuchonggou/chonggougaishu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"重构概述"}],["meta",{"property":"og:description","content":"介绍 重构时候需要注意：重构的目的(why)、对象(what)、时机(when)、方法(how) 保证重构不出错的技术手段：单元测试和代码的可测试性。 不同规模的重构，重点讲解大规模高层次(比如系统、模块、代码结构、类与类之间的交互等重构)和小规模低层次重构(类、函数、变量等的重构)。 重构需要你能够洞察代码存在的坏味道或者设计上的不足，并且能够合理、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重构概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":3,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":3,"title":"时机","slug":"时机","link":"#时机","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":4.15,"words":1244},"filePathRelative":"softwareDesign/highQualityCode/guifanyuchonggou/chonggougaishu.md","localizedDate":"2023年7月15日","excerpt":"<h2>介绍</h2>\\n<p>重构时候需要注意：重构的目的(why)、对象(what)、时机(when)、方法(how)\\n保证重构不出错的技术手段：单元测试和代码的可测试性。\\n不同规模的重构，重点讲解大规模高层次(比如系统、模块、代码结构、类与类之间的交互等重构)和小规模低层次重构(类、函数、变量等的重构)。</p>\\n<p>重构需要你能够洞察代码存在的坏味道或者设计上的不足，并且能够合理、熟练地利用设计思想、原则、模式、编程规范等理论知识解决这些问题。</p>\\n<h2>操作</h2>\\n<h3>目的</h3>\\n<blockquote>\\n<p>为什么要重构(why)？</p>\\n</blockquote>","autoDesc":true}');export{g as comp,u as data};
