import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,d as n}from"./app-Dg7YJ3hy.js";const a="/kbms/common/1610978154039-db4e98f3-2ca8-4ec7-a270-f636215c03d0.png",t="/kbms/common/1610978154043-57356cfb-70fc-4f3b-835f-af93efe9c915.png",l="/kbms/common/image-20231015172247928.png",r="/kbms/common/image-20231015172345203.png",o={},d=n('<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>EditorConfig 是帮助跨多个编辑器和 IDE 的从事同一项目的多个开发人员保持一致性编码风格的一个文本文件。EditorConfig 文件可以设置诸如缩进样式、选项卡宽度、行尾字符以及编码等，而无需考虑使用的编辑器或 IDE。向项目添加 EditorConfig 文件，可以强制对使用该项目的所有人员实施一致的编码风格。EditorConfig 设置优先于全局 Visual Studio 文本编辑器设置。由于这些设置包含在基本代码的文件中，因此能与基本代码一起移动。只要在 EditorConfig 兼容的编辑器中打开代码文件，就能实现文本编辑器设置。有关 EditorConfig 文件的详细信息，请参阅 EditorConfig.org(https://editorconfig.org/) 网站。</p><blockquote><p>常见的IDE支持：vs、rider、vscode等</p></blockquote><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="创建文件" tabindex="-1"><a class="header-anchor" href="#创建文件"><span>创建文件</span></a></h3><h4 id="通过vs创建" tabindex="-1"><a class="header-anchor" href="#通过vs创建"><span>通过VS创建</span></a></h4><blockquote><p>如果是VS2019，那么需要在 Visual Studio 中打开项目或解决方案，点击“帮助” &gt; “关于”，查看您的IDE版本是否是 16.7.1 或更高版本，如果不是请先升级。</p></blockquote><p>向项目或解决方案添加 EditorConfig。 根据要应用 .editorconfig 设置的对象（是解决方案中的所有项目还是其中一个项目），选择项目或解决方案节点。还可在项目或解决方案中选择一个文件夹，向其添加 .editorconfig 文件。 从菜单栏中，选择“项目” &gt; “添加新项”，或按 Ctrl+Shift+A ： 或者在“解决方案资源管理器”中右键单击项目、解决方案或文件夹，选择“添加” &gt; “新建 EditorConfig”： 添加完成后在 .editorconfig 文件中添加 file_header_template 项 <img src="'+a+'" alt="image.png"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>file_header_template = 添加文件头（add fileheader）示例程序\\n Copyright (c) [https://ittranslator.cn/](https://ittranslator.cn/)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>.editorconfig 中换行需要使用 Unix 换行符(\\n)来插入新行。 将光标置于任意 C## 或 Visual Basic 文件的第一行， 触发“快速操作和重构”菜单，选择“添加文件头”，如图： <img src="'+t+'" alt="image.png"></p><p>在“修复以下对象中的所有实例:”处可以选择 “文档”、“项目”或“解决方案”</p><h4 id="命令行创建" tabindex="-1"><a class="header-anchor" href="#命令行创建"><span>命令行创建</span></a></h4><ol><li>打开命令提示符或终端，然后导航到您的 .NET 项目或解决方案的根目录。</li><li>运行以下命令：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dotnet new editorconfig</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将会在您的项目中创建一个名为 <code>.editorconfig</code> 的文件。</p><blockquote><p>注意 .editorconfig 文件会应用到当前目录以及所有子目录的所有文件。如果您想要在特定目录中使用不同的编码样式，您可以在该目录中创建一个新的 .editorconfig 文件来覆盖上层目录中的设置。但是，建议仅使用一个 .editorconfig 文件，以避免不必要的混乱。</p></blockquote><h3 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化"><span>格式化</span></a></h3><h4 id="保存时格式化" tabindex="-1"><a class="header-anchor" href="#保存时格式化"><span>保存时格式化</span></a></h4><p>1、使用 Visual Studio 打开您的 .NET 项目或解决方案。点击 <strong>工具</strong> &gt; <strong>选项</strong> &gt; <strong>文本编辑器</strong> &gt; <strong>代码清理</strong>。选择 <strong>在保存时格式化代码</strong> 复选框。</p><p><img src="'+l+'" alt="image-20231015172247928"></p><p>2、点击 <strong>设置代码清理</strong>。您可以选择保存文件时要格式化的代码样式。点击 <strong>确定</strong>。</p><p><img src="'+r+`" alt="image-20231015172345203"></p><p>3、打开一个 .NET 文件，然后编辑它。当您保存文件时，Visual Studio 将会自动格式化代码。您也可以使用 <code>Ctrl + K, Ctrl + E</code> 快捷键来格式化代码。</p><h4 id="构建时格式化" tabindex="-1"><a class="header-anchor" href="#构建时格式化"><span>构建时格式化</span></a></h4><p>打开 <code>.csproj</code> 文件，然后添加以下代码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;PropertyGroup&gt;</span></span>
<span class="line"><span>  &lt;EnforceCodeStyleInBuild&gt;true&lt;/EnforceCodeStyleInBuild&gt;</span></span>
<span class="line"><span>&lt;/PropertyGroup&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您构建项目时，Visual Studio 将会自动格式化代码。</p><h4 id="使用-net-cli命令" tabindex="-1"><a class="header-anchor" href="#使用-net-cli命令"><span>使用.NET CLI命令</span></a></h4><p>打开命令提示符或终端，然后导航到您的 .NET 项目或解决方案的根目录。运行以下命令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dotnet format</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将会格式化您的项目中的所有文件。</p><p>以下是一些常用的命令：</p><ul><li>验证代码格式化，不做任何修改：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dotnet format --verify-no-changes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>格式化指定的项目或解决方案：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dotnet format ./SampleWebApi/SampleWebApi.sln</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>报告详细的格式化信息：</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dotnet format --verbosity diagnostic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>您可以找到更多关于 <code>dotnet format</code> 命令的信息，请参阅<a href="*https://learn.microsoft.com/dotnet/core/tools/dotnet-format">官方文档</a>。</p><h4 id="github-action强制格式化" tabindex="-1"><a class="header-anchor" href="#github-action强制格式化"><span>GitHub Action强制格式化</span></a></h4><p>GitHub Actions 是一个 CI/CD 平台，可以帮助我们自动化软件开发工作流程。您可以使用 GitHub Actions 在创建 Pull Request 时自动格式化代码。这样，您就可以在代码合并到主分支之前发现格式错误。</p><p>1、打开您的 .NET 项目或解决方案的 GitHub 存储库。点击 <strong>Actions</strong>。</p><p>2、在 <strong>Continuous integration</strong> 下，点击 <strong>.NET</strong> 任务的 <strong>Configure</strong> 按钮。</p><p>3、将 workflow 重命名为 <code>dotnet-format.yml</code> 或其他您喜欢的名称。</p><p>4、将以下代码复制到 <code>dotnet-format.yml</code> 文件中：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">.NET format</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  pull_request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  dotnet-format</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Setup .NET</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      uses</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">actions/setup-dotnet@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      with</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        dotnet-version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">8.0.x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Restore dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">dotnet restore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Format</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">dotnet format --verify-no-changes --verbosity diagnostic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请根据您的项目修改 <code>dotnet-version</code>。还可能需要修改项目或解决方案的文件夹路径。</p><p>在这个 YAML 文件中，我们定义了一个名为 <code>.NET format</code> 的 workflow。它将会在 <code>main</code> 分支上的 push 和 pull request 事件触发。它将会在 Ubuntu 上运行。它将会调用 <code>dotnet format</code> 命令来格式化代码。<code>--verify-no-changes --verbosity diagnostic</code> 参数将会验证代码格式化，不做任何修改，并报告详细的格式化信息。</p><p>5、点击 <strong>Start commit</strong> 按钮，提交修改。</p><p>6、创建一个新的 Pull Request。GitHub Actions 将会自动运行 <code>dotnet format</code> 命令来格式化代码。如果代码格式化失败，GitHub Actions 将会报告错误。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>官网资料：<a href="https://docs.microsoft.com/zh-cn/dotnet/fundamentals/code-analysis/style-rules/" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/fundamentals/code-analysis/style-rules/</a></p><p>使用 EditorConfig 和 GitHub Actions 强制执行.NET 代码格式化：https://mp.weixin.qq.com/s/M68QurvcyiGQLPztwSKhOQ</p>`,53),h=[d];function p(c,g){return e(),s("div",null,h)}const u=i(o,[["render",p],["__file","editorconfig.html.vue"]]),b=JSON.parse('{"path":"/soft/devTools/VisualStudio/editorconfig.html","title":"EditorConfig","lang":"zh-CN","frontmatter":{"title":"EditorConfig","lang":"zh-CN","date":"2023-07-22T00:00:00.000Z","publish":true,"author":"azrng","order":1,"category":["Visual Studio"],"tag":["无"],"filename":"editorconfig","description":"介绍 EditorConfig 是帮助跨多个编辑器和 IDE 的从事同一项目的多个开发人员保持一致性编码风格的一个文本文件。EditorConfig 文件可以设置诸如缩进样式、选项卡宽度、行尾字符以及编码等，而无需考虑使用的编辑器或 IDE。向项目添加 EditorConfig 文件，可以强制对使用该项目的所有人员实施一致的编码风格。EditorCon...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/soft/devTools/VisualStudio/editorconfig.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"EditorConfig"}],["meta",{"property":"og:description","content":"介绍 EditorConfig 是帮助跨多个编辑器和 IDE 的从事同一项目的多个开发人员保持一致性编码风格的一个文本文件。EditorConfig 文件可以设置诸如缩进样式、选项卡宽度、行尾字符以及编码等，而无需考虑使用的编辑器或 IDE。向项目添加 EditorConfig 文件，可以强制对使用该项目的所有人员实施一致的编码风格。EditorCon..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1610978154039-db4e98f3-2ca8-4ec7-a270-f636215c03d0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-15T10:26:04.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-07-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-15T10:26:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EditorConfig\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1610978154039-db4e98f3-2ca8-4ec7-a270-f636215c03d0.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1610978154043-57356cfb-70fc-4f3b-835f-af93efe9c915.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/image-20231015172247928.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/image-20231015172345203.png\\"],\\"datePublished\\":\\"2023-07-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-15T10:26:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"创建文件","slug":"创建文件","link":"#创建文件","children":[{"level":4,"title":"通过VS创建","slug":"通过vs创建","link":"#通过vs创建","children":[]},{"level":4,"title":"命令行创建","slug":"命令行创建","link":"#命令行创建","children":[]}]},{"level":3,"title":"格式化","slug":"格式化","link":"#格式化","children":[{"level":4,"title":"保存时格式化","slug":"保存时格式化","link":"#保存时格式化","children":[]},{"level":4,"title":"构建时格式化","slug":"构建时格式化","link":"#构建时格式化","children":[]},{"level":4,"title":"使用.NET CLI命令","slug":"使用-net-cli命令","link":"#使用-net-cli命令","children":[]},{"level":4,"title":"GitHub Action强制格式化","slug":"github-action强制格式化","link":"#github-action强制格式化","children":[]}]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1690010917000,"updatedTime":1697365564000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":4.83,"words":1450},"filePathRelative":"soft/devTools/VisualStudio/editorconfig.md","localizedDate":"2023年7月22日","excerpt":"<h2>介绍</h2>\\n<p>EditorConfig 是帮助跨多个编辑器和 IDE 的从事同一项目的多个开发人员保持一致性编码风格的一个文本文件。EditorConfig 文件可以设置诸如缩进样式、选项卡宽度、行尾字符以及编码等，而无需考虑使用的编辑器或 IDE。向项目添加 EditorConfig 文件，可以强制对使用该项目的所有人员实施一致的编码风格。EditorConfig 设置优先于全局 Visual Studio 文本编辑器设置。由于这些设置包含在基本代码的文件中，因此能与基本代码一起移动。只要在 EditorConfig 兼容的编辑器中打开代码文件，就能实现文本编辑器设置。有关 EditorConfig 文件的详细信息，请参阅 EditorConfig.org(https://editorconfig.org/) 网站。</p>","autoDesc":true}');export{u as comp,b as data};
