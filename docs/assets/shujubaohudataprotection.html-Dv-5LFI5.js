import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,b as n,e as s,f as t,d as i}from"./app-CBxp4zeL.js";const l={},u=i(`<blockquote><p>本文示例环境：vs2022、.Net6</p></blockquote><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>是一个简单、易用的加密API，可以用来保护数据，防止配置数据泄露。</p><h2 id="设计原则" tabindex="-1"><a class="header-anchor" href="#设计原则"><span>设计原则</span></a></h2><ul><li>配置应该尽可能简单，默认情况下应该可以零配置，开发人员可以直接运行。</li><li>提供一个简单的API，容易使用，并且不会轻易用错。</li><li>开发人员不需要专门学习如何管理这些密钥(公私钥)，系统应该自动选择算法和管理密钥的生命周期。理想情况下开发人员都不应该访问这些密钥的原始文件。</li><li>密钥应该是受保护的，不能被远程调用到。系统应该有一个自动保护机制并且可以自动应用。</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>ASP.NET Core提供了一套简单易用的API 用来保护数据。根据本地的一个key来生成加密码，然后再用这key来讲解密，如果key不一样，那么就解密失败，默认情况下这key的有效期是90天，下面就开始简单了解下DataProtection(非对称加密)。 默认.Net Core API框架已经引用了下面的包，无需再次安装</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.DataProtection&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.0.2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="基础了解" tabindex="-1"><a class="header-anchor" href="#基础了解"><span>基础了解</span></a></h3><p>注入到ServiceCollection</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//添加数据保护</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IDataProtector</span> _protector<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">TestController</span><span class="token punctuation">(</span><span class="token class-name">IDataProtectionProvider</span> provider<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _protector <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">CreateProtector</span><span class="token punctuation">(</span><span class="token string">&quot;biaoshi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//加密</span>
        <span class="token class-name"><span class="token keyword">var</span></span> protectedData <span class="token operator">=</span> _protector<span class="token punctuation">.</span><span class="token function">Protect</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>protectedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//解密</span>
        <span class="token class-name"><span class="token keyword">var</span></span> origin <span class="token operator">=</span> _protector<span class="token punctuation">.</span><span class="token function">Unprotect</span><span class="token punctuation">(</span>protectedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> origin<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>CfDJ8CXNH28p<span class="token operator">-</span>ZVLm46ClomPArGgkBb2tjI_5NBWUjKZpEYvJZuGOnCc35DNJuqxzpTXaRA2ooAFw_gMx7uXTqVIUkZpeTWLc2mWJGofAaS2QEXfs<span class="token operator">-</span>nSQGXU9qDOpJnsul5nMA
Hello World
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当前电脑加密后的内容，只能在当前电脑使用，因为是通过非对称加密的，私钥是系统内部帮你维护了。</p><blockquote><p>windows系统下私钥默认存放在 C:\\Users\\用户名\\AppData\\Local\\ASP.NET\\DataProtection-Keys</p></blockquote><h3 id="常用配置" tabindex="-1"><a class="header-anchor" href="#常用配置"><span>常用配置</span></a></h3><p>指定私钥存储位置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersistKeysToFileSystem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DirectoryInfo</span><span class="token punctuation">(</span><span class="token string">@&quot;\\\\Temp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改默认的保存时间，默认保存时间是90天。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">SetDefaultKeyLifetime</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，即使使用相同的物理密钥库，Data Protection 也会把不同的应用程序隔离开，因为这样可以防止从一个应用程序获取另外一个应用程序的密钥。所以如果是相同的应用程序，可以设置相同的应用程序名称:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">SetApplicationName</span><span class="token punctuation">(</span><span class="token string">&quot;app1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有时候需要禁用应用程序生成密钥，或者是说我只有一个程序用来生成或者管理密钥，其他程序只是负责读的话</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">DisableAutomaticKeyGeneration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改加密算法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseCryptographicAlgorithms</span><span class="token punctuation">(</span><span class="token keyword">new</span>  <span class="token constructor-invocation class-name">AuthenticatedEncryptorConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
       EncryptionAlgorithm <span class="token operator">=</span> EncryptionAlgorithm<span class="token punctuation">.</span>AES_256_CBC<span class="token punctuation">,</span>
       ValidationAlgorithm <span class="token operator">=</span> ValidationAlgorithm<span class="token punctuation">.</span>HMACSHA256
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">UseCustomCryptographicAlgorithms</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManagedAuthenticatedEncryptorConfiguration</span>
    <span class="token punctuation">{</span>
        EncryptionAlgorithmType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Aes</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        EncryptionAlgorithmKeySize <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span>
        ValidationAlgorithmType <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">HMACSHA256</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="私钥存储" tabindex="-1"><a class="header-anchor" href="#私钥存储"><span>私钥存储</span></a></h3><p>上面代码只是实现了单机部署，如果集群部署，比如k8s中的不同pod，生成的key分别保存在自己的pod里，那么外部访问又是随机分配的，这时就会频繁出现解密失败的情况，这就要集中管理key了，用redis或数据库都可以。</p><h4 id="redis方案" tabindex="-1"><a class="header-anchor" href="#redis方案"><span>Redis方案</span></a></h4><p>安装包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.DataProtection.StackExchangeRedis&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.0.2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddDataProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">PersistKeysToStackExchangeRedis</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sqlserver" tabindex="-1"><a class="header-anchor" href="#sqlserver"><span>SqlServer</span></a></h4><p>需要先创建表</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>DataProtectionKeys1<span class="token punctuation">]</span><span class="token punctuation">(</span>
  <span class="token punctuation">[</span>ID<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">]</span> IDENTITY<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">NOT</span> <span class="token keyword">NULL</span> PRIMARY KEY <span class="token punctuation">,</span>
  <span class="token punctuation">[</span>FriendlyName<span class="token punctuation">]</span> <span class="token punctuation">[</span>varchar<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>Xml<span class="token punctuation">]</span> <span class="token punctuation">[</span>text<span class="token punctuation">]</span> <span class="token keyword">NULL</span>
 <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要引用EFCore相关的包</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>DataProtection 
Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>DataProtection<span class="token punctuation">.</span>EntityFrameworkCore 
Microsoft<span class="token punctuation">.</span>EntityFrameworkCore 
Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>SqlServer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码要换成EF方式持久化key，要注入EF的Context，然后注入数据保护对象时指明持久化的方式</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>
<span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>DataProtection<span class="token punctuation">;</span>
<span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>DataProtection<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">;</span>
<span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">;</span>

var builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span>CreateBuilder<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>AddDbContext<span class="token operator">&lt;</span>DataProtContext<span class="token operator">&gt;</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
      options<span class="token punctuation">.</span>UseSqlServer<span class="token punctuation">(</span>builder<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>GetConnectionString<span class="token punctuation">(</span><span class="token string">&quot;DataProtDB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span>AddDataProtection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>PersistKeysToDbContext<span class="token operator">&lt;</span>DataProtContext<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var app <span class="token operator">=</span> builder<span class="token punctuation">.</span>Build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>MapGet<span class="token punctuation">(</span><span class="token string">&quot;/encrypt/{str}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IDataProtectionProvider provider<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>Program<span class="token operator">&gt;</span> logger<span class="token punctuation">,</span> <span class="token keyword">string</span> str<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
{
    var protector <span class="token operator">=</span> provider<span class="token punctuation">.</span>CreateProtector<span class="token punctuation">(</span><span class="token string">&quot;a.b.c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var sec <span class="token operator">=</span> protector<span class="token punctuation">.</span>Protect<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span>LogInformation<span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;加密：&quot;</span> <span class="token operator">+</span> sec<span class="token punctuation">;</span>
}<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span>MapGet<span class="token punctuation">(</span><span class="token string">&quot;/decrypt/{sec}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IDataProtectionProvider provider<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>Program<span class="token operator">&gt;</span> logger<span class="token punctuation">,</span> <span class="token keyword">string</span> sec<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
{
    var protector <span class="token operator">=</span> provider<span class="token punctuation">.</span>CreateProtector<span class="token punctuation">(</span><span class="token string">&quot;a.b.c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var str <span class="token operator">=</span> protector<span class="token punctuation">.</span>Unprotect<span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span>LogInformation<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;解密：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>
}<span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span>Run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

class DataProtContext <span class="token operator">:</span> DbContext<span class="token punctuation">,</span> IDataProtectionKeyContext
{
    <span class="token keyword">public</span> DbSet<span class="token operator">&lt;</span>DataProtectionKey<span class="token operator">&gt;</span> DataProtectionKeys { get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> }

    <span class="token keyword">public</span> DataProtContext<span class="token punctuation">(</span>DbContextOptions<span class="token operator">&lt;</span>DataProtContext<span class="token operator">&gt;</span> options<span class="token punctuation">)</span>
          <span class="token operator">:</span> base<span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    {}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果生成的加密串需要时效性，需要把生成的Protector转成TimeLimitedDataProtector来加解密，如下：</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code>app<span class="token punctuation">.</span>MapGet<span class="token punctuation">(</span><span class="token string">&quot;/encrypt/{str}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IDataProtectionProvider provider<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>Program<span class="token operator">&gt;</span> logger<span class="token punctuation">,</span> <span class="token keyword">string</span> str<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
{
    var protector <span class="token operator">=</span> provider<span class="token punctuation">.</span>CreateProtector<span class="token punctuation">(</span><span class="token string">&quot;a.b.c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var sec <span class="token operator">=</span> protector<span class="token punctuation">.</span>ToTimeLimitedDataProtector<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Protect<span class="token punctuation">(</span>str<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span>FromSeconds<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span>LogInformation<span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;加密：&quot;</span> <span class="token operator">+</span> sec<span class="token punctuation">;</span>
}<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span>MapGet<span class="token punctuation">(</span><span class="token string">&quot;/decrypt/{sec}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>IDataProtectionProvider provider<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>Program<span class="token operator">&gt;</span> logger<span class="token punctuation">,</span> <span class="token keyword">string</span> sec<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
{
    var protector <span class="token operator">=</span> provider<span class="token punctuation">.</span>CreateProtector<span class="token punctuation">(</span><span class="token string">&quot;a.b.c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var str <span class="token operator">=</span> protector<span class="token punctuation">.</span>ToTimeLimitedDataProtector<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Unprotect<span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span>LogInformation<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;解密：&quot;</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>
}<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加密串过期提交，会直接报错。</p>`,45),r={href:"https://mp.weixin.qq.com/s/A7uL_fhqXVzJeU-oRxuaGA",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料"},[n("span",null,"资料")])],-1),k={href:"https://mp.weixin.qq.com/s/DMWgv3pk7PQVUpAxUSMwyg",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("示例来自："),n("a",r,[s("https://mp.weixin.qq.com/s/A7uL_fhqXVzJeU-oRxuaGA"),t(a)])])]),d,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/DMWgv3pk7PQVUpAxUSMwyg"),t(a)]),s(" | 在Asp.NET Core中如何优雅的管理用户机密数据 ASP.NET Core 数据保护（Data Protection 集群场景）【上】: https://www.cnblogs.com/savorboard/p/dotnetcore-data-protection.html ASP.NET Core 数据保护（Data Protection 集群场景）【中】: https://www.cnblogs.com/savorboard/p/dotnet-core-data-protection.html ASP.NET Core 数据保护（Data Protection 集群场景）【下】: https://www.cnblogs.com/savorboard/p/dotnetcore-data-protected-farm.html")])])}const y=e(l,[["render",v],["__file","shujubaohudataprotection.html.vue"]]),q=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shujubaohudataprotection.html","title":"数据保护DataProtection","lang":"zh-CN","frontmatter":{"title":"数据保护DataProtection","lang":"zh-CN","date":"2022-03-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"shujubaohudataprotection","slug":"zn3o7v","docsId":"30080403","description":"本文示例环境：vs2022、.Net6 需求 是一个简单、易用的加密API，可以用来保护数据，防止配置数据泄露。 设计原则 配置应该尽可能简单，默认情况下应该可以零配置，开发人员可以直接运行。 提供一个简单的API，容易使用，并且不会轻易用错。 开发人员不需要专门学习如何管理这些密钥(公私钥)，系统应该自动选择算法和管理密钥的生命周期。理想情况下开发人...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shujubaohudataprotection.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据保护DataProtection"}],["meta",{"property":"og:description","content":"本文示例环境：vs2022、.Net6 需求 是一个简单、易用的加密API，可以用来保护数据，防止配置数据泄露。 设计原则 配置应该尽可能简单，默认情况下应该可以零配置，开发人员可以直接运行。 提供一个简单的API，容易使用，并且不会轻易用错。 开发人员不需要专门学习如何管理这些密钥(公私钥)，系统应该自动选择算法和管理密钥的生命周期。理想情况下开发人..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据保护DataProtection\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":2,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础了解","slug":"基础了解","link":"#基础了解","children":[]},{"level":3,"title":"常用配置","slug":"常用配置","link":"#常用配置","children":[]},{"level":3,"title":"私钥存储","slug":"私钥存储","link":"#私钥存储","children":[{"level":4,"title":"Redis方案","slug":"redis方案","link":"#redis方案","children":[]},{"level":4,"title":"SqlServer","slug":"sqlserver","link":"#sqlserver","children":[]}]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.83,"words":1150},"filePathRelative":"dotnet/anquanhebiaoshi/shujubaohudataprotection.md","localizedDate":"2022年3月5日","excerpt":"<blockquote>\\n<p>本文示例环境：vs2022、.Net6</p>\\n</blockquote>\\n<h2>需求</h2>\\n<p>是一个简单、易用的加密API，可以用来保护数据，防止配置数据泄露。</p>\\n<h2>设计原则</h2>\\n<ul>\\n<li>配置应该尽可能简单，默认情况下应该可以零配置，开发人员可以直接运行。</li>\\n<li>提供一个简单的API，容易使用，并且不会轻易用错。</li>\\n<li>开发人员不需要专门学习如何管理这些密钥(公私钥)，系统应该自动选择算法和管理密钥的生命周期。理想情况下开发人员都不应该访问这些密钥的原始文件。</li>\\n<li>密钥应该是受保护的，不能被远程调用到。系统应该有一个自动保护机制并且可以自动应用。</li>\\n</ul>","autoDesc":true}');export{y as comp,q as data};
