import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-DMmdIwn0.js";const p={},e=t(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>有些情况下，需要在程序运行期间动态执行C#代码，比如，将某些经常改变的算法保存在配置文件中，在运行期间从配置文件中读取并执行运算。这时可以使用C#脚本来完成这些工作。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>使用C#脚本需要引用库Microsoft.CodeAnalysis.CSharp.Scripting</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.CodeAnalysis.CSharp.Scripting&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;4.5.0&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面是一些示例：最基本的用法是计算算数表达式：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;测试基本算数表达式:(1+2)*3/4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> res <span class="token operator">=</span> <span class="token keyword">await</span> CSharpScript<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;(1+2)*3/4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要使用比较复杂的函数，可以使用WithImports引入名称空间：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;测试Math函数:Sqrt(2)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> <span class="token keyword">await</span> CSharpScript<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Sqrt(2)&quot;</span><span class="token punctuation">,</span> ScriptOptions<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">WithImports</span><span class="token punctuation">(</span><span class="token string">&quot;System.Math&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不仅是计算函数，其它函数比如IO，也是可以的：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@&quot;测试输入输出函数:Directory.GetCurrentDirectory()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> <span class="token keyword">await</span> CSharpScript<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Directory.GetCurrentDirectory()&quot;</span><span class="token punctuation">,</span>
     ScriptOptions<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">WithImports</span><span class="token punctuation">(</span><span class="token string">&quot;System.IO&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串函数可以直接调用：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@&quot;测试字符串函数:&quot;&quot;Hello&quot;&quot;.Length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> <span class="token keyword">await</span> CSharpScript<span class="token punctuation">.</span><span class="token function">EvaluateAsync</span><span class="token punctuation">(</span><span class="token string">@&quot;&quot;&quot;Hello&quot;&quot;.Length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要传递变量，可以将类的实例作为上下文进行传递，下面的例子中使用了Student类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@&quot;测试变量:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span> <span class="token punctuation">{</span> Height <span class="token operator">=</span> <span class="token number">1.75M</span><span class="token punctuation">,</span> Weight <span class="token operator">=</span> <span class="token number">75</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> CSharpScript<span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token string">&quot;BMI=Weight/Height/Height&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">globals</span><span class="token punctuation">:</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>BMI<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类Student:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Decimal</span> Height <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Decimal</span> Weight <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Decimal</span> BMI <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Status <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重复使用的脚本可以复用：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@&quot;测试脚本编译复用:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> scriptBMI <span class="token operator">=</span> CSharpScript<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Decimal<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Weight/Height/Height&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">globalsType</span><span class="token punctuation">:</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scriptBMI<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> scriptBMI<span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Student</span> <span class="token punctuation">{</span> Height <span class="token operator">=</span> <span class="token number">1.72M</span><span class="token punctuation">,</span> Weight <span class="token operator">=</span> <span class="token number">65</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在脚本中也可以定义函数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@&quot;测试脚本中定义函数:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> script1 <span class="token operator">=</span> <span class="token string">&quot;decimal Bmi(decimal w,decimal h) { return w/h/h; } return Bmi(Weight,Height);&quot;</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> CSharpScript<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">EvaluateAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>script1<span class="token punctuation">,</span> <span class="token named-parameter punctuation">globals</span><span class="token punctuation">:</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在脚本中也可以定义变量：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">@&quot;测试脚本中的变量:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> script <span class="token operator">=</span>  CSharpScript<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;int x=1;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script <span class="token operator">=</span>  script<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span><span class="token string">&quot;int y=1;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
script <span class="token operator">=</span>  script<span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span><span class="token string">&quot;return x+y;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> script<span class="token punctuation">.</span><span class="token function">RunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>完整的实例可以从github下载：https://github.com/zhenl/CSharpScriptDemo 转自：寻找无名的特质 链接：cnblogs.com/zhenl/p/15714453.html</p><p>https://github.com/b3b00/csly | b3b00/csly: a C# embeddable lexer and parser generator (.Net core)</p>`,26),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","scripting.html.vue"]]),d=JSON.parse('{"path":"/dotnet/csharp/roslyn/scripting.html","title":"C#脚本库Scripting","lang":"zh-CN","frontmatter":{"title":"C#脚本库Scripting","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"c#jiaobenkuscripting","slug":"zxkp07","docsId":"69445795","description":"介绍 有些情况下，需要在程序运行期间动态执行C#代码，比如，将某些经常改变的算法保存在配置文件中，在运行期间从配置文件中读取并执行运算。这时可以使用C#脚本来完成这些工作。 示例 使用C#脚本需要引用库Microsoft.CodeAnalysis.CSharp.Scripting 下面是一些示例：最基本的用法是计算算数表达式： 如果需要使用比较复杂的函...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/roslyn/scripting.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"C#脚本库Scripting"}],["meta",{"property":"og:description","content":"介绍 有些情况下，需要在程序运行期间动态执行C#代码，比如，将某些经常改变的算法保存在配置文件中，在运行期间从配置文件中读取并执行运算。这时可以使用C#脚本来完成这些工作。 示例 使用C#脚本需要引用库Microsoft.CodeAnalysis.CSharp.Scripting 下面是一些示例：最基本的用法是计算算数表达式： 如果需要使用比较复杂的函..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T13:43:35.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-25T13:43:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C#脚本库Scripting\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-25T13:43:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700919815000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.79,"words":537},"filePathRelative":"dotnet/csharp/roslyn/scripting.md","localizedDate":"2023年10月22日","excerpt":"<h2>介绍</h2>\\n<p>有些情况下，需要在程序运行期间动态执行C#代码，比如，将某些经常改变的算法保存在配置文件中，在运行期间从配置文件中读取并执行运算。这时可以使用C#脚本来完成这些工作。</p>\\n<h2>示例</h2>\\n<p>使用C#脚本需要引用库Microsoft.CodeAnalysis.CSharp.Scripting</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span><span class=\\"token class-name\\">PackageReference</span> Include<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Microsoft.CodeAnalysis.CSharp.Scripting\\"</span> Version<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"4.5.0\\"</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
