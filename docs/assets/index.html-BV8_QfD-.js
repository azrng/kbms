import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as r,b as e,e as n,f as t,d as s}from"./app-D8HBJYTp.js";const d={},c=e("h2",{id:"平台",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#平台"},[e("span",null,"平台")])],-1),p={href:"http://www.loongnix.cn/zh/api/dotnet/",target:"_blank",rel:"noopener noreferrer"},u=s('<h2 id="部署模式选择" tabindex="-1"><a class="header-anchor" href="#部署模式选择"><span>部署模式选择</span></a></h2><p>ASP.NetCore目前的部署方式分为三种，独立发布（SCD）、框架依赖（FDD）、依赖框架的可执行文件（FDE）。其中FDD和FDE差别不大，不予讨论</p><h3 id="独立部署" tabindex="-1"><a class="header-anchor" href="#独立部署"><span>独立部署</span></a></h3><p>不依赖目标系统上存在的共享组件。所有的组件（netcore库和netcore运行时）都包含在应用程序中，并且独立于其他netcore应用程序。</p><h3 id="框架依赖" tabindex="-1"><a class="header-anchor" href="#框架依赖"><span>框架依赖</span></a></h3><p>依赖目标系统上存在共享系统版本的netcore。</p><h3 id="选择哪种部署方式" tabindex="-1"><a class="header-anchor" href="#选择哪种部署方式"><span>选择哪种部署方式</span></a></h3><p>简单的说框架依赖和独立发布的区别就是装不装 .Net core运行时的区别。装上运行时之后，很多<code>.net core</code>的库都能共用，否则就需要另外打包进去，所以独立发布的程序体积会比框架依赖大得多。本人以<code>asp.net core</code>默认样板应用实测，独立发布的大小约为100M，框架依赖的大小约为5M。 独立发布的话不需要安装<code>.net core</code>的运行时，而框架依赖则需要安装<code>.net core</code> 运行时或者直接安装SDK。</p><h2 id="cli发布" tabindex="-1"><a class="header-anchor" href="#cli发布"><span>CLI发布</span></a></h2>',9),h={href:"https://learn.microsoft.com/zh-cn/dotnet/core/deploying/deploy-with-cli",target:"_blank",rel:"noopener noreferrer"},m=s(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 剪裁</span>
dotnet publish <span class="token parameter variable">-c</span> Release <span class="token parameter variable">-r</span> win-x64 /p:PublishSingleFile<span class="token operator">=</span>true /p:PublishTrimmed<span class="token operator">=</span>true /p:PublishReadyToRun<span class="token operator">=</span>true /p:PublishReadyToRunShowWarnings<span class="token operator">=</span>true /p:UseAppHost<span class="token operator">=</span>true  /p:IncludeNativeLibrariesForSelfExtract<span class="token operator">=</span>true /p:SelfContained<span class="token operator">=</span>true --self-contained <span class="token boolean">true</span>

<span class="token comment"># 禁用剪裁</span>
dotnet publish <span class="token parameter variable">-c</span> Release <span class="token parameter variable">-r</span> win-x64  /p:PublishSingleFile<span class="token operator">=</span>true /p:PublishTrimmed<span class="token operator">=</span>false /p:PublishReadyToRun<span class="token operator">=</span>true /p:IncludeNativeLibrariesForSelfExtract<span class="token operator">=</span>true --self-contained <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>-r</code> 参数表示发布目标平台，<code>win-x64</code> 代表 Windows 64 位。你可以根据需要替换为其他平台。 dotnet publish：这是用于执行发布操作的 .NET CLI 命令。</p>`,2),b=s("<li><code>dotnet publish</code>：这是用于执行发布操作的 .NET CLI 命令。</li><li><code>-c Release</code>：指定发布的配置为 Release 模式，这将优化应用程序的性能和大小。</li><li><code>-r win-x64</code>：指定目标运行时为 Windows x64 平台，发布输出将为该平台准备。</li><li><code>/p:PublishSingleFile=true</code>：设置发布输出为单个可执行文件，将应用程序和其依赖项打包为一个文件。</li><li><code>/p:PublishTrimmed=true</code>：启用发布优化，删除未使用的依赖项和代码来减小应用程序的大小。</li><li><code>/p:PublishReadyToRun=true</code>：使用 ReadyToRun 编译器进行发布，可以提高应用程序的启动性能。</li><li><code>/p:PublishReadyToRunShowWarnings=true</code>：在使用 ReadyToRun 编译器进行发布时显示警告信息。</li><li><code>/p:IncludeNativeLibrariesForSelfExtract=true</code>：包含本机库以支持自解压功能，以便在运行时自动提取依赖项。</li>",8),v=e("code",null,"/p:UseAppHost=true",-1),g={href:"https://learn.microsoft.com/zh-cn/dotnet/core/deploying/deploy-with-cli#framework-dependent-deployment",target:"_blank",rel:"noopener noreferrer"},k=e("h3",{id:"裁剪部署",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#裁剪部署"},[e("span",null,"裁剪部署")])],-1),x={href:"https://learn.microsoft.com/zh-cn/dotnet/core/deploying/trimming/trim-self-contained",target:"_blank",rel:"noopener noreferrer"},f=s(`<p>CLI发布命令，以下示例将 Windows 应用发布为经过剪裁的独立应用程序</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>dotnet publish <span class="token operator">-</span>r win<span class="token operator">-</span>x64 <span class="token operator">-</span>c Release

dotnet publish <span class="token operator">-</span>r win<span class="token operator">-</span>x64 <span class="token operator">-</span>c Release <span class="token operator">-</span>p<span class="token punctuation">:</span>PublishTrimmed<span class="token operator">=</span><span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dotnet-packaging" tabindex="-1"><a class="header-anchor" href="#dotnet-packaging"><span>dotnet-packaging</span></a></h2><p>.NET Core 打包工具，100 % 使用 C# 开发，它包含了 .NET Core CLI 的命令行扩展，所以可以轻松为 .NET Core 应用程序创建部署包，比如 windows msi 文件、 Linux 安装程序 deb、 macOS 安装程序 pkg 等等</p><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 创建 macOS 安装程序</span>
dotnet pkg

<span class="token comment"># 创建 Ubuntu/Debian Linux 安装程序</span>
dotnet deb

<span class="token comment"># 创建 .zip 文件</span>
dotnet <span class="token function">zip</span>

<span class="token comment"># 创建 Windows Installer (msi) 包</span>
dotnet msi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h3><p>首先，安装全局 .NET 打包工具。如果您只打算使用一个工具，则无需安装所有工具。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>dotnet tool install --global dotnet-zip
dotnet tool install --global dotnet-tarball
dotnet tool install --global dotnet-rpm
dotnet tool install --global dotnet-deb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，在您的项目目录中，运行命令将该工具添加到您的项目中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>dotnet <span class="token function">zip</span> <span class="token function">install</span>
dotnet tarball <span class="token function">install</span>
dotnet <span class="token function">rpm</span> <span class="token function">install</span>
dotnet deb <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包ubuntu包教程" tabindex="-1"><a class="header-anchor" href="#打包ubuntu包教程"><span>打包Ubuntu包教程</span></a></h3><p>让我们创建一个新的控制台应用程序并将其打包为 .deb 文件，以便我们可以将其安装在 Ubuntu 计算机上：</p><p>首先，创建您的控制台应用程序：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>mkdir my-app
cd my-app
dotnet new console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，安装 dotnet-deb 实用程序：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>dotnet tool install --global dotnet-deb
dotnet deb install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以了，让我们将您的应用程序打包为 deb 包：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>dotnet deb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在有一个可以安装的 bin\\Debug\\netcoreapp3.1\\my-app.1.0.0.deb 文件：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>apt-get install bin\\Debug\\netcoreapp3.1\\my-app.1.0.0.deb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您的应用程序已安装到 /usr/local/share/my-app 中。通过运行 /usr/local/share/my-app/my-app 来调用它：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/usr/local/share/my-app/my-app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如您所见，dotnet-packaging 使用非常简单，您可以使用它轻松的创建各个平台的安装包，只需要一行命令即可。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,25),_={href:"https://mp.weixin.qq.com/s/uZU0vUSmKAplUa23GkOAlQ",target:"_blank",rel:"noopener noreferrer"},y=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料"},[e("span",null,"参考资料")])],-1),w=e("p",null,"https://mp.weixin.qq.com/s/hFsQJSCIZ-hSWotMSy9zgQ | 太方便了，开源的 .NET Core 打包工具",-1);function D(T,z){const a=i("ExternalLinkIcon");return o(),r("div",null,[c,e("p",null,[n("龙芯支持："),e("a",p,[n("http://www.loongnix.cn/zh/api/dotnet/"),t(a)])]),u,e("p",null,[n("资料："),e("a",h,[n("https://learn.microsoft.com/zh-cn/dotnet/core/deploying/deploy-with-cli"),t(a)])]),m,e("ul",null,[b,e("li",null,[v,n(":false为依赖框架部署，详细看"),e("a",g,[n("此处"),t(a)])])]),k,e("p",null,[n("部署说明："),e("a",x,[n("地址"),t(a)])]),f,e("p",null,[n("揭秘.NET Core剪裁器背后的技术："),e("a",_,[n("https://mp.weixin.qq.com/s/uZU0vUSmKAplUa23GkOAlQ"),t(a)])]),y,w])}const N=l(d,[["render",D],["__file","index.html.vue"]]),R=JSON.parse('{"path":"/dotnet/buildAndRelease/","title":"概述","lang":"zh-CN","frontmatter":{"title":"概述","lang":"zh-CN","date":"2023-03-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"gaishu","slug":"dv5d9ovoiqaoceea","docsId":"111753464","description":"平台 龙芯支持：http://www.loongnix.cn/zh/api/dotnet/ 部署模式选择 ASP.NetCore目前的部署方式分为三种，独立发布（SCD）、框架依赖（FDD）、依赖框架的可执行文件（FDE）。其中FDD和FDE差别不大，不予讨论 独立部署 不依赖目标系统上存在的共享组件。所有的组件（netcore库和netcore运行时...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/buildAndRelease/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"概述"}],["meta",{"property":"og:description","content":"平台 龙芯支持：http://www.loongnix.cn/zh/api/dotnet/ 部署模式选择 ASP.NetCore目前的部署方式分为三种，独立发布（SCD）、框架依赖（FDD）、依赖框架的可执行文件（FDE）。其中FDD和FDE差别不大，不予讨论 独立部署 不依赖目标系统上存在的共享组件。所有的组件（netcore库和netcore运行时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T09:10:20.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-03-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-25T09:10:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-25T09:10:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"平台","slug":"平台","link":"#平台","children":[]},{"level":2,"title":"部署模式选择","slug":"部署模式选择","link":"#部署模式选择","children":[{"level":3,"title":"独立部署","slug":"独立部署","link":"#独立部署","children":[]},{"level":3,"title":"框架依赖","slug":"框架依赖","link":"#框架依赖","children":[]},{"level":3,"title":"选择哪种部署方式","slug":"选择哪种部署方式","link":"#选择哪种部署方式","children":[]}]},{"level":2,"title":"CLI发布","slug":"cli发布","link":"#cli发布","children":[{"level":3,"title":"裁剪部署","slug":"裁剪部署","link":"#裁剪部署","children":[]}]},{"level":2,"title":"dotnet-packaging","slug":"dotnet-packaging","link":"#dotnet-packaging","children":[{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":3,"title":"打包Ubuntu包教程","slug":"打包ubuntu包教程","link":"#打包ubuntu包教程","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1704813924000,"updatedTime":1714036220000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":3.93,"words":1178},"filePathRelative":"dotnet/buildAndRelease/readme.md","localizedDate":"2023年3月29日","excerpt":"<h2>平台</h2>\\n<p>龙芯支持：<a href=\\"http://www.loongnix.cn/zh/api/dotnet/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://www.loongnix.cn/zh/api/dotnet/</a></p>\\n<h2>部署模式选择</h2>\\n<p>ASP.NetCore目前的部署方式分为三种，独立发布（SCD）、框架依赖（FDD）、依赖框架的可执行文件（FDE）。其中FDD和FDE差别不大，不予讨论</p>\\n<h3>独立部署</h3>\\n<p>不依赖目标系统上存在的共享组件。所有的组件（netcore库和netcore运行时）都包含在应用程序中，并且独立于其他netcore应用程序。</p>","autoDesc":true}');export{N as comp,R as data};
