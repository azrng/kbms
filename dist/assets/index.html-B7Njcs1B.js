import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,b as s,d as t,e}from"./app-vSdX8vi3.js";const i="/kbms/common/1641029030244-a3a42511-f87c-4e14-9434-4a639caf587d.png",u={},k=e('<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述</span></a></h2><p>不必等待前面所有的代码执行完才开始执行某一段代码，这就是异步。就比如不必要等蒸过米饭才开始炒菜，可以让电饭锅去蒸米饭，然后燃气去炒菜，又或者去饭店吃饭，服务员就是主线程，然后顾客点餐就是具体的任务，当服务员去站到顾客面前等待顾客点餐就是同步方法，当服务员给顾客菜单，顾客点完后再给服务员，服务员在顾客点餐的时候可以去忙其他的事情，这个就是异步方法。“异步点餐”可以让服务员同时服务更多的客人，但是不会使得服务单个客人的时间变短，甚至有的情况下还可能变长。</p><h2 id="已有多线程-为何要异步" tabindex="-1"><a class="header-anchor" href="#已有多线程-为何要异步"><span>已有多线程，为何要异步</span></a></h2><p>异步和多线程并不是一个同等关系，它俩没有直接的关系，异步是最终目的，多线程只是我们实现异步的一种手段，单线程和多线程都会出现阻塞的情况，这个时候就会用到异步方法去防止阻塞。 <img src="'+i+`" alt="image.png" loading="lazy"></p><ul><li>多线程和异步是不同的概念 <ul><li>异步并不意味着多线程，单线程同样可以异步(CPU切换时间片调度)</li><li>异步默认借助的线程池</li><li>多线程经常阻塞，而异步要求不阻塞</li></ul></li><li>多线程与异步的适用场景不同，多线程更适合 <ul><li>CPU密集型操作</li><li>长期运行的任务</li><li>线程的创建于销毁开销比较大</li><li>提供更底层的控制，比如操作线程、锁、信号量等</li><li>线程不易于传参以及返回</li><li>线程的代码书写较为繁琐</li></ul></li></ul><p>异步编程是为了解决线程阻塞问题，意思就是<strong>如果运行中遇到比较耗费IO的操作，然后就返回一个Task任务对象，<strong>当前任务挂起(cpu去执行其他线程)</strong>，并由await在Task对象上传递用于恢复该方法的方法</strong>，然后去做其他事情(<strong>指的是其他指令的事情，而不是代码接着往下执行的意思</strong>)，等到这个耗费IO的事情处理结束时候会通知该操作结束，然后拐过来处理这个操作，不让线程阻塞到这里。</p><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><ul><li>适合IO密集型操作，例如：网络请求、文件读写、数据库等耗时操作</li><li>适合短暂的小任务</li><li>避免线程阻塞，提高系统响应能力</li></ul><p>优点：可以提高服务器接待请求的数量，但是不会使得单个请求的处理效率变高，甚至有可能略有降低。</p><h2 id="异步实现方式" tabindex="-1"><a class="header-anchor" href="#异步实现方式"><span>异步实现方式</span></a></h2><p>APM、EAP、TAP(async\\await)、TPL(严格说是不算的)</p><p>.NET 提供了执行异步操作的三种模式： 1、基于任务的异步模式 (TAP) ，该模式使用单一方法表示异步操作的开始和完成。TAP 是在 .NET Framework 4 中引入的。 这是在 .NET 中进行异步编程的推荐方法。C## 中的 async 和 await 关键词以及 Visual Basic 中的 Async 和 Await 运算符为 TAP 添加了语言支持。 2、基于事件的异步模式 (EAP)，是提供异步行为的基于事件的旧模型。这种模式需要后缀为 Async 的方法，以及一个或多个事件、事件处理程序委托类型和 EventArg 派生类型。EAP 是在 .NET Framework 2.0 中引入的。建议新开发中不再使用这种模式。有关详细信息，请参阅基于事件的异步模式 (EAP)。 3、异步编程模型 (APM) 模式（也称为 IAsyncResult 模式），这是使用 IAsyncResult 接口提供异步行为的旧模型。在这种模式下，同步操作需要 Begin 和 End 方法（例如，BeginWrite 和 EndWrite以实现异步写入操作）。不建议新的开发使用此模式。有关详细信息，请参阅异步编程模型 (APM)。</p><h3 id="异步方法-async-method-tap模式" tabindex="-1"><a class="header-anchor" href="#异步方法-async-method-tap模式"><span>异步方法（Async Method TAP模式）</span></a></h3><p>使用async/await关键字实现异步编程，这是比较常用的一种异步实现方式。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">TestDoSomeAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Async method completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务并行库-tpl-task-parallel-library-tap模式" tabindex="-1"><a class="header-anchor" href="#任务并行库-tpl-task-parallel-library-tap模式"><span>任务并行库（TPL, Task Parallel Library TAP模式）</span></a></h3><p>通过 Task 和 <code>Task&lt;T&gt;</code> 类型实现异步编程，可以利用多核处理器，并发执行多个独立的任务。例如：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestTaskParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> task1 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task 1 completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> task2 <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task 2 completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> task3 <span class="token operator">=</span> Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task 3 completed.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">// 返回一个整数值</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//等待所有任务完成</span>
    Task<span class="token punctuation">.</span><span class="token function">WaitAll</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">,</span> task3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="asynchronous-programming-model-apm模式" tabindex="-1"><a class="header-anchor" href="#asynchronous-programming-model-apm模式"><span>Asynchronous Programming Model（APM模式）</span></a></h3><p>是一种经典的异步编程模式，需要手动创建回调函数，用于处理完成或错误的通知。可以通过 IAsyncResult 设计模式的 Begin 和 End 方法来实现，其中 Begin 方法开始异步操作，而 End 方法在异步操作完成时执行，并返回异步操作的结果。</p><blockquote><p>需要注意的是，APM 模式通过 IAsyncResult 接口来存储异步操作的状态和结果，相对比较复杂，代码量也较大。同时，在使用 APM 模式时，还需要手动处理回调函数和等待异步操作完成等细节工作，使得开发起来相对较为繁琐。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 创建异步操作类实例</span>
        <span class="token class-name">MyAsyncClass</span> asyncClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyAsyncClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 开始异步操作</span>
        <span class="token class-name">IAsyncResult</span> result <span class="token operator">=</span> asyncClass<span class="token punctuation">.</span><span class="token function">BeginDoWork</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 主线程执行其他操作</span>
        <span class="token comment">// 等待异步操作完成并获取结果</span>
        <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> asyncClass<span class="token punctuation">.</span><span class="token function">EndDoWork</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 处理异步操作的结果</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Result: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyAsyncClass</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 异步执行的方法</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>callback<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>callback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>state<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>state<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IAsyncResult</span> <span class="token function">BeginDoWork</span><span class="token punctuation">(</span><span class="token class-name">AsyncCallback</span> callback<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> state<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个新的异步操作对象</span>
        <span class="token class-name">MyAsyncResult</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyAsyncResult</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 开始异步操作</span>
        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">try</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 执行一些操作</span>
                <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>

                <span class="token comment">// 设置异步操作的结果</span>
                result<span class="token punctuation">.</span>Result <span class="token operator">=</span> res<span class="token punctuation">;</span>

                <span class="token comment">// 触发回调函数</span>
                callback<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 设置异步操作的异常</span>
                result<span class="token punctuation">.</span>Error <span class="token operator">=</span> ex<span class="token punctuation">;</span>

                <span class="token comment">// 触发回调函数</span>
                callback<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 返回异步操作对象</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 结束异步执行的方法</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>result<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>result<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">EndDoWork</span><span class="token punctuation">(</span><span class="token class-name">IAsyncResult</span> result<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 将 IAsyncResult 转换为 MyAsyncResult 类型，并等待异步操作完成</span>
        <span class="token class-name">MyAsyncResult</span> myResult <span class="token operator">=</span> <span class="token punctuation">(</span>MyAsyncResult<span class="token punctuation">)</span>result<span class="token punctuation">;</span>
        myResult<span class="token punctuation">.</span>AsyncWaitHandle<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 在异步操作中抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>myResult<span class="token punctuation">.</span>Error <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> myResult<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 返回异步操作的结果</span>
        <span class="token keyword">return</span> myResult<span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyAsyncResult</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAsyncResult</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsCompleted <span class="token operator">=&gt;</span> AsyncWaitHandle<span class="token punctuation">.</span><span class="token function">WaitOne</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">WaitHandle</span> AsyncWaitHandle <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ManualResetEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">object</span></span> AsyncState <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> CompletedSynchronously <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Result <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 存储异步操作的结果或异常信息</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Exception</span> Error <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造函数</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>asyncState<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>asyncState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token function">MyAsyncResult</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> asyncState<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        AsyncState <span class="token operator">=</span> asyncState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="event-based-asynchronous-pattern-eap模式" tabindex="-1"><a class="header-anchor" href="#event-based-asynchronous-pattern-eap模式"><span>Event-based Asynchronous Pattern（EAP模式）</span></a></h3><p>一种已过时的异步编程模式，需要使用事件来实现异步编程。例如：</p><blockquote><p>需要注意的是，EAP 模式通过事件来实现异步编程，相对于 APM 模式更加简洁易懂，同时也避免了手动处理回调函数等细节工作。但是，EAP 模式并不支持 async/await 异步关键字，因此在一些特定的场景下可能不够灵活。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAsyncClass</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Component</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 声明一个委托类型，用于定义异步操作的方法签名</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>arg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">MyAsyncDelegate</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 声明一个事件，用于通知异步操作的完成</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">MyAsyncDelegate</span> OperationNameCompleted<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 异步执行方法，接受一个参数 arg</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>arg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoWorkAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> arg<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 将异步操作放入线程池中执行</span>
        ThreadPool<span class="token punctuation">.</span><span class="token function">QueueUserWorkItem</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">WaitCallback</span><span class="token punctuation">(</span>DoWork<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 真正的异步操作</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>obj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">int</span></span> arg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">int</span></span> res <span class="token operator">=</span> arg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token comment">// 触发事件，传递异步操作的结果</span>
        OperationNameCompleted<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异步任务-task" tabindex="-1"><a class="header-anchor" href="#异步任务-task"><span>异步任务(Task)</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>异步任务是一种编程模式或执行模型的概念，它表示的是程序中那些不会阻塞主线程，可以在后台执行的任务。是对程序中非阻塞执行业务逻辑的一个抽象描述</p></div><p>Task是一个包含了异步任务各种状态(正在运行、完成、结果、报错等)的引用类型，还有值类型的版本ValueTask。</p><p>Task是对异步任务的抽象，开启异步任务后，当前线程并不会阻塞，而是可以去做其他事情(比如你是CPU，你在做饭的时候，你先蒸米饭，然后不用一直等着蒸米饭，然后你可以去炒菜等)。异步任务(默认)会借助线程池在其他线程上运行。</p><h3 id="task状态" tabindex="-1"><a class="header-anchor" href="#task状态"><span>Task状态</span></a></h3><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var task = new Task&lt;string&gt;(() =&gt;
{
    Thread.Sleep(1500);
    return &quot;done&quot;;
});

task.Status.Dump();
task.Start();
task.Status.Dump();
Thread.Sleep(1000);
task.Status.Dump();
Thread.Sleep(2000);
task.Status.Dump();
task.Result.Dump(&quot;Result&quot;);


// outputs
TaskStatus.Created
TaskStatus.WaitingToRun
TaskStatus.Running
TaskStatus.RanToCompletion
┌────────┐
│ &quot;done&quot; │
└────────┘
  Result 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="任务的结果" tabindex="-1"><a class="header-anchor" href="#任务的结果"><span>任务的结果</span></a></h3><p>异步任务可以具有以下返回类型：</p><ul><li>Task（对于执行操作但是没有返回值的异步任务）</li><li><code>Task&lt;TResult&gt;</code>（对于有T类型返回值的异步任务）</li><li>任何具有可访问的 GetAwaiter 方法的类型。 GetAwaiter 方法返回的对象必须实现 System.Runtime.CompilerServices.ICriticalNotifyCompletion 接口。</li><li><code>IAsyncEnumerable&lt;T&gt;</code>（对于返回异步流的异步方法）。</li></ul><h2 id="异步方法" tabindex="-1"><a class="header-anchor" href="#异步方法"><span>异步方法</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>异步方法是编程语言中用来定义和执行异步任务的一种具体语法结构或API接口。在不同的编程语言中，异步方法有不同的表现形式，例如在JavaScript中有async function关键字修饰的方法、C#中有async Task或async void返回类型的方法。异步方法是实现异步任务的具体编程手段。</p></div><ul><li>将方法标记为async后，可以在方法中使用await关键字</li><li>await关键字会等待异步任务的结束，并获取结果，等待任务结束但是不阻塞线程</li><li>async+await会将方法包装成状态机，await类似于检查点(遇到await的时候切换)，其中MoverNext方法会被底层调用，从而切换状态</li><li>async Task，返回值还是Task类型，但是在里面可以使用await关键字</li><li>async void <ul><li>也会生成状态机，但是缺少记录状态等的Task对象</li><li>无法聚合异常，需要谨慎处理异常</li><li>几乎只是用于事件的注册</li></ul></li><li>异步编程具有传染性 <ul><li>当你使用到一个异步方法的时候，调用它的一连串方法都变成了异步方法，都需要使用async await，不建议再将异步方法转同步方法</li><li>不过影响不大，几乎所有的自带方法都提供了异步的版本</li></ul></li></ul><h3 id="验证异步不阻塞的情况" tabindex="-1"><a class="header-anchor" href="#验证异步不阻塞的情况"><span>验证异步不阻塞的情况</span></a></h3><p>执行AsyncExecuteTest方法来查看效果</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
/// 测试异步不阻塞的效果
/// &lt;/summary&gt;
private async Task AsyncExecuteTest()
{
    PrintThreadId(&quot;Before&quot;);
    await FooAsync();
    PrintThreadId(&quot;After&quot;);
}

private async Task FooAsync()
{
    PrintThreadId(&quot;Before&quot;);
    await Task.Delay(1000);
    PrintThreadId(&quot;After&quot;);
}

private void PrintThreadId(string message, [CallerMemberName] string? name = null)
{
    Console.WriteLine($&quot;{name} {message} {Environment.CurrentManagedThreadId}&quot;);
}

// outputs
AsyncExecuteTest Before 1
FooAsync Before 1        
FooAsync After 5
AsyncExecuteTest After 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这个执行效果可以看到，首先刚开始执行的时候线程Id为，然后当执行到FooAsync的await的时候，线程Id为1的去忙其他事情了，然后这个await等待1s结束后，线程Id为5的继续往下执行，线程Id为1的并没有阻塞在这里。</p><h3 id="查看生成的状态机" tabindex="-1"><a class="header-anchor" href="#查看生成的状态机"><span>查看生成的状态机</span></a></h3><p>编写一个简单的异步方法</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public async Task Foo()
{
    await Task.Delay(1);
    Console.WriteLine(&quot;aa&quot;);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,45),r={href:"https://sharplab.io/",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>private sealed class FooStateMachine : IAsyncStateMachine
{
    public int currState;

    public AsyncTaskMethodBuilder builder;

    public C &lt;&gt;4__this;

    private TaskAwaiter taskAwaiter;

    private void MoveNext()
    {
        int num = currState;
        try
        {
            TaskAwaiter awaiter;
            if (num != 0)
            {
                awaiter = Task.Delay(1).GetAwaiter();
                if (!awaiter.IsCompleted)
                {
                    num = (currState = 0);
                    taskAwaiter = awaiter;
                    FooStateMachine stateMachine = this;
                    builder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);
                    return;
                }
            }
            else
            {
                awaiter = taskAwaiter;
                taskAwaiter = default(TaskAwaiter);
                num = (currState = -1);
            }
            awaiter.GetResult();
            Console.WriteLine(&quot;aa&quot;);
        }
        catch (Exception exception)
        {
            currState = -2;
            builder.SetException(exception);
            return;
        }
        currState = -2;
        builder.SetResult();
    }
}

[NullableContext(1)]
[AsyncStateMachine(typeof(FooStateMachine))]
[DebuggerStepThrough]
public Task Foo()
{
    FooStateMachine stateMachine = new FooStateMachine();
    stateMachine.builder = AsyncTaskMethodBuilder.Create();
    stateMachine.&lt;&gt;4__this = this;
    stateMachine.currState = -1;
    stateMachine.builder.Start(ref stateMachine);
    return stateMachine.builder.Task;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="void返回值" tabindex="-1"><a class="header-anchor" href="#void返回值"><span>Void返回值</span></a></h3><p>Void 返回异步方法的调用方无法捕获从该方法引发的异常。 此类未经处理异常有可能导致应用程序失败。</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>async Task Main()
{
	try
	{
        // 这里添加await会报错，因为无法await void
		VoidAsync();
	}
	catch (Exception ex)
	{
		Console.WriteLine(&quot;我捕捉到了VoidAsync的异常&quot;);
	}

	Console.WriteLine(&quot;Done&quot;);
}

async void VoidAsync()
{
	await Task.Delay(1000);
	throw new ArgumentException(&quot;抛出错误&quot;);
	Console.WriteLine(&quot;VoidAsync没有报错&quot;);
}

// outputs
Done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果返回 <code>Task</code> 或 <code>Task&lt;TResult&gt;</code> 的方法引发异常，则该异常存储在返回的任务中。 等待任务时，将重新引发异常。 请确保可以产生异常的任何异步方法都具有返回类型<code>Task</code> 或 <code>Task&lt;TResult&gt;</code>，并确保会等待对方法的调用。</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>async Task Main()
{
	try
	{
		await VoidAsync();
	}
	catch (Exception ex)
	{
		Console.WriteLine(&quot;我捕捉到了VoidAsync的异常&quot;);
	}

	Console.WriteLine(&quot;Done&quot;);
}

async Task VoidAsync()
{
	await Task.Delay(1000);
	throw new ArgumentException(&quot;抛出错误&quot;);
	Console.WriteLine(&quot;VoidAsync没有报错&quot;);
}

// outputs
我捕捉到了VoidAsync的异常
Done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="阻塞情景" tabindex="-1"><a class="header-anchor" href="#阻塞情景"><span>阻塞情景</span></a></h3><p>阻塞线程有什么影响那？比如在下面的示例，Winform程序中我点击按钮后调用一个同步方法</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public partial class Form1 : Form
{
    public Form1()
    {
        InitializeComponent();
    }

    private void button1_Click(object sender, EventArgs e)
    {
        var i = Foo();
    }

    private int Foo()
    {
        Thread.Sleep(3000);
        return 1;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我点击按钮后，去执行了Foo方法，但是这个时候也发现窗口卡死了，不能移动等，这是因为当执行到Foo方法的时候，里面的等待阻塞了主线程，这个时候导致窗口卡死，再测试下修改为异步方法</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public partial class Form1 : Form
{
    public Form1()
    {
        InitializeComponent();
    }

    private async void button1_Click(object sender, EventArgs e)
    {
        var i = await FooAsync();
    }

    private async Task&lt;int&gt; FooAsync()
    {
        await Task.Delay(3000);

        return 1;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改为异步方法后，当我们点击按钮执行FooAsync方法时候，这个时候主线程没有被阻塞，窗口可以拖动。这里在UI程序中会有这个影响，不在UI程序中，阻塞线程会导致当前线程一直在此处等待，降低系统响应能力。</p><h4 id="task-wait-task-result" tabindex="-1"><a class="header-anchor" href="#task-wait-task-result"><span>Task.Wait &amp; Task.Result</span></a></h4><p>如果任务没有执行结束，那么就会阻塞当前线程，容易导致死锁。</p><p>Task.GetAwaiter().GetResult()和Task.Result有什么区别那，当抛出异常的时候，Task.Result会多包装一层，比如</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>async Task Main()
{
	try
	{
		Console.WriteLine(&quot;Result  异常会被包装一层&quot;);
		var a = FooAsync().Result;
	}
	catch (Exception ex)
	{
		Console.WriteLine($&quot;异常类型:{ex.GetType().FullName}&quot;);
		Console.WriteLine($&quot;message:{ex.Message}&quot;);
		Console.WriteLine($&quot;message:{ex.InnerException.Message}&quot;);
	}

	Console.WriteLine(&quot;----分割线----&quot;);

	try
	{
		Console.WriteLine(&quot;GetAwaiter().GetResult()  异常没有被包装&quot;);
		var a = FooAsync().GetAwaiter().GetResult();
	}
	catch (Exception ex)
	{
		Console.WriteLine($&quot;异常类型:{ex.GetType().FullName}&quot;);
		Console.WriteLine($&quot;message:{ex.Message}&quot;);
	}

	Console.WriteLine(&quot;Done&quot;);
}

async Task&lt;int&gt; FooAsync()
{
	await Task.Delay(1000);
	throw new ArgumentException(&quot;抛出错误&quot;);
	Console.WriteLine(&quot;VoidAsync没有报错&quot;);
}

// outputs
Result  异常会被包装一层
异常类型:System.AggregateException
message:One or more errors occurred. (抛出错误)
message:抛出错误
----分割线----
GetAwaiter().GetResult()  异常没有被包装
异常类型:System.ArgumentException
message:抛出错误
Done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="task-delay-vs-thread-sleep" tabindex="-1"><a class="header-anchor" href="#task-delay-vs-thread-sleep"><span>Task.Delay vs Thread.Sleep</span></a></h4><p>Task.Delay：是一个异步任务，会立刻释放当前的线程</p><p>Thread.Sleep：会阻塞当前的线程</p><p>在带UI界面的项目中，如果使用Thread.Sleep会阻塞线程导致页面卡死（线程会休眠等待，等于浪费了资源）。所以在异步编程中如果遇到等待需要使用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>避免线程的等待，让线程被高效利用，其底层是Timer实现的，通过Timer调度之后会切换线程</p><h4 id="io等操作的同步方法" tabindex="-1"><a class="header-anchor" href="#io等操作的同步方法"><span>IO等操作的同步方法</span></a></h4><p>如果一个方法实在没有异步方法，可以使用Task.Run进行包装</p><h4 id="其他繁重且耗时的操作" tabindex="-1"><a class="header-anchor" href="#其他繁重且耗时的操作"><span>其他繁重且耗时的操作</span></a></h4><p>IO操作复杂的操作，要使用异步方法处理</p><h3 id="如何实现不同的线程切换" tabindex="-1"><a class="header-anchor" href="#如何实现不同的线程切换"><span>如何实现不同的线程切换</span></a></h3><p>按照计算机的执行原理，对同一个方法的一次调用期间，这个方法的所有代码都会运行在同一个线程中，不会出现一个方法的代码的其中一段和另一段运行在不同线程的情况，但是异步中会出现是因为异步方法的代码被拆分成了对MoveNext方法的多次调用，对MoveNext方法的多次调用当然就可以运行在不同的线程中。</p><p>总结：编辑器把async拆分成多次方法的调用，程序会运行的时候会通过从线程池中取出空闲线程执行不同的MoveNext调用的方式来避免线程的“空等”，这样子就可以像编写同步代码一样编写异步代码，从而提升系统的并发处理能力。</p><h2 id="重要思想" tabindex="-1"><a class="header-anchor" href="#重要思想"><span>重要思想</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不阻塞</p></div><ul><li>await会暂时释放当前线程，使得该线程可以执行其他工作，而不必阻塞当前线程直到异步操作完成</li><li>不要在异步方法里面使用任何方式阻塞当前线程</li></ul><h2 id="同步上下文" tabindex="-1"><a class="header-anchor" href="#同步上下文"><span>同步上下文</span></a></h2><p>一种管理和协调线程的机制，允许开发者将代码的执行切换到特性的线程上。</p><p>Winforms和WPF拥有同步上下文(UI线程)，而在Asp.Net Core和控制台项目中没有SynchronizationContext因此不用管ConfigureAwait(false)等。</p><h3 id="configureawait" tabindex="-1"><a class="header-anchor" href="#configureawait"><span>ConfigureAwait</span></a></h3><ul><li>配置任务通过await方法结束后是否回到原来的线程，默认是True。</li><li>一般只有UI线程会采用这种策略，在UI程序中需要谨慎操作</li></ul><h2 id="task和valuetask" tabindex="-1"><a class="header-anchor" href="#task和valuetask"><span>Task和ValueTask</span></a></h2><p><code>ValueTask&lt;T&gt;</code> 是 <code>Task&lt;T&gt;</code> 类型轻量化的封装，它是结构类型（值类型）。使用方式与 <code>Task&lt;T&gt;</code> 相似，但它在同步完成任务或返回立即可用的结果时（这在列举序列时会经常发生），可以避免不必要的内存开销，比 <code>Task&lt;T&gt;</code> 更高效。</p><ul><li><code>ValueTask&lt;T&gt;</code>用于微优化的场景，你可能永远不需要编写返回此类型的方法</li><li><code>Task&lt;T&gt;</code>和Task是引用类型，实例化他们需要基于堆的内存分配和后续的收集。</li><li>优化的一种极端形式就是编写无需分配此类内存的代码；换句话说这不实例化任何引用类型，不会给垃圾收集增加负担。</li><li>为了支持这种模式，C#引入了<code>ValueTask</code>和<code>ValueTask&lt;T&gt;</code>这两个结构体，编译器允许使用他们替代<code>Task</code>和<code>Task&lt;T&gt;</code><ul><li><code>async ValueTask&lt;int&gt; Foo() { ... }</code></li></ul></li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li><code>ValueTask&lt;T&gt;</code>并不常见，它的出现纯粹是为了性能</li><li>这意味着它被不恰当的值类型语义所困扰，这可能会导致意外。为避免错误行为，必须避免以下情况 <ul><li>多次await同一个<code>ValueTask&lt;T&gt;</code></li><li>操作没结束的时候调用 <code>.GetAwaiter().GetResult()</code></li></ul></li><li>如果你需要进行这些操作，那么先调用AsTask方法，操作它返回的Task。</li></ul><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="如何创建异步任务" tabindex="-1"><a class="header-anchor" href="#如何创建异步任务"><span>如何创建异步任务</span></a></h3><p>已知一个同步方法SyncFoo，我们如何要将其变成一个异步方法，那么就可以使用Task.Run、Task.Factory.StartNew、new Task等方法</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>/// &lt;summary&gt;
/// 创建异步任务
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private async Task CreateAsyncTask()
{
    PrintThreadId(&quot;Before&quot;);
    await Task.Run(SyncFoo);
    PrintThreadId(&quot;After&quot;);
}

/// &lt;summary&gt;
/// 同步方法
/// &lt;/summary&gt;
private void SyncFoo()
{
    PrintThreadId(&quot;Before&quot;);
    Thread.Sleep(1000);
    PrintThreadId(&quot;After&quot;);
}

private void PrintThreadId(string message, [CallerMemberName] string? name = null)
{
    Console.WriteLine($&quot;{name} {message} {Environment.CurrentManagedThreadId}&quot;);
}

// outputs
CreateAsyncTask Before 1
SyncFoo Before 4        
SyncFoo After 4
CreateAsyncTask After 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当执行SyncFoo方法的时候，这个时候已经不在主线程上了</p><h3 id="如何开启多个异步任务" tabindex="-1"><a class="header-anchor" href="#如何开启多个异步任务"><span>如何开启多个异步任务</span></a></h3><p>已知一个异步方法HeavyJob，要为其创建多个异步任务，那么该如何操作</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>private async Task CreateManyTask()
{
    var inputs = Enumerable.Range(0, 10).ToArray();
    var tasks = new List&lt;Task&lt;int&gt;&gt;();
    foreach (var input in inputs)
    {
        tasks.Add(HeavyJob(input));
    }

    await Task.WhenAll(tasks);
    var outputs = tasks.Select(t =&gt; t.Result).ToArray();
}

private async Task&lt;int&gt; HeavyJob(int input)
{
    // 模拟根据input值请求一个耗时的操作
    PrintThreadId(&quot;Before&quot;);
    await Task.Delay(1000);
    PrintThreadId(&quot;After&quot;);
    return input * input;
}

private void PrintThreadId(string message, [CallerMemberName] string? name = null)
{
    Console.WriteLine($&quot;{name} {message} {Environment.CurrentManagedThreadId}&quot;);
}

// outputs
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob Before 1
HeavyJob After 5
HeavyJob After 7
HeavyJob After 8
HeavyJob After 8
HeavyJob After 5
HeavyJob After 7
HeavyJob After 5
HeavyJob After 8
HeavyJob After 9
HeavyJob After 7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步任务如何取消" tabindex="-1"><a class="header-anchor" href="#异步任务如何取消"><span>异步任务如何取消</span></a></h3>`,51),v={class:"hint-container tip"},m=n("p",{class:"hint-container-title"},"提示",-1),b=n("p",null,[s("推荐所有的异步方法都带上"),n("strong",null,"CancellationToken"),s("参数")],-1),g={href:"https://dev.to/rahulpnath/a-net-programmers-guide-to-cancellationtoken-1m0l",target:"_blank",rel:"noopener noreferrer"},y=e(`<ul><li>任务取消并不是实时去取消的，而是触发后取消的，如下操作</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> tokenSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CancellationToken</span> cancellationToken <span class="token operator">=</span> tokenSource<span class="token punctuation">.</span>Token<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 这只是执行到这一步了，然后检测是否取消了，如果取消了就报错，而不是实时监听</span>
    cancellationToken<span class="token punctuation">.</span><span class="token function">ThrowIfCancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用CancellationTokenSource实现对异步进行取消</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> cts<span class="token punctuation">.</span><span class="token function">CancelAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> task<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TaskCanceledException</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// outputs</span>
Task <span class="token class-name">canceled</span>
Elapsed<span class="token punctuation">:</span> <span class="token number">2262</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以在构造CancellationTokenSource时候指定一个时间间隔，以便在一段时间之后启动取消。它对于实现超时非常有效，无论是同步还是异步</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TaskCanceledException</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// outputs</span>
Task <span class="token class-name">canceled</span>
Elapsed<span class="token punctuation">:</span> <span class="token number">3254</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CancellationTokenSource还可以通过CancelAfter方法来取消</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cts<span class="token punctuation">.</span><span class="token function">CancelAfter</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TaskCanceledException</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// outputs</span>
Task <span class="token class-name">canceled</span>
Elapsed<span class="token punctuation">:</span> <span class="token number">3247</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>CancellationToken这个结构体提供了一个Register方法，它可以让你注册一个回调委托，这个委托会在取消时候触发。它会返回一个对象，这个对象在取消注册时候可以被Dispose掉。支持注册多个，如果注册了多个，那么后注册的会先触发</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cts<span class="token punctuation">.</span>Token<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 任务取消的善后操作</span>
    <span class="token comment">// 比如关闭数据库连接，释放资源等</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;cancel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> sw <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TaskCanceledException</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Task canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Elapsed: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">sw<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在API中，框架会自动传递一个CancellationToken，如果前端请求取消，那么就直接触 发取消，节约服务器资源</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id:long}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IResultModel<span class="token punctuation">&lt;</span>GetUserInfoResponse<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetDetailsAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">FromRoute</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">long</span></span> id<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// xxx</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Task.Run传入CancellationToken</li></ul><p>Task.Run也支持传入cancellationToken,这里传入的目的就相当于在执行之前先判断一下任务是否被取消，如果在执行前发现了任务已经被取消，那么就抛出异常</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> cancellationToken <span class="token operator">??</span> CancellationToken<span class="token punctuation">.</span>None<span class="token punctuation">;</span>
Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果想通过这个方法实现这个任务在执行中想被取消，这样子是实现不了的，需要在Task.Run的里面进行判断</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span>
    token<span class="token punctuation">.</span><span class="token function">ThrowIfCancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何编写支持取消的异步任务" tabindex="-1"><a class="header-anchor" href="#如何编写支持取消的异步任务"><span>如何编写支持取消的异步任务</span></a></h3><p>推荐给所有异步方法传入CancellationToken来支持取消操作，那么我们该如何编写异步方法给其他人调用那，不仅仅需要考虑到对方可能会需要进行取消，也需要考虑到对方不需要取消，那么有下面几个方案</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 使用方法重载</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 支持取消</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cancellationToken<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// xxx 其他的业务逻辑</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 不支持取消</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span>CancellationToken<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 使用可为null的参数</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">,</span> <span class="token class-name">CancellationToken<span class="token punctuation">?</span></span> cancellationToken <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> cancellationToken <span class="token operator">??</span> CancellationToken<span class="token punctuation">.</span>None<span class="token punctuation">;</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// xxx 其他的业务逻辑</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果一个方法内的操作都是我们自己定义的操作，那么该如何支持取消那</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">CustomerSupportCancelTaskAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token punctuation">,</span> <span class="token class-name">CancellationToken<span class="token punctuation">?</span></span> cancellationToken <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> token <span class="token operator">=</span> cancellationToken <span class="token operator">??</span> CancellationToken<span class="token punctuation">.</span>None<span class="token punctuation">;</span>

    <span class="token comment">// 比如我们有一个同步方法，我们希望该方法支持取消</span>
    <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 执行之前先判断下是否被取消</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span>
            token<span class="token punctuation">.</span><span class="token function">ThrowIfCancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 循环执行某个操作</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span>
                token<span class="token punctuation">.</span><span class="token function">ThrowIfCancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;执行中&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例我们为了可以取消，所以在每次循环的时候判断下是否被取消了，如果你的方法不是循环，实在是没有更好的方法了，那么就好使用笨方法了，在比较耗时的操作执行前加上下面的判断</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span>IsCancellationRequested<span class="token punctuation">)</span>
    token<span class="token punctuation">.</span><span class="token function">ThrowIfCancellationRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果有支持传入CancellationToken的方法，首选该方法，就不要自己实现了</p><h3 id="异步方法会在新线程中执行吗" tabindex="-1"><a class="header-anchor" href="#异步方法会在新线程中执行吗"><span>异步方法会在新线程中执行吗？</span></a></h3><p>像这种异步，里面没有await，没有开启新线程，这个就不是在新线程中执行的。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">decimal</span><span class="token punctuation">&gt;</span></span> <span class="token function">CalcAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;threadid:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Thread<span class="token punctuation">.</span>CurrentThread<span class="token punctuation">.</span>ManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">decimal</span></span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">decimal</span><span class="token punctuation">)</span>random<span class="token punctuation">.</span><span class="token function">NextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步方法并不会自动在新线程中执行，除非把代码放到新线程中执行。</p><h3 id="任务超时如何实现" tabindex="-1"><a class="header-anchor" href="#任务超时如何实现"><span>任务超时如何实现</span></a></h3><h4 id="whenany" tabindex="-1"><a class="header-anchor" href="#whenany"><span>WhenAny</span></a></h4><p>当任意一个线程成功就返回，然后判断返回的Task是否是我们想要的Task任务</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> fooTask <span class="token operator">=</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span>cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> completedTask <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAny</span><span class="token punctuation">(</span>fooTask<span class="token punctuation">,</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>completedTask <span class="token operator">!=</span> fooTask<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> fooTask<span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Timeout ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 异步任务</span>
<span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo start ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OperationCanceledException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Foo cancel  message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面的方法优化后还可以将其封装为一个扩展方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span>CancellationToken<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">TimeoutAfter</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 异步任务</span>
<span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo start ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OperationCanceledException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Foo cancel  message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AsyncExtensions</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 无返回值的超时处理</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>task<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TimeoutException<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exception</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">TimeoutAfter</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Task</span> task<span class="token punctuation">,</span> <span class="token class-name">TimeSpan</span> timeout<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> completedTask <span class="token operator">=</span> <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAny</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>completedTask <span class="token operator">!=</span> task<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 注意：这里并没有将task给停止掉，需要优化</span>
            cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">await</span> task<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="waitasync-推荐" tabindex="-1"><a class="header-anchor" href="#waitasync-推荐"><span>WaitAsync(推荐)</span></a></h4><p>在.Net6+中我们可以使用WaitAsync扩展方法来更方便的处理异步超时操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span>cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WaitAsync</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 超时后记得要取消任务</span>
    cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 异步任务</span>
<span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo start ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OperationCanceledException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Foo cancel  message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cancellationtokensource取消" tabindex="-1"><a class="header-anchor" href="#cancellationtokensource取消"><span>CancellationTokenSource取消</span></a></h4><p>借助CancellationTokenSource的取消操作来处理</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span>cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 异步任务</span>
<span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo start ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OperationCanceledException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Foo cancel  message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//为了更能描述情况，抛出超时异常</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="task的wait" tabindex="-1"><a class="header-anchor" href="#task的wait"><span>Task的Wait</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">try</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> cts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CancellationTokenSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> task <span class="token operator">=</span> Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">await</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span>cts<span class="token punctuation">.</span>Token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>task<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cts<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// throw new TimeoutException(&quot;超时&quot;);</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;task取消后抛出的超时异常信息被丢失了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 异步任务</span>
<span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo start ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Foo end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TaskCanceledException</span> ex<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Foo task cancel  message:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ex<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//为了输出更形象的超时</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在异步任务中如何汇报进度" tabindex="-1"><a class="header-anchor" href="#在异步任务中如何汇报进度"><span>在异步任务中如何汇报进度</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">ProgressNotification</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 创建一个进度报告对象</span>
    <span class="token class-name">IProgress<span class="token punctuation">&lt;</span>ProgressData<span class="token punctuation">&gt;</span></span> progress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Progress<span class="token punctuation">&lt;</span>ProgressData<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>UpdateProgress<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 调用异步方法并传递进度报告器</span>
    <span class="token keyword">await</span> <span class="token function">PerformLongRunningOperation</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 回调方法用于处理进度更新事件</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">UpdateProgress</span><span class="token punctuation">(</span><span class="token class-name">ProgressData</span> data<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;进度：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">data<span class="token punctuation">.</span>Percentage</span><span class="token punctuation">}</span></span><span class="token string">%，消息：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">data<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 异步方法，在其中模拟长耗时操作并报告进度</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>progressReporter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">PerformLongRunningOperation</span><span class="token punctuation">(</span><span class="token class-name">IProgress<span class="token punctuation">&lt;</span>ProgressData<span class="token punctuation">&gt;</span></span> progressReporter<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 模拟工作...</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设这是耗时的操作</span>

        <span class="token comment">// 报告进度</span>
        <span class="token class-name"><span class="token keyword">var</span></span> progressData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ProgressData</span> <span class="token punctuation">{</span> Percentage <span class="token operator">=</span> i<span class="token punctuation">,</span> Message <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;正在进行第</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">i</span><span class="token punctuation">}</span></span><span class="token string">阶段&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        progressReporter<span class="token punctuation">.</span><span class="token function">Report</span><span class="token punctuation">(</span>progressData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PerformLongRunningOperation 方法在每次迭代时都会报告进度，通过 progressReporter.Report 方法调用 UpdateProgress 回调函数来更新UI或其他监听者上的进度状态。这样可以在长时间运行的任务中保持与主线程的良好交互，而不阻塞主线程。</p><h3 id="如何在同步方法中调用异步方法" tabindex="-1"><a class="header-anchor" href="#如何在同步方法中调用异步方法"><span>如何在同步方法中调用异步方法</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>能用异步就不考虑使用同步</p></div><p>在.NET Core中，如果你希望在一个同步上下文中执行异步操作，可以使用<code>.Wait</code>、<code>.Result</code>或<code>.GetAwaiter().GetResult()</code>来同步等待异步方法的结果。但这通常不建议这样做，因为可能会导致线程阻塞和潜在的死锁问题。</p><h4 id="阻塞示例" tabindex="-1"><a class="header-anchor" href="#阻塞示例"><span>阻塞示例</span></a></h4><p><code>GetAwaiter().GetResult()</code>相比较<code>.Result</code>的区别是，当抛出异常的时候，前者的异常信息没有被包装，后者包装了异常信息。控制台框架的异步Main方法也是通过<code>GetAwaiter().GetResult()</code>来实现的</p><p>示例如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">BlockSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token string">&quot;Wait Before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token string">&quot;Wait After&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token string">&quot;Result Before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> <span class="token function">FooAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Result<span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token string">&quot;Result After&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token string">&quot;GetAwaiter().GetResult() Before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> a <span class="token operator">=</span> <span class="token function">FooAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token string">&quot;GetAwaiter().GetResult() After&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">FooAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">FooAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 打印线程ID</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Environment<span class="token punctuation">.</span>CurrentManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// outputs</span>
BlockSample Wait Before <span class="token number">1</span>
BlockSample Wait After <span class="token number">1</span>
BlockSample Result Before <span class="token number">1</span>
BlockSample Result After <span class="token number">1</span>
<span class="token return-type class-name">BlockSample</span> <span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Before <span class="token number">1</span>
<span class="token return-type class-name">BlockSample</span> <span class="token function">GetAwaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> After <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="safefireandforget" tabindex="-1"><a class="header-anchor" href="#safefireandforget"><span>SafeFireAndForget</span></a></h4><p>没有在实例化对象的时候占用时间，也没有说拿不到异常信息和最后结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 一发即忘的方案</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SafeFireAndForgetMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;start </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这一步并没有阻塞在这里等待2s</span>
    <span class="token class-name"><span class="token keyword">var</span></span> syncModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySyncModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;loading Data </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> syncModel<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Data is loaded:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">syncModel<span class="token punctuation">.</span>IsDataLoaded</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 打印线程ID</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Environment<span class="token punctuation">.</span>CurrentManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MySyncModel</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDataLoaded <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MySyncModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">SafeFireAndForget</span><span class="token punctuation">(</span><span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> IsDataLoaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SafeFireAndForget</span><span class="token punctuation">(</span><span class="token class-name">Task</span> task<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">?</span></span> onCompleted <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> onError <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">await</span> task<span class="token punctuation">;</span>
            onCompleted<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            onError<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造类的时候加载该数据</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Data <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// outputs</span>
SafeFireAndForgetMethod start <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">40</span> <span class="token number">1</span>
SafeFireAndForgetMethod loading Data <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">40</span> <span class="token number">1</span>
SafeFireAndForgetMethod Data <span class="token keyword">is</span> <span class="token class-name">loaded</span><span class="token punctuation">:</span>True <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">43</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="continuewith" tabindex="-1"><a class="header-anchor" href="#continuewith"><span>ContinueWith</span></a></h4><p>借助ContinueWith来实现调用异步方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ContinueWithMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;start </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这一步并没有阻塞在这里等待2s</span>
    <span class="token class-name"><span class="token keyword">var</span></span> syncModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySyncModel2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;loading Data </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> data <span class="token operator">=</span> syncModel<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Data is loaded:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">syncModel<span class="token punctuation">.</span>IsDataLoaded</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 打印线程ID</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Environment<span class="token punctuation">.</span>CurrentManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MySyncModel2</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsDataLoaded <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MySyncModel2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>OnDataLoaded<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">OnDataLoaded</span><span class="token punctuation">(</span><span class="token class-name">Task</span> t<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>IsFaulted<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span>InnerException<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> IsDataLoaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造类的时候加载该数据</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Data <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然ContinueWith是原生的操作，但是该操作会将传入的委托的方法包装为一个Task，就会造成多余的浪费，并且一般使用ContinueWith需要设置的第二个参数TaskScheduler配置</p><h4 id="私有字段方案" tabindex="-1"><a class="header-anchor" href="#私有字段方案"><span>私有字段方案</span></a></h4><p>通过将异步方法赋值给类里面的私有Task字段，然后后续可以通过该私有字段进行获取值以及得到异常信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">PrivateFieldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;start </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这一步并没有阻塞在这里等待2s</span>
    <span class="token class-name"><span class="token keyword">var</span></span> syncModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySyncModel3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;loading Data </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> syncModel<span class="token punctuation">.</span><span class="token function">DisplayDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Data is loaded </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 打印线程ID</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Environment<span class="token punctuation">.</span>CurrentManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MySyncModel3</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">Task</span> _loadDataTask<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MySyncModel3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _loadDataTask <span class="token operator">=</span> <span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DisplayDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> _loadDataTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造类的时候加载该数据</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Data <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// outputs</span>
ieldMethod start <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token number">1</span>
PrivateFieldMethod loading Data <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token number">1</span>
PrivateFieldMethod Data <span class="token keyword">is</span> <span class="token class-name">loaded</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">41</span><span class="token punctuation">:</span><span class="token number">29</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要涉及到await就会出现状态机切换，所以也造成了多余的资源浪费</p><h4 id="async-factory" tabindex="-1"><a class="header-anchor" href="#async-factory"><span>Async Factory</span></a></h4><p>通过将类设置为私有方式，不允许new的方法构建，然后通过调用一个Create的方法进行构建对象</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">AsyncFactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;start </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> syncModel <span class="token operator">=</span> <span class="token keyword">await</span> MySyncModel4<span class="token punctuation">.</span><span class="token function">CreateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Data is loaded </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToStandardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 打印线程ID</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PrintThreadId</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">name</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Environment<span class="token punctuation">.</span>CurrentManagedThreadId</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MySyncModel4</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span> Data <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">MySyncModel4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>MySyncModel4<span class="token punctuation">&gt;</span></span> <span class="token function">CreateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySyncModel4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> service<span class="token punctuation">.</span><span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> service<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 构造类的时候加载该数据</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">LoadDataAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Data <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// outputs</span>
AsyncFactoryMethod start <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">42</span> <span class="token number">1</span>
AsyncFactoryMethod Data <span class="token keyword">is</span> <span class="token class-name">loaded</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">53</span><span class="token punctuation">:</span><span class="token number">44</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="搭配yield" tabindex="-1"><a class="header-anchor" href="#搭配yield"><span>搭配Yield</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//同步方法中使用</span>
<span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//异步方法中使用</span>
<span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">IAsyncEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">Test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在异步方法中线程同步" tabindex="-1"><a class="header-anchor" href="#在异步方法中线程同步"><span>在异步方法中线程同步</span></a></h3><h4 id="为什么不能使用lock" tabindex="-1"><a class="header-anchor" href="#为什么不能使用lock"><span>为什么不能使用lock</span></a></h4><p>因为lock底层是使用Monitor来实现的线程同步，工作机制是基于互斥锁，在单个线程上获取锁并执行代码块的时候，其他试图获取相同锁的线程将被阻塞，直到锁释放。不直接支持异步编程是因为可能会导致意外的情况。</p><ul><li>异步编程通常包含await表达式，当遇到await的时候，线程可能会释放当前线程到线程池，在这种情况下，已经持有锁的线程已经离开的lock代码块，锁也不会立即释放，这会导致其他线程被无效的阻塞。</li><li>在异步方法中使用lock可能会导致死锁，当异步任务完成的时候，线程可能在不同的上下文中回复执行，如果这种回复的线程试图重新获取已经在等待锁释放的线程持有的锁，就可能会导致死锁。</li><li>异步编程更倾向于采用非阻塞的并发策略，这些允许线程在等待资源释放的时候能够更有效的利用cpu时间，而不是简单地阻塞在那里。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token return-type class-name">Task</span> <span class="token function">LockSample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">lock</span> <span class="token punctuation">(</span>_lock<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token comment">// 不能在lock语句体中await</span>
        <span class="token comment">// await Task.Delay(100);</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="semaphoreslim" tabindex="-1"><a class="header-anchor" href="#semaphoreslim"><span>SemaphoreSlim</span></a></h4><p>使用SemaphoreSlim的WaitAsync方法来控制线程同步</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> sem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SemaphoreSlim</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> stopwatch <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> tasks <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>HeavyJob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> outputs <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;花费时间：</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stopwatch<span class="token punctuation">.</span>ElapsedMilliseconds</span><span class="token punctuation">}</span></span><span class="token string">ms&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

outputs<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> <span class="token function">HeavyJob</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> input<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 模拟根据input值请求一个耗时的操作</span>
    <span class="token keyword">await</span> sem<span class="token punctuation">.</span><span class="token function">WaitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sem<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> input <span class="token operator">*</span> input<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// outputs</span>
花费时间：2097ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h4><p>在某些复杂的同步场景下，可以结合 <code>TaskCompletionSource&lt;T&gt; </code>来协调异步任务之间的依赖关系和顺序执行，还可以通过第三方库来实现异步方法中的线程同步，例如Microsoft.VisualStudio.Threading包里面的AsyncManualResetEvent和Nito.AsyncEx包里面的AsyncLock</p><h2 id="常见误区" tabindex="-1"><a class="header-anchor" href="#常见误区"><span>常见误区</span></a></h2><h3 id="异步一定是多线程吗" tabindex="-1"><a class="header-anchor" href="#异步一定是多线程吗"><span>异步一定是多线程吗？</span></a></h3><ul><li>异步编程不一定非得需要多线程来实现 <ul><li>通过时间片轮转调度</li></ul></li><li>比如在单个线程上使用异步I/O或者事件驱动的编程模型(EAP)</li><li>单线程异步：自己定好定时器，到时间之前去做别的事情</li><li>多线程异步：将任务交给不同的线程，并由自己来指挥调度</li></ul><h3 id="异步方法一定要写成async-task" tabindex="-1"><a class="header-anchor" href="#异步方法一定要写成async-task"><span>异步方法一定要写成<code>Async Task</code></span></a></h3><ul><li>async关键字只是用来配置await使用，从而将方法包装为状态机</li><li>本质上仍然是Task，只不过提供了语法糖，并且函数体中可以直接<code>return Task</code>的泛型类型</li><li>接口中无法声明<code>async Task</code>，只能写Task</li></ul><h3 id="await是否一定会切换同步上下文" tabindex="-1"><a class="header-anchor" href="#await是否一定会切换同步上下文"><span>await是否一定会切换同步上下文</span></a></h3><ul><li>在使用await关键字调用并等待一个异步任务的时候，异步方法不一定会立刻来到新的线程上</li><li>如果await了一个已经完成的任务(包含<code>Task.Delay(0)</code>)，则会直接获得结果</li></ul><h3 id="异步可以全面取代多线程吗" tabindex="-1"><a class="header-anchor" href="#异步可以全面取代多线程吗"><span>异步可以全面取代多线程吗</span></a></h3><p>异步编程与多线程有一定的关系，但是两者并不是可以完全互相替代</p><h3 id="task-result一定会阻塞当前线程吗" tabindex="-1"><a class="header-anchor" href="#task-result一定会阻塞当前线程吗"><span><code>Task.Result</code>一定会阻塞当前线程吗</span></a></h3><p>不一定，如果该Task任务已经完成，那么<code>Task.Result</code>就可以直接得到结果</p><h3 id="开启的异步任务一定不会阻塞当前线程吗" tabindex="-1"><a class="header-anchor" href="#开启的异步任务一定不会阻塞当前线程吗"><span>开启的异步任务一定不会阻塞当前线程吗</span></a></h3><p>await关键字不一定会立刻释放当前线程，所以如果调用的异步方法中存在阻塞(例如调用了<code>Thread.Sleep(0)</code>)，那么依旧会阻塞当前上下文对应的线程</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,93),h={href:"https://www.cnblogs.com/xiaoXuZhi/p/XYH_tsak_one.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://masuit.com/1201?kw=%E8%B0%88%E4%B8%80%E8%B0%88.net%E4%B8%AD%E7%9A%84%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B&t=ud7cj3ltu0ow",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.cnblogs.com/Can-daydayup/p/17383651.html",target:"_blank",rel:"noopener noreferrer"},T=n("h2",{id:"资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#资料"},[n("span",null,"资料")])],-1),q={href:"https://learn.microsoft.com/zh-cn/dotnet/csharp/asynchronous-programming/async-return-types",target:"_blank",rel:"noopener noreferrer"};function A(x,C){const a=c("ExternalLinkIcon");return o(),l("div",null,[k,n("p",null,[s("通过"),n("a",r,[s("工具"),t(a)]),s("去查看生成的状态机(美化后如下)")]),d,n("div",v,[m,b,n("p",null,[s("取消令牌使用指南："),n("a",g,[s("此处"),t(a)])])]),y,n("p",null,[s("聊聊多线程哪一些事儿："),n("a",h,[s("https://www.cnblogs.com/xiaoXuZhi/p/XYH_tsak_one.html"),t(a)]),s(" 勤快哥.net并行编程："),n("a",w,[s("此处"),t(a)]),n("a",f,[s("https://www.cnblogs.com/Can-daydayup/p/17383651.html"),t(a)]),s(" | C# 异步有多少种实现方式？")]),T,n("p",null,[s("异步返回类型："),n("a",q,[s("https://learn.microsoft.com/zh-cn/dotnet/csharp/asynchronous-programming/async-return-types"),t(a)])])])}const D=p(u,[["render",A],["__file","index.html.vue"]]),W=JSON.parse('{"path":"/dotnet/csharp/threadConcurrencyAndAsync/async/","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-11-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["async"],"description":"描述 不必等待前面所有的代码执行完才开始执行某一段代码，这就是异步。就比如不必要等蒸过米饭才开始炒菜，可以让电饭锅去蒸米饭，然后燃气去炒菜，又或者去饭店吃饭，服务员就是主线程，然后顾客点餐就是具体的任务，当服务员去站到顾客面前等待顾客点餐就是同步方法，当服务员给顾客菜单，顾客点完后再给服务员，服务员在顾客点餐的时候可以去忙其他的事情，这个就是异步方法。...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/threadConcurrencyAndAsync/async/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"描述 不必等待前面所有的代码执行完才开始执行某一段代码，这就是异步。就比如不必要等蒸过米饭才开始炒菜，可以让电饭锅去蒸米饭，然后燃气去炒菜，又或者去饭店吃饭，服务员就是主线程，然后顾客点餐就是具体的任务，当服务员去站到顾客面前等待顾客点餐就是同步方法，当服务员给顾客菜单，顾客点完后再给服务员，服务员在顾客点餐的时候可以去忙其他的事情，这个就是异步方法。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1641029030244-a3a42511-f87c-4e14-9434-4a639caf587d.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T09:57:35.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"async"}],["meta",{"property":"article:published_time","content":"2023-11-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-16T09:57:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1641029030244-a3a42511-f87c-4e14-9434-4a639caf587d.png\\"],\\"datePublished\\":\\"2023-11-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-16T09:57:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"描述","slug":"描述","link":"#描述","children":[]},{"level":2,"title":"已有多线程，为何要异步","slug":"已有多线程-为何要异步","link":"#已有多线程-为何要异步","children":[]},{"level":2,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]},{"level":2,"title":"异步实现方式","slug":"异步实现方式","link":"#异步实现方式","children":[{"level":3,"title":"异步方法（Async Method TAP模式）","slug":"异步方法-async-method-tap模式","link":"#异步方法-async-method-tap模式","children":[]},{"level":3,"title":"任务并行库（TPL, Task Parallel Library TAP模式）","slug":"任务并行库-tpl-task-parallel-library-tap模式","link":"#任务并行库-tpl-task-parallel-library-tap模式","children":[]},{"level":3,"title":"Asynchronous Programming Model（APM模式）","slug":"asynchronous-programming-model-apm模式","link":"#asynchronous-programming-model-apm模式","children":[]},{"level":3,"title":"Event-based Asynchronous Pattern（EAP模式）","slug":"event-based-asynchronous-pattern-eap模式","link":"#event-based-asynchronous-pattern-eap模式","children":[]}]},{"level":2,"title":"异步任务(Task)","slug":"异步任务-task","link":"#异步任务-task","children":[{"level":3,"title":"Task状态","slug":"task状态","link":"#task状态","children":[]},{"level":3,"title":"任务的结果","slug":"任务的结果","link":"#任务的结果","children":[]}]},{"level":2,"title":"异步方法","slug":"异步方法","link":"#异步方法","children":[{"level":3,"title":"验证异步不阻塞的情况","slug":"验证异步不阻塞的情况","link":"#验证异步不阻塞的情况","children":[]},{"level":3,"title":"查看生成的状态机","slug":"查看生成的状态机","link":"#查看生成的状态机","children":[]},{"level":3,"title":"Void返回值","slug":"void返回值","link":"#void返回值","children":[]},{"level":3,"title":"阻塞情景","slug":"阻塞情景","link":"#阻塞情景","children":[{"level":4,"title":"Task.Wait & Task.Result","slug":"task-wait-task-result","link":"#task-wait-task-result","children":[]},{"level":4,"title":"Task.Delay vs Thread.Sleep","slug":"task-delay-vs-thread-sleep","link":"#task-delay-vs-thread-sleep","children":[]},{"level":4,"title":"IO等操作的同步方法","slug":"io等操作的同步方法","link":"#io等操作的同步方法","children":[]},{"level":4,"title":"其他繁重且耗时的操作","slug":"其他繁重且耗时的操作","link":"#其他繁重且耗时的操作","children":[]}]},{"level":3,"title":"如何实现不同的线程切换","slug":"如何实现不同的线程切换","link":"#如何实现不同的线程切换","children":[]}]},{"level":2,"title":"重要思想","slug":"重要思想","link":"#重要思想","children":[]},{"level":2,"title":"同步上下文","slug":"同步上下文","link":"#同步上下文","children":[{"level":3,"title":"ConfigureAwait","slug":"configureawait","link":"#configureawait","children":[]}]},{"level":2,"title":"Task和ValueTask","slug":"task和valuetask","link":"#task和valuetask","children":[{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"如何创建异步任务","slug":"如何创建异步任务","link":"#如何创建异步任务","children":[]},{"level":3,"title":"如何开启多个异步任务","slug":"如何开启多个异步任务","link":"#如何开启多个异步任务","children":[]},{"level":3,"title":"异步任务如何取消","slug":"异步任务如何取消","link":"#异步任务如何取消","children":[]},{"level":3,"title":"如何编写支持取消的异步任务","slug":"如何编写支持取消的异步任务","link":"#如何编写支持取消的异步任务","children":[]},{"level":3,"title":"异步方法会在新线程中执行吗？","slug":"异步方法会在新线程中执行吗","link":"#异步方法会在新线程中执行吗","children":[]},{"level":3,"title":"任务超时如何实现","slug":"任务超时如何实现","link":"#任务超时如何实现","children":[{"level":4,"title":"WhenAny","slug":"whenany","link":"#whenany","children":[]},{"level":4,"title":"WaitAsync(推荐)","slug":"waitasync-推荐","link":"#waitasync-推荐","children":[]},{"level":4,"title":"CancellationTokenSource取消","slug":"cancellationtokensource取消","link":"#cancellationtokensource取消","children":[]},{"level":4,"title":"Task的Wait","slug":"task的wait","link":"#task的wait","children":[]}]},{"level":3,"title":"在异步任务中如何汇报进度","slug":"在异步任务中如何汇报进度","link":"#在异步任务中如何汇报进度","children":[]},{"level":3,"title":"如何在同步方法中调用异步方法","slug":"如何在同步方法中调用异步方法","link":"#如何在同步方法中调用异步方法","children":[{"level":4,"title":"阻塞示例","slug":"阻塞示例","link":"#阻塞示例","children":[]},{"level":4,"title":"SafeFireAndForget","slug":"safefireandforget","link":"#safefireandforget","children":[]},{"level":4,"title":"ContinueWith","slug":"continuewith","link":"#continuewith","children":[]},{"level":4,"title":"私有字段方案","slug":"私有字段方案","link":"#私有字段方案","children":[]},{"level":4,"title":"Async Factory","slug":"async-factory","link":"#async-factory","children":[]}]},{"level":3,"title":"搭配Yield","slug":"搭配yield","link":"#搭配yield","children":[]},{"level":3,"title":"在异步方法中线程同步","slug":"在异步方法中线程同步","link":"#在异步方法中线程同步","children":[{"level":4,"title":"为什么不能使用lock","slug":"为什么不能使用lock","link":"#为什么不能使用lock","children":[]},{"level":4,"title":"SemaphoreSlim","slug":"semaphoreslim","link":"#semaphoreslim","children":[]},{"level":4,"title":"其他方法","slug":"其他方法","link":"#其他方法","children":[]}]}]},{"level":2,"title":"常见误区","slug":"常见误区","link":"#常见误区","children":[{"level":3,"title":"异步一定是多线程吗？","slug":"异步一定是多线程吗","link":"#异步一定是多线程吗","children":[]},{"level":3,"title":"异步方法一定要写成Async Task","slug":"异步方法一定要写成async-task","link":"#异步方法一定要写成async-task","children":[]},{"level":3,"title":"await是否一定会切换同步上下文","slug":"await是否一定会切换同步上下文","link":"#await是否一定会切换同步上下文","children":[]},{"level":3,"title":"异步可以全面取代多线程吗","slug":"异步可以全面取代多线程吗","link":"#异步可以全面取代多线程吗","children":[]},{"level":3,"title":"Task.Result一定会阻塞当前线程吗","slug":"task-result一定会阻塞当前线程吗","link":"#task-result一定会阻塞当前线程吗","children":[]},{"level":3,"title":"开启的异步任务一定不会阻塞当前线程吗","slug":"开启的异步任务一定不会阻塞当前线程吗","link":"#开启的异步任务一定不会阻塞当前线程吗","children":[]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1713261455000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":11},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":3}]},"readingTime":{"minutes":30.3,"words":9091},"filePathRelative":"dotnet/csharp/threadConcurrencyAndAsync/async/readme.md","localizedDate":"2023年11月17日","excerpt":"<h2>描述</h2>\\n<p>不必等待前面所有的代码执行完才开始执行某一段代码，这就是异步。就比如不必要等蒸过米饭才开始炒菜，可以让电饭锅去蒸米饭，然后燃气去炒菜，又或者去饭店吃饭，服务员就是主线程，然后顾客点餐就是具体的任务，当服务员去站到顾客面前等待顾客点餐就是同步方法，当服务员给顾客菜单，顾客点完后再给服务员，服务员在顾客点餐的时候可以去忙其他的事情，这个就是异步方法。“异步点餐”可以让服务员同时服务更多的客人，但是不会使得服务单个客人的时间变短，甚至有的情况下还可能变长。</p>\\n<h2>已有多线程，为何要异步</h2>\\n<p>异步和多线程并不是一个同等关系，它俩没有直接的关系，异步是最终目的，多线程只是我们实现异步的一种手段，单线程和多线程都会出现阻塞的情况，这个时候就会用到异步方法去防止阻塞。\\n<img src=\\"/common/1641029030244-a3a42511-f87c-4e14-9434-4a639caf587d.png\\" alt=\\"image.png\\" loading=\\"lazy\\"></p>","autoDesc":true}');export{D as comp,W as data};
