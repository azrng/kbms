import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as n}from"./app-HmxoaDfj.js";const e={},l=n(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>ULID 解决了 UUID 的一些性能和排序限制。它们将时间戳与随机数据相结合，以创建可按字典排序的 128 位标识符。</p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构"><span>结构</span></a></h2><p>1、时间戳：前 10 个字符以毫秒为单位对 Unix 时间戳进行编码。</p><p>2、随机性：其余字符随机生成，确保唯一性。</p><h3 id="uuid结构" tabindex="-1"><a class="header-anchor" href="#uuid结构"><span>UUID结构</span></a></h3><p>版本：UUID 中的第 13 个字符表示其版本（例如，版本 1 是基于时间的，版本 4 是随机的）。</p><p>变体：第 17 个字符表示变体，定义 UUID 布局和含义。</p><h2 id="对比uuid" tabindex="-1"><a class="header-anchor" href="#对比uuid"><span>对比UUId</span></a></h2><h3 id="_1-1-可排序性" tabindex="-1"><a class="header-anchor" href="#_1-1-可排序性"><span>1.1 可排序性</span></a></h3><p>ULID 能够根据生成时的时间戳进行排序，使得生成的标识能够按照时间顺序排列，并且支持范围查询和快速索引。</p><h3 id="_1-2-长度更短" tabindex="-1"><a class="header-anchor" href="#_1-2-长度更短"><span>1.2 长度更短</span></a></h3><p>ULID 使用 26 个字符的 Base32 编码表示，相比标准的 UUID 使用的 36 个字符长度更短，减少网络传输和存储的开销。</p><h3 id="_1-3-高性能" tabindex="-1"><a class="header-anchor" href="#_1-3-高性能"><span>1.3 高性能</span></a></h3><p>由于 ULID 可以根据时间戳排序，它非常适合在分布式系统中使用，尤其是在高并发环境下，可以有效减少冲突和竞争。 尽管 ULID 的冲突概率很低，但并不能保证完全唯一。因此，在高度依赖唯一性的场景中，仍建议使用更长的 UUID。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>安装nuget包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;PackageReference Include=&quot;Ulid&quot; Version=&quot;1.3.3&quot; /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h3><p>生成ULID</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Ulid</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> newUlid</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Ulid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">NewUlid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">newUlid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="用例和性能优化" tabindex="-1"><a class="header-anchor" href="#用例和性能优化"><span>用例和性能优化</span></a></h2><h3 id="数据库索引" tabindex="-1"><a class="header-anchor" href="#数据库索引"><span>数据库索引</span></a></h3><p>在数据库中使用 ULID 可以大大提高索引效率。由于 ULID 可按其时间戳组件进行排序，因此它们可以保持插入顺序，从而减少碎片并提高读写性能。</p><p>示例：实体框架集成若要在 Entity Framework 中利用 ULID，可以将模型配置为使用 ULID 作为主键：</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Ulid</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> OrderId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> OrderDate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Other properties  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> OnModelCreating</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ModelBuilder</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> modelBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    modelBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Property</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> o</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">OrderId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">HasConversion</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">            v</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(),  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">            v</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Ulid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Parse</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分布式系统" tabindex="-1"><a class="header-anchor" href="#分布式系统"><span><strong>分布式系统</strong></span></a></h2><p>在分布式系统中，ULID 的独特性和可排序性使其成为时间顺序很重要的场景（例如日志记录和事件溯源）的理想选择。</p><p>示例：在分布式环境中实施 ULID</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DistributedEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Ulid</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> EventId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> EventData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DateTimeOffset</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> Timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> EventService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> LogEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> eventData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> distributedEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DistributedEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">            EventId</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Ulid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">NewUlid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(),  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">            EventData</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> eventData</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">            Timestamp</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> DateTimeOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">UtcNow</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        };  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // Save to database or send to event queue  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 UUID 是生成唯一标识符的可靠解决方案，但它们在随机性和索引效率低下的局限性在高性能应用程序中可能非常严重。</p><p>ULID 提供了一种引人注目的替代方案，提供相同级别的唯一性，并具有词典分类和改进的可读性等额外优势。</p><p>可以增强应用程序的性能、可伸缩性和可维护性。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/_o6BoxH3PWX7_2Qjhg3lzA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_o6BoxH3PWX7_2Qjhg3lzA</a> | ULID : 一种可排序的随机标识生成方式以及在 .NET 中的使用</p><p>.NET 唯一标识符的效率 UUID VS ULID:<a href="https://mp.weixin.qq.com/s/lM7b44dbfSRgShF8VKCeEA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/lM7b44dbfSRgShF8VKCeEA</a></p>`,36),h=[l];function t(p,k){return a(),s("div",null,h)}const B=i(e,[["render",t],["__file","ulid.html.vue"]]),g=JSON.parse('{"path":"/middleware/identityId/ulid.html","title":"ULID","lang":"zh-CN","frontmatter":{"title":"ULID","lang":"zh-CN","date":"2023-09-29T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"ulid","slug":"sz2ktb131uqq5g5x","docsId":"135411826","description":"概述 ULID 解决了 UUID 的一些性能和排序限制。它们将时间戳与随机数据相结合，以创建可按字典排序的 128 位标识符。 结构 1、时间戳：前 10 个字符以毫秒为单位对 Unix 时间戳进行编码。 2、随机性：其余字符随机生成，确保唯一性。 UUID结构 版本：UUID 中的第 13 个字符表示其版本（例如，版本 1 是基于时间的，版本 4 是...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/identityId/ulid.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"ULID"}],["meta",{"property":"og:description","content":"概述 ULID 解决了 UUID 的一些性能和排序限制。它们将时间戳与随机数据相结合，以创建可按字典排序的 128 位标识符。 结构 1、时间戳：前 10 个字符以毫秒为单位对 Unix 时间戳进行编码。 2、随机性：其余字符随机生成，确保唯一性。 UUID结构 版本：UUID 中的第 13 个字符表示其版本（例如，版本 1 是基于时间的，版本 4 是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-10T14:07:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-10T14:07:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ULID\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-10T14:07:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"结构","slug":"结构","link":"#结构","children":[{"level":3,"title":"UUID结构","slug":"uuid结构","link":"#uuid结构","children":[]}]},{"level":2,"title":"对比UUId","slug":"对比uuid","link":"#对比uuid","children":[{"level":3,"title":"1.1 可排序性","slug":"_1-1-可排序性","link":"#_1-1-可排序性","children":[]},{"level":3,"title":"1.2 长度更短","slug":"_1-2-长度更短","link":"#_1-2-长度更短","children":[]},{"level":3,"title":"1.3 高性能","slug":"_1-3-高性能","link":"#_1-3-高性能","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[]}]},{"level":2,"title":"用例和性能优化","slug":"用例和性能优化","link":"#用例和性能优化","children":[{"level":3,"title":"数据库索引","slug":"数据库索引","link":"#数据库索引","children":[]}]},{"level":2,"title":"分布式系统","slug":"分布式系统","link":"#分布式系统","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1720620448000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":2.65,"words":796},"filePathRelative":"middleware/identityId/ulid.md","localizedDate":"2023年9月29日","excerpt":"<h2>概述</h2>\\n<p>ULID 解决了 UUID 的一些性能和排序限制。它们将时间戳与随机数据相结合，以创建可按字典排序的 128 位标识符。</p>\\n<h2>结构</h2>\\n<p>1、时间戳：前 10 个字符以毫秒为单位对 Unix 时间戳进行编码。</p>\\n<p>2、随机性：其余字符随机生成，确保唯一性。</p>\\n<h3>UUID结构</h3>\\n<p>版本：UUID 中的第 13 个字符表示其版本（例如，版本 1 是基于时间的，版本 4 是随机的）。</p>\\n<p>变体：第 17 个字符表示变体，定义 UUID 布局和含义。</p>\\n<h2>对比UUId</h2>\\n<h3>1.1 可排序性</h3>","autoDesc":true}');export{B as comp,g as data};
