import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as o,o as n}from"./app-B3EhLA94.js";const a={};function l(s,e){return n(),t("div",null,e[0]||(e[0]=[o('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>来自网络，内容是否过时自行判断</p></div><h3 id="net-工程化" tabindex="-1"><a class="header-anchor" href="#net-工程化"><span>.NET 工程化</span></a></h3><p>#、StyleCop编码规范<br><a href="https://www.cnblogs.com/DarkInNight/p/5457875.html" target="_blank" rel="noopener noreferrer">StyleCop规则汇总</a><br><a href="https://www.jianshu.com/p/dab842095449" target="_blank" rel="noopener noreferrer">在VS2017中使用StyleCop</a><br><a href="https://blog.csdn.net/michel4liu/article/details/83388336" target="_blank" rel="noopener noreferrer">netcore将StyleCop.Analyzers自定义规则应用到整个解决方案</a></p><p>#、Nuget包<br><a href="https://docs.microsoft.com/zh-cn/nuget/reference/nuget-exe-cli-reference" target="_blank" rel="noopener noreferrer">Nuget Cli 命令</a></p><p><a href="https://docs.microsoft.com/zh-cn/nuget/consume-packages/install-use-packages-visual-studio" target="_blank" rel="noopener noreferrer">在 Vistual Studio 中管理项目、解决方案的nuget包</a><br> 创建并发布Nuget包<br><a href="https://docs.microsoft.com/zh-cn/nuget/quickstart/create-and-publish-a-package-using-visual-studio?tabs=netcore-cli" target="_blank" rel="noopener noreferrer">使用 Visual Studio 创建和发布 NuGet 包</a><br><a href="https://www.cnblogs.com/xiongze520/p/15241207.html" target="_blank" rel="noopener noreferrer">使用 Visual Studio 创建包并通过浏览器上传发布（使用简单）</a><br> 搭建本地Nuget<br><a href="https://www.cnblogs.com/hunternet/p/12880210.html" target="_blank" rel="noopener noreferrer">使用NuGet.Server 搭建本地Nuget</a>（为什么要规范使用nuget包，如何清除本地包缓存）<br><a href="https://www.cnblogs.com/kklldog/p/15236377.html" target="_blank" rel="noopener noreferrer">使用BaGet搭建本地Nuget</a><br><a href="https://www.cnblogs.com/savorboard/p/fuget.html" target="_blank" rel="noopener noreferrer">使用FuGet搭建本地Nuget</a></p><p>#、Swagger Api文档<br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">Swagger 规范 (swagger.json)</a><br><a href="https://www.cnblogs.com/beyondbit/p/5957124.html" target="_blank" rel="noopener noreferrer">Swagger+AutoRest 生成web api客户端(.Net)</a><br> Swashbuckle方式<br><a href="https://www.cnblogs.com/cool-net/p/15655036.html" target="_blank" rel="noopener noreferrer">.NET Core 集成Swagger文档与自定义Swagger UI、API分组</a><br><a href="https://www.cnblogs.com/yilezhu/p/9241261.html" target="_blank" rel="noopener noreferrer">Asp.Net Core 使用Swagger生成API文档并添加文档描述、响应类型描述</a><br><a href="https://www.cnblogs.com/JulianHuang/p/14131203.html" target="_blank" rel="noopener noreferrer">.NET Core swagger扩展配置（请求示例、约束请求/响应媒体类型、指示API的预期输出内容、预期状态码）</a><br><a href="https://mp.weixin.qq.com/s/SHNNQoYF-t8i2j85E1oSYA" target="_blank" rel="noopener noreferrer">Asp.Net Core 给API的Model生成说明文档、隐藏某些API</a><br><a href="https://www.cnblogs.com/axzxs2001/archive/2018/07/02/9253495.html" target="_blank" rel="noopener noreferrer">一个Swagger支持多个api端口的配置（方便测试）</a><br><a href="https://www.5axxw.com/questions/content/tv3wgq" target="_blank" rel="noopener noreferrer">Swagger UI 将枚举数字显示位字符串</a>（也可扩展为显示枚举的中文描述信息）</p><p><a href="https://www.cnblogs.com/Erik_Xu/p/8904854.html" target="_blank" rel="noopener noreferrer">Asp.Net Core Swagger 页面支持文件上传</a><br> NSwag方式<br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-2.2&amp;tabs=visual-studio" target="_blank" rel="noopener noreferrer">Asp.Net Core 使用NSwag生成Swagger Api文档</a><br><a href="https://www.cnblogs.com/w2011/p/5979708.html" target="_blank" rel="noopener noreferrer">NSwagStudio for Swagger Api</a><br> 借助 NSwagStudio 工具可为包含 Swagger 的第三方 API，生成API客户端代理代码</p><h3 id="aop面向切面编程" tabindex="-1"><a class="header-anchor" href="#aop面向切面编程"><span>AOP面向切面编程</span></a></h3><p>AOP（Aspect-Oriented Programming）是一种将函数的辅助性功能与业务逻辑相分离的编程范式（programming paradigm），其目的是将横切关注点（cross-cutting concerns）分离出来，使得程序具有更高的模块化特性。<br> AOP体现原则：单一职责原则 和 开放封闭原则<br><a href="http://xn--ASP-lp6e.NET" target="_blank" rel="noopener noreferrer">在ASP.NET</a> Core中可使用三种方式实现AOP：中间件Middleware、过滤器Filter、代码织入（静态织入和动态代理）</p><p>#、中间件Middleware（管道级）<br> 中间件就是嵌入到应用管道中用于处理请求和响应的一段代码，<a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core 中使用了大量的中间件。eg：全局异常、路由、响应缓存、响应压缩、身份认证、CORS、日志记录等等</p><p><a href="https://www.cnblogs.com/Cwj-XFH/p/9690728.html" target="_blank" rel="noopener noreferrer">ASP.NET Core Middleware 的实现（Conventional Middleware 和IMiddleware）</a><br><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Middleware 的实现（Run，Map，Use，内置中间件）<br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/?view=aspnetcore-2.1" target="_blank" rel="noopener noreferrer">【机翻】</a> <a href="https://www.cnblogs.com/stulzq/p/7760648.html" target="_blank" rel="noopener noreferrer">【人工翻译】</a></p><p>#、过滤器Filter（action级）<br><a href="https://www.cnblogs.com/viter/p/10107886.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 被低估的过滤器</a><br><a href="https://cloud.tencent.com/developer/article/1399634" target="_blank" rel="noopener noreferrer">ASP.NET Core MVC Filter的定义、注册和各种Filter执行顺序</a></p><p>#、代码织入（对象的拦截器）<br> l 编译时静态织入<br> 框架：<a href="https://www.postsharp.net/" target="_blank" rel="noopener noreferrer">PostSharp</a>、<a href="https://github.com/Fody/Fody" target="_blank" rel="noopener noreferrer">Fody</a><br> 特点：[编译型]性能高，缺点是缺乏灵活性<br> 实现思想：给语言的编译器做扩展，使得在编译程序的时候编译器将相应的“切面”代码织入到业务代码的指定连接点，输出整合的结果。<br> l 运行时动态织入（动态代理）<br> 框架：<a href="https://github.com/castleproject/Core" target="_blank" rel="noopener noreferrer">Castle DynamicProxy</a>，<br> 特点：[运行时动态代理]灵活性高，性能相对“静态织入”低<br> 实现方式：将扩展添加到运行虚拟机而不是编译器。切面代码和业务代码分别独立编译，而在运行时由虚拟机在必要时进行织入。</p><p><a href="http://www.cnblogs.com/farb/p/AOPIntroduction.html" target="_blank" rel="noopener noreferrer">.Net AOP代码织入介绍</a><br><a href="https://www.cnblogs.com/farb/p/AopImplementationTypes.html" target="_blank" rel="noopener noreferrer">.Net AOP代码织入实现类型及原理（静态、动态、优缺点）</a><br><a href="https://www.cnblogs.com/farb/p/MethodInterception.html" target="_blank" rel="noopener noreferrer">.Net AOP代码织入之《拦截方法》（包含案例：数据事物、多线程）</a><br><a href="https://www.cnblogs.com/farb/p/UnitTestAspects.html" target="_blank" rel="noopener noreferrer">.Net AOP代码织入之《单元测试切面》</a><br><a href="http://www.cnblogs.com/farb/p/AOPBuildACarRentApp.html" target="_blank" rel="noopener noreferrer">.Net AOP代码织入之《案例：构建一个汽车租赁应用》</a><br> 演示了清晰的业务代码，因为非功能性需求（eg：logging，防御性编程，事务，重试，和异常处理等）导致代码变得冗长、难懂、不易维护。通过使用AOP来让业务代码重新清晰化<br><a href="https://www.cnblogs.com/hezp/p/11346120.html" target="_blank" rel="noopener noreferrer">.NET Core 原生DI+AOP实现注解式编程</a></p><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h3><p><a href="https://www.cnblogs.com/alterem/p/11280504.html" target="_blank" rel="noopener noreferrer">Restful API 中的错误处理设计</a><br><a href="https://www.cnblogs.com/artech/p/error-handling-in-asp-net-core-1.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 应用的错误处理[1]：三种呈现错误页面的方式</a><br><a href="https://www.cnblogs.com/xiyin/p/7507405.html" target="_blank" rel="noopener noreferrer">使用UseStatusCodePages 根据Status选择处理方式（跳转页面）</a><br><a href="https://www.cnblogs.com/hulizhong/p/10797636.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 自定义ErrorHandlingMiddleware 全局异常捕获</a></p><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h3><p><a href="https://www.cnblogs.com/viter/p/10146312.html" target="_blank" rel="noopener noreferrer">.NET Core 缓存使用、配置、依赖策略</a><br><a href="https://www.cnblogs.com/ants/p/8482227.html" target="_blank" rel="noopener noreferrer">.NET Core MemoryCache 缓存过期策略（绝对、滑动、依赖、过期回调）</a><br><a href="https://www.cnblogs.com/viter/p/10161581.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 使用分布式缓存（redis、sqlserver）</a><br><a href="https://mp.weixin.qq.com/s/gwiCY6qfLtWLDe2AjlbOsw" target="_blank" rel="noopener noreferrer">ASP.NET Core 使用RedLock.net 实现分布式锁</a></p><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h3><p><a href="https://blog.csdn.net/liuzishang/article/details/99817158" target="_blank" rel="noopener noreferrer">.Net Core 自带 Logging 配置文件的使用</a><br><a href="https://www.cnblogs.com/lwqlun/p/9683482.html" target="_blank" rel="noopener noreferrer">玩转ASP.NET Core 中的日志组件</a><br><a href="https://github.com/aspnet/Extensions/tree/master/src/Logging" target="_blank" rel="noopener noreferrer">[github]ASP.NET Core Microsoft.Extensions.Logging 默认log组件</a><br><a href="https://www.cnblogs.com/tshaoguo/p/10142786.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 中使用Nlog 记录日志</a><br><a href="https://www.cnblogs.com/zhangnever/p/12459399.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 中使用Serilog 记录日志</a> （代码配置、配置文件配置）<br><a href="https://www.cnblogs.com/intotf/p/10075592.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 中使用log4net 记录日志</a><br> 分布式日志<br><a href="https://www.cnblogs.com/ZaraNet/p/10315313.html" target="_blank" rel="noopener noreferrer">.NET Core中使用Exceptionless分布式日志框架</a><br><a href="https://www.cnblogs.com/edisonchou/p/exceptionless_v5_deployment_introduction.html" target="_blank" rel="noopener noreferrer">Exceptionless 5.0.0 本地Docker快速部署介绍</a><br><a href="https://www.cnblogs.com/ShaoJianan/p/11455250.html" target="_blank" rel="noopener noreferrer">.NET Core 快速搭建Docker-ELK分布式日志中心</a><br> elasticsearch<br><a href="https://www.cnblogs.com/fallTakeMan/p/13550713.html" target="_blank" rel="noopener noreferrer">Asp.Net Core 项目中使用 Serilog 输出日志到 Elasticsearch</a><br><a href="https://www.cnblogs.com/lwc1st/p/10009935.html" target="_blank" rel="noopener noreferrer">ASP.NET Core使用Elasticsearch记录NLog日志</a><br><a href="https://www.cnblogs.com/wxy0126/p/11381598.html" target="_blank" rel="noopener noreferrer">Docker安装Elasticsearch-Head插件(可视化查询界面)</a> <a href="https://www.shuzhiduo.com/A/6pdDAWnXzw/" target="_blank" rel="noopener noreferrer">(如何使用)</a><br><a href="https://www.cnblogs.com/weihanli/p/12105239.html" target="_blank" rel="noopener noreferrer">asp.net core 自定义基于 HttpContext 的 Serilog Enricher</a><br> 日志摄取器<br><a href="https://blog.csdn.net/qq_30236895/article/details/108191662" target="_blank" rel="noopener noreferrer">为什么我们需要Logstash,Fluentd等日志摄取器？</a><br><a href="https://www.cnblogs.com/JulianHuang/p/14049455.html" target="_blank" rel="noopener noreferrer">ASP.NET Core容器化应用无侵入日志收集方案（nlog+EFK）</a></p><h3 id="响应优化" tabindex="-1"><a class="header-anchor" href="#响应优化"><span>响应优化</span></a></h3><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/performance/response-compression?view=aspnetcore-2.1" target="_blank" rel="noopener noreferrer">在ASP.NET Core 中的响应压缩</a><br><a href="https://blog.csdn.net/mzl87/article/details/88821982" target="_blank" rel="noopener noreferrer">ASP.NET Core 中使用ResponseCache 响应缓存</a></p><h3 id="上传下载" tabindex="-1"><a class="header-anchor" href="#上传下载"><span>上传下载</span></a></h3><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/file-uploads?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">ASP.NET Core 中的文件上传（IFormFile）、流式处理上传大文件</a><br><a href="https://www.cnblogs.com/CreateMyself/p/13466457.html" target="_blank" rel="noopener noreferrer">.NET Core Web API 基于tus协议实现断点续传(上传)</a><br><a href="https://www.cnblogs.com/CreateMyself/p/8449414.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 下载断点续传</a><br><a href="https://www.cnblogs.com/Soar1991/p/15165595.html" target="_blank" rel="noopener noreferrer">.NET Core 多线程下载（Downloader插件）</a></p><h3 id="健康检查" tabindex="-1"><a class="header-anchor" href="#健康检查"><span>健康检查</span></a></h3><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 中的运行状况检查（IHealthCheck）</a><br><a href="https://www.cnblogs.com/yyfh/p/11787434.html" target="_blank" rel="noopener noreferrer">.Net Core实现健康检查（UI）</a><br><a href="https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks" target="_blank" rel="noopener noreferrer">[github]ASP.NET Core HealthChecks（健康检查，异常webhooks通知）</a><br> 使用案例：<br><a href="https://www.cnblogs.com/JulianHuang/p/10837804.html" target="_blank" rel="noopener noreferrer">使用ASP.NET Core实现Docker的HealthCheck指令</a><br><a href="https://github.com/Xabaril/AspNetCore.Diagnostics.HealthChecks/blob/master/doc/kubernetes-liveness.md" target="_blank" rel="noopener noreferrer">Kubernetes liveness and readiness probes using HealthChecks</a></p><h3 id="其他特性" tabindex="-1"><a class="header-anchor" href="#其他特性"><span>其他特性</span></a></h3><p>#、对象池</p><p><a href="https://www.cnblogs.com/catcher1994/p/9666944.html" target="_blank" rel="noopener noreferrer">.NET Core 中Object Pool的简单使用</a><br><a href="https://www.cnblogs.com/ireadme/p/14521356.html" target="_blank" rel="noopener noreferrer">如何在 C## 中使用 ArrayPool 和 MemoryPool</a></p><p>#、WebHooks<br><a href="https://docs.microsoft.com/zh-cn/aspnet/webhooks/" target="_blank" rel="noopener noreferrer">ASP.NET Webhook 概述</a><br><a href="https://www.talkingdotnet.com/webhooks-with-asp-net-core-dropbox-and-github/" target="_blank" rel="noopener noreferrer">WebHooks with ASP.NET Core – DropBox and GitHub</a></p><h3 id="后台任务" tabindex="-1"><a class="header-anchor" href="#后台任务"><span>后台任务</span></a></h3><p>基础知识<br><a href="https://q.cnblogs.com/q/87178/" target="_blank" rel="noopener noreferrer">服务宿主是IIS，需要注意IIS的回收策略对后台任务的影响</a><br><a href="https://www.cnblogs.com/zhangweizhong/p/4889276.html" target="_blank" rel="noopener noreferrer">Cron表达式</a><br><a href="https://www.bejson.com/othertools/cron/" target="_blank" rel="noopener noreferrer">Cron表达式在线生成</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-3.0&amp;tabs=visual-studio" target="_blank" rel="noopener noreferrer">ASP.NET Core 中使用托管服务实现后台任务（后台任务、作用域任务、队列任务）</a><br><a href="https://www.cnblogs.com/podolski/p/13890572.html" target="_blank" rel="noopener noreferrer">.NET Core 创建跨平台后台服务（windows、linux）</a></p><p><a href="https://www.cnblogs.com/ittranslator/p/worker-service-gracefully-shutdown.html" target="_blank" rel="noopener noreferrer">.NET Worker Service 如何优雅退出（IHostApplicationLifetime ）</a><br><a href="https://www.cnblogs.com/abeam/p/8032080.html" target="_blank" rel="noopener noreferrer">使用Topshelf 创建Windows 服务</a><br> #、<a href="https://github.com/HangfireIO/Hangfire" target="_blank" rel="noopener noreferrer">Hangfire（5024 stars）</a><br> 特点：不需要Windows服务或单独的进程<br><a href="http://docs.hangfire.io/en/latest/getting-started/aspnet-core-applications.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 中使用Hangfire任务管理（含Dashboard）</a><br><a href="http://docs.hangfire.io/en/latest/configuration/using-dashboard.html" target="_blank" rel="noopener noreferrer">Hangfire 授权、自定义路由、只读Dashboard、多数据库源、设置主应用</a><br><a href="http://docs.hangfire.io/en/latest/background-methods/index.html" target="_blank" rel="noopener noreferrer">Hangfire 队列任务、计划任务、周期性任务</a><br><a href="https://github.com/marcoCasamento/Hangfire.Redis.StackExchange" target="_blank" rel="noopener noreferrer">ASP.NET Core 中使用Hangfire.Redis.StackExchange存储</a><br><a href="https://www.cnblogs.com/weihanli/p/implement-job-schedule-via-cron-for-dotnetcore.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 中Hangfire.Cronos 结合BackgroundService 实现任务调度</a><br><a href="https://github.com/yuzd/Hangfire.HttpJob/wiki/00.QickStart" target="_blank" rel="noopener noreferrer">使用Hangfire.HttpJob实现调度与业务分离</a><br><a href="https://blog.csdn.net/qinyuanpei/article/details/95936781" target="_blank" rel="noopener noreferrer">使用ASP.NET Core和Hangfire实现HTTP异步化方案</a><br> #、<a href="https://github.com/quartznet/quartznet" target="_blank" rel="noopener noreferrer">Quartz.NET（3404 stars）</a><br><a href="https://www.cnblogs.com/yaopengfei/p/8613198.html" target="_blank" rel="noopener noreferrer">Quartz.Net几种部署模式(IIS、Exe、服务部署【借助TopSelf、服务类】）</a><br><a href="https://www.cnblogs.com/JulianHuang/p/10361763.html" target="_blank" rel="noopener noreferrer">ASP.NET Core2.2+Quartz.Net 实现web定时任务</a><br><a href="https://www.cnblogs.com/abeam/p/8044460.html" target="_blank" rel="noopener noreferrer">Quartz.NET 配置文件详解（quartz.config 和quartz_jobs.xml）</a><br> ----quartz.config可以合并到App.config和Web.config中<br><a href="https://blog.csdn.net/starfd/article/details/80016513" target="_blank" rel="noopener noreferrer">quartz.net 3.x版本如何通过xml文件进行Job配置</a><br><a href="https://github.com/guryanovev/CrystalQuartz" target="_blank" rel="noopener noreferrer">CrystalQuartz</a><br><a href="https://www.cnblogs.com/shanyou/archive/2012/12/29/2838721.html" target="_blank" rel="noopener noreferrer">配置Quartz.NET Cluster以及远程管理（CrystalQuartz）</a><br><a href="https://www.cnblogs.com/Wolfmanlq/p/5873235.html" target="_blank" rel="noopener noreferrer">Quartz.NET 可视化Job管理（CrystalQuartz）</a><br><a href="http://guryanovev.github.io/CrystalQuartz/demo/" target="_blank" rel="noopener noreferrer">CrystalQuartz 在线 Demo</a><br> #、其他优秀后台任务开源库</p><p><a href="https://github.com/fluentscheduler/FluentScheduler" target="_blank" rel="noopener noreferrer">[github] FluentScheduler</a></p><h3 id="认证和授权" tabindex="-1"><a class="header-anchor" href="#认证和授权"><span>认证和授权</span></a></h3><p><a href="https://blog.csdn.net/huangpb123/article/details/103933400" target="_blank" rel="noopener noreferrer">授权认证登录之 Cookie、Session、Token、JWT 详解</a><br><a href="https://www.cnblogs.com/dudu/p/6367303.html" target="_blank" rel="noopener noreferrer">理解ASP.NET Core验证模型(Claim, ClaimsIdentity, ClaimsPrincipal)</a><br> 简单说明： Claim就是证件中的信息；ClaimsIdentity就是证件（eg：现实生活中的身份证）；ClaimsPrincipal就是持有证件的人</p><p>#、<a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core Identity身份认证<br> 命名空间：Microsoft.AspNetCore.Identity<br><a href="https://www.cnblogs.com/MrHSR/archive/2019/03/21/10572462.html" target="_blank" rel="noopener noreferrer">创建完整的ASP.NET Core Identity基架（多图）</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/identity?view=aspnetcore-3.0&amp;tabs=visual-studio" target="_blank" rel="noopener noreferrer">ASP.NET Core Identity框架简介</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/identity-configuration?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core Identity配置（声明类型、锁定策略、密码策略、登录策略等等）</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/accconfirm?view=aspnetcore-3.0&amp;tabs=visual-studio" target="_blank" rel="noopener noreferrer">ASP.NET Core 中注册确认电子邮件和重置密码</a><br> 双因素认证<br><a href="http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html" target="_blank" rel="noopener noreferrer">双因素认证（2FA）教程[阮一峰]</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/identity-enable-qrcodes?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">在ASP.NET Core 中启用TOTP身份验证APP</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/?view=aspnetcore-3.0&amp;tabs=visual-studio" target="_blank" rel="noopener noreferrer">ASP.NET Core Identity身份验证支持OAuth2第三方验证提供程序</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/customize-identity-model?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core Identity中自定义模型</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/identity-custom-storage-providers?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core Idendity自定义存储提供程序（Azure表存储、Dapper）</a><br> #、基于Cookie的身份认证<br> 命名空间：Microsoft.AspNetCore.Authentication.Cookies<br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/cookie?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core中使用Cookie身份验证</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/social-without-identity?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core Cookie身份验证支持OAuth2第三方验证提供程序</a><br> #、授权<br> 命名空间：Microsoft.AspNetCore.Authorization<br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/simple?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 简单授权</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/roles?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 基于角色的授权</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/claims?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 基于声明的授权</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/policies?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 基于策略的授权</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/iauthorizationpolicyprovider?view=aspnetcore-3.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 自定义授权提供程序</a><br><a href="https://www.cnblogs.com/axzxs2001/p/7530929.html" target="_blank" rel="noopener noreferrer">ASP.NET Core web api基于JWT自定义策略授权</a><br><a href="https://www.cnblogs.com/kklldog/p/auth-in-aspnetcore.html" target="_blank" rel="noopener noreferrer">ASP.NET Core Authentication and Authorization</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/razor-pages-authorization?view=aspnetcore-3.1" target="_blank" rel="noopener noreferrer">ASP.NET Core razor page 授权约定</a><br> .NET Core JWT权限验证 <a href="https://mp.weixin.qq.com/s/7135y3MkUlPIp-flfwscig" target="_blank" rel="noopener noreferrer">[博文]</a> <a href="https://www.bilibili.com/video/av58096866/?p=4" target="_blank" rel="noopener noreferrer">[视频]</a><br><a href="https://www.cnblogs.com/jesse2013/p/integrate-with-lagacy-auth.html" target="_blank" rel="noopener noreferrer">ASP.NET Core JWT认证、更改Token来源、更改Token验证方式</a><br> #、IdentityServer4 认证授权<br><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener noreferrer">[阮一峰]理解OAuth 2.0</a><br><a href="https://www.cnblogs.com/wwcom123/p/11600463.html" target="_blank" rel="noopener noreferrer">OAuth2.0授权登录四种模式时序图</a><br><a href="https://www.cnblogs.com/stulzq/p/8119928.html" target="_blank" rel="noopener noreferrer">[晓晨Master]IdentityServer4 中文文档与实战</a><br><a href="https://www.bilibili.com/video/av42364337" target="_blank" rel="noopener noreferrer">[免费视频]IdentityServer4 教程视频</a><br><a href="https://github.com/skoruba/IdentityServer4.Admin" target="_blank" rel="noopener noreferrer">[github]IdentityServer4.Admin</a><br> .Net Core IdentityServer4：<a href="http://xn--2rqz13g.Net" target="_blank" rel="noopener noreferrer">使用.Net</a> Framework客户端对接<br> （1）<a href="https://www.cnblogs.com/zhenl/p/15654284.html" target="_blank" rel="noopener noreferrer">.Net Framework 客户端Owin方式对接ids4</a><br> （2）<a href="https://www.cnblogs.com/zhenl/p/15660567.html" target="_blank" rel="noopener noreferrer">.Net Framework 客户端User和Role的解析</a></p><h3 id="安全性" tabindex="-1"><a class="header-anchor" href="#安全性"><span>安全性</span></a></h3><p><a href="https://www.cnblogs.com/cYang2030/p/14109682.html" target="_blank" rel="noopener noreferrer">前端业务安全综述</a><br><a href="https://mp.weixin.qq.com/s/ocxEvKlobtq0Inq9lfR3jw" target="_blank" rel="noopener noreferrer">.NET应用程序安全操作概述</a><br><a href="https://securityheaders.com/" target="_blank" rel="noopener noreferrer">检查HTTP Header 是否安全</a><br><a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/DotNet_Security_Cheat_Sheet.md" target="_blank" rel="noopener noreferrer">.NET项目安全设置向导</a></p><p><a href="https://www.cnblogs.com/sdflysha/p/20200222-machingkey-in-dotnetcore.html" target="_blank" rel="noopener noreferrer">在.NET Core中使用 MachineKey (NuGet包：AspNetTicketBridge)</a><br><a href="https://www.cnblogs.com/savorboard/p/dotnetcore-user-secrets.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 优雅的在开发环境保存机密（User Secrets）--secrets.json</a><br> #、HTTPS<br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/enforcing-ssl?view=aspnetcore-2.2&amp;tabs=visual-studio" target="_blank" rel="noopener noreferrer">在ASP.NET Core 中强制实施 HTTPS</a><br><a href="https://www.cnblogs.com/chenxf1117/p/15119692.html" target="_blank" rel="noopener noreferrer">.NetCore+OpenSSL实现Https</a><br><a href="https://www.cnblogs.com/CreateMyself/p/15643871.html" target="_blank" rel="noopener noreferrer">.NET Core如何配置TLS Cipher（套件）</a><br> 证书<br><a href="https://www.cnblogs.com/liuju150/p/FreeHTTPS_SSL_LetsEncrypt20201030.html" target="_blank" rel="noopener noreferrer">免费申请HTTPS通配符证书（Let&#39;s Encrypt证书）</a>----(<a href="https://certifytheweb.com/" target="_blank" rel="noopener noreferrer">windows桌面工具&gt;&gt;</a>)</p><p><a href="https://mp.weixin.qq.com/s/jfiQGFoLlwV2LnXTkuZJeQ" target="_blank" rel="noopener noreferrer">使用脚本持续自动从Letsencrypt更新CA证书</a>---免费的Letsencrypt证书一般有效期为三个月<br> aspnet core 本地localhost调试证书安装或过期，则执行命令：(cmd执行 certlm.msc 命令，进入证书管理)<br> dotnet dev-certs https --clean<br> dotnet dev-certs https --trust<br><a href="https://mp.weixin.qq.com/s/KGyADz_yo3kAGZssVZC--Q" target="_blank" rel="noopener noreferrer">服务端和客户端证书各种组合下对访问者(浏览器/中间人)的影响</a><br><a href="https://www.jianshu.com/p/f70e8acba934" target="_blank" rel="noopener noreferrer">.NET Core 强制使用https，把所有的HTTP请求转换为HTTPS</a><br> HSTS（HTTP严格传输安全）<br> 使用HTTPS重定向仍然存在一下较小的安全风险，因为用户可以在重定向到安全HTTPS连接之前使用HTTP发出初始请求。为了解决这个问题，HTTP严格传输安全性（HSTS）协议在响应中添加了一个标头，指示在向Web端点发送请求时仅应使用HTTPS。一旦接收到HSTS标头，即使用户指定了HTTP URL，支持HSTS协议的客户端也将始终使用HTTPS向应用程序发送请求。<br><a href="https://baijiahao.baidu.com/s?id=1671643693192936159&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener noreferrer">ASP.NET Core 3.1中HTTPS的配置（环境变量中指定证书）</a><br><a href="https://www.cnblogs.com/JulianHuang/p/12156997.html" target="_blank" rel="noopener noreferrer">HTTP Strict Transport Security (HSTS) in ASP.NET Core</a><br> #、Data Protection 机制 (.NET Core 数据保护)<br><a href="https://www.cnblogs.com/savorboard/p/dotnetcore-data-protection.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 数据保护（Data Protection）【上】</a><br><a href="https://www.cnblogs.com/savorboard/p/dotnet-core-data-protection.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 数据保护（Data Protection）【中】</a><br><a href="https://www.cnblogs.com/savorboard/p/dotnetcore-data-protected-farm.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 数据保护（Data Protection 集群场景）【下】</a><br> #、CORS<br><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener noreferrer">跨域资源共享CORS 详解</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/cors?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">ASP.NET Core 中启用跨域请求 (CORS)</a><br> #、CSRF<br><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener noreferrer">浅谈CSRF攻击方式</a><br><a href="https://www.cnblogs.com/ziyunfei/p/5637945.html" target="_blank" rel="noopener noreferrer">SameSite Cookie，防止CSRF 攻击</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/anti-request-forgery?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">ASP.NET Core 防止跨站点请求伪造(XSRF/CSRF) 攻击</a><br><a href="https://beginor.github.io/2019/05/27/anti-forgery-with-asp-net-core-and-angular.html" target="_blank" rel="noopener noreferrer">ASP.NET Core WebAPI 中防御跨站请求伪造攻击（CSRF）</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/ip-safelist?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">ASP.NET Core 启用客户端IP 安全列表</a></p><h3 id="ef-core" tabindex="-1"><a class="header-anchor" href="#ef-core"><span>EF Core</span></a></h3><p><a href="https://docs.microsoft.com/zh-cn/ef/core/" target="_blank" rel="noopener noreferrer">EF Core 微软官网教程（非常全）</a><br> Linq<br><a href="https://www.cnblogs.com/heyuquan/p/Linq-to-Objects.html" target="_blank" rel="noopener noreferrer">Linq入门详解（Linq to Objects）</a><br><a href="https://mp.weixin.qq.com/s/b5j7qIboTNRw1vF_r6N4NA" target="_blank" rel="noopener noreferrer">如何优化 .NET Core 中的 lambda 查询表达式 ?</a><br><a href="https://mp.weixin.qq.com/s/u9m-lS9a0kt0UWHIJl61JQ" target="_blank" rel="noopener noreferrer">3分钟了解数据库事务(ACID、事务隔离级别)</a><br> SQL执行记录<br><a href="https://www.cnblogs.com/lwqlun/p/13551149.html" target="_blank" rel="noopener noreferrer">将EF Core生成的SQL语句显示在控制台中</a>(10楼评论)<br><a href="https://www.cnblogs.com/jijm123/p/10092601.html" target="_blank" rel="noopener noreferrer">SQL Server Profiler的简单过滤使用，方便查找和发现SQL执行的效率和语句问题</a><br><a href="https://www.cnblogs.com/NoteBooks/p/4533567.html" target="_blank" rel="noopener noreferrer">使用 SQL Server Profiler 查看指定ApplicationName产生的sql语句</a><br><a href="https://jishuin.proginn.com/p/763bfbd3a601" target="_blank" rel="noopener noreferrer">EF Core 5提供的ToQueryString()查看Linq生成的SQL语句</a></p><p><a href="https://mp.weixin.qq.com/s/-AaHe5RnAWlRlryVdp7MhQ" target="_blank" rel="noopener noreferrer">使用DbContextPool提高EfCore查询性能</a><br><a href="https://www.cnblogs.com/yangjinwang/p/9516988.html" target="_blank" rel="noopener noreferrer">EF Core DbFirst：从数据库生成实体类（反向工程）</a><br> Code First<br><a href="https://www.cnblogs.com/xx2oo8/p/7660352.html" target="_blank" rel="noopener noreferrer">EF Core CodeFirst：从实体创建数据库--示例</a><br><a href="https://docs.microsoft.com/zh-cn/ef/core/managing-schemas/migrations/index" target="_blank" rel="noopener noreferrer">EF Core CodeFirst：从实体创建数据库--命令和语法</a><br><a href="https://blog.csdn.net/banluanhou7090/article/details/101076657" target="_blank" rel="noopener noreferrer">EFCore数据库迁移命令（使用Script-Migration命令生成迁移sql语句--注意：不含from，含to）</a><br><a href="https://www.cnblogs.com/YGYH/p/15529993.html" target="_blank" rel="noopener noreferrer">EF Core 小技巧：迁移已经应用到数据库，如何进行迁移回退操作？</a><br> 迁移疑问<br><a href="https://blog.csdn.net/qq_36523613/article/details/83063077" target="_blank" rel="noopener noreferrer">EF Core CodeFirst：创建数据库迁移时报：Unable to create an object of type &#39;ApplicationDbContext&#39; ，解决方案：DesignTimeDbContextFactory</a><br><a href="https://stackoverflow.com/questions/9769515/c-sharp-code-first-migration-up-down" target="_blank" rel="noopener noreferrer">如何理解 Code-First migration, up/down方法?</a><br> 全局唯一Id、有序GUID<br><a href="https://www.cnblogs.com/heyuquan/p/global-guid-identity-maxId.html" target="_blank" rel="noopener noreferrer">如何在高并发分布式系统中生成全局唯一Id</a><br><a href="https://mp.weixin.qq.com/s/C6xk42s-4SwyszJPTM0G6A" target="_blank" rel="noopener noreferrer">使用有序GUID：提升其在各数据库中作为主键时的性能</a><br><a href="https://mp.weixin.qq.com/s/-eeIXF7NUtkgELrFKbHVtA" target="_blank" rel="noopener noreferrer">如何使用有序GUID提升数据库读写性能</a><br> 模型配置<br><a href="https://docs.microsoft.com/zh-cn/ef/core/modeling/generated-properties" target="_blank" rel="noopener noreferrer">EF Core 自动生成值配置</a><br><a href="http://m.tnblog.net/13983647446/article/details/5372" target="_blank" rel="noopener noreferrer">EF Core 创建组合主键（HasKey(c =&gt; new { a, b })）</a><br><a href="https://docs.microsoft.com/zh-cn/ef/core/modeling/relationships" target="_blank" rel="noopener noreferrer">EF Core 实体间关系</a><br><a href="https://www.cnblogs.com/1175429393wljblog/p/12582707.html" target="_blank" rel="noopener noreferrer">EF Core 中关系模式一对一、一对多、多对多的使用</a><br> 级联删除<br><a href="https://docs.microsoft.com/zh-cn/ef/core/saving/cascade-delete#delete-orphans-examples" target="_blank" rel="noopener noreferrer">EF Core 级联删除</a><br><a href="https://www.cnblogs.com/Jackie-sky/p/5543306.html" target="_blank" rel="noopener noreferrer">SQL SERVER 数据库级联删除</a><br> 需要注意：级联删除是数据库的特性。如使用ABP Vnext中的软删除，那么只是将记录的IsDeleted设置为true，并不是真正的删除记录，所以没有级联删除子表的效果。。。同时，子表的IsDeleted也并没有设置为true，需要代码调用软删除子表（所以这边应该走聚合根的删除，达到整体删除/软删除的目的）。。。（考察版本 ABP Vnext 4.3.0）<br> 关系数据库建模<br><a href="https://docs.microsoft.com/zh-cn/ef/core/modeling/relational/" target="_blank" rel="noopener noreferrer">关系数据库建模(表映射、列映射、数据类型、索引等等)</a><br><a href="https://www.cnblogs.com/tdfblog/p/entity-framework-core-generate-tracking-columns.html" target="_blank" rel="noopener noreferrer">EF Core 生成跟踪列（eg：CreatedAt，CreatedBy等列）</a><br> 枚举映射<br><a href="https://blog.csdn.net/waitaction/article/details/88639152" target="_blank" rel="noopener noreferrer">在EF core 使用枚举类型</a><br><a href="https://blog.csdn.net/xuefuruanjian/article/details/85236052" target="_blank" rel="noopener noreferrer">EF 枚举类型映射数据库</a><br> 并发<br><a href="https://docs.microsoft.com/zh-cn/ef/core/modeling/concurrency" target="_blank" rel="noopener noreferrer">EF Core 并发检查</a><br><a href="https://docs.microsoft.com/zh-cn/ef/core/saving/concurrency" target="_blank" rel="noopener noreferrer">EF Core 并发冲突处理</a><br> 数据查询<br><a href="https://www.cnblogs.com/woxpp/p/entityframeworkinclude.html" target="_blank" rel="noopener noreferrer">EF 中 IEnumerable，IQueryable ，Include 的用法</a><br><a href="https://docs.microsoft.com/zh-cn/ef/core/querying/related-data" target="_blank" rel="noopener noreferrer">EF Core 关联数据加载策略（预先加载、显示加载、延迟加载）</a> -- 预先加载中关于多级关联的使用ThenInclude。Blog -&gt; Posts -&gt; (Author 和 Tags)案例<br><a href="https://www.cnblogs.com/CreateMyself/p/9195131.html" target="_blank" rel="noopener noreferrer">深入了解 EFCore2.1 中加入的延迟加载</a> （EF 6.x默认启用了延迟加载，EFCore需要引入Proxies包显示启用）<br><a href="https://docs.microsoft.com/zh-cn/ef/core/querying/tracking" target="_blank" rel="noopener noreferrer">EF Core 跟踪与非跟踪查询（AsNoTracking）</a><br><a href="https://docs.microsoft.com/zh-cn/ef/core/querying/filters" target="_blank" rel="noopener noreferrer">EF Core 全局查询筛选器（软删除、多租户等）</a><br><a href="https://mp.weixin.qq.com/s/TvDCSdhvoUdL2lapGpgJGw" target="_blank" rel="noopener noreferrer">EF Core 查询标签TagWith (生成查询注释信息)</a><br> 数据过滤<br><a href="https://www.cnblogs.com/tdfblog/p/entity-framework-core-like-query.html" target="_blank" rel="noopener noreferrer">EF Core 使用like 函数实现模糊查询</a><br><a href="https://mp.weixin.qq.com/s/aXYd9bqtRQ8_KDinYhXssg" target="_blank" rel="noopener noreferrer">如何在 Entity Framework 中计算时间差 ？（EF.Functions.DateDiffDay）</a><br> 大数据量相关<br> 批量数据操作<br><a href="https://www.cnblogs.com/JulianHuang/p/11897788.html" target="_blank" rel="noopener noreferrer">EF Core 原生支持的批量插入操作（sp_executesql）</a><br> Z.EntityFramework<br><a href="https://entityframework-extensions.net/" target="_blank" rel="noopener noreferrer">[收费]使用Entity Framework Extensions 实现批量增、删、改</a> -- Z.EntityFramework.Extensions.EFCore（截止2021/7/26 下载数：5,556,261）<br><a href="https://github.com/zzzprojects/EntityFramework-Plus" target="_blank" rel="noopener noreferrer">[免费]Entity Framework Extensions 提供功能缩减版：EntityFramework-Plus</a> -- Z.EntityFramework.Plus.EFCore（截止2021/7/26 下载数：5,842,130）<br><a href="https://github.com/borisdj/EFCore.BulkExtensions" target="_blank" rel="noopener noreferrer">[免费]EFCore.BulkExtensions</a> -- （截止2021/7/26 下载数：5,459,140）<br><a href="https://mp.weixin.qq.com/s/4cKfvL_amtBTnk7zKaeEuA" target="_blank" rel="noopener noreferrer">EntityFramework Core 5.0 VS SQLBulkCopy</a><br> 分库分表、读写分离<br><a href="https://github.com/Coldairarrow/EFCore.Sharding" target="_blank" rel="noopener noreferrer">[github]EFCore.Sharding</a><br><a href="https://github.com/xuejmnet/sharding-core" target="_blank" rel="noopener noreferrer">[github]sharding-core</a><br><a href="http://www.zyiz.net/tech/detail-123157.html" target="_blank" rel="noopener noreferrer">记录.NetCore如何使用MyCat</a><br><a href="https://mp.weixin.qq.com/s/VqNOpIe2DNYFihaa2Ma_JQ" target="_blank" rel="noopener noreferrer">常见分库分表方案以及国内银行分库分表技术选型</a></p><p><a href="https://mp.weixin.qq.com/s/iHbYNM6bCc-96IU23yq4Pg" target="_blank" rel="noopener noreferrer">数据量很大，分页查询很慢，有什么优化方案？</a><br><a href="https://www.cnblogs.com/chingho/p/14789466.html" target="_blank" rel="noopener noreferrer">.Net Core导入千万级数据至Mysql</a> (MySqlBulkLoader)<br><a href="https://mp.weixin.qq.com/s/avX1ZTND_xpbXcj4WPhlig" target="_blank" rel="noopener noreferrer">如何一步步让公司的MySQL支撑亿级流量</a>（读写分离、主从复制、从库延迟问题、代理中间件）<br> EfCore 先关其他<br><a href="http://outlela.com/Code/88.html" target="_blank" rel="noopener noreferrer">EF Core 3.1 执行sql语句的几种方法</a><br><a href="https://mp.weixin.qq.com/s/2CvxYfgCysl3VLjXjN1F1Q" target="_blank" rel="noopener noreferrer">EF Core事务提交,分布式事务</a>（EF Core 2.1之后移除了分布式事务的支持）<br><a href="https://github.com/VahidN/EFCoreSecondLevelCacheInterceptor" target="_blank" rel="noopener noreferrer">EF Core 二级缓存（EFCore.SecondLevelCacheInterceptor）</a><br> 数据库相关其他<br><a href="https://mp.weixin.qq.com/s/7OJaw3l0UsNKvpY_heAQ_Q" target="_blank" rel="noopener noreferrer">最好指定列为NOT NULL，除非真的需要存储NULL值</a><br><a href="https://mp.weixin.qq.com/s/pWwQm9vaMd0TS5_DtFMzqA" target="_blank" rel="noopener noreferrer">到底该不该使用存储过程</a><br><a href="https://www.cnblogs.com/12lisu/p/14594751.html" target="_blank" rel="noopener noreferrer">线上执行sql，增删改字段操作经验</a><br><a href="https://www.cnblogs.com/jay-huaxiao/p/12546973.html" target="_blank" rel="noopener noreferrer">(Mysql)书写高质量SQL的30条建议</a><br><a href="https://mp.weixin.qq.com/s/ruDL-v6s0tLMntVze44AbQ" target="_blank" rel="noopener noreferrer">一份非常完整的MySQL规范</a><br><a href="https://mp.weixin.qq.com/s/YfCORbcCX1hymXBCrZbAZg" target="_blank" rel="noopener noreferrer">58到家MySQL军规升级版</a><br><a href="https://mp.weixin.qq.com/s/ezDranuy7O581y5Pe-Bs-g" target="_blank" rel="noopener noreferrer">52条SQL语句性能优化的方式</a><br><a href="https://mp.weixin.qq.com/s/c7He_DzZdij-TEA1Jb1d3Q" target="_blank" rel="noopener noreferrer">切换数据库时，如何主动清空.NET数据库连接池？</a><br><a href="https://www.cnblogs.com/12lisu/p/15786013.html" target="_blank" rel="noopener noreferrer">聊聊索引失效的10种场景</a></p><h3 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h3><p><a href="https://www.cnblogs.com/heyuquan/p/dotnet-advance-learning-resource.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/heyuquan/p/dotnet-advance-learning-resource.html</a></p>',47)]))}const c=r(a,[["render",l],["__file","ziliaojingshuajinjiepian.html.vue"]]),i=JSON.parse('{"path":"/dotnet/jiaocheng/ziliaojingshuajinjiepian.html","title":"资料精选进阶篇","lang":"zh-CN","frontmatter":{"title":"资料精选进阶篇","lang":"zh-CN","date":"2022-05-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"ziliaojingshuajinjiepian","slug":"kaec26","docsId":"65198399","description":"提示 来自网络，内容是否过时自行判断 .NET 工程化 #、StyleCop编码规范 StyleCop规则汇总 在VS2017中使用StyleCop netcore将StyleCop.Analyzers自定义规则应用到整个解决方案 #、Nuget包 Nuget Cli 命令 在 Vistual Studio 中管理项目、解决方案的nuget包 创建并发...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/jiaocheng/ziliaojingshuajinjiepian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"资料精选进阶篇"}],["meta",{"property":"og:description","content":"提示 来自网络，内容是否过时自行判断 .NET 工程化 #、StyleCop编码规范 StyleCop规则汇总 在VS2017中使用StyleCop netcore将StyleCop.Analyzers自定义规则应用到整个解决方案 #、Nuget包 Nuget Cli 命令 在 Vistual Studio 中管理项目、解决方案的nuget包 创建并发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-13T15:17:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-05-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-13T15:17:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"资料精选进阶篇\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-13T15:17:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":".NET 工程化","slug":"net-工程化","link":"#net-工程化","children":[]},{"level":3,"title":"AOP面向切面编程","slug":"aop面向切面编程","link":"#aop面向切面编程","children":[]},{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":3,"title":"缓存","slug":"缓存","link":"#缓存","children":[]},{"level":3,"title":"日志","slug":"日志","link":"#日志","children":[]},{"level":3,"title":"响应优化","slug":"响应优化","link":"#响应优化","children":[]},{"level":3,"title":"上传下载","slug":"上传下载","link":"#上传下载","children":[]},{"level":3,"title":"健康检查","slug":"健康检查","link":"#健康检查","children":[]},{"level":3,"title":"其他特性","slug":"其他特性","link":"#其他特性","children":[]},{"level":3,"title":"后台任务","slug":"后台任务","link":"#后台任务","children":[]},{"level":3,"title":"认证和授权","slug":"认证和授权","link":"#认证和授权","children":[]},{"level":3,"title":"安全性","slug":"安全性","link":"#安全性","children":[]},{"level":3,"title":"EF Core","slug":"ef-core","link":"#ef-core","children":[]},{"level":3,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1699888657000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":15.62,"words":4685},"filePathRelative":"dotnet/jiaocheng/ziliaojingshuajinjiepian.md","localizedDate":"2022年5月18日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>来自网络，内容是否过时自行判断</p>\\n</div>\\n<h3>.NET 工程化</h3>\\n<p>#、StyleCop编码规范<br>\\n<a href=\\"https://www.cnblogs.com/DarkInNight/p/5457875.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">StyleCop规则汇总</a><br>\\n<a href=\\"https://www.jianshu.com/p/dab842095449\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">在VS2017中使用StyleCop</a><br>\\n<a href=\\"https://blog.csdn.net/michel4liu/article/details/83388336\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">netcore将StyleCop.Analyzers自定义规则应用到整个解决方案</a></p>","autoDesc":true}');export{c as comp,i as data};
