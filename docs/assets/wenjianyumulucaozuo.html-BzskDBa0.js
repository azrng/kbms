import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as i,b as n,e as s,f as t,d as e}from"./app-Bfb6-vFH.js";const l={},u=e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>System.IO命名空间中有一些可以进行文件和目录操作（例如复制和移动、创建目录，以及设置文件的属性和权限）的实用类型。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="file" tabindex="-1"><a class="header-anchor" href="#file"><span>File</span></a></h3><p>获取文件的信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> <span class="token string">&quot;C:\\\\Users\\\\username\\\\Documents\\\\example.txt&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 获取文件大小（字节）</span>
<span class="token class-name"><span class="token keyword">long</span></span> fileSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span>Length<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小（字节）：&quot;</span> <span class="token operator">+</span> fileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取文件创建时间</span>
<span class="token class-name">DateTime</span> creationTime <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetCreationTime</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建时间：&quot;</span> <span class="token operator">+</span> creationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取文件最后修改时间</span>
<span class="token class-name">DateTime</span> lastWriteTime <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetLastWriteTime</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件最后修改时间：&quot;</span> <span class="token operator">+</span> lastWriteTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取文件属性</span>
<span class="token class-name">FileAttributes</span> attributes <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetAttributes</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件属性：&quot;</span> <span class="token operator">+</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>File是一个静态类，方法均接受文件名参数，可以是相对路径也可以是绝对路径。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//是否存在</span>
File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//删除文件</span>
File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果文件是只读的，那么删除会抛出UnAuthorizedAccessException</span>
<span class="token comment">//拷贝文件</span>
File<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token string">&quot;老地址&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;新地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//移动文件</span>
File<span class="token punctuation">.</span><span class="token function">Move</span><span class="token punctuation">(</span><span class="token string">&quot;老地址&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;新地址&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//目标存在就抛出异常</span>

<span class="token comment">//创建文件</span>
File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;greeting.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//读取文件</span>
File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//将数据写入文件</span>
File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;SalesTotals</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Path<span class="token punctuation">.</span>DirectorySeparatorChar</span><span class="token punctuation">}</span></span><span class="token string">totals.txt&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//追加数据到文件</span>
File<span class="token punctuation">.</span><span class="token function">AppendAllText</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;SalesTotals</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Path<span class="token punctuation">.</span>DirectorySeparatorChar</span><span class="token punctuation">}</span></span><span class="token string">totals.txt&quot;</span></span><span class="token punctuation">,</span> <span class="token string">&quot;内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件是包含各种权限的，比如只读等。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//在不影响其他属性的前提下替换其中一个文件的属性</span>
<span class="token class-name"><span class="token keyword">var</span></span> filePath <span class="token operator">=</span> <span class="token string">&quot;E:\\\\test.txt&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> fa <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">GetAttributes</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fa <span class="token operator">&amp;</span> FileAttributes<span class="token punctuation">.</span>ReadOnly<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    fa <span class="token operator">^=</span> FileAttributes<span class="token punctuation">.</span>ReadOnly<span class="token punctuation">;</span>
    File<span class="token punctuation">.</span><span class="token function">SetAttributes</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> fa<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//现在我们可以删除这个文件</span>
File<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

或

<span class="token comment">//修改只读标志的方法</span>
<span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;filePath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsReadOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取文件的扩展名和类型等信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> <span class="token string">&quot;C:\\\\Users\\\\username\\\\Documents\\\\example.txt&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//获取文件的全路径</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;获取文件的全路径：&quot;</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetFullPath</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取文件所在的目录</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;获取文件所在的目录：&quot;</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetDirectoryName</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取文件的名称含有后缀  example.txt</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;获取文件的名称含有后缀：&quot;</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取文件的名称没有后缀 example</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;获取文件的名称没有后缀：&quot;</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetFileNameWithoutExtension</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取路径的后缀扩展名称（包含点号）  .txt</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;获取路径的后缀扩展名称：&quot;</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取路径的根目录 C:\\</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;获取路径的根目录：&quot;</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetPathRoot</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取文件类型（MIME类型）</span>
<span class="token class-name"><span class="token keyword">string</span></span> mimeType <span class="token operator">=</span> <span class="token string">&quot;application/unknown&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 默认值</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>RegistryKey</span> regKey <span class="token operator">=</span> Microsoft<span class="token punctuation">.</span>Win32<span class="token punctuation">.</span>Registry<span class="token punctuation">.</span>ClassesRoot<span class="token punctuation">.</span><span class="token function">OpenSubKey</span><span class="token punctuation">(</span>extension<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>regKey <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> regKey<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">&quot;Content Type&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		mimeType <span class="token operator">=</span> regKey<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token string">&quot;Content Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件类型：&quot;</span> <span class="token operator">+</span> mimeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="directory" tabindex="-1"><a class="header-anchor" href="#directory"><span>Directory</span></a></h3><p>是一个操作目录的静态类，获取目录信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> directoryPath <span class="token operator">=</span> <span class="token string">&quot;C:\\\\Users\\\\username\\\\Documents&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 获取目录下的文件列表</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> files <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>directoryPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> file <span class="token keyword">in</span> files<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件名：&quot;</span> <span class="token operator">+</span> Path<span class="token punctuation">.</span><span class="token function">GetFileName</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小（字节）：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建时间：&quot;</span> <span class="token operator">+</span> File<span class="token punctuation">.</span><span class="token function">GetCreationTime</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还提供了一系列方法来检查目录是否存在(Exists)、移动目录(Move)、删除目录(Delete),获取/设置创建时间或者设置最后访问时间以及获取/设置目录的安全权限。</p><p>还包含以下静态方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 创建目录</span>
Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除目录</span>
Directory<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">&quot;path/to/directory&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二个参数表示是否递归删除子目录和文件</span>

<span class="token comment">//获取当前目录</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取目录的文件</span>
<span class="token class-name"><span class="token keyword">var</span></span> files <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//列出所有目录</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> listOfDirectories <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">EnumerateDirectories</span><span class="token punctuation">(</span><span class="token string">&quot;stores&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//列出目录中所有文件的名称</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> files <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">EnumerateFiles</span><span class="token punctuation">(</span><span class="token string">&quot;stores&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//列出目录和所有子目录中的所有内容</span>
<span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> allFilesInAllFolders <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">EnumerateFiles</span><span class="token punctuation">(</span><span class="token string">&quot;stores&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.txt&quot;</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>AllDirectories<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建目录 在“201”文件夹内创建一个名为“newDir”的新文件夹</span>
Directory<span class="token punctuation">.</span><span class="token function">CreateDirectory</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;stores&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;201&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;newDir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//确保目录存在</span>
<span class="token class-name"><span class="token keyword">bool</span></span> doesDirectoryExist <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fileinfo" tabindex="-1"><a class="header-anchor" href="#fileinfo"><span>FileInfo</span></a></h3><ul><li>适合针对一个项目进行一系列调用，使用这两个对象模型更加适合。</li><li>FileInfo类以实力成员的形式提供了File类型静态方法的大部分功能，还包含一些额外的属性，比如Extensions、Length、IsReadOnly以及Directory</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> fi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span><span class="token string">&quot;e:\\\\test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">TextWriter</span> w <span class="token operator">=</span> fi<span class="token punctuation">.</span><span class="token function">CreateText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Sone text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span><span class="token punctuation">;</span>
fi<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Exists<span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Directory<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Extension<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
fi<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fi<span class="token punctuation">.</span>Attributes <span class="token operator">^=</span> FileAttributes<span class="token punctuation">.</span>Hidden<span class="token punctuation">;</span>
fi<span class="token punctuation">.</span>IsReadOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>Attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>fi<span class="token punctuation">.</span>CreationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
fi<span class="token punctuation">.</span><span class="token function">MoveTo</span><span class="token punctuation">(</span><span class="token string">&quot;e://bb.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DirectoryInfo</span> di <span class="token operator">=</span> fi<span class="token punctuation">.</span>Directory<span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>di<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>di<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>di<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
di<span class="token punctuation">.</span><span class="token function">CreateSubdirectory</span><span class="token punctuation">(</span><span class="token string">&quot;SubFolder&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用FileInfo获取文件各种信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> filePath <span class="token operator">=</span> <span class="token string">&quot;C:\\\\Users\\\\username\\\\Documents\\\\example.txt&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">FileInfo</span> fileInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileInfo</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>

Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件名称：&quot;</span> <span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件全路径：&quot;</span> <span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件大小（字节）：&quot;</span> <span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件创建时间：&quot;</span> <span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>CreationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;文件最后修改时间：&quot;</span> <span class="token operator">+</span> fileInfo<span class="token punctuation">.</span>LastWriteTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="path" tabindex="-1"><a class="header-anchor" href="#path"><span>Path</span></a></h3><ul><li>不操作文件或目录，但是它可以处理文件名称或者目录路径字符串。</li><li>Path的Combine方法可以在不需要检查名称后面是否有反斜杠的情况下组合目录和文件名，或者组合两个目录。</li><li>GetFullPath可以将一个相对于当前目录的路径转换为一个绝对路径。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//连接路径</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span><span class="token string">&quot;stores&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;201&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// outputs: stores/201</span>

<span class="token comment">//获取文件夹扩展名</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">GetExtension</span><span class="token punctuation">(</span><span class="token string">&quot;sales.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// outputs: .json</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="扩展名" tabindex="-1"><a class="header-anchor" href="#扩展名"><span>扩展名</span></a></h4><p>文件的扩展名或类型（MIME类型）等，可以使用<code>Path</code>类的一些静态方法</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>string filePath = &quot;C:\\\\Users\\\\username\\\\Documents\\\\example.txt&quot;;
//获取文件的全路径
Console.WriteLine(&quot;获取文件的全路径：&quot; + Path.GetFullPath(filePath););
//获取文件所在的目录
Console.WriteLine(&quot;获取文件所在的目录：&quot; + Path.GetDirectoryName(filePath));
//获取文件的名称含有后缀  example.txt
Console.WriteLine(&quot;获取文件的名称含有后缀：&quot; + Path.GetFileName(filePath));
 //获取文件的名称没有后缀 example
Console.WriteLine(&quot;获取文件的名称没有后缀：&quot; + Path.GetFileNameWithoutExtension(filePath));
//获取路径的后缀扩展名称（包含点号）  .txt
Console.WriteLine(&quot;获取路径的后缀扩展名称：&quot; + Path.GetExtension(filePath));
//获取路径的根目录 C:\\
Console.WriteLine(&quot;获取路径的根目录：&quot; + Path.GetPathRoot(filePath));

// 获取文件类型（MIME类型）
string mimeType = &quot;application/unknown&quot;; // 默认值
if (!string.IsNullOrEmpty(extension))
{
    Microsoft.Win32.RegistryKey regKey = Microsoft.Win32.Registry.ClassesRoot.OpenSubKey(extension);
    if (regKey != null &amp;&amp; regKey.GetValue(&quot;Content Type&quot;) != null)
    {
        mimeType = regKey.GetValue(&quot;Content Type&quot;).ToString();
    }
}
Console.WriteLine(&quot;文件类型：&quot; + mimeType);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特殊文件夹" tabindex="-1"><a class="header-anchor" href="#特殊文件夹"><span>特殊文件夹</span></a></h3><p>Path和Directory类型并不具备查找特殊文件夹的功能。这些特殊文件夹包括My Document、Program Files、ApplicationData等。该功能是由System.Environment类的GetFolderPath方法提供的。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//System.Environment.SpecialFolder 枚举指定用于检索特殊系统文件夹路径的常量。</span>

<span class="token class-name"><span class="token keyword">string</span></span> myDocPath <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">GetFolderPath</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>SpecialFolder<span class="token punctuation">.</span>MyDocuments<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myDocPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ApplicationData。该目录可用于存储一些设置，但是它会随着用户的网络位置变化而变化</li></ul><h3 id="查询卷信息" tabindex="-1"><a class="header-anchor" href="#查询卷信息"><span>查询卷信息</span></a></h3><ul><li>DriveInfo类来查询计算机驱动器相关的信息</li><li>静态方法GetDrives会返回所有映射的驱动器，包括CD-ROM、内存卡和网络连接</li></ul><h3 id="捕获文件系统事件" tabindex="-1"><a class="header-anchor" href="#捕获文件系统事件"><span>捕获文件系统事件</span></a></h3><ul><li>FileSystemWatcher类可以监控一个目录（或者子目录）的活动。</li><li>FileSystemWatcher是在一个独立线程上接收事件的，因此所有事件处理代码必须使用异常处理语句，防止发生错误而令应用程序崩溃。 <ul><li>Changed：文件内容变更通知</li><li>Created：文件创建变更通知</li><li>Deleted：文件删除变更通知</li><li>Renamed：文件重命名通知</li></ul></li></ul><p>下面代码就是用来监控D:\\test目录下所有的txt文件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">CreateFileWatcher</span><span class="token punctuation">(</span><span class="token string">@&quot;D:\\test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateFileWatcher</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> path<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Create a new FileSystemWatcher and set its properties.</span>
		<span class="token class-name">FileSystemWatcher</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		watcher<span class="token punctuation">.</span>Path <span class="token operator">=</span> path<span class="token punctuation">;</span>
		<span class="token comment">/* Watch for changes in LastAccess and LastWrite times, and 
		   the renaming of files or directories. */</span>
		watcher<span class="token punctuation">.</span>NotifyFilter <span class="token operator">=</span> NotifyFilters<span class="token punctuation">.</span>LastAccess <span class="token operator">|</span> NotifyFilters<span class="token punctuation">.</span>LastWrite
		   <span class="token operator">|</span> NotifyFilters<span class="token punctuation">.</span>FileName <span class="token operator">|</span> NotifyFilters<span class="token punctuation">.</span>DirectoryName<span class="token punctuation">;</span>
		<span class="token comment">// Only watch text files.</span>
		watcher<span class="token punctuation">.</span>Filter <span class="token operator">=</span> <span class="token string">&quot;*.txt&quot;</span><span class="token punctuation">;</span>

		<span class="token comment">// Add event handlers.</span>
		watcher<span class="token punctuation">.</span>Changed <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemEventHandler</span><span class="token punctuation">(</span>OnChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
		watcher<span class="token punctuation">.</span>Created <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemEventHandler</span><span class="token punctuation">(</span>OnChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
		watcher<span class="token punctuation">.</span>Deleted <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">FileSystemEventHandler</span><span class="token punctuation">(</span>OnChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
		watcher<span class="token punctuation">.</span>Renamed <span class="token operator">+=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RenamedEventHandler</span><span class="token punctuation">(</span>OnRenamed<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Begin watching.</span>
		watcher<span class="token punctuation">.</span>EnableRaisingEvents <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Define the event handlers.</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnChanged</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> source<span class="token punctuation">,</span> <span class="token class-name">FileSystemEventArgs</span> e<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Specify what is done when a file is changed, created, or deleted.</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;File: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>FullPath <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>ChangeType<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnRenamed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> source<span class="token punctuation">,</span> <span class="token class-name">RenamedEventArgs</span> e<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// Specify what is done when a file is renamed.</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;File: {0} renamed to {1}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>OldFullPath<span class="token punctuation">,</span> e<span class="token punctuation">.</span>FullPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然如何你想监控 D:\\test 下包括子目录的 txt 文件，可以配置 IncludeSubdirectories 属性，参考如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> watcher<span class="token punctuation">.</span>IncludeSubdirectories <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>FileSystemWatcher 非常强大，在 .NETCore 中实现对 appsettings 的监控，用的就是它作为底层实现。</p>`,42),r={href:"https://mp.weixin.qq.com/s/I5wbbd4GN7JmNGpob8NhMg",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>监控指定目录示例</p><div class="language-plsql line-numbers-mode" data-ext="plsql" data-title="plsql"><pre class="language-plsql"><code><span class="token keyword">using</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> System<span class="token punctuation">.</span>Console<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token keyword">static</span> System<span class="token punctuation">.</span>ConsoleColor<span class="token punctuation">;</span>
 
namespace jhrs<span class="token punctuation">.</span>com
{
    class Program
    {
        <span class="token keyword">static</span> <span class="token keyword">void</span> Main<span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
        {
            <span class="token operator">/</span><span class="token operator">/</span>实例化一个FileSystemWatcher对象
            var fileSystemWatcher <span class="token operator">=</span> <span class="token keyword">new</span> FileSystemWatcher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
            <span class="token operator">/</span><span class="token operator">/</span>订阅事件，创建，更改，删除，重命名
            fileSystemWatcher<span class="token punctuation">.</span>Created <span class="token operator">+</span><span class="token operator">=</span> FileSystemWatcher_Created<span class="token punctuation">;</span>
            fileSystemWatcher<span class="token punctuation">.</span>Changed <span class="token operator">+</span><span class="token operator">=</span> FileSystemWatcher_Changed<span class="token punctuation">;</span>
            fileSystemWatcher<span class="token punctuation">.</span>Deleted <span class="token operator">+</span><span class="token operator">=</span> FileSystemWatcher_Deleted<span class="token punctuation">;</span>
            fileSystemWatcher<span class="token punctuation">.</span>Renamed <span class="token operator">+</span><span class="token operator">=</span> FileSystemWatcher_Renamed<span class="token punctuation">;</span>
 
            <span class="token operator">/</span><span class="token operator">/</span>指定监控目录
            fileSystemWatcher<span class="token punctuation">.</span>Path <span class="token operator">=</span> <span class="token variable">@&quot;C:UsersJeremyPicturesScreenshots&quot;</span><span class="token punctuation">;</span>
 
            <span class="token operator">/</span><span class="token operator">/</span>启用监控<span class="token punctuation">.</span>
            fileSystemWatcher<span class="token punctuation">.</span>EnableRaisingEvents <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
 
            WriteLine<span class="token punctuation">(</span><span class="token string">&quot;Listening...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            WriteLine<span class="token punctuation">(</span><span class="token string">&quot;(Press any key to exit.)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
 
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> FileSystemWatcher_Renamed<span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> RenamedEventArgs e<span class="token punctuation">)</span>
        {
            ForegroundColor <span class="token operator">=</span> Yellow<span class="token punctuation">;</span>
            WriteLine<span class="token punctuation">(</span>$<span class="token string">&quot;A new file has been renamed from {e.OldName} to {e.Name}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
 
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> FileSystemWatcher_Deleted<span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> FileSystemEventArgs e<span class="token punctuation">)</span>
        {
            ForegroundColor <span class="token operator">=</span> Red<span class="token punctuation">;</span>
            WriteLine<span class="token punctuation">(</span>$<span class="token string">&quot;A new file has been deleted - {e.Name}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
 
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> FileSystemWatcher_Changed<span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> FileSystemEventArgs e<span class="token punctuation">)</span>
        {
            ForegroundColor <span class="token operator">=</span> Green<span class="token punctuation">;</span>
            WriteLine<span class="token punctuation">(</span>$<span class="token string">&quot;A new file has been changed - {e.Name}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
 
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> FileSystemWatcher_Created<span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> FileSystemEventArgs e<span class="token punctuation">)</span>
        {
            ForegroundColor <span class="token operator">=</span> Blue<span class="token punctuation">;</span>
            WriteLine<span class="token punctuation">(</span>$<span class="token string">&quot;A new file has been created - {e.Name}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),d={href:"https://jhrs.com/2019/33547.html",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="获取程序路径" tabindex="-1"><a class="header-anchor" href="#获取程序路径"><span>获取程序路径</span></a></h3><p>通过一个WebApi程序举例</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 获取所有程序集
var allassembliy = AppDomain.CurrentDomain.GetAssemblies();

// 获取程序的基目录。
System.AppDomain.CurrentDomain.BaseDirectory
输出结果：E:\\Test\\WebApplication9\\WebApplication9\\bin\\Debug\\net5.0\\

// 获取模块的完整路径，包含文件名
System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName
输出结果：E:\\Test\\WebApplication9\\WebApplication9\\bin\\Debug\\net5.0\\WebApplication9.exe

// 获取和设置当前目录(该进程从中启动的目录)的完全限定目录。
System.Environment.CurrentDirectory
输出结果：E:\\Test\\WebApplication9\\WebApplication9

// 获取应用程序的当前工作目录，注意工作目录是可以改变的，而不限定在程序所在目录。
System.IO.Directory.GetCurrentDirectory()
输出结果：E:\\Test\\WebApplication9\\WebApplication9

// 获取和设置包括该应用程序的目录的名称。
System.AppDomain.CurrentDomain.SetupInformation.ApplicationBase
输出结果：E:\\Test\\WebApplication9\\WebApplication9\\bin\\Debug\\net5.0\\

//获取程序集解析程序用于探测程序集的基目录的文件路径。
System.AppContext.BaseDirectory
输出结果：E:\\Test\\WebApplication9\\WebApplication9\\bin\\Debug\\net5.0\\

//获取当前应用程序所针对的框架版本的名称。
System.AppContext.TargetFrameworkName
输出结果：.NETCoreApp,Version=v5.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),v={href:"https://docs.microsoft.com/zh-cn/dotnet/api/system?view=netcore-3.1",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料"},[n("span",null,"参考资料")])],-1),h={href:"https://mp.weixin.qq.com/s/HYUJAvXchZywWQRtr_Aj9g",target:"_blank",rel:"noopener noreferrer"};function g(f,y){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("blockquote",null,[n("p",null,[s("资料来源："),n("a",r,[s("https://mp.weixin.qq.com/s/I5wbbd4GN7JmNGpob8NhMg"),t(a)])])]),k,n("p",null,[s("资料来源："),n("a",d,[s("https://jhrs.com/2019/33547.html"),t(a)])]),m,n("p",null,[s("参考文档："),n("a",v,[s("https://docs.microsoft.com/zh-cn/dotnet/api/system?view=netcore-3.1"),t(a)])]),b,n("p",null,[s("c#获取we你按信息大全："),n("a",h,[s("https://mp.weixin.qq.com/s/HYUJAvXchZywWQRtr_Aj9g"),t(a)])])])}const C=p(l,[["render",g],["__file","wenjianyumulucaozuo.html.vue"]]),W=JSON.parse('{"path":"/dotnet/csharp/wenjianheliu/wenjianyumulucaozuo.html","title":"文件操作","lang":"zh-CN","frontmatter":{"title":"文件操作","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"wenjianyumulucaozuo","slug":"qed2c0","docsId":"64119312","description":"概述 System.IO命名空间中有一些可以进行文件和目录操作（例如复制和移动、创建目录，以及设置文件的属性和权限）的实用类型。 操作 File 获取文件的信息 File是一个静态类，方法均接受文件名参数，可以是相对路径也可以是绝对路径。 文件是包含各种权限的，比如只读等。 获取文件的扩展名和类型等信息 Directory 是一个操作目录的静态类，获取...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/wenjianheliu/wenjianyumulucaozuo.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"文件操作"}],["meta",{"property":"og:description","content":"概述 System.IO命名空间中有一些可以进行文件和目录操作（例如复制和移动、创建目录，以及设置文件的属性和权限）的实用类型。 操作 File 获取文件的信息 File是一个静态类，方法均接受文件名参数，可以是相对路径也可以是绝对路径。 文件是包含各种权限的，比如只读等。 获取文件的扩展名和类型等信息 Directory 是一个操作目录的静态类，获取..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-15T12:42:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-15T12:42:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"文件操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-15T12:42:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"File","slug":"file","link":"#file","children":[]},{"level":3,"title":"Directory","slug":"directory","link":"#directory","children":[]},{"level":3,"title":"FileInfo","slug":"fileinfo","link":"#fileinfo","children":[]},{"level":3,"title":"Path","slug":"path","link":"#path","children":[{"level":4,"title":"扩展名","slug":"扩展名","link":"#扩展名","children":[]}]},{"level":3,"title":"特殊文件夹","slug":"特殊文件夹","link":"#特殊文件夹","children":[]},{"level":3,"title":"查询卷信息","slug":"查询卷信息","link":"#查询卷信息","children":[]},{"level":3,"title":"捕获文件系统事件","slug":"捕获文件系统事件","link":"#捕获文件系统事件","children":[]},{"level":3,"title":"获取程序路径","slug":"获取程序路径","link":"#获取程序路径","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1708000944000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":8.1,"words":2430},"filePathRelative":"dotnet/csharp/wenjianheliu/wenjianyumulucaozuo.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>System.IO命名空间中有一些可以进行文件和目录操作（例如复制和移动、创建目录，以及设置文件的属性和权限）的实用类型。</p>\\n<h2>操作</h2>\\n<h3>File</h3>\\n<p>获取文件的信息</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> filePath <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"C:\\\\\\\\Users\\\\\\\\username\\\\\\\\Documents\\\\\\\\example.txt\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// 获取文件大小（字节）</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">long</span></span> fileSize <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">FileInfo</span><span class=\\"token punctuation\\">(</span>filePath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>Length<span class=\\"token punctuation\\">;</span>\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件大小（字节）：\\"</span> <span class=\\"token operator\\">+</span> fileSize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 获取文件创建时间</span>\\n<span class=\\"token class-name\\">DateTime</span> creationTime <span class=\\"token operator\\">=</span> File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetCreationTime</span><span class=\\"token punctuation\\">(</span>filePath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件创建时间：\\"</span> <span class=\\"token operator\\">+</span> creationTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 获取文件最后修改时间</span>\\n<span class=\\"token class-name\\">DateTime</span> lastWriteTime <span class=\\"token operator\\">=</span> File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetLastWriteTime</span><span class=\\"token punctuation\\">(</span>filePath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件最后修改时间：\\"</span> <span class=\\"token operator\\">+</span> lastWriteTime<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 获取文件属性</span>\\n<span class=\\"token class-name\\">FileAttributes</span> attributes <span class=\\"token operator\\">=</span> File<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetAttributes</span><span class=\\"token punctuation\\">(</span>filePath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nConsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteLine</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"文件属性：\\"</span> <span class=\\"token operator\\">+</span> attributes<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{C as comp,W as data};
