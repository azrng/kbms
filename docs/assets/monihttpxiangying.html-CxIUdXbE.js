import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,d as s,e as c,b as l}from"./app-qB9_Bjjp.js";const u={},i=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在我们的业务代码中往往会有很多调用内部其他 team 或者是第三方的一些服务，在编写单元测试代码时，往往需要 Mock Http Response 来模拟更好可能的返回结果，我封装了一个简单的 Http Handler 来简化 Mock 过程，让基于 HttpClient Http Response 的模拟更为简单。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>首先来看一个简单的使用示例，也是一个测试用例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Theory</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Unauthorized<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>Forbidden<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">InlineData</span><span class="token attribute-arguments"><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>InternalServerError<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">HttpStatusTest</span><span class="token punctuation">(</span><span class="token class-name">HttpStatusCode</span> httpStatusCode<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> httpHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MockHttpHandler</span><span class="token punctuation">(</span>req <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResponseMessage</span><span class="token punctuation">(</span>httpStatusCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>httpHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:32123/api/values&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>httpStatusCode<span class="token punctuation">,</span> response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有需要在测试的过程中修改模拟的行为，可以通过 SetResponseFactory 方法来</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">SetResponseFactoryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> httpHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MockHttpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>httpHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:32123/api/values&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    httpHandler<span class="token punctuation">.</span><span class="token function">SetResponseFactory</span><span class="token punctuation">(</span>req <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResponseMessage</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:32123/api/values&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">,</span> response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的方式都是直接指定了 response，我们也可以根据请求信息动态地返回 response</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">DynamicResponseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> httpHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MockHttpHandler</span><span class="token punctuation">(</span>req <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResponseMessage</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Method<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span>httpHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:32123/api/values&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Get<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> httpResponse <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:32123/api/values&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> httpResponse<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><p>实现代码很简单，大致如下，根据自定义的逻辑去返回 response 即可</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MockHttpHandler</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">HttpMessageHandler</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>HttpRequestMessage<span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> _responseFactory<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MockHttpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpResponseMessage</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">MockHttpHandler</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>HttpRequestMessage<span class="token punctuation">,</span> HttpResponseMessage<span class="token punctuation">&gt;</span></span> responseFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Guard<span class="token punctuation">.</span><span class="token function">NotNull</span><span class="token punctuation">(</span>responseFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _responseFactory <span class="token operator">=</span> req <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token function">responseFactory</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">MockHttpHandler</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>HttpRequestMessage<span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> responseFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Guard<span class="token punctuation">.</span><span class="token function">NotNull</span><span class="token punctuation">(</span>responseFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _responseFactory <span class="token operator">=</span> responseFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetResponseFactory</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>HttpRequestMessage<span class="token punctuation">,</span> HttpResponseMessage<span class="token punctuation">&gt;</span></span> responseFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Guard<span class="token punctuation">.</span><span class="token function">NotNull</span><span class="token punctuation">(</span>responseFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _responseFactory <span class="token operator">=</span> req <span class="token operator">=&gt;</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span><span class="token function">responseFactory</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SetResponseFactory</span><span class="token punctuation">(</span><span class="token class-name">Func<span class="token punctuation">&lt;</span>HttpRequestMessage<span class="token punctuation">,</span> Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> responseFactory<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Guard<span class="token punctuation">.</span><span class="token function">NotNull</span><span class="token punctuation">(</span>responseFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _responseFactory <span class="token operator">=</span> responseFactory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>HttpResponseMessage<span class="token punctuation">&gt;</span></span> <span class="token function">SendAsync</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMessage</span> request<span class="token punctuation">,</span> <span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">_responseFactory</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在需要模拟 Http API 的响应时，可以考虑使用这种方式</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>mockhttpclient：https://blog.elmah.io/mocking-httpclient-requests-for-csharp-unit-tests/</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,16),k={href:"https://mp.weixin.qq.com/s/iPD2b6OIZ9B_3FXOwzZlvw",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[i,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/iPD2b6OIZ9B_3FXOwzZlvw"),c(a)]),s(" | .NET 中更方便地模拟 Http 响应")])])}const h=t(u,[["render",r],["__file","monihttpxiangying.html.vue"]]),y=JSON.parse('{"path":"/middleware/testMange/monihttpxiangying.html","title":"模拟 Http 响应","lang":"zh-CN","frontmatter":{"title":"模拟 Http 响应","lang":"zh-CN","date":"2023-10-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"monihttpxiangying","slug":"wxaqwk","docsId":"68054704","description":"前言 在我们的业务代码中往往会有很多调用内部其他 team 或者是第三方的一些服务，在编写单元测试代码时，往往需要 Mock Http Response 来模拟更好可能的返回结果，我封装了一个简单的 Http Handler 来简化 Mock 过程，让基于 HttpClient Http Response 的模拟更为简单。 示例 首先来看一个简单的使用...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/monihttpxiangying.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"模拟 Http 响应"}],["meta",{"property":"og:description","content":"前言 在我们的业务代码中往往会有很多调用内部其他 team 或者是第三方的一些服务，在编写单元测试代码时，往往需要 Mock Http Response 来模拟更好可能的返回结果，我封装了一个简单的 Http Handler 来简化 Mock 过程，让基于 HttpClient Http Response 的模拟更为简单。 示例 首先来看一个简单的使用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模拟 Http 响应\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":1.66,"words":498},"filePathRelative":"middleware/testMange/monihttpxiangying.md","localizedDate":"2023年10月14日","excerpt":"<h2>前言</h2>\\n<p>在我们的业务代码中往往会有很多调用内部其他 team 或者是第三方的一些服务，在编写单元测试代码时，往往需要 Mock Http Response 来模拟更好可能的返回结果，我封装了一个简单的 Http Handler 来简化 Mock 过程，让基于 HttpClient Http Response 的模拟更为简单。</p>\\n<h2>示例</h2>\\n<p>首先来看一个简单的使用示例，也是一个测试用例</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">Theory</span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">InlineData</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>OK<span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">InlineData</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>BadRequest<span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">InlineData</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>Unauthorized<span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">InlineData</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>Forbidden<span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">InlineData</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>NotFound<span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token punctuation\\">[</span><span class=\\"token attribute\\"><span class=\\"token class-name\\">InlineData</span><span class=\\"token attribute-arguments\\"><span class=\\"token punctuation\\">(</span>HttpStatusCode<span class=\\"token punctuation\\">.</span>InternalServerError<span class=\\"token punctuation\\">)</span></span></span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">async</span> <span class=\\"token return-type class-name\\">Task</span> <span class=\\"token function\\">HttpStatusTest</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpStatusCode</span> httpStatusCode<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> httpHandler <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">MockHttpHandler</span><span class=\\"token punctuation\\">(</span>req <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">HttpResponseMessage</span><span class=\\"token punctuation\\">(</span>httpStatusCode<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">using</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> httpClient <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">HttpClient</span><span class=\\"token punctuation\\">(</span>httpHandler<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">using</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> response <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> httpClient<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetAsync</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"http://localhost:32123/api/values\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    Assert<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Equal</span><span class=\\"token punctuation\\">(</span>httpStatusCode<span class=\\"token punctuation\\">,</span> response<span class=\\"token punctuation\\">.</span>StatusCode<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{h as comp,y as data};
