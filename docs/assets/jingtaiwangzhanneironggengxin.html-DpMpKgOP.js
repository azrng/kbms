import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,d as s,e as c,b as i}from"./app-DMmdIwn0.js";const l={},u=i(`<h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><p>我们的应用一个版本可以对应一个部署槽，通过部署槽我们就基本可以无缝地从一个版本切换到另外一个版本。（通过配置显示当下静态网站使用哪个目录下的文件。）</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="fileprovider" tabindex="-1"><a class="header-anchor" href="#fileprovider"><span>FileProvider</span></a></h3><p>ASP.NET Core 里静态文件的托管是允许自定义一个 IFileProvider 的，默认会使用物理路径文件， ASP.NET Core 默认使用 wwroot 目录下作为默认的静态文件来源。 对于静态文件而言我们简单地使用两个目录来模拟两个部署槽，当需要的时候通过修改配置来动态修改生效的部署槽，基于 IOptionMonitor 和 PhysicalFileProvider 来实现一个简单的 DynamicFileProvider，实现代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicFileProviderOptions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> CurrentSlot <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicFileProvider</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IFileProvider</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PhysicalFileProvider</span> _physicalFileProvider<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> DefaultSlotName <span class="token operator">=</span> <span class="token string">&quot;Slot1&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">DynamicFileProvider</span><span class="token punctuation">(</span><span class="token class-name">IOptionsMonitor<span class="token punctuation">&lt;</span>DynamicFileProviderOptions<span class="token punctuation">&gt;</span></span> optionsMonitor<span class="token punctuation">,</span> <span class="token class-name">IWebHostEnvironment</span> webHostEnvironment<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> webRoot <span class="token operator">=</span> webHostEnvironment<span class="token punctuation">.</span>ContentRootPath<span class="token punctuation">;</span>
        _physicalFileProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>webRoot<span class="token punctuation">,</span> optionsMonitor<span class="token punctuation">.</span>CurrentValue<span class="token punctuation">.</span>CurrentSlot <span class="token operator">??</span> DefaultSlotName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        optionsMonitor<span class="token punctuation">.</span><span class="token function">OnChange</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> path <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>webRoot<span class="token punctuation">,</span> options<span class="token punctuation">.</span>CurrentSlot<span class="token punctuation">)</span><span class="token punctuation">;</span>
            _physicalFileProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PhysicalFileProvider</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IDirectoryContents</span> <span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> subpath<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _physicalFileProvider<span class="token punctuation">.</span><span class="token function">GetDirectoryContents</span><span class="token punctuation">(</span>subpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IFileInfo</span> <span class="token function">GetFileInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> subpath<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _physicalFileProvider<span class="token punctuation">.</span><span class="token function">GetFileInfo</span><span class="token punctuation">(</span>subpath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">IChangeToken</span> <span class="token function">Watch</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> filter<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _physicalFileProvider<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来是不是简单，其实就是在 PhysicalFileProvider 的基础上封装了一下，配置发生变化的时候构建一个新的 PhysicalFileProvider</p><h3 id="配置host" tabindex="-1"><a class="header-anchor" href="#配置host"><span>配置Host</span></a></h3><p>接着我们来看一下如何使用，使用代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webHostBuilder <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    webHostBuilder<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Configure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFileProviderOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFileProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    webHostBuilder<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>app <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> dynamicFileProvider <span class="token operator">=</span> app<span class="token punctuation">.</span>ApplicationServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFileProvider<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">StaticFileOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            FileProvider <span class="token operator">=</span> dynamicFileProvider<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
host<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的示例只需要这些代码我们的应用就可以跑起来了。通过修改配置文件的内容可以动态使用哪个网站。</p><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化"><span>优化</span></a></h3><p>提供了一个做切换的一个简单的 API</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">PathString</span><span class="token punctuation">(</span><span class="token string">&quot;/redeploy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> appBuilder <span class="token operator">=&gt;</span> appBuilder<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>context <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRequiredService</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IConfiguration<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token class-name">ConfigurationRoot</span> configuration<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> currentSlot <span class="token operator">=</span> configuration<span class="token punctuation">[</span><span class="token string">&quot;CurrentSlot&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        configuration<span class="token punctuation">[</span><span class="token string">&quot;CurrentSlot&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Slot2&quot;</span> <span class="token operator">!=</span> currentSlot <span class="token punctuation">?</span> <span class="token string">&quot;Slot2&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;Slot1&quot;</span><span class="token punctuation">;</span>
        configuration<span class="token punctuation">.</span><span class="token function">Reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 API 做的事情很简单，在 Slot1 和 Slot2 之间进行切换，如果原来是 Slot2 则切换成 Slot1 否则切换成 Slot2，修改配置之后调用一下 Reload 以触发配置更新，删除配置文件中的 CurrentSlot 配置，重新运行示例，查看 http://localhost:5000/index.html，还是看到的 Slot1 中的内容，然后我们调用一下 /redeploy 接口来动态切换一下配置，然后再次刷新页面就会看到 Slot2 中的内容，再调用一下 redeploy 之后刷新页面就会变回 Slot1 中的内容。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,16),r={href:"https://mp.weixin.qq.com/s/xD76udEkP67sBDqH4ci13A",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/xD76udEkP67sBDqH4ci13A"),c(a)]),s(" | ASP.NET Core 实现一个简单的静态网站滚动更新")])])}const h=t(l,[["render",k],["__file","jingtaiwangzhanneironggengxin.html.vue"]]),b=JSON.parse('{"path":"/dotnet/base/jingtaiwenjian/jingtaiwangzhanneironggengxin.html","title":"静态网站内容更新","lang":"zh-CN","frontmatter":{"title":"静态网站内容更新","lang":"zh-CN","date":"2022-09-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jingtaiwangzhanneironggengxin","slug":"yt4itp","docsId":"65940506","description":"需求 我们的应用一个版本可以对应一个部署槽，通过部署槽我们就基本可以无缝地从一个版本切换到另外一个版本。（通过配置显示当下静态网站使用哪个目录下的文件。） 操作 FileProvider ASP.NET Core 里静态文件的托管是允许自定义一个 IFileProvider 的，默认会使用物理路径文件， ASP.NET Core 默认使用 wwroot...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/jingtaiwenjian/jingtaiwangzhanneironggengxin.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"静态网站内容更新"}],["meta",{"property":"og:description","content":"需求 我们的应用一个版本可以对应一个部署槽，通过部署槽我们就基本可以无缝地从一个版本切换到另外一个版本。（通过配置显示当下静态网站使用哪个目录下的文件。） 操作 FileProvider ASP.NET Core 里静态文件的托管是允许自定义一个 IFileProvider 的，默认会使用物理路径文件， ASP.NET Core 默认使用 wwroot..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-09-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"静态网站内容更新\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"FileProvider","slug":"fileprovider","link":"#fileprovider","children":[]},{"level":3,"title":"配置Host","slug":"配置host","link":"#配置host","children":[]},{"level":3,"title":"优化","slug":"优化","link":"#优化","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.17,"words":651},"filePathRelative":"dotnet/base/jingtaiwenjian/jingtaiwangzhanneironggengxin.md","localizedDate":"2022年9月17日","excerpt":"<h2>需求</h2>\\n<p>我们的应用一个版本可以对应一个部署槽，通过部署槽我们就基本可以无缝地从一个版本切换到另外一个版本。（通过配置显示当下静态网站使用哪个目录下的文件。）</p>\\n<h2>操作</h2>\\n<h3>FileProvider</h3>\\n<p>ASP.NET Core 里静态文件的托管是允许自定义一个 IFileProvider 的，默认会使用物理路径文件， ASP.NET Core 默认使用 wwroot 目录下作为默认的静态文件来源。\\n对于静态文件而言我们简单地使用两个目录来模拟两个部署槽，当需要的时候通过修改配置来动态修改生效的部署槽，基于 IOptionMonitor 和 PhysicalFileProvider 来实现一个简单的 DynamicFileProvider，实现代码如下：</p>","autoDesc":true}');export{h as comp,b as data};
