import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as t,d as a}from"./app-2OrQE2Jp.js";const e={},n=a(`<h3 id="过滤查询" tabindex="-1"><a class="header-anchor" href="#过滤查询"><span>过滤查询</span></a></h3><p>示例:查询用户姓名中包含有p字母的所有用户信息 推荐写法：使用contains</p><blockquote><p>var data3 = dbContext.T_UserInfor.Where(u =&gt; u.userName.Contains(&quot;p&quot;)).ToList();</p></blockquote><p>这点和efcore的不一样，efcore生成的是CHARINDEX(&quot;p&quot;,userName)&gt;0</p><h3 id="包含关系" tabindex="-1"><a class="header-anchor" href="#包含关系"><span>包含关系</span></a></h3><p>示例：求用户姓名为 &quot;p1,p2,p3,p4,x2,y4&quot;的所有用户信息，已知字符串 string str = &quot;p1,p2,p3,p4,x2,y4&quot;; 正确做法：将字符串转成list，然后再使用contains</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;p1,p2,p3,p4,x2,y4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> strList</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Split</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToList</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> data5</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> dbContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">T_UserInfor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Where</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">u</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> strList</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Contains</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">u</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">userName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToList</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),p=[n];function r(h,l){return t(),s("div",null,p)}const d=i(e,[["render",r],["__file","youhua.html.vue"]]),c=JSON.parse('{"path":"/orm/ef/youhua.html","title":"优化","lang":"zh-CN","frontmatter":{"title":"优化","lang":"zh-CN","date":"2022-02-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"youhua","slug":"gnobou","docsId":"29914634","description":"过滤查询 示例:查询用户姓名中包含有p字母的所有用户信息 推荐写法：使用contains var data3 = dbContext.T_UserInfor.Where(u => u.userName.Contains(\\"p\\")).ToList(); 这点和efcore的不一样，efcore生成的是CHARINDEX(\\"p\\",userName)>0 包...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/ef/youhua.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"优化"}],["meta",{"property":"og:description","content":"过滤查询 示例:查询用户姓名中包含有p字母的所有用户信息 推荐写法：使用contains var data3 = dbContext.T_UserInfor.Where(u => u.userName.Contains(\\"p\\")).ToList(); 这点和efcore的不一样，efcore生成的是CHARINDEX(\\"p\\",userName)>0 包..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-23T14:35:45.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-02-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-23T14:35:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-23T14:35:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"过滤查询","slug":"过滤查询","link":"#过滤查询","children":[]},{"level":3,"title":"包含关系","slug":"包含关系","link":"#包含关系","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1700750145000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":3}]},"readingTime":{"minutes":0.53,"words":158},"filePathRelative":"orm/ef/youhua.md","localizedDate":"2022年2月13日","excerpt":"<h3>过滤查询</h3>\\n<p>示例:查询用户姓名中包含有p字母的所有用户信息\\n推荐写法：使用contains</p>\\n<blockquote>\\n<p>var data3 = dbContext.T_UserInfor.Where(u =&gt; u.userName.Contains(\\"p\\")).ToList();</p>\\n</blockquote>\\n<p>这点和efcore的不一样，efcore生成的是CHARINDEX(\\"p\\",userName)&gt;0</p>\\n<h3>包含关系</h3>\\n<p>示例：求用户姓名为&nbsp;\\"p1,p2,p3,p4,x2,y4\\"的所有用户信息，已知字符串 string str = \\"p1,p2,p3,p4,x2,y4\\";\\n正确做法：将字符串转成list，然后再使用contains</p>","autoDesc":true}');export{d as comp,c as data};
