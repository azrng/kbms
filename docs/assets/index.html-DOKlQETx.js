import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as t}from"./app-CVCmcd0Y.js";const e={},l=t(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>在 ASP.NET Core 应用中，一个 WebAPI 控制器需遵循以下约定：</p><ul><li>控制器类必须继承 ControllerBase 或间接继承</li><li>动作方法必须贴有 [HttpMethod] 特性，如：[HttpGet]</li><li>控制器或动作方法至少有一个配置 [Route] 特性</li><li>生成 WebAPI 路由地址时会自动去掉控制器名称 Controller 后缀</li><li>[ApiController]这个特训个是应用于Controller，它其实并不是强制的，但是他提供了一些帮助，使得WebApi的开发更好。 <ul><li>要求适用属性路由，也就是不能通过strartup的configure方法统一配置路由模板。</li><li>自动http 400响应。也就是action方法传入的model含有验证错误的时候，会自动出发http 400响应。</li><li>推断参数的绑定源。它将推断出acrion方法的参数到底来自于哪个绑定源，[FromBody]、[FormForm]等等。</li></ul></li></ul><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化"><span>性能优化</span></a></h2><ul><li>使用缓存</li><li>使用高速json序列化期</li><li>使用iis压缩web API</li><li>创建适当的数据库结构</li></ul><h2 id="安全" tabindex="-1"><a class="header-anchor" href="#安全"><span>安全</span></a></h2><p>框架已经提供了一些常见的漏洞解决方案</p><ul><li>跨站点脚本</li><li>SQL注入</li><li>跨站点请求伪造(CSRF)</li><li>重定向</li></ul><p>但是我们还需要更进一步，考虑以下常见的攻击</p><ul><li>拒绝服务(dos)</li><li>分布式拒绝服务(ddos)</li><li>批量API调用</li><li>探测响应</li><li>数据抓取</li></ul><h2 id="api请求数据类型" tabindex="-1"><a class="header-anchor" href="#api请求数据类型"><span>API请求数据类型</span></a></h2><table><thead><tr><th></th><th>前端</th><th>后端</th><th>示例</th></tr></thead><tbody><tr><td>时间</td><td>Date</td><td>TimeSpan</td><td>&quot;startTime&quot;: &quot;00:15:00&quot;</td></tr><tr><td>时间</td><td>Date</td><td>DateTime</td><td></td></tr></tbody></table><h2 id="apicontroller特性" tabindex="-1"><a class="header-anchor" href="#apicontroller特性"><span>ApiController特性</span></a></h2><h3 id="自动http400响应" tabindex="-1"><a class="header-anchor" href="#自动http400响应"><span>自动HTTP400响应</span></a></h3><p>[ApiController] 特性使模型验证错误自动触发 HTTP 400 响应。 因此，操作方法中不需要以下代码</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ModelState</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">IsValid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BadRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">ModelState</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别是如果想使用过滤器做自定义模型校验，那么就需要不使用该特性，或者关闭自动的校验，如</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Configure</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">ApiBehaviorOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SuppressModelStateInvalidFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="常见操作" tabindex="-1"><a class="header-anchor" href="#常见操作"><span>常见操作</span></a></h2><h3 id="接受参数反序列化" tabindex="-1"><a class="header-anchor" href="#接受参数反序列化"><span>接受参数反序列化</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">JObject</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">JObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">JsonConvert</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">DeserializeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">HttpUtility</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">UrlDecode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;返回回来的json数据&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;"> aa</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取请求头" tabindex="-1"><a class="header-anchor" href="#获取请求头"><span>获取请求头</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> GetHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">this</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> HttpRequestMessage</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">    IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E06C75;">keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">TryGetValues</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">First</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/kH4bRpUJSMveNpAlGcSiFg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/kH4bRpUJSMveNpAlGcSiFg</a> | 差距 50 倍！为什么 Web API 第一次执行这么慢？ <a href="https://mp.weixin.qq.com/s/VQS8XOarT5iPiiTzYIDlqg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/VQS8XOarT5iPiiTzYIDlqg</a> | .NET6使用DOCFX根据注释自动生成开发文档  <a href="https://mp.weixin.qq.com/s/fpe3avrST2k-oNoSiqZNXw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/fpe3avrST2k-oNoSiqZNXw</a> | 强烈推荐：C#类库生成API 文档！</p>`,25),n=[l];function h(r,p){return a(),s("div",null,n)}const o=i(e,[["render",h],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/dotnet/api/controllerApi/","title":"基于控制器的API","lang":"zh-CN","frontmatter":{"title":"基于控制器的API","lang":"zh-CN","date":"2023-10-17T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"jiyukongzhiqideapi","slug":"gcthrq","docsId":"30621891","description":"概述 在 ASP.NET Core 应用中，一个 WebAPI 控制器需遵循以下约定： 控制器类必须继承 ControllerBase 或间接继承 动作方法必须贴有 [HttpMethod] 特性，如：[HttpGet] 控制器或动作方法至少有一个配置 [Route] 特性 生成 WebAPI 路由地址时会自动去掉控制器名称 Controller 后缀...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/controllerApi/"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"基于控制器的API"}],["meta",{"property":"og:description","content":"概述 在 ASP.NET Core 应用中，一个 WebAPI 控制器需遵循以下约定： 控制器类必须继承 ControllerBase 或间接继承 动作方法必须贴有 [HttpMethod] 特性，如：[HttpGet] 控制器或动作方法至少有一个配置 [Route] 特性 生成 WebAPI 路由地址时会自动去掉控制器名称 Controller 后缀..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T09:26:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-25T09:26:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基于控制器的API\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-25T09:26:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"性能优化","slug":"性能优化","link":"#性能优化","children":[]},{"level":2,"title":"安全","slug":"安全","link":"#安全","children":[]},{"level":2,"title":"API请求数据类型","slug":"api请求数据类型","link":"#api请求数据类型","children":[]},{"level":2,"title":"ApiController特性","slug":"apicontroller特性","link":"#apicontroller特性","children":[{"level":3,"title":"自动HTTP400响应","slug":"自动http400响应","link":"#自动http400响应","children":[]}]},{"level":2,"title":"常见操作","slug":"常见操作","link":"#常见操作","children":[{"level":3,"title":"接受参数反序列化","slug":"接受参数反序列化","link":"#接受参数反序列化","children":[]},{"level":3,"title":"获取请求头","slug":"获取请求头","link":"#获取请求头","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1708853184000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.03,"words":608},"filePathRelative":"dotnet/api/controllerApi/readme.md","localizedDate":"2023年10月17日","excerpt":"<h2>概述</h2>\\n<p>在 ASP.NET Core 应用中，一个 WebAPI 控制器需遵循以下约定：</p>\\n<ul>\\n<li>控制器类必须继承 ControllerBase 或间接继承</li>\\n<li>动作方法必须贴有 [HttpMethod] 特性，如：[HttpGet]</li>\\n<li>控制器或动作方法至少有一个配置 [Route] 特性</li>\\n<li>生成 WebAPI 路由地址时会自动去掉控制器名称 Controller 后缀</li>\\n<li>[ApiController]这个特训个是应用于Controller，它其实并不是强制的，但是他提供了一些帮助，使得WebApi的开发更好。\\n<ul>\\n<li>要求适用属性路由，也就是不能通过strartup的configure方法统一配置路由模板。</li>\\n<li>自动http 400响应。也就是action方法传入的model含有验证错误的时候，会自动出发http 400响应。</li>\\n<li>推断参数的绑定源。它将推断出acrion方法的参数到底来自于哪个绑定源，[FromBody]、[FormForm]等等。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{o as comp,g as data};
