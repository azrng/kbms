import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,e as t,b as p}from"./app-qB9_Bjjp.js";const i="/kbms/common/1621562425951-13836b1a-66db-46a9-9f39-7fb3278d879c.png",u="/kbms/common/1621562455217-109ca102-03dc-41b3-9cc2-7c3e0a12856f.png",r="/kbms/common/1621562254206-ca4cde94-2b2d-4e81-94fd-aabf09bc198d.png",k="/kbms/common/1621562264762-9127dd6f-a5bc-473f-bbc1-6547657eb5b5.png",d="/kbms/common/1621564709433-98fbb56e-66e0-4505-b414-b12e9fa5d53b.png",v="/kbms/common/1621563339181-f19d1904-de1f-4897-a64c-d14e45f17071.png",m="/kbms/common/1621563656968-030835ff-2188-43c9-99e6-b2c475e02f3e.png",b={},g={class:"hint-container tip"},h=n("p",{class:"hint-container-title"},"提示",-1),f=n("p",null,"本文示例环境：vs2022、.Net6及以上、MySQL、pgsql",-1),y={href:"https://learn.microsoft.com/zh-cn/ef/core/get-started/overview/first-app",target:"_blank",rel:"noopener noreferrer"},q=p(`<h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><h3 id="配置组件包" tabindex="-1"><a class="header-anchor" href="#配置组件包"><span>配置组件包</span></a></h3><p>基础包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 基础库</span>
Microsoft<span class="token punctuation">.</span>EntityFrameworkCore

<span class="token comment">//数据库迁移使用</span>
Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库提供程序" tabindex="-1"><a class="header-anchor" href="#数据库提供程序"><span>数据库提供程序</span></a></h3><p>每个 DbContext 实例都必须配置一个数据库提供程序。 （DbContext 子类型的不同实例可用于不同的数据库提供程序，但单个实例只能使用一个。）使用特定的 Use*调用配置数据库提供程序。 例如，若要使用 SQL Server 数据库提供程序</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 配置方案一</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        optionsBuilder<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">@&quot;Server=(localdb)\\mssqllocaldb;Database=Test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 配置方案二 ApplicationDbContext中不重写OnConfiguring在Startup中配置</span>
services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ApplicationDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span> options<span class="token punctuation">.</span><span class="token function">UseSqlServer</span><span class="token punctuation">(</span><span class="token string">&quot;连接字符串&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些 <code>Use*</code>方法是由数据库提供程序实现的扩展方法。 这意味着必须先安装数据库提供程序 NuGet 包，然后才能使用扩展方法。</p>`,8),w={href:"https://docs.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli",target:"_blank",rel:"noopener noreferrer"},x=p(`<h2 id="_1-连接数据库" tabindex="-1"><a class="header-anchor" href="#_1-连接数据库"><span>1. 连接数据库</span></a></h2><blockquote><p>本文使用MySQL数据库，需要提前准备好MySQL数据库。</p></blockquote><p>通过依赖注入配置应用程序，通过startup类的ConfigureService方法中的AddDbContext将EFCore添加到依赖注入容器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     
    <span class="token comment">// 需要提前引入nuget包：Pomelo.EntityFrameworkCore.MySql</span>
    
    <span class="token comment">// 老版本驱动包对应的写法</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OpenDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>
        options <span class="token operator">=&gt;</span> options<span class="token punctuation">.</span><span class="token function">UseMySql</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">[</span><span class="token string">&quot;DbConfig:Mysql:ConnectionString&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token comment">// 新版本驱动包的写法(connection为连接字符串)</span>
    services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddDbContext</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OpenDbContext<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>option <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        option<span class="token punctuation">.</span><span class="token function">UseMySql</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> ServerVersion<span class="token punctuation">.</span><span class="token function">AutoDetect</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将名为 OpenDbContext的 DbContext 子类注册到依赖注入容器的Scope生命周期。数据库是MySQL，并从配置中读取数据库连接字符串。</p><p>OpenDbContext类必须公开具有 DbContextOptions&lt;OpenDbContext&gt; 参数的公共构造函数。 这是将 AddDbContext 的上下文配置传递到 DbContext 的方式。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenDbContext</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DbContext</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">OpenDbContext</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptions</span> options<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span> Users <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span> Scores <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DbSet<span class="token punctuation">&lt;</span>Group<span class="token punctuation">&gt;</span></span> Grades <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 配置信息连接数据库</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>optionsBuilder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnConfiguring</span><span class="token punctuation">(</span><span class="token class-name">DbContextOptionsBuilder</span> optionsBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//另一种配置连接数据库的方式</span>
        <span class="token comment">//optionsBuilder.UseMySql(&quot;连接数据库&quot;, ServerVersion.AutoDetect(&quot;连接数据库字符串&quot;));</span>

        <span class="token comment">//显示敏感数据日志(设置输出执行的SQL文件时候显示参数使用)</span>
        optionsBuilder<span class="token punctuation">.</span><span class="token function">EnableSensitiveDataLogging</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 配置数据库结构关系映射</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modelBuilder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span><span class="token class-name">ModelBuilder</span> modelBuilder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//属性配置</span>
        <span class="token comment">//modelBuilder.Entity&lt;User&gt;().Property(t =&gt; t.Account).IsRequired().HasMaxLength(20).HasComment(&quot;帐号&quot;);</span>
        <span class="token comment">//种子数据设置</span>
        <span class="token comment">//modelBuilder.Entity&lt;User&gt;().HasData(new User { Account=&quot;种子&quot;});</span>

        <span class="token comment">// 添加etc</span>
        <span class="token comment">//modelBuilder.ApplyConfiguration(new UserInfoETC());</span>

        <span class="token comment">//使用下面的方法进行替换处理上面批量增加etc的操作</span>
        modelBuilder<span class="token punctuation">.</span><span class="token function">ApplyConfigurationsFromAssembly</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnModelCreating</span><span class="token punctuation">(</span>modelBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将OpenDbContext通过构造函数注入的方式注入到应用程序的控制器或者其他服务中使用。</p>`,8),_={href:"https://mp.weixin.qq.com/s/_jfMwvewRNkAVwL4pfvLCA",target:"_blank",rel:"noopener noreferrer"},S=p(`<h2 id="_2-操作迁移数据库" tabindex="-1"><a class="header-anchor" href="#_2-操作迁移数据库"><span>2. 操作迁移数据库</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>根据代码生成数据库或者操作数据库使用</p></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除数据库，如果存在，如果没有权限，则引发异常</span>
context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果数据库不存在，创建数据库并初始化数据库架构，如果存在任何表，则不会初始化架构</span>
context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//根据迁移文件，迁移数据库</span>


<span class="token comment">// 项目配置</span>
context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">EnsureCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
context<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-查询操作" tabindex="-1"><a class="header-anchor" href="#_3-查询操作"><span>3. 查询操作</span></a></h2><h3 id="_3-1-基础查询" tabindex="-1"><a class="header-anchor" href="#_3-1-基础查询"><span>3.1 基础查询</span></a></h3><blockquote><p>此处的_context为数据库上下文，也就是上面的OpenDbContext实例</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 查询集合 写法一</span>
_context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UserInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 查询集合 写法二</span>
_context<span class="token punctuation">.</span>UserInfos<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//查询单个</span>
_context<span class="token punctuation">.</span>Movie<span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>ID <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> 
_context<span class="token punctuation">.</span>Movie<span class="token punctuation">.</span><span class="token function">FindAsync</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">//查询指定列  如果不存在数据返回空对象，而不是null</span>
_context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t<span class="token operator">=&gt;</span>t<span class="token punctuation">.</span>Id<span class="token operator">==</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span>Account<span class="token punctuation">,</span> t<span class="token punctuation">.</span>PassWord <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//查询指定列 如果不存在数据返回空字符串，而不是null</span>
 <span class="token class-name"><span class="token keyword">var</span></span> session <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t<span class="token operator">=&gt;</span>t<span class="token punctuation">.</span>Id <span class="token operator">==</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

_context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>ty <span class="token operator">=&gt;</span> ty<span class="token punctuation">.</span>IsValid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token string">&quot;1407875772521123840&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在EFCore中不论是先where还是先order，生成的SQL脚本都是先where再order的</span>

<span class="token comment">// 预先加载查询</span>
<span class="token class-name"><span class="token keyword">var</span></span> blogs <span class="token operator">=</span> context<span class="token punctuation">.</span>Blogs<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>blog <span class="token operator">=&gt;</span> blog<span class="token punctuation">.</span>Posts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 包含多个层级的查询</span>
<span class="token class-name"><span class="token keyword">var</span></span> blogs <span class="token operator">=</span> context<span class="token punctuation">.</span>Blogs<span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>blog <span class="token operator">=&gt;</span> blog<span class="token punctuation">.</span>Posts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenInclude</span><span class="token punctuation">(</span>post <span class="token operator">=&gt;</span> post<span class="token punctuation">.</span>Author<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//忽略查询过滤</span>
<span class="token class-name"><span class="token keyword">var</span></span> info <span class="token operator">=</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">IgnoreQueryFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>操作符</th><th>序列是空的</th><th>序列只包含一个元素</th><th>序列包含多个元素</th></tr></thead><tbody><tr><td>first</td><td>异常</td><td>返回该元素</td><td>返回第一个元素</td></tr><tr><td>firstOfDefault</td><td>返回default（TSourse）</td><td>返回该元素</td><td>返回第一个元素</td></tr><tr><td>last</td><td>异常</td><td>返回该元素</td><td>返回最后一个元素</td></tr><tr><td>lastOfDefault</td><td>返回default（TSourse）</td><td>返回该元素</td><td>返回最后一个元素</td></tr><tr><td>Single</td><td>异常</td><td>返回该元素</td><td>异常</td></tr><tr><td>SingleOrDefault</td><td>返回default（TSourse）</td><td>返回该元素</td><td>异常</td></tr></tbody></table><p>FindAsync 在大部分基架代码中，FindAsync 可用于替代 FirstOrDefaultAsync ，查找具有主键 (PK) 的实体。 如果具有 PK 的实体正在由上下文跟踪，会返回该实体且不向 DB 发出请求。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>测试结果
<span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> _context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token string">&quot;55555&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> t<span class="token punctuation">.</span>Account <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
<span class="token class-name"><span class="token keyword">var</span></span> entity2 <span class="token operator">=</span> _context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token string">&quot;55555&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
<span class="token class-name"><span class="token keyword">var</span></span> enetit3 <span class="token operator">=</span> _context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token string">&quot;55555&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">user</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> t<span class="token punctuation">.</span>Account <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
<span class="token class-name"><span class="token keyword">var</span></span> entity4 <span class="token operator">=</span> _context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> <span class="token string">&quot;55555&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
<span class="token class-name"><span class="token keyword">var</span></span> entity5 <span class="token operator">=</span> _context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">user</span> <span class="token punctuation">{</span> Name <span class="token operator">=</span> t<span class="token punctuation">.</span>Account <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;444&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-跟踪和非跟踪查询" tabindex="-1"><a class="header-anchor" href="#_3-2-跟踪和非跟踪查询"><span>3.2 跟踪和非跟踪查询</span></a></h3><p>跟踪行为决定了EFCore是否将有些实体的信息保存在其更改更跟踪器中。如果已跟踪某个实体，则该实体中检测到的任何更改都会在SaveChanges()时候保存到数据库，当你一个查询只是查询后续不会对他进行修改等操作，那么推荐使用不追踪的查询，性能更好</p><blockquote><p>不跟踪没有主键的实体类型。</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 跟踪查询</span>
_context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 不跟踪查询</span>
_context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsNoTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>默认是跟踪查询</p></blockquote><h3 id="_3-3-条件查询" tabindex="-1"><a class="header-anchor" href="#_3-3-条件查询"><span>3.3 条件查询</span></a></h3><p>通过表达式树或者Lambda</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 方案一</span>
<span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>User<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> express <span class="token operator">=</span> x <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	express <span class="token operator">=</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Mobile <span class="token operator">==</span> dto<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>express<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方案二</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> db<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>Deleted<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> account <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 如果满足一些条件就继续拼接筛选</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    query <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Account <span class="token operator">==</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> query<span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-原生sql查询" tabindex="-1"><a class="header-anchor" href="#_3-4-原生sql查询"><span>3.4 原生SQL查询</span></a></h3><p>可使用 FromSqlRaw 扩展方法基于原始 SQL 查询开始 LINQ 查询。 FromSqlRaw 只能在直接位于 DbSet&lt;&gt; 上的查询实体上使用。</p>`,20),C={href:"https://learn.microsoft.com/zh-cn/ef/core/querying/sql-queries",target:"_blank",rel:"noopener noreferrer"},I=p(`<h4 id="_3-4-1-基本原生sql查询" tabindex="-1"><a class="header-anchor" href="#_3-4-1-基本原生sql查询"><span>3.4.1 基本原生SQL查询</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> blogs <span class="token operator">=</span> context<span class="token punctuation">.</span>Blogs
    <span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行存储过程</span>
<span class="token class-name"><span class="token keyword">var</span></span> blogs <span class="token operator">=</span> context<span class="token punctuation">.</span>Blogs
    <span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span><span class="token string">&quot;EXECUTE dbo.GetMostPopularBlogs&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>2.x里面使用FromSql，在3.x里面 使用FromSqlRow方法</p></blockquote><h4 id="_3-4-2-参数化查询" tabindex="-1"><a class="header-anchor" href="#_3-4-2-参数化查询"><span>3.4.2 参数化查询</span></a></h4><h5 id="_3-4-2-1-sql注入示例" tabindex="-1"><a class="header-anchor" href="#_3-4-2-1-sql注入示例"><span>3.4.2.1 SQL注入示例</span></a></h5><p>首先我们编写一个简单的SQL注入示例，比如就注入我们根据ID查询的语句，输入ID为：ididid&#39; or &#39;1&#39;=&#39;1</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> strSql <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user where Id=&#39;{0}&#39;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ididid&#39; or &#39;1&#39;=&#39;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span>strSql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成语句</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user <span class="token keyword">where</span> <span class="token class-name">Id</span><span class="token operator">=</span>&#39;ididid&#39; <span class="token keyword">or</span> <span class="token char">&#39;1&#39;</span><span class="token operator">=</span><span class="token char">&#39;1&#39;</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;PassWord&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CreateTime&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2021-05-20T22:53:44.778101&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;IsValid&quot;</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392302788120576&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;PassWord&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CreateTime&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2021-05-20T22:53:44.849376&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;IsValid&quot;</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392303090110464&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;PassWord&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CreateTime&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2021-05-20T22:53:44.849425&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;IsValid&quot;</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392303090110467&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果显示虽然我们本意想查询id等于ididid的值，但是通过SQL注入的原因，将所有内容查询出来了，所以在开发中如果遇到类似拼接SQL的场景，要注意SQL注入的问题</p><h5 id="_3-4-2-2-fromsqlraw参数化" tabindex="-1"><a class="header-anchor" href="#_3-4-2-2-fromsqlraw参数化"><span>3.4.2.2 FromSqlRaw参数化</span></a></h5><p>通过参数化查询，防止SQL注入问题</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//sql语句参数化查询，防止SQL注入	</span>
<span class="token class-name"><span class="token keyword">var</span></span> strSql <span class="token operator">=</span> <span class="token string">&quot;select * from user where Id=@id&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> parameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@id&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1395392302788120576&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span>strSql<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> strSql <span class="token operator">=</span> <span class="token string">&quot;select * from user where Id={0}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span>strSql<span class="token punctuation">,</span> <span class="token string">&quot;1395392302788120576&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 生成SQL</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user <span class="token keyword">where</span> <span class="token class-name">Id</span><span class="token operator">=</span>@p0
    <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;PassWord&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CreateTime&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2021-05-20T22:53:44.778101&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;IsValid&quot;</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392302788120576&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过占位符形式提供额外的参数，看上去类似于String.Format语法，但是提供的值包装在DbParameter中。可以防止SQL注入</p></blockquote><p>限制：</p><ul><li>结果中的列名，必须与属性被映射到的列名相匹配</li><li>查询必须为实体或查询类型的所有属性返回数据</li><li>SQL 查询不能包含导航关系，但我们总是可以把 FromSqlRaw 和 Include 方法结合起来。</li></ul><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> account <span class="token operator">=</span> 
  _context<span class="token punctuation">.</span>Accounts
    <span class="token punctuation">.</span><span class="token function">FromSqlRaw</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM Account WHERE Name = {0}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Zilor&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>e <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>AccountSubjects<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-4-2-3-fromsqlinterpolated参数化※" tabindex="-1"><a class="header-anchor" href="#_3-4-2-3-fromsqlinterpolated参数化※"><span>3.4.2.3 FromSqlInterpolated参数化※</span></a></h5><p>FromSqlInterpolated 类似于 FromSqlRaw，但你可以借助它使用字符串内插语法(参数化的)。与 FromSqlRaw 一样，FromSqlInterpolated 只能在查询根上使用，并且都可以防止SQL注入。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromSqlInterpolated</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;select * from user where Id=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token string">&quot;1395392302788120576&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>经过在MySQL和pgsql测试，这里的内插值和参数化一样，比如根据name查询不应该加引号，加了反而查询不出来</p></blockquote><p>生成SQL</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user <span class="token keyword">where</span> <span class="token class-name">Id</span><span class="token operator">=</span>@p0
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;Account&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;PassWord&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CreateTime&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;2021-05-20T22:53:44.778101&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;IsValid&quot;</span><span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392302788120576&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为FromSqlInterpolated方法返回的结果是IQueryable类型的，因此我们还可以在在做一些后续的操作。</p><h4 id="_3-4-3-限制" tabindex="-1"><a class="header-anchor" href="#_3-4-3-限制"><span>3.4.3 限制</span></a></h4>`,27),A=n("li",null,"SQL查询必须返回实体类型的所有属性的数据。",-1),E=n("li",null,"结果集中的列明必须与属性映射到的列名称匹配。",-1),T=n("code",null,"Include",-1),D={href:"https://docs.microsoft.com/zh-cn/ef/core/querying/raw-sql#including-related-data",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.microsoft.com/zh-cn/ef/core/querying/raw-sql",target:"_blank",rel:"noopener noreferrer"},L=p('<h3 id="_3-5-复杂查询" tabindex="-1"><a class="header-anchor" href="#_3-5-复杂查询"><span>3.5 复杂查询</span></a></h3><p>数据如下： 用户表(user) <img src="'+i+'" alt="image.png" loading="lazy"> 用户成绩表(score) <img src="'+u+'" alt="image.png" loading="lazy"> 描述：包含三个用户，其中两个用户在成绩表都有语文和数学的数据。</p><h4 id="_3-5-1-内连接" tabindex="-1"><a class="header-anchor" href="#_3-5-1-内连接"><span>3.5.1 内连接</span></a></h4><p>内连接：分为隐式内连接和显式内连接(写法不同，结果相同)</p><h5 id="_3-5-1-1-linq查询表达式" tabindex="-1"><a class="header-anchor" href="#_3-5-1-1-linq查询表达式"><span>3.5.1.1 Linq查询表达式</span></a></h5><h6 id="显式内连接-join-in-on拼接" tabindex="-1"><a class="header-anchor" href="#显式内连接-join-in-on拼接"><span>显式内连接：join-in-on拼接</span></a></h6><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> u <span class="token keyword">in</span> _context<span class="token punctuation">.</span>Users\n            <span class="token keyword">join</span> sc <span class="token keyword">in</span> _context<span class="token punctuation">.</span>Scores <span class="token keyword">on</span> u<span class="token punctuation">.</span>Id equals sc<span class="token punctuation">.</span>UserId\n            <span class="token keyword">where</span> <span class="token class-name">sc</span><span class="token punctuation">.</span>CourseName <span class="token operator">==</span> <span class="token string">&quot;语文&quot;</span>\n            <span class="token keyword">select</span> <span class="token keyword">new</span>\n            <span class="token punctuation">{</span>\n                u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>\n                u<span class="token punctuation">.</span>PassWord<span class="token punctuation">,</span>\n                sc<span class="token punctuation">.</span>CourseName<span class="token punctuation">,</span>\n                sc<span class="token punctuation">.</span>Grade\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nConsole<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>记得引用：System.Linq 否则提示：未找到源类型“DbSet&lt;User&gt;”的查询模式的实现，未找到join</p></blockquote><p>生成SQL</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>SELECT `u`<span class="token punctuation">.</span>`Account`<span class="token punctuation">,</span> `u`<span class="token punctuation">.</span>`PassWord`<span class="token punctuation">,</span> `s`<span class="token punctuation">.</span>`CourseName`<span class="token punctuation">,</span> `s`<span class="token punctuation">.</span>`Grade`\n    FROM `user` AS `u`\n    INNER JOIN `score` AS `s` ON `u`<span class="token punctuation">.</span>`Id` <span class="token operator">=</span> `s`<span class="token punctuation">.</span>`UserId`\n    WHERE `s`<span class="token punctuation">.</span>`CourseName` <span class="token operator">=</span> &#39;语文&#39;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 <img src="'+r+'" alt="image.png" loading="lazy"> 三表联合查询</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> templateFieldList <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">from</span> template <span class="token keyword">in</span> _conclusionTemplateReq<span class="token punctuation">.</span>EntitiesAsNoTracking<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>\n        t<span class="token punctuation">.</span>Isdefault <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>TenantId <span class="token operator">==</span> CurrentUser<span class="token punctuation">.</span>TenantId<span class="token punctuation">)</span>\n    <span class="token keyword">join</span> templateField <span class="token keyword">in</span> _templateFieldMappingRep<span class="token punctuation">.</span>EntitiesAsNoTracking <span class="token keyword">on</span> template<span class="token punctuation">.</span>CluTemplateId equals\n        templateField<span class="token punctuation">.</span>CluTemplateId\n    <span class="token keyword">join</span> field <span class="token keyword">in</span> _conclusionTemplateFieldRep<span class="token punctuation">.</span>EntitiesAsNoTracking<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Isdefault<span class="token punctuation">)</span> <span class="token keyword">on</span> templateField\n        <span class="token punctuation">.</span>CluFieldId equals field<span class="token punctuation">.</span>CluFieldId\n    <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChatConclusionTemplateFieldMapping</span><span class="token punctuation">(</span>newTemplateId<span class="token punctuation">,</span> templateField<span class="token punctuation">.</span>CluFieldId<span class="token punctuation">,</span>\n        templateField<span class="token punctuation">.</span>Sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArrayAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="隐式内连接-多个from并联拼接" tabindex="-1"><a class="header-anchor" href="#隐式内连接-多个from并联拼接"><span>隐式内连接：多个from并联拼接</span></a></h6><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> u <span class="token keyword">in</span> _context<span class="token punctuation">.</span>Users\n            <span class="token keyword">from</span> sc <span class="token keyword">in</span> _context<span class="token punctuation">.</span>Scores\n            <span class="token keyword">where</span> <span class="token class-name">u</span><span class="token punctuation">.</span>Id <span class="token operator">==</span> sc<span class="token punctuation">.</span>UserId <span class="token operator">&amp;&amp;</span> sc<span class="token punctuation">.</span>CourseName <span class="token operator">==</span> <span class="token string">&quot;语文&quot;</span>\n            <span class="token keyword">select</span> <span class="token keyword">new</span>\n            <span class="token punctuation">{</span>\n                u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>\n                u<span class="token punctuation">.</span>PassWord<span class="token punctuation">,</span>\n                sc<span class="token punctuation">.</span>CourseName<span class="token punctuation">,</span>\n                sc<span class="token punctuation">.</span>Grade\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nConsole<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成SQL</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>SELECT `u`<span class="token punctuation">.</span>`Account`<span class="token punctuation">,</span> `u`<span class="token punctuation">.</span>`PassWord`<span class="token punctuation">,</span> `s`<span class="token punctuation">.</span>`CourseName`<span class="token punctuation">,</span> `s`<span class="token punctuation">.</span>`Grade`\n    FROM `user` AS `u`\n    CROSS JOIN `score` AS `s`\n    WHERE <span class="token punctuation">(</span>`u`<span class="token punctuation">.</span>`Id` <span class="token operator">=</span> `s`<span class="token punctuation">.</span>`UserId`<span class="token punctuation">)</span> AND <span class="token punctuation">(</span>`s`<span class="token punctuation">.</span>`CourseName` <span class="token operator">=</span> &#39;语文&#39;<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 <img src="'+k+'" alt="image.png" loading="lazy"></p><h5 id="_3-5-1-2-linq标准查询运算符-推荐" tabindex="-1"><a class="header-anchor" href="#_3-5-1-2-linq标准查询运算符-推荐"><span>3.5.1.2 Linq标准查询运算符(推荐)</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> _context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Account <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>_context<span class="token punctuation">.</span>Scores<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>sc <span class="token operator">=&gt;</span> sc<span class="token punctuation">.</span>CourseName <span class="token operator">==</span> <span class="token string">&quot;语文&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> sc <span class="token operator">=&gt;</span> sc<span class="token punctuation">.</span>UserId<span class="token punctuation">,</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> sc<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>\n          <span class="token punctuation">{</span>\n              u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>\n              u<span class="token punctuation">.</span>PassWord<span class="token punctuation">,</span>\n              sc<span class="token punctuation">.</span>CourseName<span class="token punctuation">,</span>\n              sc<span class="token punctuation">.</span>Grade\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nConsole<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成SQL</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code>      <span class="token comment">## 不加查询课程</span>\n	    <span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Account<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>PassWord<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>CourseName<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Grade<span class="token punctuation">`</span></span>\n      <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span>\n      <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>score<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>UserId<span class="token punctuation">`</span></span>\n\n      <span class="token comment">## 查询课程</span>\n      <span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Account<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>PassWord<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>CourseName<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Grade<span class="token punctuation">`</span></span>\n      <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span>\n      <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>\n          <span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>CourseName<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Grade<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>UserId<span class="token punctuation">`</span></span>\n          <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>score<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span>\n          <span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>s<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>CourseName<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;语文&#39;</span>\n      <span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>Id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>t<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>UserId<span class="token punctuation">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 <img src="'+d+`" alt="image.png" loading="lazy"></p><p>多表查询示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> db<span class="token punctuation">.</span>Schedule<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>RoomInfo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>Deleted<span class="token punctuation">)</span><span class="token punctuation">,</span> s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>RoomId<span class="token punctuation">,</span> r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
<span class="token punctuation">{</span>
    s<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>BeginTime<span class="token punctuation">,</span>
    r<span class="token punctuation">.</span>RoomName<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>MovieId
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>MovieInfo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>Deleted<span class="token punctuation">)</span><span class="token punctuation">,</span> s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>MovieId<span class="token punctuation">,</span> m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
<span class="token punctuation">{</span>
    s<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>RoomName<span class="token punctuation">,</span>
    m<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
    s<span class="token punctuation">.</span>BeginTime
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-5-2-外连接" tabindex="-1"><a class="header-anchor" href="#_3-5-2-外连接"><span>3.5.2 外连接</span></a></h4><p>外连接join后必须有into，然后可以加上XX.DefaultIfEmpty()，表示对于引用类型将返回null,而对于值类型则返回0。对于结构体类型，则会根据其成员类型将它们相应地初始化为null(引用类型)或0(值类型)，</p><blockquote><p>如果仅需要统计右表的个数或者其它属性，可以省略XX.DefaultIfEmpty, 但如果需要点出来右表的字段，则不能省。</p></blockquote><h5 id="_3-5-2-1-linq查询表达式" tabindex="-1"><a class="header-anchor" href="#_3-5-2-1-linq查询表达式"><span>3.5.2.1 Linq查询表达式</span></a></h5><p>查询所有用户对应的班级,因为用户和成绩一对多，所以会出现多条数据</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> u <span class="token keyword">in</span> _context<span class="token punctuation">.</span>Users
            <span class="token keyword">join</span> sc <span class="token keyword">in</span> _context<span class="token punctuation">.</span>Scores <span class="token keyword">on</span> u<span class="token punctuation">.</span>Id equals sc<span class="token punctuation">.</span>UserId
            <span class="token keyword">into</span> ulist
            <span class="token keyword">from</span> sco <span class="token keyword">in</span> ulist<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">where</span> <span class="token class-name">u</span><span class="token punctuation">.</span>Account <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token comment">//这个条件只是展示如何添加条件</span>
            <span class="token keyword">select</span> <span class="token keyword">new</span>
            <span class="token punctuation">{</span>
                UserId <span class="token operator">=</span> u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
                Account <span class="token operator">=</span> u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>
                sco<span class="token punctuation">.</span>CourseName
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> g <span class="token keyword">in</span> _groupdefRep<span class="token punctuation">.</span>EntitiesAsNoTracking
            <span class="token keyword">join</span> cl <span class="token keyword">in</span> _clouduserRep<span class="token punctuation">.</span>EntitiesAsNoTracking <span class="token keyword">on</span> g<span class="token punctuation">.</span>CloudId equals cl<span class="token punctuation">.</span>Id
            <span class="token keyword">into</span> glist
            <span class="token keyword">from</span> c <span class="token keyword">in</span> glist<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">where</span> <span class="token class-name">g</span><span class="token punctuation">.</span>Enabled<span class="token punctuation">.</span>Value <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cloudId <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> g<span class="token punctuation">.</span>CloudId <span class="token operator">==</span> cloudId<span class="token punctuation">)</span>
            <span class="token keyword">orderby</span> c<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> g<span class="token punctuation">.</span>GroupName
            <span class="token keyword">select</span> <span class="token keyword">new</span>
            <span class="token punctuation">{</span>
                Gid <span class="token operator">=</span> g<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>
                Name <span class="token operator">=</span> c <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> g<span class="token punctuation">.</span>GroupName <span class="token punctuation">:</span> c<span class="token punctuation">.</span>CloudName
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以使用：string.IsNullOrEmpty 不能使用：string.IsNullOrWhiteSpace</p></blockquote><p>生成SQL</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>      SELECT \`u\`<span class="token punctuation">.</span>\`Id\` AS \`UserId\`<span class="token punctuation">,</span> \`u\`<span class="token punctuation">.</span>\`Account\`<span class="token punctuation">,</span> \`s\`<span class="token punctuation">.</span>\`CourseName\`
      FROM \`user\` AS \`u\`
      LEFT JOIN \`score\` AS \`s\` ON \`u\`<span class="token punctuation">.</span>\`Id\` <span class="token operator">=</span> \`s\`<span class="token punctuation">.</span>\`UserId\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果 <img src="`+v+'" alt="image.png" loading="lazy"> 如果要查询成绩，应该这么写，上面那个写法会直接报错， Nullable object must have a value <img src="'+m+'" alt="image.png" loading="lazy"></p><h5 id="_3-5-2-2-linq标准查询运算符-推荐" tabindex="-1"><a class="header-anchor" href="#_3-5-2-2-linq标准查询运算符-推荐"><span>3.5.2.2 Linq标准查询运算符(推荐)</span></a></h5><p>示例内容凑合看，我限定的是一个用户对应一个成绩，然后有些用户没有成绩，然后以用户表为主，成绩表为子表进行左连接查询。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> leftJoinList <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GroupJoin</span><span class="token punctuation">(</span>_context<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Set</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Score<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span>UserId<span class="token punctuation">,</span>\n    <span class="token punctuation">(</span>u<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>\n    <span class="token punctuation">{</span>\n        User <span class="token operator">=</span> u<span class="token punctuation">,</span>\n        Scores <span class="token operator">=</span> s\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Scores<span class="token punctuation">.</span><span class="token function">DefaultIfEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>\n    <span class="token punctuation">{</span>\n        u<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>\n        u<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>\n        Grade <span class="token operator">=</span> s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> s<span class="token punctuation">.</span>Grade<span class="token punctuation">,</span>\n        CourseName <span class="token operator">=</span> s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">?</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">:</span> s<span class="token punctuation">.</span>CourseName<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToListAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成sql</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>SELECT `u`<span class="token punctuation">.</span>`Id`<span class="token punctuation">,</span> \n	   `u`<span class="token punctuation">.</span>`Account`<span class="token punctuation">,</span> \n	   CASE WHEN `s`<span class="token punctuation">.</span>`Id` IS NULL THEN <span class="token number">0</span> ELSE `s`<span class="token punctuation">.</span>`Grade` END AS `Grade`<span class="token punctuation">,</span> \n	   CASE WHEN `s`<span class="token punctuation">.</span>`Id` IS NULL THEN &#39;&#39; ELSE `s`<span class="token punctuation">.</span>`CourseName` END AS `CourseName`\n       FROM `user` AS `u`\n       LEFT JOIN `score` AS `s` ON `u`<span class="token punctuation">.</span>`Id` <span class="token operator">=</span> `s`<span class="token punctuation">.</span>`UserId`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-5-3-groupjoin" tabindex="-1"><a class="header-anchor" href="#_3-5-3-groupjoin"><span>3.5.3 GroupJoin</span></a></h4><p>GroupJoin操作符常应用于返回“主键对象-外键对象集合”形式的查询，例如“用户信息-此用户下所有科目成绩”</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> _context<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Account <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">GroupJoin</span><span class="token punctuation">(</span>_context<span class="token punctuation">.</span>Scores<span class="token punctuation">,</span> u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> sc <span class="token operator">=&gt;</span> sc<span class="token punctuation">.</span>UserId<span class="token punctuation">,</span> <span class="token punctuation">(</span>u<span class="token punctuation">,</span> sc<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>\n        <span class="token punctuation">{</span>\n            u<span class="token punctuation">.</span>Account<span class="token punctuation">,</span>\n            u<span class="token punctuation">.</span>PassWord<span class="token punctuation">,</span>\n            Scores <span class="token operator">=</span> sc\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',42),O={href:"https://docs.microsoft.com/zh-cn/ef/core/querying/client-eval",target:"_blank",rel:"noopener noreferrer"},F=p(`<h4 id="_3-5-4-grouby" tabindex="-1"><a class="header-anchor" href="#_3-5-4-grouby"><span>3.5.4 GrouBy</span></a></h4><p>分组操作 根据用户分组，求科目数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">from</span> sc <span class="token keyword">in</span> _context<span class="token punctuation">.</span>Scores
                <span class="token keyword">group</span> sc <span class="token keyword">by</span> sc<span class="token punctuation">.</span>UserId
                <span class="token keyword">into</span> g
                <span class="token keyword">select</span> <span class="token keyword">new</span>
                <span class="token punctuation">{</span>
                    g<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>
                    Count <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> list2 <span class="token operator">=</span> _context<span class="token punctuation">.</span>Scores<span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>sc <span class="token operator">=&gt;</span> sc<span class="token punctuation">.</span>UserId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
    <span class="token punctuation">{</span>
        t<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>
        Count <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成SQL</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>info<span class="token punctuation">:</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Command<span class="token punctuation">[</span><span class="token number">20101</span><span class="token punctuation">]</span>
      <span class="token return-type class-name">Executed</span> DbCommand <span class="token punctuation">(</span>1ms<span class="token punctuation">)</span> <span class="token punctuation">[</span>Parameters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> CommandType<span class="token operator">=</span>&#39;Text&#39;<span class="token punctuation">,</span> CommandTimeout<span class="token operator">=</span>&#39;<span class="token number">30</span>&#39;<span class="token punctuation">]</span>
      SELECT \`s\`<span class="token punctuation">.</span>\`UserId\` AS \`Key\`<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> AS \`Count\`
      FROM \`score\` AS \`s\`
      GROUP BY \`s\`<span class="token punctuation">.</span>\`UserId\`
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;Key&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392302788120576&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Count&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;Key&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392303090110464&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Count&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
info<span class="token punctuation">:</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">.</span>Database<span class="token punctuation">.</span>Command<span class="token punctuation">[</span><span class="token number">20101</span><span class="token punctuation">]</span>
      <span class="token return-type class-name">Executed</span> DbCommand <span class="token punctuation">(</span>0ms<span class="token punctuation">)</span> <span class="token punctuation">[</span>Parameters<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> CommandType<span class="token operator">=</span>&#39;Text&#39;<span class="token punctuation">,</span> CommandTimeout<span class="token operator">=</span>&#39;<span class="token number">30</span>&#39;<span class="token punctuation">]</span>
      SELECT \`s\`<span class="token punctuation">.</span>\`UserId\` AS \`Key\`<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> AS \`Count\`
      FROM \`score\` AS \`s\`
      GROUP BY \`s\`<span class="token punctuation">.</span>\`UserId\`
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&quot;Key&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392302788120576&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Count&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&quot;Key&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;1395392303090110464&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Count&quot;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表内连接然后在分组查询</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> recordFolderMap <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">from</span> folder <span class="token keyword">in</span> recordFolderInfoQuery
                                <span class="token keyword">join</span> relation <span class="token keyword">in</span> recordFolderReationQuery
                                    <span class="token keyword">on</span> folder<span class="token punctuation">.</span>Id equals relation<span class="token punctuation">.</span>RecordFolderInfoId
                                <span class="token keyword">group</span> relation <span class="token keyword">by</span> relation<span class="token punctuation">.</span>VisitId
                                <span class="token keyword">into</span> g
                                <span class="token keyword">select</span> <span class="token keyword">new</span>
                                <span class="token punctuation">{</span>
                                    VisitId <span class="token operator">=</span> g<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>
                                    FolderCount <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToDictionaryAsync</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>VisitId<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>FolderCount<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> recordFolderInfoQuery<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>recordFolderReationQuery<span class="token punctuation">,</span> folderInfo <span class="token operator">=&gt;</span> folderInfo<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> folderRelation <span class="token operator">=&gt;</span> folderRelation<span class="token punctuation">.</span>RecordFolderInfoId<span class="token punctuation">,</span>
    <span class="token punctuation">(</span>_<span class="token punctuation">,</span> folderRelation<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
    <span class="token punctuation">{</span>
        Visitid <span class="token operator">=</span> folderRelation<span class="token punctuation">.</span>VisitId<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Visitid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>g <span class="token operator">=&gt;</span> <span class="token keyword">new</span>
    <span class="token punctuation">{</span>
        VisitId <span class="token operator">=</span> g<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>
        FolderCount <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToDictionaryAsync</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>VisitId<span class="token punctuation">,</span> x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>FolderCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-查询是否存在" tabindex="-1"><a class="header-anchor" href="#_3-6-查询是否存在"><span>3.6 查询是否存在</span></a></h3><p>简单查询是否存在</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> exist <span class="token operator">=</span> <span class="token keyword">await</span> _templateFieldMappingRep<span class="token punctuation">.</span>EntitiesAsNoTracking<span class="token punctuation">.</span><span class="token function">AnyAsync</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>CluFieldId <span class="token operator">==</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>联表查询是否存在</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> existTitle <span class="token operator">=</span>
    <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">from</span> templatefield <span class="token keyword">in</span> _templateFieldMappingRep<span class="token punctuation">.</span>EntitiesAsNoTracking<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>
            t<span class="token punctuation">.</span>CluTemplateId <span class="token operator">==</span> dto<span class="token punctuation">.</span>CluTemplateId<span class="token punctuation">)</span>
            <span class="token keyword">from</span> field <span class="token keyword">in</span> _conclusionTemplateFieldRep<span class="token punctuation">.</span>EntitiesAsNoTracking<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span>
                t<span class="token punctuation">.</span>FieldName <span class="token operator">==</span> dto<span class="token punctuation">.</span>FieldName<span class="token punctuation">)</span>
            <span class="token keyword">where</span> <span class="token class-name">templatefield</span><span class="token punctuation">.</span>CluFieldId <span class="token operator">==</span> field<span class="token punctuation">.</span>CluFieldId
            <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> field<span class="token punctuation">.</span>CluFieldId <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AnyAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-聚合函数查询" tabindex="-1"><a class="header-anchor" href="#_3-7-聚合函数查询"><span>3.7 聚合函数查询</span></a></h3><h4 id="查询最大值或者最小值" tabindex="-1"><a class="header-anchor" href="#查询最大值或者最小值"><span>查询最大值或者最小值</span></a></h4><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 如果数据库中一条数据都没有，直接使用Max或者Min方法会报错，所以可以使用下面的方式来操作
int? maxSeq = await dbCtx.Query&lt;Album&gt;().MaxAsync(c =&gt; (int?)c.SequenceNumber);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-匹配查询" tabindex="-1"><a class="header-anchor" href="#_3-8-匹配查询"><span>3.8 匹配查询</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>因为使用or的查询方案性能低，所以当只有当我们要查询的内容在表内不是唯一的，必须通过匹配查询的时候才要去考虑这个方案</p></div><p>当我们用户表中查询一批数据，他们的账号姓名以及姓名都需要匹配的时候，我们可以这么操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>GetUserInfoResponse<span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetUserInfoResponse</span><span class="token punctuation">{</span>  Account<span class="token operator">=</span><span class="token string">&quot;admin1&quot;</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>Sex<span class="token operator">=</span>SexEnum<span class="token punctuation">.</span>Man<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetUserInfoResponse</span><span class="token punctuation">{</span>  Account<span class="token operator">=</span><span class="token string">&quot;admin3&quot;</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span>Sex<span class="token operator">=</span>SexEnum<span class="token punctuation">.</span>Man<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GetUserInfoResponse</span><span class="token punctuation">{</span>  Account<span class="token operator">=</span><span class="token string">&quot;admin2&quot;</span><span class="token punctuation">,</span> Name<span class="token operator">=</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>Sex<span class="token operator">=</span>SexEnum<span class="token punctuation">.</span>Man<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> p <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Parameter</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> parts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Expression<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> userList<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> accountProperty <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> accountValue <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Account<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> accountExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>accountProperty<span class="token punctuation">,</span> accountValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> nameProperty <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> nameValue <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> nameExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>nameProperty<span class="token punctuation">,</span> nameValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> sexProperty <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">nameof</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Sex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sexValue <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Constant</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> sexExpression <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>sexProperty<span class="token punctuation">,</span> sexValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> part <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">AndAlso</span><span class="token punctuation">(</span>accountExpression<span class="token punctuation">,</span> nameExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> express <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token function">AndAlso</span><span class="token punctuation">(</span>part<span class="token punctuation">,</span> sexExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>

    parts<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span><span class="token function">AndAlso</span><span class="token punctuation">(</span>part<span class="token punctuation">,</span> sexExpression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name"><span class="token keyword">var</span></span> body <span class="token operator">=</span> parts<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span>Expression<span class="token punctuation">.</span>OrElse<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> filter <span class="token operator">=</span> Expression<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Lambda</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>User<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> queryString <span class="token operator">=</span> _dbContext<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成SQL如下</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>account<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>credit<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>deleted<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>group_id<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>modify_time<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>pass_word<span class="token punctuation">,</span>
       u<span class="token punctuation">.</span>sex
<span class="token keyword">FROM</span> sample<span class="token punctuation">.</span><span class="token string">&quot;user&quot;</span> <span class="token keyword">AS</span> u
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>deleted<span class="token punctuation">)</span>
  <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>account <span class="token operator">=</span> <span class="token string">&#39;admin1&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">OR</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>account <span class="token operator">=</span> <span class="token string">&#39;admin3&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">OR</span>
       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>account <span class="token operator">=</span> <span class="token string">&#39;admin2&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他情况考虑去根据指定唯一列单表查询或者说通过表关联的方案进行查询，例如</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var list = await (from md in _dbContext.Set&lt;主表&gt;()
                 join sn in _dbContext.Set&lt;子表&gt;()
                     on new { DataSetId = md.Id, md.VersionId } equals new { sn.DataSetId, sn.VersionId }
                 where md.LatestVersionId &gt; 0
                 select new MetaDataElement
                        {
                            Id = sn.ElementId,
                            Name = md.Name,
                            DataSetId = md.Id,
                            CreateTime = md.CreateTime,
                            CreateUser = md.CreateUser,
                            CreateUserId = md.CreateUserId
                        }).ToListAsync();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成查询sql</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> m0<span class="token punctuation">.</span>element_id              <span class="token keyword">AS</span> <span class="token string">&quot;Id&quot;</span><span class="token punctuation">,</span>
       m<span class="token punctuation">.</span>name                     <span class="token keyword">AS</span> <span class="token string">&quot;Name&quot;</span><span class="token punctuation">,</span>
       m<span class="token punctuation">.</span>id                       <span class="token keyword">AS</span> <span class="token string">&quot;DataSetId&quot;</span><span class="token punctuation">,</span>
       m<span class="token punctuation">.</span>create_time              <span class="token keyword">AS</span> <span class="token string">&quot;CreateTime&quot;</span><span class="token punctuation">,</span>
       m<span class="token punctuation">.</span>create_user              <span class="token keyword">AS</span> <span class="token string">&quot;CreateUser&quot;</span><span class="token punctuation">,</span>
       m<span class="token punctuation">.</span>create_user_id           <span class="token keyword">AS</span> <span class="token string">&quot;CreateUserId&quot;</span>
<span class="token keyword">FROM</span> meta_data<span class="token punctuation">.</span>主表 <span class="token keyword">AS</span> m
         <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> meta_data<span class="token punctuation">.</span>子表 <span class="token keyword">AS</span> m0
                    <span class="token keyword">ON</span> m<span class="token punctuation">.</span>id <span class="token operator">=</span> m0<span class="token punctuation">.</span>data_set_id <span class="token operator">AND</span> m<span class="token punctuation">.</span>version_id <span class="token operator">=</span> m0<span class="token punctuation">.</span>version_id
<span class="token keyword">WHERE</span> <span class="token operator">NOT</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>is_deleted<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询"><span>分页查询</span></a></h3><p>分页：https://docs.microsoft.com/zh-cn/ef/core/querying/pagination</p><h4 id="偏移分页" tabindex="-1"><a class="header-anchor" href="#偏移分页"><span>偏移分页</span></a></h4><h4 id="键集分页" tabindex="-1"><a class="header-anchor" href="#键集分页"><span>键集分页</span></a></h4><h2 id="_4-添加操作" tabindex="-1"><a class="header-anchor" href="#_4-添加操作"><span>4. 添加操作</span></a></h2><h3 id="_4-1-基础添加" tabindex="-1"><a class="header-anchor" href="#_4-1-基础添加"><span>4.1 基础添加</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>_context<span class="token punctuation">.</span>Movie<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token keyword">await</span> _context<span class="token punctuation">.</span>Movie<span class="token punctuation">.</span><span class="token function">AddRangeAsync</span><span class="token punctuation">(</span>movies<span class="token punctuation">)</span>
<span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-已经设置自增键的插入" tabindex="-1"><a class="header-anchor" href="#_4-2-已经设置自增键的插入"><span>4.2 已经设置自增键的插入</span></a></h3><p>先关闭自增然后插入数据后再开启自增</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">OpenConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlCommand</span><span class="token punctuation">(</span><span class="token string">&quot;SET IDENTITY_INSERT [T_RoleInfor] ON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> r2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T_RoleInfor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    id <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span>
    roleName <span class="token operator">=</span> <span class="token string">&quot;管理员&quot;</span><span class="token punctuation">,</span>
    roleDescription <span class="token operator">=</span> <span class="token string">&quot;我是管理员&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> count2 <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">SaveChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlCommand</span><span class="token punctuation">(</span><span class="token string">&quot;SET ID	ENTITY_INSERT [T_RoleInfor] OFF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-通过sql添加" tabindex="-1"><a class="header-anchor" href="#_4-3-通过sql添加"><span>4.3 通过SQL添加</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果使用下面的方法去执行多个sql脚本，那么就需要手动处理事务</p></div><h4 id="_4-3-1-executesqlraw" tabindex="-1"><a class="header-anchor" href="#_4-3-1-executesqlraw"><span>4.3.1 ExecuteSqlRaw</span></a></h4><p>支持直接传入一个原始SQL字符串作为参数来执行原始SQL， 不建议在 EF Core 原始 SQL 查询方法之外使用字符串插值组装 SQL 语句。因为，这样会失去 SQL 参数注入攻击的检测。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> strSql2 <span class="token operator">=</span> <span class="token string">&quot;INSERT INTO \`userinfo\`(\`Id\`, \`Account\`, \`PassWord\`) VALUES (@id, @account, @password);&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> parameter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span>
	<span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@id&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;22&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@account&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2222&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlParameter</span><span class="token punctuation">(</span><span class="token string">&quot;@password&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;22222&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> flg <span class="token operator">=</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlRaw</span><span class="token punctuation">(</span>strSql2<span class="token punctuation">,</span> parameter2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用存储过程</span>
<span class="token class-name"><span class="token keyword">int</span></span> n <span class="token operator">=</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlCommand</span><span class="token punctuation">(</span><span class="token string">&quot;DoSome @id&quot;</span><span class="token punctuation">,</span> para<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数化操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>2.x使用ExecuteSqlCommand，3.x使用ExecuteSqlRaw方法</p></blockquote><p>执行sql并且包含事务</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>var mysqlSql =
    @&quot;INSERT INTO test.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒22222222&#39;, &#39;2023-10-08 17:26:45.000000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);
INSERT INTO test.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒333333&#39;, &#39;2xxxx000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);&quot;;

await using var db = new OpenDbContext();

await using var tran = await db.Database.BeginTransactionAsync();
try
{
    // 奇怪，这里执行失败  但是事务没有生效，导致一条执行到库中一条没有
    // 测试结果  ef中创建表语句不能通过事务回滚，ddl操作不支持事务性
    // 1、如果包含创建表的sql且创建表之前的sql没有报错，那么表可以创建成功，并且正常的插入sql也会被执行，一直到遇到错误sql停止
    // 2、如果不包含创建表sql，那么sql要成功都成功，否则都失败
    var i = await db.Database.ExecuteSqlRawAsync(mysqlSql);
    await db.SaveChangesAsync();
    await tran.CommitAsync();
    i.Dump();
}
catch (Exception ex)
{
    $&quot;异常  {ex.Message}&quot;.Dump();
    await tran.RollbackAsync();
    &quot;回滚事务&quot;.Dump();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-executesqlinterpolated" tabindex="-1"><a class="header-anchor" href="#_4-3-2-executesqlinterpolated"><span>4.3.2 ExecuteSqlInterpolated</span></a></h4><p>和ExecuteSqlRaw类似，不过它支持内插值方式参数化操作，使得代码更易读和可维护</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//支持内插值的参数化 这里插入值的时候也不能带引号</span>
<span class="token class-name"><span class="token keyword">var</span></span> currTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToUniversalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> flag <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">ExecuteSqlInterpolatedAsync</span><span class="token punctuation">(</span>
        <span class="token interpolation-string"><span class="token string">$&quot;INSERT INTO \\&quot;user\\&quot;.role (id, name, create_time, modify_time) VALUES (</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token number">11102</span></span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token string">&quot;管理员张三&quot;</span></span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currTime</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currTime</span><span class="token punctuation">}</span></span><span class="token string">);&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-3-executesql" tabindex="-1"><a class="header-anchor" href="#_4-3-3-executesql"><span>4.3.3 ExecuteSql</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里只是把它放到添加的分类中了，官网描述是用来执行不返回任何数据的 SQL</p></div><p>官方文档：https://learn.microsoft.com/zh-cn/ef/core/querying/sql-queries#executing-non-querying-sql</p><h5 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一"><span>方式一</span></a></h5><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>using var db = new OpenDbContext();

// FormattableString是抽象类，在使用 FormattableString 时，可以通过使用 $ 符号前缀来创建一个可格式化字符串，例如：
// FormattableString message = $&quot;Hello, {name}. The current time is {DateTime.Now}.&quot;;
FormattableString mysqlSql =
    $&quot;INSERT INTO test1008.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒1&#39;, &#39;2023-10-08 17:26:45.000000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);&quot;;

// 考虑到这里可能包含多个sql，所以需要添加事务
using var tran = db.Database.BeginTransaction();
// 这里参数接收FormattableString类型是用来防止SQL注入的
var result = await db.Database.ExecuteSqlAsync(mysqlSql);
tran.Commit();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二"><span>方式二</span></a></h5><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>using var db = new OpenDbContext();
var name = &quot;李四&quot;;
// 这里参数接收FormattableString类型是用来防止SQL注入的
var add = await db.Database.ExecuteSqlAsync($&quot;INSERT INTO test1008.menus (id, name, create_time, modify_time) VALUES (default, &#39;{name}&#39;, &#39;2023-10-08 17:26:33.000000&#39;, &#39;2023-10-08 17:26:36.000000&#39;);&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-修改操作" tabindex="-1"><a class="header-anchor" href="#_5-修改操作"><span>5. 修改操作</span></a></h2><h3 id="_5-1-查询后修改" tabindex="-1"><a class="header-anchor" href="#_5-1-查询后修改"><span>5.1 查询后修改</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span>  movie <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span>Movie<span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>ID <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
movie<span class="token punctuation">.</span>Name<span class="token operator">=</span><span class="token string">&quot;李思&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们已经查询加载一个实体，然后我们使用<strong>ExecuteSqlRaw</strong>方法对数据库的实体做了一些修改操作，那么已经加载的实体就是过时的数据。我们可以通过Reload方法重新加载实体</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>_context<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>accountForUpdate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-2-不查询修改" tabindex="-1"><a class="header-anchor" href="#_5-2-不查询修改"><span>5.2 不查询修改</span></a></h3><p>该方案可以不用提前查询就可以修改，但是不推荐使用。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//不需要提前查询就可以更新账号</span>
<span class="token class-name"><span class="token keyword">var</span></span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span>
<span class="token punctuation">{</span>
    Id <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">,</span>
    Account <span class="token operator">=</span> <span class="token string">&quot;更新后的值&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> entry <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
entry<span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span><span class="token string">&quot;account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsModified <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61),U={href:"https://learn.microsoft.com/zh-cn/ef/core/what-is-new/ef-core-7.0/whatsnew*#executeupdate-and-executedelete-bulk-updates*",target:"_blank",rel:"noopener noreferrer"},R=p(`<div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>public async Task&lt;int&gt; UpdateAsync(Expression&lt;Func&lt;T, bool&gt;&gt; predict,
    Expression&lt;Func&lt;SetPropertyCalls&lt;T&gt;, SetPropertyCalls&lt;T&gt;&gt;&gt; setPropertyCalls)
{
    var result = await _dbContext.Set&lt;T&gt;().Where(predict).ExecuteUpdateAsync(setPropertyCalls).ConfigureAwait(false);
    return result;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法如下</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>await _recordFolderRelationRepository
        .UpdateAsync(x =&gt; request.RecordfolderIds.Contains(x.RecordFolderInfoId) &amp;&amp; !x.IsDeleted,
            t =&gt; t.SetProperty(o =&gt; o.IsDeleted, true)
                .SetProperty(o =&gt; o.DeleteUserId, userId)
                .SetProperty(o =&gt; o.DeleteTime, now)).ConfigureAwait(false);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-删除操作" tabindex="-1"><a class="header-anchor" href="#_6-删除操作"><span>6. 删除操作</span></a></h2><h3 id="_6-1-查询后删除" tabindex="-1"><a class="header-anchor" href="#_6-1-查询后删除"><span>6.1 查询后删除</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> movie <span class="token operator">=</span> <span class="token keyword">await</span> _context<span class="token punctuation">.</span>Movie<span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>ID <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
_context<span class="token punctuation">.</span>Movie<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> _context<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-不查询后删除" tabindex="-1"><a class="header-anchor" href="#_6-2-不查询后删除"><span>6.2 不查询后删除</span></a></h3><p>不需要查询直接执行删除操作，但是不推荐使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//不查询删除</span>
<span class="token class-name"><span class="token keyword">var</span></span> userInfo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">User</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">124545</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">Entry</span><span class="token punctuation">(</span>userInfo2<span class="token punctuation">)</span><span class="token punctuation">.</span>State <span class="token operator">=</span> EntityState<span class="token punctuation">.</span>Deleted<span class="token punctuation">;</span>
<span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在EFCore7时候，支持删除数据的操作，具体可以查阅官网文档</p><h2 id="_7-ado-net" tabindex="-1"><a class="header-anchor" href="#_7-ado-net"><span>7. ADO.NET</span></a></h2><p>FromSqlInterpolated只能单表查询，但是在实际查询中，有很多操作的SQL语句是很复杂的，因此需要一种执行任意SQL查询一句的机制。</p><blockquote><p>虽然可以通过写存储过程然后映射实体来实现，但是不推荐写存储过程，项目复杂的时候会导致视图太多，非实体的DbSet太多导致乱七八糟。</p></blockquote><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><p>通过的DbConnection以及DbDataReader去操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> strSql <span class="token operator">=</span> <span class="token string">&quot;select * from \\&quot;user\\&quot;.employee &quot;</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">GetDbConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span>State <span class="token operator">!=</span> System<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>ConnectionState<span class="token punctuation">.</span>Open<span class="token punctuation">)</span>
    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">OpenAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> cmd <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cmd<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> strSql<span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> reader <span class="token operator">=</span> <span class="token keyword">await</span> cmd<span class="token punctuation">.</span><span class="token function">ExecuteReaderAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">await</span> reader<span class="token punctuation">.</span><span class="token function">ReadAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;id:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span><span class="token function">GetInt64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string"> name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">reader<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行sql" tabindex="-1"><a class="header-anchor" href="#执行sql"><span>执行SQL</span></a></h3><p>通过ADO.NET去执行SQL并使用事务</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 举例MySQL操作，其他类似

var mysqlSql =
    @&quot;INSERT INTO test1008.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒&#39;, &#39;2023-10-08 17:26:45.000000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);
INSERT INTO test1008.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒1&#39;, &#39;2023-10-08 17:26:45.000000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);&quot;;

using var db = new OpenDbContext();
using var connection = db.Database.GetDbConnection();
using var tran = db.Database.BeginTransaction();
try
{
    var cmd = connection.CreateCommand();
    cmd.CommandText = mysqlSql;
    // 不加会报错：https://mysqlconnector.net/troubleshooting/transaction-usage
    cmd.Transaction = tran.GetDbTransaction();
    var i = await cmd.ExecuteNonQueryAsync();
    await tran.CommitAsync();
}
catch (Exception ex)
{
    await Console.Out.WriteLineAsync(&quot;出错 回滚&quot;);
    await tran.RollbackAsync();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配合dapper操作" tabindex="-1"><a class="header-anchor" href="#配合dapper操作"><span>配合Dapper操作</span></a></h2><p>通过借助dapper去操作，需要安装nuget包：Dapper</p><h3 id="查询-1" tabindex="-1"><a class="header-anchor" href="#查询-1"><span>查询</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> strSql <span class="token operator">=</span> <span class="token string">&quot;select * from \\&quot;user\\&quot;.employee &quot;</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OpenDbContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> connection <span class="token operator">=</span> db<span class="token punctuation">.</span>Database<span class="token punctuation">.</span><span class="token function">GetDbConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> list <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">QueryAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Employee<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>strSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;id:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string"> name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行sql-1" tabindex="-1"><a class="header-anchor" href="#执行sql-1"><span>执行SQL</span></a></h3><p>使用EFCore搭配dapper执行mysql的脚本</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>// 注意该文档：https://mysqlconnector.net/troubleshooting/transaction-usage/
var mysqlSql1 =
    &quot;INSERT INTO test.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒1&#39;, &#39;2023-10-08 17:26:45.000000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);&quot;;
var mysqlSql =
    @&quot;INSERT INTO test.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒2&#39;, &#39;2023-10-08 17:26:45.000000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);
INSERT INTO test.menus (id, name, create_time, modify_time) VALUES (default, &#39;张飒3&#39;, &#39;2xxxx000&#39;, &#39;2023-10-08 17:26:47.000000&#39;);&quot;;

await using var db = new OpenDbContext();
await using var connection = db.Database.GetDbConnection();
if (connection.State != ConnectionState.Open)
    await connection.OpenAsync();
// 执行可以成功
var result = await connection.ExecuteAsync(mysqlSql1);
result.Dump();

await using var tran = await db.Database.BeginTransactionAsync();

// 因为脚本问题所以执行不成功 但是因为包含事务，所以也不会出现一条插入到数据库中
var i = await connection.ExecuteAsync(mysqlSql, transaction: tran.GetDbTransaction());

await tran.CommitAsync();
i.Dump();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-参考文档" tabindex="-1"><a class="header-anchor" href="#_8-参考文档"><span>8. 参考文档</span></a></h2>`,27),M={href:"https://docs.microsoft.com/zh-cn/ef/core/dbcontext-configuration/",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,null,-1);function W(z,P){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("div",g,[h,f,n("p",null,[s("本文适合有一点EFCore基础的人阅读，如果你没有基础，那么请转到"),n("a",y,[s("此处"),t(a)])])]),q,n("blockquote",null,[n("p",null,[s("数据库提供程序："),n("a",w,[s("https://docs.microsoft.com/zh-cn/ef/core/providers/?tabs=dotnet-core-cli"),t(a)])])]),x,n("blockquote",null,[n("p",null,[s("关于连接数据库可以参考另一个文章： "),n("a",_,[s(".Net之生成数据库全流程"),t(a)])])]),S,n("p",null,[n("a",C,[s("官网文档"),t(a)])]),I,n("ul",null,[A,E,n("li",null,[s("只能单表查询，不能不能包含关联数据， 但是，在许多情况下你可以在查询后面紧跟着使用 "),T,s(" 方法以返回关联数据（请参阅"),n("a",D,[s("包含关联数据"),t(a)]),s("）。")])]),n("blockquote",null,[n("p",null,[s("参考文档："),n("a",N,[s("https://docs.microsoft.com/zh-cn/ef/core/querying/raw-sql"),t(a)])])]),L,n("p",null,[s("该代码会提示错误，原因如："),n("a",O,[s("https://docs.microsoft.com/zh-cn/ef/core/querying/client-eval"),t(a)])]),F,n("p",null,[s("在EFCore7时候，支持批量修改数据的操作，具体可以查阅"),n("a",U,[s("官网文档"),t(a)]),s("，操作示例，下面则是一个封装的DbContext的方法")]),R,n("blockquote",null,[n("p",null,[s("官方例子："),n("a",M,[s("https://docs.microsoft.com/zh-cn/ef/core/dbcontext-configuration/"),t(a)])])]),Q])}const B=e(b,[["render",W],["__file","baseOperation.html.vue"]]),j=JSON.parse('{"path":"/orm/efcore/jichuzhishi/baseOperation.html","title":"基础操作","lang":"zh-CN","frontmatter":{"title":"基础操作","lang":"zh-CN","date":"2023-04-13T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["efcore"],"filename":"jichucaozuo","slug":"bsd4yg","docsId":"30843076","description":"提示 本文示例环境：vs2022、.Net6及以上、MySQL、pgsql 本文适合有一点EFCore基础的人阅读，如果你没有基础，那么请转到此处 准备 配置组件包 基础包 数据库提供程序 每个 DbContext 实例都必须配置一个数据库提供程序。 （DbContext 子类型的不同实例可用于不同的数据库提供程序，但单个实例只能使用一个。）使用特定的...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/efcore/jichuzhishi/baseOperation.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"基础操作"}],["meta",{"property":"og:description","content":"提示 本文示例环境：vs2022、.Net6及以上、MySQL、pgsql 本文适合有一点EFCore基础的人阅读，如果你没有基础，那么请转到此处 准备 配置组件包 基础包 数据库提供程序 每个 DbContext 实例都必须配置一个数据库提供程序。 （DbContext 子类型的不同实例可用于不同的数据库提供程序，但单个实例只能使用一个。）使用特定的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1621562425951-13836b1a-66db-46a9-9f39-7fb3278d879c.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T11:47:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"efcore"}],["meta",{"property":"article:published_time","content":"2023-04-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-26T11:47:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础操作\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1621562425951-13836b1a-66db-46a9-9f39-7fb3278d879c.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1621562455217-109ca102-03dc-41b3-9cc2-7c3e0a12856f.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1621562254206-ca4cde94-2b2d-4e81-94fd-aabf09bc198d.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1621562264762-9127dd6f-a5bc-473f-bbc1-6547657eb5b5.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1621564709433-98fbb56e-66e0-4505-b414-b12e9fa5d53b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1621563339181-f19d1904-de1f-4897-a64c-d14e45f17071.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1621563656968-030835ff-2188-43c9-99e6-b2c475e02f3e.png\\"],\\"datePublished\\":\\"2023-04-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-26T11:47:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[{"level":3,"title":"配置组件包","slug":"配置组件包","link":"#配置组件包","children":[]},{"level":3,"title":"数据库提供程序","slug":"数据库提供程序","link":"#数据库提供程序","children":[]}]},{"level":2,"title":"1. 连接数据库","slug":"_1-连接数据库","link":"#_1-连接数据库","children":[]},{"level":2,"title":"2. 操作迁移数据库","slug":"_2-操作迁移数据库","link":"#_2-操作迁移数据库","children":[]},{"level":2,"title":"3. 查询操作","slug":"_3-查询操作","link":"#_3-查询操作","children":[{"level":3,"title":"3.1 基础查询","slug":"_3-1-基础查询","link":"#_3-1-基础查询","children":[]},{"level":3,"title":"3.2 跟踪和非跟踪查询","slug":"_3-2-跟踪和非跟踪查询","link":"#_3-2-跟踪和非跟踪查询","children":[]},{"level":3,"title":"3.3 条件查询","slug":"_3-3-条件查询","link":"#_3-3-条件查询","children":[]},{"level":3,"title":"3.4 原生SQL查询","slug":"_3-4-原生sql查询","link":"#_3-4-原生sql查询","children":[{"level":4,"title":"3.4.1 基本原生SQL查询","slug":"_3-4-1-基本原生sql查询","link":"#_3-4-1-基本原生sql查询","children":[]},{"level":4,"title":"3.4.2 参数化查询","slug":"_3-4-2-参数化查询","link":"#_3-4-2-参数化查询","children":[{"level":5,"title":"3.4.2.1 SQL注入示例","slug":"_3-4-2-1-sql注入示例","link":"#_3-4-2-1-sql注入示例","children":[]},{"level":5,"title":"3.4.2.2 FromSqlRaw参数化","slug":"_3-4-2-2-fromsqlraw参数化","link":"#_3-4-2-2-fromsqlraw参数化","children":[]},{"level":5,"title":"3.4.2.3 FromSqlInterpolated参数化※","slug":"_3-4-2-3-fromsqlinterpolated参数化※","link":"#_3-4-2-3-fromsqlinterpolated参数化※","children":[]}]},{"level":4,"title":"3.4.3 限制","slug":"_3-4-3-限制","link":"#_3-4-3-限制","children":[]}]},{"level":3,"title":"3.5 复杂查询","slug":"_3-5-复杂查询","link":"#_3-5-复杂查询","children":[{"level":4,"title":"3.5.1 内连接","slug":"_3-5-1-内连接","link":"#_3-5-1-内连接","children":[{"level":5,"title":"3.5.1.1 Linq查询表达式","slug":"_3-5-1-1-linq查询表达式","link":"#_3-5-1-1-linq查询表达式","children":[]},{"level":5,"title":"3.5.1.2 Linq标准查询运算符(推荐)","slug":"_3-5-1-2-linq标准查询运算符-推荐","link":"#_3-5-1-2-linq标准查询运算符-推荐","children":[]}]},{"level":4,"title":"3.5.2 外连接","slug":"_3-5-2-外连接","link":"#_3-5-2-外连接","children":[{"level":5,"title":"3.5.2.1 Linq查询表达式","slug":"_3-5-2-1-linq查询表达式","link":"#_3-5-2-1-linq查询表达式","children":[]},{"level":5,"title":"3.5.2.2 Linq标准查询运算符(推荐)","slug":"_3-5-2-2-linq标准查询运算符-推荐","link":"#_3-5-2-2-linq标准查询运算符-推荐","children":[]}]},{"level":4,"title":"3.5.3 GroupJoin","slug":"_3-5-3-groupjoin","link":"#_3-5-3-groupjoin","children":[]},{"level":4,"title":"3.5.4 GrouBy","slug":"_3-5-4-grouby","link":"#_3-5-4-grouby","children":[]}]},{"level":3,"title":"3.6 查询是否存在","slug":"_3-6-查询是否存在","link":"#_3-6-查询是否存在","children":[]},{"level":3,"title":"3.7 聚合函数查询","slug":"_3-7-聚合函数查询","link":"#_3-7-聚合函数查询","children":[{"level":4,"title":"查询最大值或者最小值","slug":"查询最大值或者最小值","link":"#查询最大值或者最小值","children":[]}]},{"level":3,"title":"3.8 匹配查询","slug":"_3-8-匹配查询","link":"#_3-8-匹配查询","children":[]},{"level":3,"title":"分页查询","slug":"分页查询","link":"#分页查询","children":[{"level":4,"title":"偏移分页","slug":"偏移分页","link":"#偏移分页","children":[]},{"level":4,"title":"键集分页","slug":"键集分页","link":"#键集分页","children":[]}]}]},{"level":2,"title":"4. 添加操作","slug":"_4-添加操作","link":"#_4-添加操作","children":[{"level":3,"title":"4.1 基础添加","slug":"_4-1-基础添加","link":"#_4-1-基础添加","children":[]},{"level":3,"title":"4.2 已经设置自增键的插入","slug":"_4-2-已经设置自增键的插入","link":"#_4-2-已经设置自增键的插入","children":[]},{"level":3,"title":"4.3 通过SQL添加","slug":"_4-3-通过sql添加","link":"#_4-3-通过sql添加","children":[{"level":4,"title":"4.3.1 ExecuteSqlRaw","slug":"_4-3-1-executesqlraw","link":"#_4-3-1-executesqlraw","children":[]},{"level":4,"title":"4.3.2 ExecuteSqlInterpolated","slug":"_4-3-2-executesqlinterpolated","link":"#_4-3-2-executesqlinterpolated","children":[]},{"level":4,"title":"4.3.3 ExecuteSql","slug":"_4-3-3-executesql","link":"#_4-3-3-executesql","children":[{"level":5,"title":"方式一","slug":"方式一","link":"#方式一","children":[]},{"level":5,"title":"方式二","slug":"方式二","link":"#方式二","children":[]}]}]}]},{"level":2,"title":"5. 修改操作","slug":"_5-修改操作","link":"#_5-修改操作","children":[{"level":3,"title":"5.1 查询后修改","slug":"_5-1-查询后修改","link":"#_5-1-查询后修改","children":[]},{"level":3,"title":"5.2 不查询修改","slug":"_5-2-不查询修改","link":"#_5-2-不查询修改","children":[]}]},{"level":2,"title":"6. 删除操作","slug":"_6-删除操作","link":"#_6-删除操作","children":[{"level":3,"title":"6.1 查询后删除","slug":"_6-1-查询后删除","link":"#_6-1-查询后删除","children":[]},{"level":3,"title":"6.2 不查询后删除","slug":"_6-2-不查询后删除","link":"#_6-2-不查询后删除","children":[]}]},{"level":2,"title":"7. ADO.NET","slug":"_7-ado-net","link":"#_7-ado-net","children":[{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":3,"title":"执行SQL","slug":"执行sql","link":"#执行sql","children":[]}]},{"level":2,"title":"配合Dapper操作","slug":"配合dapper操作","link":"#配合dapper操作","children":[{"level":3,"title":"查询","slug":"查询-1","link":"#查询-1","children":[]},{"level":3,"title":"执行SQL","slug":"执行sql-1","link":"#执行sql-1","children":[]}]},{"level":2,"title":"8. 参考文档","slug":"_8-参考文档","link":"#_8-参考文档","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1711453648000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":4},{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":3}]},"readingTime":{"minutes":19.82,"words":5946},"filePathRelative":"orm/efcore/jichuzhishi/baseOperation.md","localizedDate":"2023年4月13日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文示例环境：vs2022、.Net6及以上、MySQL、pgsql</p>\\n<p>本文适合有一点EFCore基础的人阅读，如果你没有基础，那么请转到<a href=\\"https://learn.microsoft.com/zh-cn/ef/core/get-started/overview/first-app\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">此处</a></p>\\n</div>\\n<h2>准备</h2>","autoDesc":true}');export{B as comp,j as data};
