import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o as r}from"./app-B8CExjn9.js";const n="/kbms/common/1610856529717-ba1dc6f8-6d8a-458c-958b-c87c9a65d3c9.png",t={};function o(s,e){return r(),a("div",null,e[0]||(e[0]=[i('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传统的关系型数据库中已经得不到满足，或者说关系型数据库应对这些需求已经显得力不从心了。关系型数据库经过几十年的发展已经很成熟，强大的sql语句支持，完美的ACID属性的支持，使得关系型数据库广泛应用于各种各样的应用系统中，但是应用的场景广泛并非意味着完美。</p><p>- 由于关系型数据库是按行进行存储的，在某些只统计一列的需求场景下，也需要把整行读入内存，导致了一个小小的统计需求高IO的缺点<br> - 关系型数据库无法存储数据结构，比如：一个商品可以从属于多个分类，业务上的从属关系体现到存储上是一个列表而已，但是关系型数据库需要把这些关系存储为多行，无法直接存储为一个列表。<br> - 关系型数据库中的存储单位表的架构是强约束，操作不存在的列会报出异常，而且添加、更新、删除列必须执行DDL语句，如果表的现存数据量比较大，会出现长时间锁表的现象。<br> - 关系型数据库全文搜索功能普通比较弱，用like去匹配关键词的时候，数据量比较大的情况下会出现慢查询的现象。<br> - 关系型数据库基于表格的关系模型使得很难添加新的或不同种类的关联信息。</p><p>由于以上这些诸多问题，便诞生了以“NOSQL”为口号的很多解决方案。在某些关系型数据库不擅长的领域，Nosql表现的很出色。上天是公平的，给你打开了一扇窗户，必会给你关上半扇门，NoSql是以牺牲ACID某个或者某些特性为代价的。<br> NoSQL并不是银弹，更多的时候是关系型数据库一个有力补充，或者是特定场景下优于关系型数据库的一种解决方案</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>非关系型数据库又被称为 NoSQL（Not Only SQL )，意为不仅仅是 SQL。指的是与传统关系型数据库（RDBMS）相对应的一类数据库管理系统。与关系型数据库不同的是非关系型数据库不使用传统的表格和行列结构来存储数据，而是采用更灵活的数据模型，例如键值对、文档、列族、图形等形式。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><ol><li>非结构化数据模型：NoSQL数据库不需要严格定义数据的结构，可以接受各种类型和格式的数据，包括非结构化数据和半结构化数据。</li><li>分布式架构：NoSQL数据库通常具备良好的分布式架构，可以水平扩展以处理大规模数据集和高并发访问。</li><li>高性能和可伸缩性：由于去掉了一些传统数据库的复杂特性和约束条件，NoSQL数据库能够提供更高的读写性能和更好的可伸缩性。</li><li>弱一致性和灵活性：为了提高性能，一些NoSQL数据库对数据一致性要求较低，允许更灵活的数据操作，适用于某些场景下的高速度数据处理。</li><li>适应多种数据类型：NoSQL数据库广泛支持不同的数据模型，包括键值对、文档型、列族型、图形型等，以满足不同应用场景的需求。</li></ol><h2 id="四大分类" tabindex="-1"><a class="header-anchor" href="#四大分类"><span>四大分类</span></a></h2><ul><li>键值(Key-Value)存储数据库。相关的产品：Redis、Riak、SimpleDB、Chordless、Scalaris、Memcached。主要解决关系数据库无法存储数据结构的问题。</li><li>列存储数据库。相关产品：BigTable、HBase、Cassandra、HadoopDB、GreenPlum、PNUTS。解决关系数据库大数据场景下的 I/O 问题</li><li>文档数据库。相关产品：MongoDB、CouchDB、ThruDB、CloudKit、Perservere、Jackrabbit。解决关系数据库强 schema 约束的问题。</li><li>图形数据库。相关产品：Neo4J、OrientDB、InfoGrid、GraphDB。主要解决大量复杂、互连接、低结构化的图结构场合，如社交网络、推荐系统等</li><li>全文搜索引擎。相关产品：Elasticsearch。主要解决关系数据库的全文搜索性能问题。</li></ul><h3 id="kv键值" tabindex="-1"><a class="header-anchor" href="#kv键值"><span>KV键值</span></a></h3><p>典型介绍：Redis、Memcache</p><h3 id="文档型数据库-bson" tabindex="-1"><a class="header-anchor" href="#文档型数据库-bson"><span>文档型数据库(Bson)</span></a></h3><p>典型介绍：CouchDB、MongoDB</p><h3 id="列存储数据库" tabindex="-1"><a class="header-anchor" href="#列存储数据库"><span>列存储数据库</span></a></h3><p>cassandra，HBase<br> 分布式文件系统</p><h3 id="图关系数据库" tabindex="-1"><a class="header-anchor" href="#图关系数据库"><span>图关系数据库</span></a></h3><p>不是放图形的，放的是关系比如：朋友圈社区网络、广告推荐系统<br> 社交网络，推荐系统等。专注于构建关系图谱<br> Neo4J，InfoGrid<br><img src="'+n+'" alt="image.png" loading="lazy"></p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><p>NoSQL数据库之间的不同，远超过两 SQL数据库之间的差别。这意味着软件架构师更应该在项目开始时就选择好一个适合的 NoSQL数据库。针对这种情况，这里对 <a href="http://cassandra.apache.org/" target="_blank" rel="noopener noreferrer">Cassandra</a>、<a href="http://www.mongodb.org/" target="_blank" rel="noopener noreferrer">Mongodb</a>、<a href="http://couchdb.apache.org/" target="_blank" rel="noopener noreferrer">CouchDB</a>、<a href="http://redis.io/" target="_blank" rel="noopener noreferrer">Redis</a>、 <a href="http://www.basho.com/Riak.html" target="_blank" rel="noopener noreferrer">Riak</a>、<a href="http://www.couchbase.org/membase" target="_blank" rel="noopener noreferrer">Membase</a>、<a href="http://neo4j.org/" target="_blank" rel="noopener noreferrer">Neo4j</a> 和 <a href="http://hbase.apache.org/" target="_blank" rel="noopener noreferrer">HBase</a> 进行了比较：<br> （编注1：NoSQL：是一项全新的数据库革命性运动，NoSQL的拥护者们提倡运用非关系型的数据存储。现今的计算机体系结构在数据存储方面要求具 备庞大的水平扩 展性，而NoSQL致力于改变这一现状。目前Google的 BigTable 和Amazon 的Dynamo使用的就是NoSQL型数据库。 参见<a href="http://zh.wikipedia.org/zh/NoSQL" target="_blank" rel="noopener noreferrer">NoSQL词条</a>。）</p><h3 id="_1-couchdb" tabindex="-1"><a class="header-anchor" href="#_1-couchdb"><span><strong>1. CouchDB</strong></span></a></h3><ul><li>所用语言： Erlang</li><li>特点：DB一致性，易于使用</li><li>使用许可： Apache</li><li>协议： HTTP/REST</li><li>双向数据复制，</li><li>持续进行或临时处理，</li><li>处理时带冲突检查，</li><li>因此，采用的是master-master复制（见编注2）</li><li>MVCC – 写操作不阻塞读操作</li><li>可保存文件之前的版本</li><li>Crash-only（可靠的）设计</li><li>需要不时地进行数据压缩</li><li>视图：嵌入式 映射/减少</li><li>格式化视图：列表显示</li><li>支持进行服务器端文档验证</li><li>支持认证</li><li>根据变化实时更新</li><li>支持附件处理</li><li>因此， CouchApps（独立的 js应用程序）</li><li>需要 jQuery程序库</li></ul><p><strong>最佳应用场景</strong>：适用于数据变化较少，执行预定义查询，进行数据统计的应用程序。适用于需要提供数据版本支持的应用程序。<br><strong>例如：</strong> CRM、CMS系统。 master-master复制对于多站点部署是非常有用的。<br> （编注2：master-master复制：是一种数据库同步方法，允许数据在一组计算机之间共享数据，并且可以通过小组中任意成员在组内进行数据更新。）</p><h3 id="_2-redis" tabindex="-1"><a class="header-anchor" href="#_2-redis"><span><strong>2. Redis</strong></span></a></h3><ul><li>所用语言：C/C++</li><li>特点：运行异常快</li><li>使用许可： BSD</li><li>协议：类 Telnet</li><li>有硬盘存储支持的内存数据库，</li><li>但自2.0版本以后可以将数据交换到硬盘（注意， 2.4以后版本不支持该特性！）</li><li>Master-slave复制（见编注3）</li><li>虽然采用简单数据或以键值索引的哈希表，但也支持复杂操作，例如 ZREVRANGEBYSCORE。</li><li>INCR &amp; co （适合计算极限值或统计数据）</li><li>支持 sets（同时也支持 union/diff/inter）</li><li>支持列表（同时也支持队列；阻塞式 pop操作）</li><li>支持哈希表（带有多个域的对象）</li><li>支持排序 sets（高得分表，适用于范围查询）</li><li>Redis支持事务</li><li>支持将数据设置成过期数据（类似快速缓冲区设计）</li><li>Pub/Sub允许用户实现消息机制</li></ul><p><strong>最佳应用场景</strong>：适用于数据变化快且数据库大小可遇见（适合内存容量）的应用程序。<br> **例如：**股票价格、数据分析、实时数据搜集、实时通讯。<br> （编注3：Master-slave复制：如果同一时刻只有一台服务器处理所有的复制请求，这被称为 Master-slave复制，通常应用在需要提供高可用性的服务器集群。）</p><h3 id="_3-mongodb" tabindex="-1"><a class="header-anchor" href="#_3-mongodb"><span><strong>3. MongoDB</strong></span></a></h3><ul><li>所用语言：C++</li><li>特点：保留了SQL一些友好的特性（查询，索引）。</li><li>使用许可： AGPL（发起者： Apache）</li><li>协议： Custom, binary（ BSON）</li><li>Master/slave复制（支持自动错误恢复，使用 sets 复制）</li><li>内建分片机制</li><li>支持 javascript表达式查询</li><li>可在服务器端执行任意的 javascript函数</li><li>update-in-place支持比CouchDB更好</li><li>在数据存储时采用内存到文件映射</li><li>对性能的关注超过对功能的要求</li><li>建议最好打开日志功能（参数 –journal）</li><li>在32位操作系统上，数据库大小限制在约2.5Gb</li><li>空数据库大约占 192Mb</li><li>采用 GridFS存储大数据或元数据（不是真正的文件系统）</li></ul><p><strong>最佳应用场景</strong>：适用于需要动态查询支持；需要使用索引而不是 map/reduce功能；需要对大数据库有性能要求；需要使用 CouchDB但因为数据改变太频繁而占满内存的应用程序。<br> **例如：**你本打算采用 MySQL或 PostgreSQL，但因为它们本身自带的预定义栏让你望而却步。</p><h3 id="_4-riak" tabindex="-1"><a class="header-anchor" href="#_4-riak"><span><strong>4. Riak</strong></span></a></h3><ul><li>所用语言：Erlang和C，以及一些Javascript</li><li>特点：具备容错能力</li><li>使用许可： Apache</li><li>协议： HTTP/REST或者 custom binary</li><li>可调节的分发及复制(N, R, W)</li><li>用 JavaScript or Erlang在操作前或操作后进行验证和安全支持。</li><li>使用JavaScript或Erlang进行 Map/reduce</li><li>连接及连接遍历：可作为图形数据库使用</li><li>索引：输入元数据进行搜索（1.0版本即将支持）</li><li>大数据对象支持（ Luwak）</li><li>提供“开源”和“企业”两个版本</li><li>全文本搜索，索引，通过 Riak搜索服务器查询（ beta版）</li><li>支持Masterless多站点复制及商业许可的 SNMP监控</li></ul><p><strong>最佳应用场景</strong>：适用于想使用类似 Cassandra（类似Dynamo）数据库但无法处理 bloat及复杂性的情况。适用于你打算做多站点复制，但又需要对单个站点的扩展性，可用性及出错处理有要求的情况。<br> 例如：销售数据搜集，工厂控制系统；对宕机时间有严格要求；可以作为易于更新的 web服务器使用。</p><h3 id="_5-membase" tabindex="-1"><a class="header-anchor" href="#_5-membase"><span><strong>5. Membase</strong></span></a></h3><ul><li>所用语言： Erlang和C</li><li>特点：兼容 Memcache，但同时兼具持久化和支持集群</li><li>使用许可： Apache 2.0</li><li>协议：分布式缓存及扩展</li><li>非常快速（200k+/秒），通过键值索引数据</li><li>可持久化存储到硬盘</li><li>所有节点都是唯一的（ master-master复制）</li><li>在内存中同样支持类似分布式缓存的缓存单元</li><li>写数据时通过去除重复数据来减少 IO</li><li>提供非常好的集群管理 web界面</li><li>更新软件时软无需停止数据库服务</li><li>支持连接池和多路复用的连接代理</li></ul><p><strong>最佳应用场景</strong>：适用于需要低延迟数据访问，高并发支持以及高可用性的应用程序<br> 例如：低延迟数据访问比如以广告为目标的应用，高并发的 web 应用比如网络游戏（例如 Zynga）</p><h3 id="_6-neo4j" tabindex="-1"><a class="header-anchor" href="#_6-neo4j"><span><strong>6. Neo4j</strong></span></a></h3><ul><li>所用语言： Java</li><li>特点：基于关系的图形数据库</li><li>使用许可： GPL，其中一些特性使用 AGPL/商业许可</li><li>协议： HTTP/REST（或嵌入在 Java中）</li><li>可独立使用或嵌入到 Java应用程序</li><li>图形的节点和边都可以带有元数据</li><li>很好的自带web管理功能</li><li>使用多种算法支持路径搜索</li><li>使用键值和关系进行索引</li><li>为读操作进行优化</li><li>支持事务（用 Java api）</li><li>使用 Gremlin图形遍历语言</li><li>支持 Groovy脚本</li><li>支持在线备份，高级监控及高可靠性支持使用 AGPL/商业许可</li></ul><p><strong>最佳应用场景</strong>：适用于图形一类数据。这是 Neo4j与其他nosql数据库的最显著区别<br> 例如：社会关系，公共交通网络，地图及网络拓谱</p><h3 id="_7-cassandra" tabindex="-1"><a class="header-anchor" href="#_7-cassandra"><span><strong>7. Cassandra</strong></span></a></h3><ul><li>所用语言： Java</li><li>特点：对大型表格和 Dynamo支持得最好</li><li>使用许可： Apache</li><li>协议： Custom, binary (节约型)</li><li>可调节的分发及复制(N, R, W)</li><li>支持以某个范围的键值通过列查询</li><li>类似大表格的功能：列，某个特性的列集合</li><li>写操作比读操作更快</li><li>基于 Apache分布式平台尽可能地 Map/reduce</li><li>我承认对 Cassandra有偏见，一部分是因为它本身的臃肿和复杂性，也因为 Java的问题（配置，出现异常，等等）</li></ul><p><strong>最佳应用场景</strong>：当使用写操作多过读操作（记录日志）如果每个系统组建都必须用 Java编写（没有人因为选用 Apache的软件被解雇）<br> 例如：银行业，金融业（虽然对于金融交易不是必须的，但这些产业对数据库的要求会比它们更大）写比读更快，所以一个自然的特性就是实时数据分析</p><h3 id="_8-hbase" tabindex="-1"><a class="header-anchor" href="#_8-hbase"><span><strong>8. HBase</strong></span></a></h3><p>（配合 ghshephard使用）</p><ul><li>所用语言： Java</li><li>特点：支持数十亿行X上百万列</li><li>使用许可： Apache</li><li>协议：HTTP/REST （支持 <a href="http://www.jobbole.com/entry.php/73" target="_blank" rel="noopener noreferrer">Thrift</a>，见编注4）</li><li>在 BigTable之后建模</li><li>采用分布式架构 Map/reduce</li><li>对实时查询进行优化</li><li>高性能 Thrift网关</li><li>通过在server端扫描及过滤实现对查询操作预判</li><li>支持 XML, Protobuf, 和binary的HTTP</li><li>Cascading, hive, and pig source and sink modules</li><li>基于 Jruby（ JIRB）的shell</li><li>对配置改变和较小的升级都会重新回滚</li><li>不会出现单点故障</li><li>堪比MySQL的随机访问性能</li></ul><p><strong>最佳应用场景</strong>：适用于偏好BigTable:)并且需要对大数据进行随机、实时访问的场合。<br> 例如： Facebook消息数据库（更多通用的用例即将出现）</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p><a href="https://www.51cto.com/article/675330.html" target="_blank" rel="noopener noreferrer">https://www.51cto.com/article/675330.html</a> | InfluxDB，<a href="http://xn--TimescaleDBQuestDB-51CTO-nd91be05hor8chda592otumw2dn55dwyze2lxaho2o.COM" target="_blank" rel="noopener noreferrer">TimescaleDB和QuestDB三种时序数据库的比较-51CTO.COM</a></p>',47)]))}const c=l(t,[["render",o],["__file","nosqlReadme.html.vue"]]),d=JSON.parse('{"path":"/dataBase/commonOperator/nosqlReadme.html","title":"NOSQL说明","lang":"zh-CN","frontmatter":{"title":"NOSQL说明","lang":"zh-CN","date":"2023-09-03T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"shuiming","slug":"gew0tk","docsId":"30252179","description":"前言 随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传统的关系型数据库中已经得不到满足，或者说关系型数据库应对这些需求已经显得力不从心了。关系型数据库经过几十年的发展已经很成熟，强大的sql语句支持，完美的ACID属性的支持，使得关系型数据库广泛应用于各种各样的应用系统中，但是应用的场景广泛并非意...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/commonOperator/nosqlReadme.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"NOSQL说明"}],["meta",{"property":"og:description","content":"前言 随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传统的关系型数据库中已经得不到满足，或者说关系型数据库应对这些需求已经显得力不从心了。关系型数据库经过几十年的发展已经很成熟，强大的sql语句支持，完美的ACID属性的支持，使得关系型数据库广泛应用于各种各样的应用系统中，但是应用的场景广泛并非意..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1610856529717-ba1dc6f8-6d8a-458c-958b-c87c9a65d3c9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-19T14:59:33.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-19T14:59:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NOSQL说明\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1610856529717-ba1dc6f8-6d8a-458c-958b-c87c9a65d3c9.png\\"],\\"datePublished\\":\\"2023-09-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-19T14:59:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"四大分类","slug":"四大分类","link":"#四大分类","children":[{"level":3,"title":"KV键值","slug":"kv键值","link":"#kv键值","children":[]},{"level":3,"title":"文档型数据库(Bson)","slug":"文档型数据库-bson","link":"#文档型数据库-bson","children":[]},{"level":3,"title":"列存储数据库","slug":"列存储数据库","link":"#列存储数据库","children":[]},{"level":3,"title":"图关系数据库","slug":"图关系数据库","link":"#图关系数据库","children":[]}]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[{"level":3,"title":"1. CouchDB","slug":"_1-couchdb","link":"#_1-couchdb","children":[]},{"level":3,"title":"2. Redis","slug":"_2-redis","link":"#_2-redis","children":[]},{"level":3,"title":"3. MongoDB","slug":"_3-mongodb","link":"#_3-mongodb","children":[]},{"level":3,"title":"4. Riak","slug":"_4-riak","link":"#_4-riak","children":[]},{"level":3,"title":"5. Membase","slug":"_5-membase","link":"#_5-membase","children":[]},{"level":3,"title":"6. Neo4j","slug":"_6-neo4j","link":"#_6-neo4j","children":[]},{"level":3,"title":"7. Cassandra","slug":"_7-cassandra","link":"#_7-cassandra","children":[]},{"level":3,"title":"8. HBase","slug":"_8-hbase","link":"#_8-hbase","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1695484404000,"updatedTime":1721401173000,"contributors":[{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":4},{"name":"zhangyunpeng","username":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":11.78,"words":3534},"filePathRelative":"dataBase/commonOperator/nosqlReadme.md","localizedDate":"2023年9月3日","excerpt":"<h2>前言</h2>\\n<p>随着互联网大潮的到来，越来越多网站，应用系统需要海量数据的支撑，高并发、低延迟、高可用、高扩展等要求在传统的关系型数据库中已经得不到满足，或者说关系型数据库应对这些需求已经显得力不从心了。关系型数据库经过几十年的发展已经很成熟，强大的sql语句支持，完美的ACID属性的支持，使得关系型数据库广泛应用于各种各样的应用系统中，但是应用的场景广泛并非意味着完美。</p>\\n<p>-&nbsp;由于关系型数据库是按行进行存储的，在某些只统计一列的需求场景下，也需要把整行读入内存，导致了一个小小的统计需求高IO的缺点<br>\\n-&nbsp;关系型数据库无法存储数据结构，比如：一个商品可以从属于多个分类，业务上的从属关系体现到存储上是一个列表而已，但是关系型数据库需要把这些关系存储为多行，无法直接存储为一个列表。<br>\\n-&nbsp;关系型数据库中的存储单位表的架构是强约束，操作不存在的列会报出异常，而且添加、更新、删除列必须执行DDL语句，如果表的现存数据量比较大，会出现长时间锁表的现象。<br>\\n-&nbsp;关系型数据库全文搜索功能普通比较弱，用like去匹配关键词的时候，数据量比较大的情况下会出现慢查询的现象。<br>\\n-&nbsp;关系型数据库基于表格的关系模型使得很难添加新的或不同种类的关联信息。</p>","autoDesc":true}');export{c as comp,d as data};
