import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,d as n}from"./app-Dg7YJ3hy.js";const i={},t=n(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>功能强大的动态 SQL 查询生成器，支持 Sql Server、MySql、PostgreSql、Oracle 和Firebird。SqlKata 有一个富有表现力的 API。它遵循干净的命名约定，这与SQL语法非常相似。通过对受支持的数据库引擎提供抽象级别，允许您使用具有相同统一 API 的多个数据库。</p><p>SqlKata 支持复杂的查询，例如嵌套条件、从子查询中进行选择、筛选子查询、条件语句等。目前，它具有用于Sql服务器，MySql，后greSql和火鸟的内置编译器。SqlKata.执行包提供了使用 <a href="https://github.com/StackExchange/Dapper" target="_blank" rel="noopener noreferrer">Dapper</a> 将查询提交到数据库的功能。</p><p>仓库地址：<a href="https://github.com/sqlkata/querybuilder" target="_blank" rel="noopener noreferrer">https://github.com/sqlkata/querybuilder</a> 下载量：6.67M(2023年6月11日21:53:17) 官网：<a href="https://sqlkata.com/" target="_blank" rel="noopener noreferrer">https://sqlkata.com/</a></p><p>通过编写包含扩展方法的查询语法，然后生成SQL执行。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> package</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> SqlKata</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">$ </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">dotnet</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> package</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> SqlKata</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ## (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">optional</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">If</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> you</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> want</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> the</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> support</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 连接</span></span>
<span class="line"><span>var connection = new SqlConnection(&quot;...&quot;);</span></span>
<span class="line"><span>var compiler = new SqlCompiler();</span></span>
<span class="line"><span>var db = new QueryFactory(connection, compiler);</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 检索所有数据</span></span>
<span class="line"><span>var books = db.Query(&quot;Books&quot;).Get(); // 返回数据类型为dynamic</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 检索一本书</span></span>
<span class="line"><span>var introToSql = db.Query(&quot;Books&quot;).Where(&quot;Id&quot;, 145).Where(&quot;Lang&quot;, &quot;en&quot;).First();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 插入</span></span>
<span class="line"><span>int affected = db.Query(&quot;Users&quot;).Insert(new {</span></span>
<span class="line"><span>    Name = &quot;Jane&quot;,</span></span>
<span class="line"><span>    CountryId = 1</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 更新</span></span>
<span class="line"><span>int affected = db.Query(&quot;Users&quot;).Where(&quot;Id&quot;, 1).Update(new {</span></span>
<span class="line"><span>    Name = &quot;Jane&quot;,</span></span>
<span class="line"><span>    CountryId = 1</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 删除</span></span>
<span class="line"><span>int affected = db.Query(&quot;Users&quot;).Where(&quot;Id&quot;, 1).Delete();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>有点像是dapper的稍微增强版本。</p>`,11),l=[t];function r(p,d){return e(),a("div",null,l)}const c=s(i,[["render",r],["__file","shuiming.html.vue"]]),u=JSON.parse('{"path":"/orm/sqlkata/shuiming.html","title":"说明","lang":"zh-CN","frontmatter":{"title":"说明","lang":"zh-CN","date":"2023-06-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["orm"],"tag":["无"],"filename":"shuiming","slug":"hbmibu","docsId":"92728987","description":"概述 功能强大的动态 SQL 查询生成器，支持 Sql Server、MySql、PostgreSql、Oracle 和Firebird。SqlKata 有一个富有表现力的 API。它遵循干净的命名约定，这与SQL语法非常相似。通过对受支持的数据库引擎提供抽象级别，允许您使用具有相同统一 API 的多个数据库。 SqlKata 支持复杂的查询，例如嵌套...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/orm/sqlkata/shuiming.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"说明"}],["meta",{"property":"og:description","content":"概述 功能强大的动态 SQL 查询生成器，支持 Sql Server、MySql、PostgreSql、Oracle 和Firebird。SqlKata 有一个富有表现力的 API。它遵循干净的命名约定，这与SQL语法非常相似。通过对受支持的数据库引擎提供抽象级别，允许您使用具有相同统一 API 的多个数据库。 SqlKata 支持复杂的查询，例如嵌套..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-22T16:22:17.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-22T16:22:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-22T16:22:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1690042937000,"updatedTime":1690042937000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.25,"words":375},"filePathRelative":"orm/sqlkata/shuiming.md","localizedDate":"2023年6月11日","excerpt":"<h2>概述</h2>\\n<p>功能强大的动态 SQL 查询生成器，支持 Sql Server、MySql、PostgreSql、Oracle 和Firebird。SqlKata 有一个富有表现力的 API。它遵循干净的命名约定，这与SQL语法非常相似。通过对受支持的数据库引擎提供抽象级别，允许您使用具有相同统一 API 的多个数据库。</p>\\n<p>SqlKata 支持复杂的查询，例如嵌套条件、从子查询中进行选择、筛选子查询、条件语句等。目前，它具有用于Sql服务器，MySql，后greSql和火鸟的内置编译器。SqlKata.执行包提供了使用 <a href=\\"https://github.com/StackExchange/Dapper\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Dapper</a> 将查询提交到数据库的功能。</p>","autoDesc":true}');export{c as comp,u as data};
