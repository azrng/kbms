import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,d as s,e as c,b as i}from"./app-DMmdIwn0.js";const l="/kbms/common/1651398849140-1507e165-f8a2-4ccb-aea2-6d788f24cf0a.png",u="/kbms/common/1651398875751-b8630de8-33d8-49c0-9330-160f79659577.png",r="/kbms/common/1651398898779-ec157d06-b32b-49fd-be09-c672ab45d1c8.png",d={},k=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在上一篇关于授权码模式中， 已经介绍了关于授权码的基本内容，认识到这是一个拥有更为安全的机制,但这个仍然存在局限，虽然在文中我们说到通过后端的方式去获取token,这种由web服务器和授权服务器直接通信，不需要经过用户的浏览器或者其他的地方，但是在这种模式中，授权码仍然是通过前端通道进行传递的，而且在访问资源的中，也会将访问令牌暴露给外界，就仍存在安全隐患。</p><p>在几篇关于授权模式篇章中，其中我们也使用了关于OpenID Connect的简化流程，在简化流程中，所有令牌（身份令牌、访问令牌）都通过浏览器传输，这对于<strong>身份令牌（IdentityToken）</strong>「来说是没有问题的，但是如果是」<strong>访问令牌（AccessToken</strong>）直接通过浏览器传输，就增加了一定的安全问题。因为访问令牌比身份令牌更敏感，在非必须的情况下，我们不希望将它们暴露给外界。 所以我们就会考虑增加安全性，在OpenID Connect 包含一个名为“Hybrid（混合）”的流程，它为我们提供了两全其美的优势，身份令牌通过浏览器传输，因此客户端可以在进行任何更多工作之前对其进行验证。如果验证成功，客户端会通过令牌服务的以获取访问令牌。</p><blockquote><p>授权码模式在访问资源服务的时候，请求的头里面会带有访问令牌。</p></blockquote><h2 id="_7-混合模式" tabindex="-1"><a class="header-anchor" href="#_7-混合模式"><span>7. 混合模式</span></a></h2><p>code和hybrid一样都有8个步骤，大部分步骤也是相同的。最主要的区别在于第5步。 「在授权码模式中，成功响应身份验证」：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">302</span> <span class="token class-name">Found</span>
  Location<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>client<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token operator">/</span><span class="token class-name">cb<span class="token punctuation">?</span></span>
    code<span class="token operator">=</span>SplxlOBeZQQYbYS6WxSbIA
    <span class="token operator">&amp;</span>state<span class="token operator">=</span>af0ifjsldkj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>「在混合模式中，成功响应身份验证：」</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">302</span> <span class="token class-name">Found</span>
  Location<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>client<span class="token punctuation">.</span>example<span class="token punctuation">.</span>org<span class="token operator">/</span>cb#
    code<span class="token operator">=</span>SplxlOBeZQQYbYS6WxSbIA
    <span class="token operator">&amp;</span>id_token<span class="token operator">=</span>eyJ0 <span class="token range operator">..</span><span class="token punctuation">.</span> NiJ9<span class="token punctuation">.</span>eyJ1c <span class="token range operator">..</span><span class="token punctuation">.</span> I6IjIifX0<span class="token punctuation">.</span>DeWt4Qu <span class="token range operator">..</span><span class="token punctuation">.</span> ZXso
    <span class="token operator">&amp;</span>state<span class="token operator">=</span>af0ifjsldkj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中多了一个id_token</p><p>在使用这些模式的时候，成功的身份验证响应，存在指定的差异。这些授权端点的结果以不同的的依据返回。其中code是一定会返回的，access_token和id_token的返回依据 response_type 参数决定。 混合模式根据response_type的不同，authorization endpoint返回可以分为三种情况。</p><ol><li>response_type = code + id_token ，即包含Access Token和ID Token <img src="`+l+'" alt="" loading="lazy"></li><li>response_type = code + token ，即包含Authorization Code和Access Token <img src="'+u+'" alt="" loading="lazy"></li><li>response_type = code + id_token + token，即包含Authorization Code、identity Token和Access Token <img src="'+r+`" alt="" loading="lazy"></li></ol><h3 id="_7-1-实践" tabindex="-1"><a class="header-anchor" href="#_7-1-实践"><span>7.1 实践</span></a></h3><p>在示例实践中，我们将创建一个授权访问服务，定义一个HTML客户端，HTML客户端通过「IdentityServer」上请求访问令牌，并使用它来访问API。</p><h4 id="_7-1-1-搭建认证授权服务" tabindex="-1"><a class="header-anchor" href="#_7-1-1-搭建认证授权服务"><span>7.1.1 搭建认证授权服务</span></a></h4><p>使用我们之前创建的AuthCenterInMemory项目。</p><h5 id="_7-1-1-1-配置内容" tabindex="-1"><a class="header-anchor" href="#_7-1-1-1-配置内容"><span>7.1.1.1 配置内容</span></a></h5><p>修改IdentityConfig文件内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IdentityConfig</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 资源</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>IdentityResource<span class="token punctuation">&gt;</span></span> IdentityResources <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdentityResource<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdentityResources<span class="token punctuation">.</span>OpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IdentityResources<span class="token punctuation">.</span>Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/*
     在3.1.x 到 4.x 的变更中，ApiResource 的 Scope 正式独立出来为 ApiScope 对象，区别ApiResource 和 Scope的关系,
     Scope 是属于ApiResource 的一个属性，可以包含多个Scope。
     */</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ApiResource<span class="token punctuation">&gt;</span></span> ApiResources <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiResource<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiResource</span><span class="token punctuation">(</span><span class="token string">&quot;API01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;api1DisplayName&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Scopes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                ApiSecrets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;secrets&quot;</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//api密钥</span>
                UserClaims <span class="token operator">=</span> <span class="token punctuation">{</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> JwtClaimTypes<span class="token punctuation">.</span>NickName<span class="token punctuation">,</span> JwtClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// Authorization Server保护了哪些 API Scope（作用域）</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>ApiScope<span class="token punctuation">&gt;</span></span> <span class="token function">GetApiScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ApiScope</span><span class="token punctuation">(</span><span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;client_scope1 DisplayName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 哪些客户端 Client（应用） 可以使用这个 Authorization Server</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>Client<span class="token punctuation">&gt;</span></span> <span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//客户端凭据模式</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;ConsoleClient01&quot;</span><span class="token punctuation">,</span> <span class="token comment">//客户端的标识，要是唯一的</span>
                ClientSecrets <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;secrets&quot;</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//客户端密码，进行了加密</span>
                AllowedGrantTypes <span class="token operator">=</span>
                    GrantTypes
                        <span class="token punctuation">.</span>ClientCredentials<span class="token punctuation">,</span> <span class="token comment">//授权方式，这里采用的是客户端认证模式，只要ClientId，以及ClientSecrets正确即可访问对应的AllowedScopes里面的api资源</span>
                AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//定义这个客户端可以访问的scopes</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//资源密码模式</span>

                ClientId <span class="token operator">=</span> <span class="token string">&quot;ResourceOwnerPassword01&quot;</span><span class="token punctuation">,</span>
                AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>ResourceOwnerPassword<span class="token punctuation">,</span>
                ClientSecrets <span class="token operator">=</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;secrets&quot;</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                AllowedScopes <span class="token operator">=</span>
                <span class="token punctuation">{</span>
                    <span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Phone<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span>
            <span class="token punctuation">{</span>
                <span class="token comment">/*
                 简化模式：创建一个mvc客户端，然后启动该身份服务器，然后启动客户端，让客户端去访问需要权限的接口，然后会直接转到身份服务器登录，
                 登录成功会重新跳转回去
                 */</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;ImplicitClientMvc&quot;</span><span class="token punctuation">,</span>

                AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Implicit<span class="token punctuation">,</span>

                <span class="token comment">//登录后重定向到哪里，客户端地址</span>
                RedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5021/signin-oidc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

                <span class="token comment">//FrontChannelLogoutUri=&quot;&quot;,</span>
                <span class="token comment">//注销后重定向到哪里，客户端地址</span>
                PostLogoutRedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5021/signout-callback-oidc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

                AllowOfflineAccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//刷新令牌</span>
                AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
                <span class="token punctuation">{</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>
                    <span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">//允许将token通过浏览器传递</span>
                AllowAccessTokensViaBrowser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token comment">//是否需要统一授权（默认是false）</span>
                RequireConsent <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//授权码模式</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;AuthorizationCodeWebClient&quot;</span><span class="token punctuation">,</span>
                ClientName <span class="token operator">=</span> <span class="token string">&quot;授权码 Web Client 名称&quot;</span><span class="token punctuation">,</span>
                <span class="token comment">//授权模式</span>
                AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Code<span class="token punctuation">,</span>
                AccessTokenLifetime <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token comment">//单位是秒</span>

                RequirePkce <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//指定基于代码请求的授权令牌是否需要证明密钥</span>
                RequireClientSecret <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>

                <span class="token comment">//登录后重定向的位置</span>
                RedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5024/callback.html&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token comment">//注销后重定向的位置</span>
                PostLogoutRedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5024/index.html&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                AllowedCorsOrigins <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5024&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//允许跨域请求的地址</span>

                <span class="token comment">//客户端有权访问的范围</span>
                AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">{</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>
                    <span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token doc-comment comment">////允许token通过浏览器传递</span>
                <span class="token comment">//AllowAccessTokensViaBrowser = true,</span>
                <span class="token doc-comment comment">////是否显示同意界面</span>
                <span class="token comment">//RequireConsent = true,</span>
                <span class="token doc-comment comment">////是否记住同意选项</span>
                <span class="token comment">//AllowRememberConsent = false,</span>
                <span class="token doc-comment comment">////支持刷新令牌</span>
                <span class="token comment">//AllowOfflineAccess = true,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span>
            <span class="token punctuation">{</span>
                <span class="token comment">//混合模式</span>
                ClientId <span class="token operator">=</span> <span class="token string">&quot;HybridMvcClient&quot;</span><span class="token punctuation">,</span>
                ClientSecrets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Secret</span><span class="token punctuation">(</span><span class="token string">&quot;secrets&quot;</span><span class="token punctuation">.</span><span class="token function">Sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

                AllowedGrantTypes <span class="token operator">=</span> GrantTypes<span class="token punctuation">.</span>Hybrid<span class="token punctuation">,</span>
                RequirePkce <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token comment">//登录后重定向到哪里</span>
                RedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5025/signin-oidc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

                <span class="token comment">//FrontChannelLogoutUri=&quot;&quot;,</span>
                <span class="token comment">//注销后重定向到哪里</span>
                PostLogoutRedirectUris <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;http://localhost:5025/signout-callback-oidc&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

                AllowOfflineAccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//刷新令牌</span>
                AllowedScopes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>
                <span class="token punctuation">{</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>OpenId<span class="token punctuation">,</span>
                    IdentityServerConstants<span class="token punctuation">.</span>StandardScopes<span class="token punctuation">.</span>Profile<span class="token punctuation">,</span>
                    <span class="token string">&quot;client_scope1&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 哪些User可以被这个AuthorizationServer识别并授权</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IEnumerable<span class="token punctuation">&lt;</span>TestUser<span class="token punctuation">&gt;</span></span> <span class="token function">GetTestUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestUser</span>
            <span class="token punctuation">{</span>
                SubjectId <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
                Username <span class="token operator">=</span> <span class="token string">&quot;alice&quot;</span><span class="token punctuation">,</span>
                Password <span class="token operator">=</span> <span class="token string">&quot;alice&quot;</span><span class="token punctuation">,</span>

                Claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;website&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://alice.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>ClaimTypes<span class="token punctuation">.</span>NameIdentifier<span class="token punctuation">,</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestUser</span>
            <span class="token punctuation">{</span>
                SubjectId <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>
                Username <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
                Password <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>

                Claims <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>NickName<span class="token punctuation">,</span> <span class="token string">&quot;Bob nickname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Email<span class="token punctuation">,</span> <span class="token string">&quot;itzhangyunpeng@163.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>WebSite<span class="token punctuation">,</span> <span class="token string">&quot;状态&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>PhoneNumber<span class="token punctuation">,</span> <span class="token string">&quot;18838940824&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span>JwtClaimTypes<span class="token punctuation">.</span>Role<span class="token punctuation">,</span> <span class="token string">&quot;ceshi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//添加角色</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;sex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;男&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;today&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhouyi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Claim</span><span class="token punctuation">(</span><span class="token string">&quot;ceshi1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ceshi11&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RedirectUris : 登录成功回调处理的客户端地址，处理回调返回的数据，可以有多个。 PostLogoutRedirectUris ：跳转登出到的客户端的地址。 这两个都是配置的客户端的地址，且是identityserver4组件里面封装好的地址，作用分别是登录，注销的回调。</p><blockquote><p>在Config中配置客户端(client)中定义了一个AllowedGrantTypes的属性，这个属性决定了Client可以被哪种模式被访问，「GrantTypes.Hybrid」为「混合模式」。所以在本文中我们需要添加一个Client用于支持授权码模式(「Hybrid」)。</p></blockquote><h5 id="_7-1-1-2-注册服务" tabindex="-1"><a class="header-anchor" href="#_7-1-1-2-注册服务"><span>7.1.1.2 注册服务</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddIdentityServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddDeveloperSigningCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddTestUsers</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span><span class="token function">GetTestUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddInMemoryClients</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span><span class="token function">GetClients</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddInMemoryApiScopes</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span><span class="token function">GetApiScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddInMemoryApiResources</span><span class="token punctuation">(</span>IdentityConfig<span class="token punctuation">.</span>ApiResources<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-1-1-3-配置管道" tabindex="-1"><a class="header-anchor" href="#_7-1-1-3-配置管道"><span>7.1.1.3 配置管道</span></a></h5><p>保持之前的不变。</p><h4 id="_7-1-2-搭建api资源项目" tabindex="-1"><a class="header-anchor" href="#_7-1-2-搭建api资源项目"><span>7.1.2 搭建API资源项目</span></a></h4><h5 id="_7-1-2-1-安装nuget包" tabindex="-1"><a class="header-anchor" href="#_7-1-2-1-安装nuget包"><span>7.1.2.1 安装Nuget包</span></a></h5><p>IdentityServer4.AccessTokenValidation 包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;IdentityServer4.AccessTokenValidation&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;3.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_7-1-2-2-注册服务" tabindex="-1"><a class="header-anchor" href="#_7-1-2-2-注册服务"><span>7.1.2.2 注册服务</span></a></h5><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">AddIdentityServerAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            options<span class="token punctuation">.</span>Authority <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5014&quot;</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>ApiName <span class="token operator">=</span> <span class="token string">&quot;API01&quot;</span><span class="token punctuation">;</span>
            options<span class="token punctuation">.</span>ApiSecret <span class="token operator">=</span> <span class="token string">&quot;secrets&quot;</span><span class="token punctuation">;</span><span class="token comment">//对应ApiResources中的密钥</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AddAuthentication把Bearer配置成默认模式，将身份认证服务添加到DI中。 AddIdentityServerAuthentication把IdentityServer的access token添加到DI中，供身份认证服务使用。</p><h5 id="_7-1-2-3-配置管道" tabindex="-1"><a class="header-anchor" href="#_7-1-2-3-配置管道"><span>7.1.2.3 配置管道</span></a></h5><p>然后要确保认证服务执行对每个请求的验证，加入UseAuthentication和UseAuthorization到Configure中,在startup.cs中Configure方法添加如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Configure the HTTP request pipeline.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    app<span class="token punctuation">.</span><span class="token function">UseSwaggerUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">UseAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UseAuthentication将身份验证中间件添加到管道中； UseAuthorization 将启动授权中间件添加到管道中，以便在每次调用主机时执行身份验证授权功能。</p><h5 id="_7-1-2-4-api资源接口" tabindex="-1"><a class="header-anchor" href="#_7-1-2-4-api资源接口"><span>7.1.2.4 API资源接口</span></a></h5><p>添加IdentityController控制器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ApiController</span></span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;api/[controller]&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdentityController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ILogger<span class="token punctuation">&lt;</span>IdentityController<span class="token punctuation">&gt;</span></span> _logger<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">IdentityController</span><span class="token punctuation">(</span><span class="token class-name">ILogger<span class="token punctuation">&lt;</span>IdentityController<span class="token punctuation">&gt;</span></span> logger<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;UserClaims&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">GetUserClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JsonResult</span><span class="token punctuation">(</span><span class="token keyword">from</span> c <span class="token keyword">in</span> User<span class="token punctuation">.</span>Claims <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> c<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在IdentityController 控制器中添加 [Authorize] , 在进行请求资源的时候，需进行认证授权通过后，才能进行访问。</p><h4 id="_7-1-3-搭建mvc客户端" tabindex="-1"><a class="header-anchor" href="#_7-1-3-搭建mvc客户端"><span>7.1.3 搭建MVC客户端</span></a></h4><h5 id="_7-1-3-1-安装nuget包" tabindex="-1"><a class="header-anchor" href="#_7-1-3-1-安装nuget包"><span>7.1.3.1 安装Nuget包</span></a></h5><p>IdentityServer4.AccessTokenValidation 包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.AspNetCore.Authentication.OpenIdConnect&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;6.0.4&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-1-3-2-安装注册服务" tabindex="-1"><a class="header-anchor" href="#_7-1-3-2-安装注册服务"><span>7.1.3.2 安装注册服务</span></a></h5><p>要将对 OpenID Connect 身份认证的支持添加到MVC应用程序中。 在startup.cs中ConfigureServices方法添加如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//将身份验证服务添加到容器</span>
builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 客户端应用设置使用&quot;Cookies&quot;进行认证</span>
    options<span class="token punctuation">.</span>DefaultScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
    <span class="token comment">// identityserver4设置使用&quot;oidc&quot;进行认证  用户登录时候使用openid connect协议</span>
    options<span class="token punctuation">.</span>DefaultChallengeScheme <span class="token operator">=</span> OpenIdConnectDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddCookie</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span>
<span class="token comment">//用于配置执行openid connect协议的处理程序</span>
<span class="token punctuation">.</span><span class="token function">AddOpenIdConnect</span><span class="token punctuation">(</span>OpenIdConnectDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">,</span> options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>SignInScheme <span class="token operator">=</span> CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>Authority <span class="token operator">=</span> <span class="token string">&quot;http://localhost:5014&quot;</span><span class="token punctuation">;</span><span class="token comment">//信任的认证地址</span>
    options<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//暂时不使用https</span>

    options<span class="token punctuation">.</span>ClientId <span class="token operator">=</span> <span class="token string">&quot;HybridMvcClient&quot;</span><span class="token punctuation">;</span><span class="token comment">//识别客户端</span>
    options<span class="token punctuation">.</span>ResponseType <span class="token operator">=</span> <span class="token string">&quot;code id_token&quot;</span><span class="token punctuation">;</span>
    options<span class="token punctuation">.</span>ClientSecret <span class="token operator">=</span> <span class="token string">&quot;secrets&quot;</span><span class="token punctuation">;</span>

    options<span class="token punctuation">.</span>SaveTokens <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//用于在cookie中保留来自identityserver的令牌</span>
    options<span class="token punctuation">.</span>Scope<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;client_scope1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加授权资源</span>
    options<span class="token punctuation">.</span>GetClaimsFromUserInfoEndpoint <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//options.Scope.Add(&quot;offline_access&quot;);</span>
    <span class="token comment">//options.ClaimActions.MapJsonKey(&quot;website&quot;, &quot;website&quot;);</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><ol><li>AddAuthentication注入添加认证授权，当需要用户登录时，使用 cookie 来本地登录用户（通过“Cookies”作为DefaultScheme），并将 DefaultChallengeScheme 设置为“oidc”，</li><li>使用 AddCookie 添加可以处理 cookie 的处理程序。</li><li>在AddOpenIdConnect用于配置执行 OpenID Connect 协议的处理程序和相关参数。Authority表明之前搭建的 IdentityServer 授权服务地址。然后我们通过ClientId、ClientSecret,识别这个客户端。SaveTokens用于保存从IdentityServer获取的token至cookie,「ture」标识ASP.NETCore将会自动存储身份认证session的access和refresh token。</li><li>我们在配置ResponseType时需要使用Hybrid定义的三种情况之一，具体代码如上所述。</li></ol></blockquote><h5 id="_7-1-3-3-配置管道" tabindex="-1"><a class="header-anchor" href="#_7-1-3-3-配置管道"><span>7.1.3.3 配置管道</span></a></h5><p>然后要确保认证服务执行对每个请求的验证，加入UseAuthentication和UseAuthorization到Configure中,在startup.cs中Configure方法添加如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Configure the HTTP request pipeline.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app<span class="token punctuation">.</span>Environment<span class="token punctuation">.</span><span class="token function">IsDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">UseExceptionHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/Home/Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">UseStaticFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseCookiePolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">UseRouting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">UseAuthorization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapControllerRoute</span><span class="token punctuation">(</span>
    <span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span>
    <span class="token named-parameter punctuation">pattern</span><span class="token punctuation">:</span> <span class="token string">&quot;{controller=Home}/{action=Index}/{id?}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//endpoints.MapDefaultControllerRoute();</span>
<span class="token comment">//.RequireAuthorization();//禁用整个应用程序的匿名访问</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UseAuthentication将身份验证中间件添加到管道中； UseAuthorization 将启动授权中间件添加到管道中，以便在每次调用主机时执行身份验证授权功能。</p><h5 id="_7-1-3-4-添加授权" tabindex="-1"><a class="header-anchor" href="#_7-1-3-4-添加授权"><span>7.1.3.4 添加授权</span></a></h5><p>在HomeController控制器并添加[Authorize]特性到其中一个方法。在进行请求的时候，需进行认证授权通过后，才能进行访问。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Authorize</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还要修改主视图以显示用户的Claim以及cookie属性。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>@<span class="token punctuation">{</span>
    ViewData<span class="token punctuation">[</span><span class="token string">&quot;Title&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Home Page&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

@<span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Authentication

<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Claims<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>dl<span class="token operator">&gt;</span>
    @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> claim <span class="token keyword">in</span> User<span class="token punctuation">.</span>Claims<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>dt<span class="token operator">&gt;</span>@claim<span class="token punctuation">.</span>Type<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>dd<span class="token operator">&gt;</span>@claim<span class="token punctuation">.</span>Value<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>Properties<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>dl<span class="token operator">&gt;</span>
    @<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> prop <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token keyword">await</span> Context<span class="token punctuation">.</span><span class="token function">AuthenticateAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Properties<span class="token punctuation">.</span>Items<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token operator">&lt;</span>dt<span class="token operator">&gt;</span>@prop<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>dd<span class="token operator">&gt;</span>@prop<span class="token punctuation">.</span>Value<span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token class-name">a</span> href<span class="token operator">=</span><span class="token string">&quot;/Home/LogOut&quot;</span><span class="token operator">&gt;</span>退出登录<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问 Index页面，跳转到认证服务地址，进行账号密码登录，Logout 用于用户的注销操作。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 使用身份验证服务（如标识服务器）时，清除本地应用程序 Cookie 是不够的。此外，您还需要对身份服务器进行往返，以清除中央单点登录会话。</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignOutAsync</span><span class="token punctuation">(</span>CookieAuthenticationDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">SignOutAsync</span><span class="token punctuation">(</span>OpenIdConnectDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token string">&quot;Anyone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-1-3-5-添加资源访问" tabindex="-1"><a class="header-anchor" href="#_7-1-3-5-添加资源访问"><span>7.1.3.5 添加资源访问</span></a></h5><p>在HomeController控制器添加对API资源访问的接口方法。在进行请求的时候，访问API受保护资源。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 调用api资源服务</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>IActionResult<span class="token punctuation">&gt;</span></span> <span class="token function">CallApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> accessToken <span class="token operator">=</span> <span class="token keyword">await</span> HttpContext<span class="token punctuation">.</span><span class="token function">GetTokenAsync</span><span class="token punctuation">(</span><span class="token string">&quot;access_token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    client<span class="token punctuation">.</span>DefaultRequestHeaders<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AuthenticationHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:5020/api/Identity/UserClaims&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ViewBag<span class="token punctuation">.</span>Json <span class="token operator">=</span> JArray<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>通过HttpContext获取accessToken之后，设置请求头，访问API资源受保护的地址，获取资源。</p></blockquote><h3 id="_7-2-问题" tabindex="-1"><a class="header-anchor" href="#_7-2-问题"><span>7.2 问题</span></a></h3><h4 id="_7-2-1-设置requirepkce" tabindex="-1"><a class="header-anchor" href="#_7-2-1-设置requirepkce"><span>7.2.1 设置RequirePkce</span></a></h4><p>在指定基于授权码的令牌是否需要验证密钥，默认为true。错误信息</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>code challenge required
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法：修改Config中的RequirePkce为false即可。这样服务端便不在需要客户端提供code challeng。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>RequirePkce <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//v4.x需要配置这个</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-2-2-设置responsetype" tabindex="-1"><a class="header-anchor" href="#_7-2-2-设置responsetype"><span>7.2.2 设置ResponseType</span></a></h4><p>在上文中提到的MVC客户端中配置ResponseType时可以使用Hybrid定义的三种情况。 而当设置为&quot;code token&quot;, &quot;code id_token token&quot;中的一种，即只要包含token，都会报如下错误：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>client <span class="token keyword">not</span> configured to receive account token via brower。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法：授权服务端中的Config中增加允许将token通过浏览器传递</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>AllowAccessTokensViaBrowser <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-3-总结" tabindex="-1"><a class="header-anchor" href="#_7-3-总结"><span>7.3 总结</span></a></h3><p>由于令牌都通过浏览器传输，为了提高更好的安全性，我们不想暴露访问令牌， OpenID Connect包含一个名为“Hybrid（混合）”的流程，它可以让身份令牌(id_token)通过前端浏览器通道传输，因此客户端可以在做更多的工作之前验证它。如果验证成功，客户端会打开令牌服务的后端服务器通道来检索访问令牌(access_token)。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,77),v={href:"https://mp.weixin.qq.com/s/EitJQ-uXKjUQLi7pj-4uNw",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const a=e("ExternalLinkIcon");return p(),o("div",null,[k,n("p",null,[n("a",v,[s("https://mp.weixin.qq.com/s/EitJQ-uXKjUQLi7pj-4uNw"),c(a)]),s(" | IdentityServer4系列 | 混合模式")])])}const w=t(d,[["render",m],["__file","hybridMode.html.vue"]]),q=JSON.parse('{"path":"/middleware/authorize/identityserver4/mode/hybridMode.html","title":"混合模式","lang":"zh-CN","frontmatter":{"title":"混合模式","lang":"zh-CN","date":"2023-10-19T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"hungemoshi","slug":"gb0pp3","docsId":"75705741","description":"前言 在上一篇关于授权码模式中， 已经介绍了关于授权码的基本内容，认识到这是一个拥有更为安全的机制,但这个仍然存在局限，虽然在文中我们说到通过后端的方式去获取token,这种由web服务器和授权服务器直接通信，不需要经过用户的浏览器或者其他的地方，但是在这种模式中，授权码仍然是通过前端通道进行传递的，而且在访问资源的中，也会将访问令牌暴露给外界，就仍存...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/authorize/identityserver4/mode/hybridMode.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"混合模式"}],["meta",{"property":"og:description","content":"前言 在上一篇关于授权码模式中， 已经介绍了关于授权码的基本内容，认识到这是一个拥有更为安全的机制,但这个仍然存在局限，虽然在文中我们说到通过后端的方式去获取token,这种由web服务器和授权服务器直接通信，不需要经过用户的浏览器或者其他的地方，但是在这种模式中，授权码仍然是通过前端通道进行传递的，而且在访问资源的中，也会将访问令牌暴露给外界，就仍存..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1651398849140-1507e165-f8a2-4ccb-aea2-6d788f24cf0a.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-16T05:03:06.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-16T05:03:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"混合模式\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1651398849140-1507e165-f8a2-4ccb-aea2-6d788f24cf0a.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1651398875751-b8630de8-33d8-49c0-9330-160f79659577.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1651398898779-ec157d06-b32b-49fd-be09-c672ab45d1c8.png\\"],\\"datePublished\\":\\"2023-10-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-16T05:03:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"7. 混合模式","slug":"_7-混合模式","link":"#_7-混合模式","children":[{"level":3,"title":"7.1 实践","slug":"_7-1-实践","link":"#_7-1-实践","children":[{"level":4,"title":"7.1.1 搭建认证授权服务","slug":"_7-1-1-搭建认证授权服务","link":"#_7-1-1-搭建认证授权服务","children":[{"level":5,"title":"7.1.1.1 配置内容","slug":"_7-1-1-1-配置内容","link":"#_7-1-1-1-配置内容","children":[]},{"level":5,"title":"7.1.1.2 注册服务","slug":"_7-1-1-2-注册服务","link":"#_7-1-1-2-注册服务","children":[]},{"level":5,"title":"7.1.1.3 配置管道","slug":"_7-1-1-3-配置管道","link":"#_7-1-1-3-配置管道","children":[]}]},{"level":4,"title":"7.1.2 搭建API资源项目","slug":"_7-1-2-搭建api资源项目","link":"#_7-1-2-搭建api资源项目","children":[{"level":5,"title":"7.1.2.1 安装Nuget包","slug":"_7-1-2-1-安装nuget包","link":"#_7-1-2-1-安装nuget包","children":[]},{"level":5,"title":"7.1.2.2 注册服务","slug":"_7-1-2-2-注册服务","link":"#_7-1-2-2-注册服务","children":[]},{"level":5,"title":"7.1.2.3 配置管道","slug":"_7-1-2-3-配置管道","link":"#_7-1-2-3-配置管道","children":[]},{"level":5,"title":"7.1.2.4 API资源接口","slug":"_7-1-2-4-api资源接口","link":"#_7-1-2-4-api资源接口","children":[]}]},{"level":4,"title":"7.1.3 搭建MVC客户端","slug":"_7-1-3-搭建mvc客户端","link":"#_7-1-3-搭建mvc客户端","children":[{"level":5,"title":"7.1.3.1 安装Nuget包","slug":"_7-1-3-1-安装nuget包","link":"#_7-1-3-1-安装nuget包","children":[]},{"level":5,"title":"7.1.3.2 安装注册服务","slug":"_7-1-3-2-安装注册服务","link":"#_7-1-3-2-安装注册服务","children":[]},{"level":5,"title":"7.1.3.3 配置管道","slug":"_7-1-3-3-配置管道","link":"#_7-1-3-3-配置管道","children":[]},{"level":5,"title":"7.1.3.4 添加授权","slug":"_7-1-3-4-添加授权","link":"#_7-1-3-4-添加授权","children":[]},{"level":5,"title":"7.1.3.5 添加资源访问","slug":"_7-1-3-5-添加资源访问","link":"#_7-1-3-5-添加资源访问","children":[]}]}]},{"level":3,"title":"7.2 问题","slug":"_7-2-问题","link":"#_7-2-问题","children":[{"level":4,"title":"7.2.1 设置RequirePkce","slug":"_7-2-1-设置requirepkce","link":"#_7-2-1-设置requirepkce","children":[]},{"level":4,"title":"7.2.2 设置ResponseType","slug":"_7-2-2-设置responsetype","link":"#_7-2-2-设置responsetype","children":[]}]},{"level":3,"title":"7.3 总结","slug":"_7-3-总结","link":"#_7-3-总结","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1708059786000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":10.74,"words":3223},"filePathRelative":"middleware/authorize/identityserver4/mode/hybridMode.md","localizedDate":"2023年10月19日","excerpt":"<h2>前言</h2>\\n<p>在上一篇关于授权码模式中， 已经介绍了关于授权码的基本内容，认识到这是一个拥有更为安全的机制,但这个仍然存在局限，虽然在文中我们说到通过后端的方式去获取token,这种由web服务器和授权服务器直接通信，不需要经过用户的浏览器或者其他的地方，但是在这种模式中，授权码仍然是通过前端通道进行传递的，而且在访问资源的中，也会将访问令牌暴露给外界，就仍存在安全隐患。</p>\\n<p>在几篇关于授权模式篇章中，其中我们也使用了关于OpenID Connect的简化流程，在简化流程中，所有令牌（身份令牌、访问令牌）都通过浏览器传输，这对于<strong>身份令牌（IdentityToken）</strong>「来说是没有问题的，但是如果是」<strong>访问令牌（AccessToken</strong>）直接通过浏览器传输，就增加了一定的安全问题。因为访问令牌比身份令牌更敏感，在非必须的情况下，我们不希望将它们暴露给外界。\\n所以我们就会考虑增加安全性，在OpenID Connect 包含一个名为“Hybrid（混合）”的流程，它为我们提供了两全其美的优势，身份令牌通过浏览器传输，因此客户端可以在进行任何更多工作之前对其进行验证。如果验证成功，客户端会通过令牌服务的以获取访问令牌。</p>","autoDesc":true}');export{w as comp,q as data};
