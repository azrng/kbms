import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,a as n,d as o,e as c,b as l}from"./app-qB9_Bjjp.js";const i={},u=l(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// let&#39;s say there is a list of 1000+ URLs</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> urls <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;http://google.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://yahoo.com&quot;</span><span class="token punctuation">,</span> <span class="token range operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// now let&#39;s send HTTP requests to each of these URLs in parallel</span>
urls<span class="token punctuation">.</span><span class="token function">AsParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ForAll</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码有一个问题，当我开启了 1000+ 的并发请求，是否有一种简便的方式限制这些 异步http请求 并发量，比如说实现同一时刻不会超过 20 个下载，请问我该如何去实现？</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>限制并发更多指的是控制可以同时执行的线程数量，它是一种资源管理和优化策略。例如，在高并发场景下，如果不限制并发数，可能会导致系统资源耗尽（如CPU、内存、数据库连接等）。通过诸如线程池（ThreadPoolExecutor）等方式可以有效地控制并发级别，限制系统中活动线程的数量，从而避免过度竞争和资源浪费。虽然这并不是直接的线程同步，但它间接地影响了线程间的协作方式，有助于整体上提升系统的稳定性和响应速度。</p><h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案"><span>实现方案</span></a></h2><h3 id="semaphoreslim" tabindex="-1"><a class="header-anchor" href="#semaphoreslim"><span>SemaphoreSlim</span></a></h3><p>通过使用SemaphoreSlim来实现，扩展方法如下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token generic-method"><span class="token function">ForEachAsyncConcurrent</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IEnumerable<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> enumerable<span class="token punctuation">,</span> 
    <span class="token class-name">Func<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> Task<span class="token punctuation">&gt;</span></span> action<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> maxActionsToRunInParallel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxActionsToRunInParallel<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> semaphoreSlim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SemaphoreSlim</span><span class="token punctuation">(</span>maxActionsToRunInParallel<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> maxActionsToRunInParallel<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> tasksWithThrottler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Task<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> enumerable<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// Increment the number of currently running tasks and wait if they are more than limit.</span>
                <span class="token keyword">await</span> semaphoreSlim<span class="token punctuation">.</span><span class="token function">WaitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                tasksWithThrottler<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">await</span> <span class="token function">action</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ContinueWith</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span>
                    <span class="token punctuation">{</span>
                        <span class="token comment">// action is completed, so decrement the number of currently running tasks</span>
                        semaphoreSlim<span class="token punctuation">.</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Wait for all of the provided tasks to complete.</span>
            <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>tasksWithThrottler<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">WhenAll</span><span class="token punctuation">(</span>enumerable<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>item <span class="token operator">=&gt;</span> <span class="token function">action</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">await</span> enumerable<span class="token punctuation">.</span><span class="token function">ForEachAsyncConcurrent</span><span class="token punctuation">(</span>
    <span class="token keyword">async</span> item <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> <span class="token function">SomeAsyncMethod</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="asyncenumerator" tabindex="-1"><a class="header-anchor" href="#asyncenumerator"><span>AsyncEnumerator</span></a></h3><p>建议你使用 AsyncEnumerator NuGet Package ，参考地址：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AsyncEnumerator&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;4.0.2&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Linq</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Buffers</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Dasync<span class="token punctuation">.</span>Collections</span><span class="token punctuation">;</span>

<span class="token comment">// let&#39;s say there is a list of 1000+ URLs</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> urls <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;http://google.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://yahoo.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// now let&#39;s send HTTP requests to each of these URLs in parallel</span>
<span class="token keyword">await</span> urls<span class="token punctuation">.</span><span class="token function">ParallelForEachAsync</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> html <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token named-parameter punctuation">maxDegreeOfParallelism</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,17),r={href:"https://mp.weixin.qq.com/s/k6Tx9NnYJQLbqVvoNVgJ0w",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=t("ExternalLinkIcon");return e(),p("div",null,[u,n("p",null,[n("a",r,[o("https://mp.weixin.qq.com/s/k6Tx9NnYJQLbqVvoNVgJ0w"),c(s)])])])}const g=a(i,[["render",k],["__file","limitingConcurrency.html.vue"]]),y=JSON.parse(`{"path":"/dotnet/csharp/threadConcurrencyAndAsync/limitingConcurrency.html","title":"限制并发","lang":"zh-CN","frontmatter":{"title":"限制并发","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"xianzhibingfadeyibuioqingqiu","slug":"oggdqc","docsId":"61616046","description":"前言 这段代码有一个问题，当我开启了 1000+ 的并发请求，是否有一种简便的方式限制这些 异步http请求 并发量，比如说实现同一时刻不会超过 20 个下载，请问我该如何去实现？ 概述 限制并发更多指的是控制可以同时执行的线程数量，它是一种资源管理和优化策略。例如，在高并发场景下，如果不限制并发数，可能会导致系统资源耗尽（如CPU、内存、数据库连接等...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/threadConcurrencyAndAsync/limitingConcurrency.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"限制并发"}],["meta",{"property":"og:description","content":"前言 这段代码有一个问题，当我开启了 1000+ 的并发请求，是否有一种简便的方式限制这些 异步http请求 并发量，比如说实现同一时刻不会超过 20 个下载，请问我该如何去实现？ 概述 限制并发更多指的是控制可以同时执行的线程数量，它是一种资源管理和优化策略。例如，在高并发场景下，如果不限制并发数，可能会导致系统资源耗尽（如CPU、内存、数据库连接等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-25T07:23:18.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-25T07:23:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"限制并发\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-25T07:23:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"实现方案","slug":"实现方案","link":"#实现方案","children":[{"level":3,"title":"SemaphoreSlim","slug":"semaphoreslim","link":"#semaphoreslim","children":[]},{"level":3,"title":"AsyncEnumerator","slug":"asyncenumerator","link":"#asyncenumerator","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1711351398000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.75,"words":525},"filePathRelative":"dotnet/csharp/threadConcurrencyAndAsync/limitingConcurrency.md","localizedDate":"2023年10月22日","excerpt":"<h2>前言</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token comment\\">// let's say there is a list of 1000+ URLs</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> urls <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token string\\">\\"http://google.com\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"http://yahoo.com\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token range operator\\">..</span><span class=\\"token punctuation\\">.</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// now let's send HTTP requests to each of these URLs in parallel</span>\\nurls<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AsParallel</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ForAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> client <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">HttpClient</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> html <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> client<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetStringAsync</span><span class=\\"token punctuation\\">(</span>url<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{g as comp,y as data};
