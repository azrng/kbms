import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c,a as n,b as s,d as l,e as a}from"./app-vSdX8vi3.js";const i="/kbms/common/1626531299085-a2f02c7a-b29e-4616-8e1b-8cc1216c5260.png",u="/kbms/common/1626531347136-1c2a7353-8ad2-4475-91d2-3750bfa7c3a6.png",k="/kbms/common/1626537743642-13dbe621-1e63-419a-83de-e69187b42a9e.png",r={},d=a(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>枚举是一种特殊的值类型，可以在枚举类型中定义一组命令的数组常量。适合存储状态、类型等场景，比如性别、支付状态。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="常见操作" tabindex="-1"><a class="header-anchor" href="#常见操作"><span>常见操作</span></a></h3><p>c#枚举成员的类型模式是int类型，通过集成可以声明枚举成员为其它类型</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 枚举转字符串</span>
<span class="token class-name"><span class="token keyword">string</span></span> foo <span class="token operator">=</span> Days<span class="token punctuation">.</span>Saturday<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Saturday&quot;</span>
<span class="token class-name"><span class="token keyword">string</span></span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Saturday&quot;</span>

<span class="token comment">// 字符串转枚举</span>
Enum<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Days</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, bar = Days.Tuesday</span>
<span class="token punctuation">(</span>Days<span class="token punctuation">)</span>Enum<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Days.Tuesday</span>

<span class="token comment">// 枚举转数字</span>
<span class="token class-name"><span class="token keyword">byte</span></span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>Days<span class="token punctuation">.</span>Monday<span class="token punctuation">;</span> <span class="token comment">// 1</span>

<span class="token comment">// 数字转枚举</span>
<span class="token class-name">Days</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>Days<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Days.Tuesday</span>

<span class="token comment">// 获取枚举所属的数字类型</span>
<span class="token class-name">Type</span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetUnderlyingType</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// System.Byte</span>

<span class="token comment">// 获取所有的枚举成员</span>
<span class="token class-name">Array</span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyEnum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取所有枚举成员的字段名</span>
<span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> foo <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">GetNames</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Days</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),m={href:"https://mp.weixin.qq.com/s/5JLCO3mmz1zZcITtMNPnBw",target:"_blank",rel:"noopener noreferrer"},v=a(`<h3 id="基础定义" tabindex="-1"><a class="header-anchor" href="#基础定义"><span>基础定义</span></a></h3><p>默认情况下每个枚举都对应一个整数，如果不自定义，那么枚举成员自动从0开始进行常量赋值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
    None<span class="token punctuation">,</span>
    HuaWei<span class="token punctuation">,</span>
    XiaoMi<span class="token punctuation">,</span>
    YiJia<span class="token punctuation">,</span>
    MeiZu
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MobileTypeEnum</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;枚举信息： name:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">item</span><span class="token punctuation">}</span></span><span class="token string">  value:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>item</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="显式指定枚举值" tabindex="-1"><a class="header-anchor" href="#显式指定枚举值"><span>显式指定枚举值</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    HuaWei <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    XiaoMi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    YiJia <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    MeiZu <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="image.png" loading="lazy"> 如果指定某一个成员为指定值，那么在该成员后的值会在显式指定值的基础上递增。</p><h3 id="获取描述信息" tabindex="-1"><a class="header-anchor" href="#获取描述信息"><span>获取描述信息</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;未选择&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;华为&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    HuaWei <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;小米&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    XiaoMi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;一加&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    YiJia <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>

    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Description</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;魅族&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    MeiZu <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> myMobile <span class="token operator">=</span> MobileTypeEnum<span class="token punctuation">.</span>HuaWei<span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> description <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> fieldInfo <span class="token operator">=</span> myMobile<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>myMobile<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> infos <span class="token operator">=</span> fieldInfo<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DescriptionAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>infos<span class="token punctuation">.</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            description <span class="token operator">=</span> myMobile<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> des <span class="token operator">=</span> <span class="token punctuation">(</span>DescriptionAttribute<span class="token punctuation">)</span>infos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            description <span class="token operator">=</span> des<span class="token punctuation">.</span>Description<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//华为</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩展类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EnumExtensions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetDescription</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Enum</span> val<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> field <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token keyword">var</span></span> customAttribute <span class="token operator">=</span> Attribute<span class="token punctuation">.</span><span class="token function">GetCustomAttribute</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">DescriptionAttribute</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>customAttribute <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>DescriptionAttribute<span class="token punctuation">)</span>customAttribute<span class="token punctuation">)</span><span class="token punctuation">.</span>Description<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="替代默认类型" tabindex="-1"><a class="header-anchor" href="#替代默认类型"><span>替代默认类型</span></a></h3><p>C#枚举成员的类型默认是 int 类型，通过继承可以声明枚举成员指定其他整数类型代替默认类型，例如：byte、sbyte、short、ushort、int、uint、long、ulong</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">long</span></span>
<span class="token punctuation">{</span>
    None<span class="token punctuation">,</span>HuaWei<span class="token punctuation">,</span>XiaoMi<span class="token punctuation">,</span>YiJia<span class="token punctuation">,</span>MeiZu
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">byte</span></span>
<span class="token punctuation">{</span>
    None<span class="token punctuation">,</span>HuaWei<span class="token punctuation">,</span>XiaoMi<span class="token punctuation">,</span>YiJia<span class="token punctuation">,</span>MeiZu
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举类型转换" tabindex="-1"><a class="header-anchor" href="#枚举类型转换"><span>枚举类型转换</span></a></h3><p>枚举的实例可以和相对应的整数类型相互显式转换</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    HuaWei <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    XiaoMi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    YiJia <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    MeiZu <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>

<span class="token class-name"><span class="token keyword">var</span></span> mobile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>HuaWei<span class="token punctuation">;</span><span class="token comment">// 1</span>
<span class="token class-name"><span class="token keyword">var</span></span> mobileType <span class="token operator">=</span> <span class="token punctuation">(</span>MobileTypeEnum<span class="token punctuation">)</span>mobile<span class="token punctuation">;</span><span class="token comment">// HuaWei</span>

<span class="token class-name"><span class="token keyword">var</span></span> mobileType2 <span class="token operator">=</span> <span class="token punctuation">(</span>MobileTypeEnum<span class="token punctuation">)</span><span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">// 1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以将一个枚举类型转换为另一个(通过对应的数值进行转换).</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    HuaWei <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    XiaoMi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    YiJia <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    MeiZu <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ChatAppEnum</span>
<span class="token punctuation">{</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    WeChat <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    QQ <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    FeiXin <span class="token operator">=</span> <span class="token number">4</span>
<span class="token punctuation">}</span>


<span class="token class-name"><span class="token keyword">var</span></span> mobile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>HuaWei<span class="token punctuation">;</span><span class="token comment">// 1</span>
<span class="token class-name">ChatAppEnum</span> chat <span class="token operator">=</span> <span class="token punctuation">(</span>ChatAppEnum<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>mobile<span class="token punctuation">;</span><span class="token comment">// WeChat</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="枚举特殊值" tabindex="-1"><a class="header-anchor" href="#枚举特殊值"><span>枚举特殊值</span></a></h3><p>0在枚举中是一个特殊的值，它经常作为作为第一个枚举成员的默认值，表示枚举的默认值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name">MobileTypeEnum</span> defaultValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="标志枚举类型" tabindex="-1"><a class="header-anchor" href="#标志枚举类型"><span>标志枚举类型</span></a></h3><p>枚举成员之间可以进行合并，合并的枚举类型成员需要显示指定值(不是必须，不过为了避免混淆)</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    HuaWei <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    XiaoMi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    YiJia <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    MeiZu <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景：在选择手机页面选择你使用过的手机型号，这个时候是多选的操作，存储数据库的时候一个字段存不了，这时候我们可以存储枚举的位运算，而不需要单独建表，下面我们就展示选择huawei、yijia两个枚举值，并且在复显的时候选中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
	None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
	HuaWei <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
	XiaoMi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
	YiJia <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
	MeiZu <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 选中的手机型号</span>
	<span class="token class-name"><span class="token keyword">var</span></span> myMobile <span class="token operator">=</span> MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> MobileTypeEnum<span class="token punctuation">.</span>YiJia<span class="token punctuation">;</span><span class="token comment">// HuaWei| YiJia</span>
	<span class="token comment">// 选择多个手机牌子</span>
	<span class="token class-name"><span class="token keyword">var</span></span> myTest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>XiaoMi<span class="token punctuation">;</span><span class="token comment">// 3</span>
	<span class="token comment">// 是否包含</span>
	<span class="token class-name"><span class="token keyword">var</span></span> exist <span class="token operator">=</span> myMobile<span class="token punctuation">.</span><span class="token function">HasFlag</span><span class="token punctuation">(</span>MobileTypeEnum<span class="token punctuation">.</span>HuaWei<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true </span>
	<span class="token comment">// 选中的则显示对应枚举值</span>
	<span class="token class-name"><span class="token keyword">var</span></span> isSelected <span class="token operator">=</span> MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">&amp;</span> myMoblie<span class="token punctuation">;</span><span class="token comment">// HuaWei</span>
	<span class="token comment">// 未选中则显示默认值</span>
	<span class="token class-name"><span class="token keyword">var</span></span> isSelected2 <span class="token operator">=</span> MobileTypeEnum<span class="token punctuation">.</span>XiaoMi <span class="token operator">&amp;</span> myMoblie<span class="token punctuation">;</span><span class="token comment">// None</span>
 	<span class="token comment">// 将值转字符串</span>
	<span class="token class-name"><span class="token keyword">var</span></span> myMobileName <span class="token operator">=</span> myMobile<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HuaWei, YiJia</span>

	<span class="token class-name"><span class="token keyword">var</span></span> show <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MobileTypeEnum</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		show<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>item <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>myMobile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	show <span class="token operator">=</span> show<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1  4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果一个枚举成员多次逻辑或(|)另一个枚举值，那么只会生效一次</p></blockquote><p>数据库中查询包含某一个手机的数据</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 查询选择HuaWei手机的数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> mymobile <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">-- 查询选择话HuaWei和MeiZu手机的数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> mymobile <span class="token operator">&amp;</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面介绍了 | 和 &amp;，还有两个感觉应该也常用，那就是 |= 和 ^=</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 选中的手机型号 HuaWei| YiJia</span>
<span class="token class-name"><span class="token keyword">var</span></span> myMoblie <span class="token operator">=</span> MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> MobileTypeEnum<span class="token punctuation">.</span>YiJia<span class="token punctuation">;</span>
<span class="token comment">// HuaWei, YiJia</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myMoblie<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// myMoblie = myMoblie | MobileTypeEnum.XiaoMi;  在原来的位运算基础上增加选项 </span>
myMoblie <span class="token operator">|=</span> MobileTypeEnum<span class="token punctuation">.</span>XiaoMi<span class="token punctuation">;</span>
<span class="token comment">// HuaWei, XiaoMi, YiJia</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myMoblie<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// myMoblie = myMoblie ^ MobileTypeEnum.YiJia;  在原来的位运算基础上去除选项</span>
myMoblie <span class="token operator">^=</span> MobileTypeEnum<span class="token punctuation">.</span>YiJia<span class="token punctuation">;</span> 
<span class="token comment">// HuaWei, XiaoMi</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>myMoblie<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//如果将0去 ^ 会出现问题</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于是否需要在枚举上加flags特性，其实不加也可以使用位运算等合并，那么加的意义是什么？来将上面MobileTypeEnum枚举特性去掉</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MobileTypeEnum</span>
<span class="token punctuation">{</span>
    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    HuaWei <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    XiaoMi <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    YiJia <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    MeiZu <span class="token operator">=</span> <span class="token number">8</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行看输出结果一下</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token number">5</span>
<span class="token number">7</span>
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说如果不加flags特性，那么在调用ToString方法时候，会输出一个数值而不是一组名称。</p><h3 id="枚举运算法" tabindex="-1"><a class="header-anchor" href="#枚举运算法"><span>枚举运算法</span></a></h3><p>枚举可用的运算符有<br><img src="`+k+`" alt="image.png" loading="lazy"><br> 枚举类型可以和整数类型之间做加法，但是两个枚举类型之间不能做加法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> aa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>XiaoMi<span class="token punctuation">;</span><span class="token comment">// 3</span>
<span class="token class-name"><span class="token keyword">var</span></span> ee <span class="token operator">=</span> aa <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>XiaoMi<span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token class-name"><span class="token keyword">var</span></span> bb <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>XiaoMi<span class="token punctuation">;</span><span class="token comment">// 2</span>
<span class="token class-name"><span class="token keyword">var</span></span> cc <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>MobileTypeEnum<span class="token punctuation">.</span>XiaoMi<span class="token punctuation">;</span><span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型安全性" tabindex="-1"><a class="header-anchor" href="#类型安全性"><span>类型安全性</span></a></h3><p>因为枚举和整数类型可以相互转换，因此枚举的真实值可能超过枚举类型成员的数值范围，会产生非法值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> myMoblie <span class="token operator">=</span> <span class="token punctuation">(</span>MobileTypeEnum<span class="token punctuation">)</span><span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">// 1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在有些时候该情况可能会导致系统出现异常，那么如果判断枚举的值是否是成员定义的范围内? 使用IsDefined判断给定的数值或者名称是否在指定枚举中，不过位运算值不起作用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> myMoblie <span class="token operator">=</span> <span class="token punctuation">(</span>MobileTypeEnum<span class="token punctuation">)</span><span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">// 1024</span>
<span class="token class-name"><span class="token keyword">var</span></span> verify1 <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MobileTypeEnum</span><span class="token punctuation">)</span><span class="token punctuation">,</span> myMoblie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>

<span class="token class-name"><span class="token keyword">var</span></span> verify2 <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MobileTypeEnum</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MobileTypeEnum<span class="token punctuation">.</span>YiJia<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>

<span class="token class-name"><span class="token keyword">var</span></span> verify3 <span class="token operator">=</span> Enum<span class="token punctuation">.</span><span class="token function">IsDefined</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MobileTypeEnum</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> MobileTypeEnum<span class="token punctuation">.</span>MeiZu<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用ToString方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> myMobile2 <span class="token operator">=</span> MobileTypeEnum<span class="token punctuation">.</span>HuaWei <span class="token operator">|</span> MobileTypeEnum<span class="token punctuation">.</span>MeiZu<span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> verify4 <span class="token operator">=</span> <span class="token function">IsFlagDefined</span><span class="token punctuation">(</span>myMobile2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsFlagDefined</span><span class="token punctuation">(</span><span class="token class-name">Enum</span> e<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">decimal</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47);function b(y,g){const p=t("ExternalLinkIcon");return o(),c("div",null,[d,n("blockquote",null,[n("p",null,[s("来自："),n("a",m,[s("https://mp.weixin.qq.com/s/5JLCO3mmz1zZcITtMNPnBw"),l(p)])])]),v])}const f=e(r,[["render",b],["__file","meiju.html.vue"]]),M=JSON.parse('{"path":"/dotnet/csharp/duixiangheleixing/meiju.html","title":"枚举","lang":"zh-CN","frontmatter":{"title":"枚举","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["enum"],"filename":"meiju","slug":"dyza2c","docsId":"49182360","description":"概述 枚举是一种特殊的值类型，可以在枚举类型中定义一组命令的数组常量。适合存储状态、类型等场景，比如性别、支付状态。 操作 常见操作 c#枚举成员的类型模式是int类型，通过集成可以声明枚举成员为其它类型 来自：https://mp.weixin.qq.com/s/5JLCO3mmz1zZcITtMNPnBw 基础定义 默认情况下每个枚举都对应一个整数...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/duixiangheleixing/meiju.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"枚举"}],["meta",{"property":"og:description","content":"概述 枚举是一种特殊的值类型，可以在枚举类型中定义一组命令的数组常量。适合存储状态、类型等场景，比如性别、支付状态。 操作 常见操作 c#枚举成员的类型模式是int类型，通过集成可以声明枚举成员为其它类型 来自：https://mp.weixin.qq.com/s/5JLCO3mmz1zZcITtMNPnBw 基础定义 默认情况下每个枚举都对应一个整数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1626531299085-a2f02c7a-b29e-4616-8e1b-8cc1216c5260.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-19T14:27:41.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"enum"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-19T14:27:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"枚举\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1626531299085-a2f02c7a-b29e-4616-8e1b-8cc1216c5260.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1626531347136-1c2a7353-8ad2-4475-91d2-3750bfa7c3a6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1626537743642-13dbe621-1e63-419a-83de-e69187b42a9e.png\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-19T14:27:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"常见操作","slug":"常见操作","link":"#常见操作","children":[]},{"level":3,"title":"基础定义","slug":"基础定义","link":"#基础定义","children":[]},{"level":3,"title":"显式指定枚举值","slug":"显式指定枚举值","link":"#显式指定枚举值","children":[]},{"level":3,"title":"获取描述信息","slug":"获取描述信息","link":"#获取描述信息","children":[]},{"level":3,"title":"替代默认类型","slug":"替代默认类型","link":"#替代默认类型","children":[]},{"level":3,"title":"枚举类型转换","slug":"枚举类型转换","link":"#枚举类型转换","children":[]},{"level":3,"title":"枚举特殊值","slug":"枚举特殊值","link":"#枚举特殊值","children":[]},{"level":3,"title":"标志枚举类型","slug":"标志枚举类型","link":"#标志枚举类型","children":[]},{"level":3,"title":"枚举运算法","slug":"枚举运算法","link":"#枚举运算法","children":[]},{"level":3,"title":"类型安全性","slug":"类型安全性","link":"#类型安全性","children":[]}]}],"git":{"createdTime":1700232644000,"updatedTime":1713536861000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":2}]},"readingTime":{"minutes":5.36,"words":1608},"filePathRelative":"dotnet/csharp/duixiangheleixing/meiju.md","localizedDate":"2023年10月22日","excerpt":"<h2>概述</h2>\\n<p>枚举是一种特殊的值类型，可以在枚举类型中定义一组命令的数组常量。适合存储状态、类型等场景，比如性别、支付状态。</p>\\n<h2>操作</h2>\\n<h3>常见操作</h3>\\n<p>c#枚举成员的类型模式是int类型，通过集成可以声明枚举成员为其它类型</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token comment\\">// 枚举转字符串</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> foo <span class=\\"token operator\\">=</span> Days<span class=\\"token punctuation\\">.</span>Saturday<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// \\"Saturday\\"</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span></span> foo <span class=\\"token operator\\">=</span> Enum<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetName</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">Days</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// \\"Saturday\\"</span>\\n\\n<span class=\\"token comment\\">// 字符串转枚举</span>\\nEnum<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TryParse</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Tuesday\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">out</span> <span class=\\"token class-name\\">Days</span> bar<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// true, bar = Days.Tuesday</span>\\n<span class=\\"token punctuation\\">(</span>Days<span class=\\"token punctuation\\">)</span>Enum<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Parse</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">Days</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"Tuesday\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Days.Tuesday</span>\\n\\n<span class=\\"token comment\\">// 枚举转数字</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">byte</span></span> foo <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">byte</span><span class=\\"token punctuation\\">)</span>Days<span class=\\"token punctuation\\">.</span>Monday<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 1</span>\\n\\n<span class=\\"token comment\\">// 数字转枚举</span>\\n<span class=\\"token class-name\\">Days</span> foo <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Days<span class=\\"token punctuation\\">)</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Days.Tuesday</span>\\n\\n<span class=\\"token comment\\">// 获取枚举所属的数字类型</span>\\n<span class=\\"token class-name\\">Type</span> foo <span class=\\"token operator\\">=</span> Enum<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetUnderlyingType</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">Days</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// System.Byte</span>\\n\\n<span class=\\"token comment\\">// 获取所有的枚举成员</span>\\n<span class=\\"token class-name\\">Array</span> foo <span class=\\"token operator\\">=</span> Enum<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetValues</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">MyEnum</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 获取所有枚举成员的字段名</span>\\n<span class=\\"token class-name\\"><span class=\\"token keyword\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span></span> foo <span class=\\"token operator\\">=</span> Enum<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetNames</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">Days</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{f as comp,M as data};
