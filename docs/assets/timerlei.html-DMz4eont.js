import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,d as e}from"./app-Bfb6-vFH.js";const t={},p=e(`<h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h2><p>Timer是.NET内置的定时器类，它位于命名空间System.Timers下。Timer是一个基于服务器端的计时器，提供了Interval属性来设置重复触发定时任务的间隔(单位为毫秒)，触发事件则由Elapsed事件来指定。另外，还可以通过AutoReset属性来设置Timer的Elapsed事件只触发一次或者重复触发。 文档地址：https://docs.microsoft.com/en-us/dotnet/api/system.timers.timer?view=net-6.0</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="ihostedservice中使用" tabindex="-1"><a class="header-anchor" href="#ihostedservice中使用"><span>IHostedService中使用</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHostedService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IHostedService</span><span class="token punctuation">,</span> <span class="token class-name">IDisposable</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Timer<span class="token punctuation">?</span></span> _timer<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Timer</span><span class="token punctuation">(</span>DoWork<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span><span class="token punctuation">?</span></span> state<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now</span><span class="token format-string"><span class="token punctuation">:</span>yyyy-MM-dd HH:mm:ss</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">StopAsync</span><span class="token punctuation">(</span><span class="token class-name">CancellationToken</span> cancellationToken<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;StopAsync&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        _timer<span class="token punctuation">?.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),i=[p];function o(c,l){return s(),a("div",null,i)}const d=n(t,[["render",o],["__file","timerlei.html.vue"]]),m=JSON.parse('{"path":"/middleware/renwudiaodu/timerlei.html","title":"Timer类","lang":"zh-CN","frontmatter":{"title":"Timer类","lang":"zh-CN","date":"2023-10-18T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"timerlei","slug":"oi7itb","docsId":"71200502","description":"说明 Timer是.NET内置的定时器类，它位于命名空间System.Timers下。Timer是一个基于服务器端的计时器，提供了Interval属性来设置重复触发定时任务的间隔(单位为毫秒)，触发事件则由Elapsed事件来指定。另外，还可以通过AutoReset属性来设置Timer的Elapsed事件只触发一次或者重复触发。 文档地址：https:...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/renwudiaodu/timerlei.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"Timer类"}],["meta",{"property":"og:description","content":"说明 Timer是.NET内置的定时器类，它位于命名空间System.Timers下。Timer是一个基于服务器端的计时器，提供了Interval属性来设置重复触发定时任务的间隔(单位为毫秒)，触发事件则由Elapsed事件来指定。另外，还可以通过AutoReset属性来设置Timer的Elapsed事件只触发一次或者重复触发。 文档地址：https:..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Timer类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"IHostedService中使用","slug":"ihostedservice中使用","link":"#ihostedservice中使用","children":[]}]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.65,"words":194},"filePathRelative":"middleware/renwudiaodu/timerlei.md","localizedDate":"2023年10月18日","excerpt":"<h2>说明</h2>\\n<p>Timer是.NET内置的定时器类，它位于命名空间System.Timers下。Timer是一个基于服务器端的计时器，提供了Interval属性来设置重复触发定时任务的间隔(单位为毫秒)，触发事件则由Elapsed事件来指定。另外，还可以通过AutoReset属性来设置Timer的Elapsed事件只触发一次或者重复触发。\\n文档地址：https://docs.microsoft.com/en-us/dotnet/api/system.timers.timer?view=net-6.0</p>\\n<h2>操作</h2>\\n<h3>IHostedService中使用</h3>","autoDesc":true}');export{d as comp,m as data};
