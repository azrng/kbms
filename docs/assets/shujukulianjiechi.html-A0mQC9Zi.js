import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,a as n,d as s,e as c,b as l}from"./app-DMmdIwn0.js";const i={},u=l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><h5 id="_1-net数据库连接池的背景" tabindex="-1"><a class="header-anchor" href="#_1-net数据库连接池的背景"><span>1. .NET数据库连接池的背景</span></a></h5><p>数据库连接是一个耗时的行为，大多数应用程序只使用1到几种数据库连接，为了最小化打开连接的成本，ado.net使用了一种称为连接池的优化技术。</p><h5 id="_2-net-数据库连接池的表现" tabindex="-1"><a class="header-anchor" href="#_2-net-数据库连接池的表现"><span>2. .NET 数据库连接池的表现</span></a></h5><p>数据库连接池减少了必须打开新连接的次数，池程序维护了数据库物理连接。 通过为每个特定的连接配置保持一组活动的连接对象来管理连接。 每当应用程序尝试Open连接，池程序就会在池中找到可用的连接，如果有则返回给调用者； 应用程序Close连接对象时，池程序将连接对象返回到池中(Sleep), 这个连接可以在下一次Open调用中重用。 看黑板，下面是这次的重点：</p><h5 id="_3-net是如何形成数据库连接池的" tabindex="-1"><a class="header-anchor" href="#_3-net是如何形成数据库连接池的"><span>3. .NET是如何形成数据库连接池的?</span></a></h5><p>只有相同的连接配置才能被池化，.NET为不同的配置维护了不同的连接池。 相同的配置限制为： 进程相同、 连接字符串相同、 连接字符串关键key顺序相同。 (连接字符串提供的关键字顺序不同也将被分到不同的池)。 连接池中的可用连接的数量由连接字符串Max Pool Size决定。 在一个应用程序中，有如下代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>  
  <span class="token string">&quot;Integrated Security=SSPI;Initial Catalog=Northwind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Pool A is created.  </span>
    <span class="token punctuation">}</span>  
  
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>  
  <span class="token string">&quot;Integrated Security=SSPI;Initial Catalog=pubs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Pool B is created because the connection strings differ.  </span>
    <span class="token punctuation">}</span>  
  
<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name">SqlConnection</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span>  
  <span class="token string">&quot;Integrated Security=SSPI;Initial Catalog=Northwind&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        connection<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// The connection string matches pool A.  </span>
    <span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面创建了三个Connection对象，但是只形成了两个数据库连接池。 还是以上代码，如果有两个相同的应用程序，理论上就形成了四个数据库连接池。</p><h5 id="_4-连接池中的连接什么时候被移除" tabindex="-1"><a class="header-anchor" href="#_4-连接池中的连接什么时候被移除"><span>4. 连接池中的连接什么时候被移除？</span></a></h5><p>连接池中的连接空闲4-8 分钟，池程序会移除这个连接。 应用程序下线，连接池直接被清空。</p><h2 id="主动清空连接池" tabindex="-1"><a class="header-anchor" href="#主动清空连接池"><span>主动清空连接池</span></a></h2><p>目的：切换数据库连接配置的时候，清空原连接池。 .NET提供了 ClearAllPools、ClearPool静态方法用于清空连接池。 • ClearAllPools：清空与这个DBProvider相关的所有连接池 • ClearPool(DBConnection conn) 清空与这个连接对象相关的连接池 很明显，我们这次要使用ClearPool(DBConnection conn) 方法。</p><p>压测/queryapi 产生一个包含大量连接对象的连接池； 适当的时候，调用/clearpoolapi清空连接池。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySqlController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Controller</span></span>
    <span class="token punctuation">{</span>
        <span class="token comment">// GET: MySql</span>
        <span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">&quot;query&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> <span class="token string">&quot;User ID=teinfra_neo_netreplay;Password=123456;DataBase=teinfra_neo_netreplay;Server=10.100.41.196;Port=3980;Min Pool Size=1;Max Pool Size=28;CharSet=utf8;&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> comm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                comm<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select count(*) from usertest;&quot;</span><span class="token punctuation">;</span>
                conn<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> ret <span class="token operator">=</span> comm<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                comm<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select count(*) from information_schema.PROCESSLIST WHERE HOST like  &#39;10.22.12.245%&#39;;&quot;</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> len <span class="token operator">=</span> comm<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;查询结果:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">ret</span><span class="token punctuation">}</span></span><span class="token string"> ,顺便查一下当前连接池的连接对象个数: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">len</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Route</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;clearpool&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> s <span class="token operator">=</span> <span class="token string">&quot;User ID=teinfra_neo_netreplay;Password=123456;DataBase=teinfra_neo_netreplay;Server=10.100.41.196;Port=3980;Min Pool Size=1;Max Pool Size=28;CharSet=utf8;&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                conn<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                MySqlConnection<span class="token punctuation">.</span><span class="token function">ClearPool</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MySqlConnection</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                conn<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> comm <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">CreateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                comm<span class="token punctuation">.</span>CommandText <span class="token operator">=</span> <span class="token string">&quot;select count(*) from information_schema.PROCESSLIST WHERE HOST like  &#39;10.22.12.245%&#39;;&quot;</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> len <span class="token operator">=</span> comm<span class="token punctuation">.</span><span class="token function">ExecuteScalar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token interpolation-string"><span class="token string">$&quot;之前已经清空连接池， 此次查询连接池有 </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">v1</span><span class="token punctuation">}</span></span><span class="token string">  个连接对象&quot;</span></span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mysql的连接数查询命令： (host是web服务器IP)：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>PROCESSLIST WHERE HOST like &#39;<span class="token number">10.22</span><span class="token number">.12</span><span class="token number">.245</span><span class="token operator">%</span>&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用/clearpoolapi，清空连接池</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,19),r={href:"https://mp.weixin.qq.com/s/nmbZcBzfxz4haa4aunPPTQ",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=e("ExternalLinkIcon");return o(),p("div",null,[u,n("p",null,[n("a",r,[s("https://mp.weixin.qq.com/s/nmbZcBzfxz4haa4aunPPTQ"),c(a)]),s(" | 如何主动清空.NET数据库连接池？ sql连接池(ado.net): https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-connection-pooling")])])}const b=t(i,[["render",k],["__file","shujukulianjiechi.html.vue"]]),g=JSON.parse('{"path":"/dataBase/gongyoubufen/shujukulianjiechi.html","title":"数据库连接池","lang":"zh-CN","frontmatter":{"title":"数据库连接池","lang":"zh-CN","date":"2023-09-23T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dataBase"],"tag":["无"],"filename":"shujukulianjiechi","slug":"fcmb37","docsId":"65198746","description":"概述 1. .NET数据库连接池的背景 数据库连接是一个耗时的行为，大多数应用程序只使用1到几种数据库连接，为了最小化打开连接的成本，ado.net使用了一种称为连接池的优化技术。 2. .NET 数据库连接池的表现 数据库连接池减少了必须打开新连接的次数，池程序维护了数据库物理连接。 通过为每个特定的连接配置保持一组活动的连接对象来管理连接。 每当应...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dataBase/gongyoubufen/shujukulianjiechi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"数据库连接池"}],["meta",{"property":"og:description","content":"概述 1. .NET数据库连接池的背景 数据库连接是一个耗时的行为，大多数应用程序只使用1到几种数据库连接，为了最小化打开连接的成本，ado.net使用了一种称为连接池的优化技术。 2. .NET 数据库连接池的表现 数据库连接池减少了必须打开新连接的次数，池程序维护了数据库物理连接。 通过为每个特定的连接配置保持一组活动的连接对象来管理连接。 每当应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-23T15:53:24.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-23T15:53:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库连接池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-23T15:53:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[{"level":5,"title":"1. .NET数据库连接池的背景","slug":"_1-net数据库连接池的背景","link":"#_1-net数据库连接池的背景","children":[]},{"level":5,"title":"2. .NET 数据库连接池的表现","slug":"_2-net-数据库连接池的表现","link":"#_2-net-数据库连接池的表现","children":[]},{"level":5,"title":"3. .NET是如何形成数据库连接池的?","slug":"_3-net是如何形成数据库连接池的","link":"#_3-net是如何形成数据库连接池的","children":[]},{"level":5,"title":"4. 连接池中的连接什么时候被移除？","slug":"_4-连接池中的连接什么时候被移除","link":"#_4-连接池中的连接什么时候被移除","children":[]}]},{"level":2,"title":"主动清空连接池","slug":"主动清空连接池","link":"#主动清空连接池","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1695484404000,"updatedTime":1695484404000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.08,"words":923},"filePathRelative":"dataBase/gongyoubufen/shujukulianjiechi.md","localizedDate":"2023年9月23日","excerpt":"<h2>概述</h2>\\n<h5>1. .NET数据库连接池的背景</h5>\\n<p>数据库连接是一个耗时的行为，大多数应用程序只使用1到几种数据库连接，为了最小化打开连接的成本，ado.net使用了一种称为连接池的优化技术。</p>\\n<h5>2. .NET 数据库连接池的表现</h5>\\n<p>数据库连接池减少了必须打开新连接的次数，池程序维护了数据库物理连接。\\n通过为每个特定的连接配置保持一组活动的连接对象来管理连接。\\n每当应用程序尝试Open连接，池程序就会在池中找到可用的连接，如果有则返回给调用者；\\n应用程序Close连接对象时，池程序将连接对象返回到池中(Sleep), 这个连接可以在下一次Open调用中重用。\\n看黑板，下面是这次的重点：</p>","autoDesc":true}');export{b as comp,g as data};
