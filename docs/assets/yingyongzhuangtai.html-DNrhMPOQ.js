import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,d as t}from"./app-Bfb6-vFH.js";const e={},p=t(`<h3 id="健康检查" tabindex="-1"><a class="header-anchor" href="#健康检查"><span>健康检查</span></a></h3><p>新增一个Health控制器，里面包含一个check方法，通过不间断调用该方法来判断程序运行是否正常。</p><h3 id="状态和统计" tabindex="-1"><a class="header-anchor" href="#状态和统计"><span>状态和统计</span></a></h3><h4 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法"><span>操作方法</span></a></h4><p>新增类继承IDashboardAuthorizationFilter类，实现Authorize 方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenVerification</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDashboardAuthorizationFilter</span></span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Authorize</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span><span class="token string">&quot;Token&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span><span class="token string">&quot;Token&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自定义返回路径和添加身份认证，在startup类的Configure方法中添加如下配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseCLRStatsDashboard</span><span class="token punctuation">(</span><span class="token string">&quot;/custom-link&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DashboardOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">IDashboardAuthorizationFilter<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenVerification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动项目通过访问站点/custom-link路径，并且请求头里面需要携带token参数，值为test，才能访问成功 使用windows系统下的curl工具进行测试，命令如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>curl <span class="token string">&quot;http://localhost:4409/custom-link&quot;</span> <span class="token operator">--</span>header <span class="token string">&quot;Token: test&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：需要安装包 CLRStats</p></blockquote><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package CLRStats <span class="token operator">-</span>Version <span class="token number">1.0</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","yingyongzhuangtai.html.vue"]]),k=JSON.parse('{"path":"/dotnet/base/jiankangjiancha/yingyongzhuangtai.html","title":"应用状态","lang":"zh-CN","frontmatter":{"title":"应用状态","lang":"zh-CN","date":"2022-04-23T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"yingyongzhuangtai","slug":"dm1t2k","docsId":"30904393","description":"健康检查 新增一个Health控制器，里面包含一个check方法，通过不间断调用该方法来判断程序运行是否正常。 状态和统计 操作方法 新增类继承IDashboardAuthorizationFilter类，实现Authorize 方法 自定义返回路径和添加身份认证，在startup类的Configure方法中添加如下配置 启动项目通过访问站点/cust...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/jiankangjiancha/yingyongzhuangtai.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"应用状态"}],["meta",{"property":"og:description","content":"健康检查 新增一个Health控制器，里面包含一个check方法，通过不间断调用该方法来判断程序运行是否正常。 状态和统计 操作方法 新增类继承IDashboardAuthorizationFilter类，实现Authorize 方法 自定义返回路径和添加身份认证，在startup类的Configure方法中添加如下配置 启动项目通过访问站点/cust..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"应用状态\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":3,"title":"健康检查","slug":"健康检查","link":"#健康检查","children":[]},{"level":3,"title":"状态和统计","slug":"状态和统计","link":"#状态和统计","children":[{"level":4,"title":"操作方法","slug":"操作方法","link":"#操作方法","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":0.76,"words":229},"filePathRelative":"dotnet/base/jiankangjiancha/yingyongzhuangtai.md","localizedDate":"2022年4月23日","excerpt":"<h3>健康检查</h3>\\n<p>新增一个Health控制器，里面包含一个check方法，通过不间断调用该方法来判断程序运行是否正常。</p>\\n<h3>状态和统计</h3>\\n<h4>操作方法</h4>\\n<p>新增类继承IDashboardAuthorizationFilter类，实现Authorize&nbsp;方法</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TokenVerification</span> <span class=\\"token punctuation\\">:</span> <span class=\\"token type-list\\"><span class=\\"token class-name\\">IDashboardAuthorizationFilter</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">bool</span></span> <span class=\\"token function\\">Authorize</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">HttpRequest</span> request<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>request<span class=\\"token punctuation\\">.</span>Headers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ContainsKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Token\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> request<span class=\\"token punctuation\\">.</span>Headers<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"Token\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Equals</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"test\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
