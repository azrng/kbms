import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,b as s,e as n,f as t,d as e}from"./app-Bfb6-vFH.js";const i={},u=e(`<blockquote><p>最后更新时间：2022年5月30日</p></blockquote><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>下载量：3.22M</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="aspectcore-core搭配polly" tabindex="-1"><a class="header-anchor" href="#aspectcore-core搭配polly"><span>AspectCore.Core搭配Polly</span></a></h3><p>虽然我们完成了简单的重试、服务降级、熔断等功能。但是显然对于每个方法都去使用 Polly 编写一堆策略的话实在是太麻烦了。那么有什么办法能改进一下 Polly 的使用体验吗？答案是使用 AOP 的思想，通过在执行的方法上打上 Attribute 的方式来指定 Polly 的策略。 下面我们使用 lemon 大佬的 AspectCore AOP 组件结合 Polly 来演示下如何通过 AOP 的思想来处理重试、降级、熔断等策略。 通过 nuget 安装 AspectCore 核心类库。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package AspectCore<span class="token punctuation">.</span>Core
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后继续操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PollyHandleAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">AbstractInterceptorAttribute</span></span>
<span class="token punctuation">{</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 重试次数</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> RetryTimes <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> 

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 是否熔断</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsCircuitBreaker <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 熔断前的异常次数</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> ExceptionsAllowedBeforeBreaking <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 熔断时间</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> SecondsOfBreak <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 降级方法</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FallbackMethod <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token doc-comment comment">/// 一些方法级别统一计数的策略，比如熔断</span>
	<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
	<span class="token keyword">static</span> <span class="token class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AsyncCircuitBreakerPolicy<span class="token punctuation">&gt;</span></span> policyCaches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ConcurrentDictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> AsyncCircuitBreakerPolicy<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token function">PollyHandleAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>

	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token class-name">AspectContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AspectDelegate</span> next<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">Context</span> pollyCtx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pollyCtx<span class="token punctuation">[</span><span class="token string">&quot;aspectContext&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">;</span>

		<span class="token class-name">Polly<span class="token punctuation">.</span>Wrap<span class="token punctuation">.</span>AsyncPolicyWrap</span> policyWarp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

		<span class="token class-name"><span class="token keyword">var</span></span> retry <span class="token operator">=</span> Policy<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpRequestException<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RetryAsync</span><span class="token punctuation">(</span>RetryTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name"><span class="token keyword">var</span></span> fallback <span class="token operator">=</span> Policy<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FallbackAsync</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>fallbackContent<span class="token punctuation">,</span> token<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
		<span class="token punctuation">{</span>
			<span class="token class-name">AspectContext</span> aspectContext <span class="token operator">=</span> <span class="token punctuation">(</span>AspectContext<span class="token punctuation">)</span>fallbackContent<span class="token punctuation">[</span><span class="token string">&quot;aspectContext&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token class-name"><span class="token keyword">var</span></span> fallBackMethod <span class="token operator">=</span> context<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">.</span>DeclaringType<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>FallbackMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name"><span class="token keyword">var</span></span> fallBackResult <span class="token operator">=</span> fallBackMethod<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Implementation<span class="token punctuation">,</span> context<span class="token punctuation">.</span>Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
			aspectContext<span class="token punctuation">.</span>ReturnValue <span class="token operator">=</span> fallBackResult<span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ex<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">AsyncCircuitBreakerPolicy</span> circuitBreaker <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>IsCircuitBreaker<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token class-name"><span class="token keyword">var</span></span> cacheKey <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">.</span>DeclaringType<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">context<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">.</span>Name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>policyCaches<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token keyword">out</span> circuitBreaker<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">//从缓存内获取该方法的全局熔断策略</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">else</span>
			<span class="token punctuation">{</span>
				circuitBreaker <span class="token operator">=</span> Policy<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Handle</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Exception<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CircuitBreakerAsync</span><span class="token punctuation">(</span>
				  <span class="token named-parameter punctuation">exceptionsAllowedBeforeBreaking</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ExceptionsAllowedBeforeBreaking<span class="token punctuation">,</span>
				  <span class="token named-parameter punctuation">durationOfBreak</span><span class="token punctuation">:</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>SecondsOfBreak<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				policyCaches<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> circuitBreaker<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreaker <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			policyWarp <span class="token operator">=</span> fallback<span class="token punctuation">.</span><span class="token function">WrapAsync</span><span class="token punctuation">(</span>retry<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			policyWarp <span class="token operator">=</span> fallback<span class="token punctuation">.</span><span class="token function">WrapAsync</span><span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">.</span><span class="token function">WrapAsync</span><span class="token punctuation">(</span>retry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>


		<span class="token keyword">await</span> policyWarp<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>ctx <span class="token operator">=&gt;</span> <span class="token function">next</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">,</span> pollyCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),r={href:"https://cloud.tencent.com/developer/article/1179277",target:"_blank",rel:"noopener noreferrer"},k=e(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMemberService</span>
    <span class="token punctuation">{</span>
        <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>MemberVM<span class="token punctuation">&gt;</span></span> <span class="token function">GetMemberInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token return-type class-name">MemberVM</span> <span class="token function">GetMemberInfoFallback</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberService</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMemberService</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">IConsulService</span> _consulservice<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">MemberService</span><span class="token punctuation">(</span><span class="token class-name">IConsulService</span> consulService<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _consulservice <span class="token operator">=</span> consulService<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">PollyHandle</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsCircuitBreaker <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> FallbackMethod <span class="token operator">=</span> <span class="token string">&quot;GetMemberInfoFallback&quot;</span><span class="token punctuation">,</span> ExceptionsAllowedBeforeBreaking <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> SecondsOfBreak <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> RetryTimes <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>MemberVM<span class="token punctuation">&gt;</span></span> <span class="token function">GetMemberInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> memberServiceAddresses <span class="token operator">=</span> <span class="token keyword">await</span> _consulservice<span class="token punctuation">.</span><span class="token function">GetServicesAsync</span><span class="token punctuation">(</span><span class="token string">&quot;member_center&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> memberServiceAddress <span class="token operator">=</span> memberServiceAddresses<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                httpClient<span class="token punctuation">.</span>BaseAddress <span class="token operator">=</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Uri</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;http://</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">memberServiceAddress<span class="token punctuation">.</span>Address</span><span class="token punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">memberServiceAddress<span class="token punctuation">.</span>Port</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">GetAsync</span><span class="token punctuation">(</span><span class="token string">&quot;/member/&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
                result<span class="token punctuation">.</span><span class="token function">EnsureSuccessStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> json <span class="token operator">=</span> <span class="token keyword">await</span> result<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MemberVM<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">MemberVM</span> <span class="token function">GetMemberInfoFallback</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们需要在方法上标记 PollyHandleAttribute ，所以把获取会员相关的逻辑封住进 MemberService 的 GetMemberInfo 方法内。并且在方法上打上Attribute ： [PollyHandle(IsCircuitBreaker = true, FallbackMethod = &quot;GetMemberInfoFallback&quot;, ExceptionsAllowedBeforeBreaking = 5, SecondsOfBreak = 30, RetryTimes = 3)] 直接通过 AOP 的方式来配置 Polly 的策略，这样就方便了很多。 上面这些配置好之后，下面开始就是如何使 aspectcore 接管 asp.net core 的依赖注入了。根据文档也很简单：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Install<span class="token operator">-</span>Package AspectCore<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 nuget 安装 AspectCore.Extensions.DependencyInjection 包。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IHostBuilder</span> <span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>webBuilder <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    webBuilder<span class="token punctuation">.</span><span class="token function">ConfigureKestrel</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
                    <span class="token punctuation">{</span>
                        options<span class="token punctuation">.</span><span class="token function">ListenAnyIP</span><span class="token punctuation">(</span><span class="token number">6001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    webBuilder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">UseServiceProviderFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DynamicProxyServiceProviderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 CreateHostBuilder 内使用 UseServiceProviderFactory 替换 ServiceProviderFactory 为 aspectcore 的实现。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>     <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMemberService<span class="token punctuation">,</span> MemberService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token range operator">..</span><span class="token punctuation">.</span>

            services<span class="token punctuation">.</span><span class="token function">ConfigureDynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ConfigureServices 方法内配置 IMemberService 的依赖关系以及配置 aspectcore 的动态代理。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,9),d={href:"https://github.com/dotnetcore/AspectCore-Framework",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s/aDML8lxOoxb8_aB0YA19XQ",target:"_blank",rel:"noopener noreferrer"};function v(b,y){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,s("p",null,[n("定义一个 PollyHandleAttribute 类，它继承自 AbstractInterceptorAttribute 类，然后实现 Invoke 方法。我们需要在 Invoke 方法内动态构造出 Polly 的相关策略，然后通过 Polly 去执行真正的方法。这里主要需要注意的是熔断策略不能每次新建，因为对于熔断来说是需要全局统计该方法的异常数量来判断是否熔断的，所以需要把熔断策略缓存起来。 这个类参考了 Edison Zhou 大佬的部分代码，原文："),s("a",r,[n("Polly+AspectCore实现熔断与降级机制"),t(a)])]),k,s("p",null,[n("源码地址："),s("a",d,[n("https://github.com/dotnetcore/AspectCore-Framework"),t(a)]),s("a",m,[n("https://mp.weixin.qq.com/s/aDML8lxOoxb8_aB0YA19XQ"),t(a)]),n(" | 国内开源社区巨作AspectCore-Framework入门")])])}const w=p(i,[["render",v],["__file","aspectcore_core.html.vue"]]),f=JSON.parse('{"path":"/dotnet/aop/aspectcore_core.html","title":"AspectCore.Core","lang":"zh-CN","frontmatter":{"title":"AspectCore.Core","lang":"zh-CN","date":"2023-10-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"aspectcore_core","slug":"gn1ybo","docsId":"77442922","description":"最后更新时间：2022年5月30日 概述 下载量：3.22M 操作 AspectCore.Core搭配Polly 虽然我们完成了简单的重试、服务降级、熔断等功能。但是显然对于每个方法都去使用 Polly 编写一堆策略的话实在是太麻烦了。那么有什么办法能改进一下 Polly 的使用体验吗？答案是使用 AOP 的思想，通过在执行的方法上打上 Attribu...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/aop/aspectcore_core.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"AspectCore.Core"}],["meta",{"property":"og:description","content":"最后更新时间：2022年5月30日 概述 下载量：3.22M 操作 AspectCore.Core搭配Polly 虽然我们完成了简单的重试、服务降级、熔断等功能。但是显然对于每个方法都去使用 Polly 编写一堆策略的话实在是太麻烦了。那么有什么办法能改进一下 Polly 的使用体验吗？答案是使用 AOP 的思想，通过在执行的方法上打上 Attribu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AspectCore.Core\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"AspectCore.Core搭配Polly","slug":"aspectcore-core搭配polly","link":"#aspectcore-core搭配polly","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.98,"words":895},"filePathRelative":"dotnet/aop/aspectcore_core.md","localizedDate":"2023年10月14日","excerpt":"<blockquote>\\n<p>最后更新时间：2022年5月30日</p>\\n</blockquote>\\n<h2>概述</h2>\\n<p>下载量：3.22M</p>\\n<h2>操作</h2>\\n<h3>AspectCore.Core搭配Polly</h3>\\n<p>虽然我们完成了简单的重试、服务降级、熔断等功能。但是显然对于每个方法都去使用 Polly 编写一堆策略的话实在是太麻烦了。那么有什么办法能改进一下 Polly 的使用体验吗？答案是使用 AOP 的思想，通过在执行的方法上打上 Attribute 的方式来指定 Polly 的策略。\\n下面我们使用 lemon 大佬的 AspectCore AOP 组件结合 Polly 来演示下如何通过 AOP 的思想来处理重试、降级、熔断等策略。\\n通过 nuget 安装 AspectCore 核心类库。</p>","autoDesc":true}');export{w as comp,f as data};
