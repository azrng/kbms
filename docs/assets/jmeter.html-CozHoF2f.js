import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-CVU83naM.js";const t="/kbms/common/1647758795922-d864773b-f497-4eb0-a85f-693edd024b5e.png",h="/kbms/common/1647758783062-7bb5cb36-60da-406f-800b-c72e19ab77a6.png",n="/kbms/common/1647758832796-a263974b-963b-4cce-b411-aefcad447be8.png",l="/kbms/common/1647761253227-721d2e22-088b-4330-be03-8195c70434bd.png",p="/kbms/common/image-20231022210208596.png",r={},k=e('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Apache JMeter 可用于测试静态和动态资源、Web 动态应用程序的性能。 它可用于模拟服务器、服务器组、网络或对象上的重负载，以测试其强度或分析不同负载类型下的整体性能。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><p>安装Java JDK，下载地址：<a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noopener noreferrer">https://www.oracle.com/java/technologies/downloads/</a> JMeter官网下载：<a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener noreferrer">https://jmeter.apache.org/download_jmeter.cgi</a></p><h2 id="总结报告名词解释" tabindex="-1"><a class="header-anchor" href="#总结报告名词解释"><span>总结报告名词解释</span></a></h2><p>Throughput：吞吐量</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><blockquote><p>下面的JMeter基于源码包操作，版本5.4.1</p></blockquote><h3 id="基础软件使用" tabindex="-1"><a class="header-anchor" href="#基础软件使用"><span>基础软件使用</span></a></h3><h4 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h4><p>在安装java jdk并且下载好Jmeter后，找到里面的bin目录的jmeter.bat，双击启动即可。</p><h4 id="设置中文" tabindex="-1"><a class="header-anchor" href="#设置中文"><span>设置中文</span></a></h4><p>默认打开后选择Options，然后点击Choose Language，然后选择中文简体即可。</p><h4 id="添加虚拟用户组" tabindex="-1"><a class="header-anchor" href="#添加虚拟用户组"><span>添加虚拟用户组</span></a></h4><p>右击“Test Plan”&gt;添加&gt; 线程 &gt; 线程组 <img src="'+t+'" alt="image.png" loading="lazy"></p><blockquote><p>线程组：JMeter是由Java实现的，并且使用一个Java线程来模拟一个用户，因此线程组（Thread Group）就是指一组用户的意思</p></blockquote><p>线程组里面常用设置解释</p><ul><li>名称：当前线程组配置起个名字</li><li>线程数：指虚拟用户数，默认的输入是“1”，则表明模拟一个虚拟用户访问被测系统，如果想模拟100个用户，则此处输入100。</li><li>Ramp-Up时间(秒)：虚拟用户增长时长。比如你测试的是一个考勤系统，那么实际用户登录使用考勤系统的时候并不是大家喊1、2、3 - 走起，然后一起登录。实际使用场景可能是9点钟上班，那么从8:30开始，考勤系统会陆陆续续有人开始登录，直到9:10左右，那么如果完全按照用户的使用场景，设计该测试的时候此处应输入40（分钟）* 60（秒）= 2400。实际测试一般不会设置如此长的Ramp-Up时间，一般情况下，可以估计出登录频率最高的时间长度，比如此处可能从8:55到9:00登录的人最多，那这里设置成300秒，如果“线程数”输入为100，则意味着在5分钟内100用户登录完毕。</li><li>循环次数：该处设置一个虚拟用户做多少次的测试。默认为1，意味着一个虚拟用户做完一遍事情之后，该虚拟用户停止运行。如果选中“永远”，则意味着测试运行起来之后就根本停不下来了，除非你把它强制停止。</li></ul><h4 id="添加被测试页面" tabindex="-1"><a class="header-anchor" href="#添加被测试页面"><span>添加被测试页面</span></a></h4><p>右击刚才添加的线程组&gt;添加&gt;取样器&gt; HTTP请求。 <img src="'+h+'" alt="image.png" loading="lazy"> 设置解释</p><ul><li>名称：为要测试的页面起一个名称</li><li>服务器名称或IP：被测试服务器网站的名称，也可以是ip地址。</li></ul><p>Ctrl+ S保存该配置，然后点击上面的【&gt;】启动，点击后你发现没有啥变化，是因为这个时候已经运行结束了。点击选项&gt;日志查看，我们看到已经执行结束</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> o</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">j</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">u</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">JMeterMenuBar</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> setRunning</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">local</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="添加结果监听器" tabindex="-1"><a class="header-anchor" href="#添加结果监听器"><span>添加结果监听器</span></a></h4><p>右击刚才添加的线程组&gt;添加&gt;监听器&gt;察看结果数 来查看性能测试过程中请求和响应信息。添加完毕后，保存测试脚本，再次运行。 运行结束后，点击察看结果数 &gt; baidu ，然后就可以看到一些测试期间一些有用的信息，比如发送的请求信息和响应的数据等。 <img src="'+n+'" alt="image.png" loading="lazy"></p><h4 id="添加http请求头" tabindex="-1"><a class="header-anchor" href="#添加http请求头"><span>添加HTTP请求头</span></a></h4><p>右击刚才添加的线程组&gt;添加&gt;配置元件&gt;HTTP信息头管理器，添加必要的请求头即可。 比如我们post请求的参数是Json格式，那么就需要添加 名称：Content-Type 值：application/json</p><h3 id="调用接口测试" tabindex="-1"><a class="header-anchor" href="#调用接口测试"><span>调用接口测试</span></a></h3><h4 id="post请求" tabindex="-1"><a class="header-anchor" href="#post请求"><span>Post请求</span></a></h4><p>操作类似于上面的添加被测试页面。 场景：要测试的接口是一个本地登录接口，Post类型，json格式 <img src="'+l+'" alt="image.png" loading="lazy"></p><h3 id="命令行压测" tabindex="-1"><a class="header-anchor" href="#命令行压测"><span>命令行压测</span></a></h3><p>使用cli的方式进行压测</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">./jmeter</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">serList.jmx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> result.jtl</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -j</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> test.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="压测接口示例" tabindex="-1"><a class="header-anchor" href="#压测接口示例"><span>压测接口示例</span></a></h2><h3 id="压测用户列表" tabindex="-1"><a class="header-anchor" href="#压测用户列表"><span>压测用户列表</span></a></h3><p>关于并发线程数设置：https://www.cnblogs.com/grey-wolf/p/17765546.html#3258437914</p><p>jmeter设置如下</p><figure><img src="'+p+`" alt="image-20231022210208596" tabindex="0" loading="lazy"><figcaption>image-20231022210208596</figcaption></figure><p>这里配置的是使用300个线程(users),但是Ramp-up period 是300s，意思是在300s内将我那300个线程启动起来，也就是1s增加1个；</p><p>Loop count我这里是设置为无限，但是他并不会一直跑下去，因为上图中我设置Duration为600s，也就是说脚本总共可以跑10分钟</p><p>总结：该配置可以让该压测任务，在前300s内，会逐步从1个线程增加到300个线程，在后面的300s，就是300个线程同时去执行，这个时候压力是稳定的300线程产生的并发</p><h3 id="运行" tabindex="-1"><a class="header-anchor" href="#运行"><span>运行</span></a></h3><p>执行下面的命令行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>./jmeter -n -t D:\\码云\\my-example\\JMeterTest\\userList.jmx -l result.jtl -j test.log</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后会出现如下的输出</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">summary</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  96744</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00:19</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4992.0/s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Avg:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Min:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   163</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Err:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (0.00%) Active: 20 Started: 20 Finished: 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>表示现在是压测开始后的第19s，96744是总共发出去的请求，4992.0/s 是这期间的tps，后面就是平均数、最小、最大、错误数</p><p>过一阵折后，会连着出现这样子的东西</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">summary</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">  96744</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00:19</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4992.0/s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Avg:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Min:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   163</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Err:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (0.00%) Active: 20 Started: 20 Finished: 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">summary</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 164529</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00:30</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5484.3/s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Avg:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     6</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Min:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   503</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Err:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (0.00%) Active: 50 Started: 50 Finished: 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">summary</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 261273</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00:49</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5291.1/s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Avg:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     4</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Min:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   503</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Err:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (0.00%)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">summary</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 172833</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:00:30</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5758.6/s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Avg:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">    11</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Min:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     1</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   479</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Err:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (0.00%) Active: 80 Started: 80 Finished: 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">summary</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 434106</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 00:01:19</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 5467.8/s</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Avg:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     7</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Min:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Max:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">   503</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> Err:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">     0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (0.00%)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为+的那一行，表示的是增量，从上一行结束，过去了30s，这35s内产生了164529个请求，这期间的tpc是5484.3</p><p>为=的那一行，就是脚本从开始到目前为止，总的指标数，比如434106这个请求数，就是1:19s的时候请求数位261273+增量的172833.</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2><p>接口性能测试：<a href="https://mp.weixin.qq.com/s/XIfN3ETbN0oWjmZsiSdcMw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/XIfN3ETbN0oWjmZsiSdcMw</a><a href="https://mp.weixin.qq.com/s/D3i0-QOqt7B2UikF5hJmFw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/D3i0-QOqt7B2UikF5hJmFw</a> | .NET 6 EFCore WebAPI 使用 JMeter 进行吞吐量测试 jmeter教程：<a href="https://www.cnblogs.com/du-hong/category/1149349.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/du-hong/category/1149349.html</a></p><p><a href="https://mp.weixin.qq.com/s/vqr0-c3DK3_ExVdRW8JTTA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/vqr0-c3DK3_ExVdRW8JTTA</a> | 后端开发都应该了解点接口的压力测试(Apache Bench版)</p><p>jmeter进行简单压测：https://www.cnblogs.com/grey-wolf/p/17765546.html</p><p><a href="https://mp.weixin.qq.com/s/MRDvIbmqkj1bBuGk_Eudjw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/MRDvIbmqkj1bBuGk_Eudjw</a> | .NET 6 EFCore WebAPI 使用 JMeter 进行吞吐量测试</p>`,56),d=[k];function g(o,c){return a(),s("div",null,d)}const b=i(r,[["render",g],["__file","jmeter.html.vue"]]),C=JSON.parse('{"path":"/middleware/testMange/pressureTest/jmeter.html","title":"JMeter","lang":"zh-CN","frontmatter":{"title":"JMeter","lang":"zh-CN","date":"2023-09-10T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"jmeter","slug":"wtgtg4","docsId":"70189201","description":"概述 Apache JMeter 可用于测试静态和动态资源、Web 动态应用程序的性能。 它可用于模拟服务器、服务器组、网络或对象上的重负载，以测试其强度或分析不同负载类型下的整体性能。 安装 安装Java JDK，下载地址：https://www.oracle.com/java/technologies/downloads/ JMeter官网下载：h...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/testMange/pressureTest/jmeter.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"JMeter"}],["meta",{"property":"og:description","content":"概述 Apache JMeter 可用于测试静态和动态资源、Web 动态应用程序的性能。 它可用于模拟服务器、服务器组、网络或对象上的重负载，以测试其强度或分析不同负载类型下的整体性能。 安装 安装Java JDK，下载地址：https://www.oracle.com/java/technologies/downloads/ JMeter官网下载：h..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1647758795922-d864773b-f497-4eb0-a85f-693edd024b5e.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-19T02:43:38.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-19T02:43:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JMeter\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1647758795922-d864773b-f497-4eb0-a85f-693edd024b5e.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1647758783062-7bb5cb36-60da-406f-800b-c72e19ab77a6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1647758832796-a263974b-963b-4cce-b411-aefcad447be8.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1647761253227-721d2e22-088b-4330-be03-8195c70434bd.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/image-20231022210208596.png\\"],\\"datePublished\\":\\"2023-09-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-19T02:43:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"总结报告名词解释","slug":"总结报告名词解释","link":"#总结报告名词解释","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"基础软件使用","slug":"基础软件使用","link":"#基础软件使用","children":[{"level":4,"title":"启动","slug":"启动","link":"#启动","children":[]},{"level":4,"title":"设置中文","slug":"设置中文","link":"#设置中文","children":[]},{"level":4,"title":"添加虚拟用户组","slug":"添加虚拟用户组","link":"#添加虚拟用户组","children":[]},{"level":4,"title":"添加被测试页面","slug":"添加被测试页面","link":"#添加被测试页面","children":[]},{"level":4,"title":"添加结果监听器","slug":"添加结果监听器","link":"#添加结果监听器","children":[]},{"level":4,"title":"添加HTTP请求头","slug":"添加http请求头","link":"#添加http请求头","children":[]}]},{"level":3,"title":"调用接口测试","slug":"调用接口测试","link":"#调用接口测试","children":[{"level":4,"title":"Post请求","slug":"post请求","link":"#post请求","children":[]}]},{"level":3,"title":"命令行压测","slug":"命令行压测","link":"#命令行压测","children":[]}]},{"level":2,"title":"压测接口示例","slug":"压测接口示例","link":"#压测接口示例","children":[{"level":3,"title":"压测用户列表","slug":"压测用户列表","link":"#压测用户列表","children":[]},{"level":3,"title":"运行","slug":"运行","link":"#运行","children":[]}]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1700361818000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.5,"words":1649},"filePathRelative":"middleware/testMange/pressureTest/jmeter.md","localizedDate":"2023年9月10日","excerpt":"<h2>概述</h2>\\n<p>Apache JMeter 可用于测试静态和动态资源、Web 动态应用程序的性能。\\n它可用于模拟服务器、服务器组、网络或对象上的重负载，以测试其强度或分析不同负载类型下的整体性能。</p>\\n<h2>安装</h2>\\n<p>安装Java JDK，下载地址：<a href=\\"https://www.oracle.com/java/technologies/downloads/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.oracle.com/java/technologies/downloads/</a>\\nJMeter官网下载：<a href=\\"https://jmeter.apache.org/download_jmeter.cgi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://jmeter.apache.org/download_jmeter.cgi</a></p>","autoDesc":true}');export{b as comp,C as data};
