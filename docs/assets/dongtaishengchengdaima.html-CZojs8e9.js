import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as o,a as n,d as s,e as c,b as l}from"./app-qB9_Bjjp.js";const i={},u=l(`<h2 id="classdescription" tabindex="-1"><a class="header-anchor" href="#classdescription"><span>ClassDescription</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassDescription</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ModuleName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> AssemblyName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ClassName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>PropertyDescription<span class="token punctuation">&gt;</span></span> Properties <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyDescription</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> Type <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在正式开始编写动态代码生成的核心代码之前，首先我们定义一个 ClassDescription 类来帮助描述需要生成的 class 长啥样。里面主要是描述了一些类名，属性名，属性类型等信息。</p><h2 id="emit" tabindex="-1"><a class="header-anchor" href="#emit"><span>Emit</span></a></h2><p>在 .NET Core 之前我们要动态生成一个 class 那么几乎 Emit 是首先技术。当然 Emit 在 .NET Core 中依然可以使用。System.Reflection.Emit 的命名空间这样的，所以很明显还是反射技术的一种。普通的反射可能只是动态来获取程序集里的元数据，然后操作或者运行它。而 Emit 可以完全动态的创建一个程序集或者类。那么让我们看看怎么用 Emit 来动态生成一个 class 吧。 比如我们现在需要动态生成一个 User 类，如果正常编写那么大概长这样：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Age <span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面让我们来用 Emit 动态创建它： 首先，用 ClassDescription 来定义 User 类，它里面有 2 个属性 Name，Age。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token class-name"><span class="token keyword">var</span></span> userClassDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                AssemblyName <span class="token operator">=</span> <span class="token string">&quot;X&quot;</span><span class="token punctuation">,</span>
                ModuleName <span class="token operator">=</span> <span class="token string">&quot;X&quot;</span><span class="token punctuation">,</span>
                ClassName <span class="token operator">=</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>
                Properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>PropertyDescription<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyDescription</span> <span class="token punctuation">{</span>
                        Type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        Name <span class="token operator">=</span> <span class="token string">&quot;Name&quot;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyDescription</span>
                    <span class="token punctuation">{</span>
                        Type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        Name <span class="token operator">=</span> <span class="token string">&quot;Age&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是正式使用 Emit 来编写这个类了。整个过程大概可以分这么几步：</p><ol><li>定义 assembly</li><li>定义 module</li><li>定义 class</li><li>定义 properties</li></ol><p>上面的代码，如果看过 IL 的同学就比较熟悉了，这个代码基本就是在手写 IL 了。其中要注意的是：属性的定义要分 2 步，除了定义属性外，还需要定义 Get Set 方法，然后跟属性关联起来。因为大家都知道，属性其实只是封装了方法而已。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">Type</span> <span class="token function">Generate</span><span class="token punctuation">(</span><span class="token class-name">ClassDescription</span> clazz<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">MethodAttributes</span> getSetAttr <span class="token operator">=</span>
               MethodAttributes<span class="token punctuation">.</span>Public <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>SpecialName <span class="token operator">|</span>
                   MethodAttributes<span class="token punctuation">.</span>HideBySig<span class="token punctuation">;</span>

            <span class="token comment">// define class</span>
            <span class="token class-name"><span class="token keyword">var</span></span> assemblyBuilder <span class="token operator">=</span> AssemblyBuilder<span class="token punctuation">.</span><span class="token function">DefineDynamicAssembly</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">AssemblyName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span>AssemblyName<span class="token punctuation">)</span><span class="token punctuation">,</span> AssemblyBuilderAccess<span class="token punctuation">.</span>Run<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> moduleBuilder <span class="token operator">=</span> assemblyBuilder<span class="token punctuation">.</span><span class="token function">DefineDynamicModule</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span>ModuleName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> typeBuilder <span class="token operator">=</span> moduleBuilder<span class="token punctuation">.</span><span class="token function">DefineType</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span>ClassName<span class="token punctuation">,</span> TypeAttributes<span class="token punctuation">.</span>Public <span class="token operator">|</span> TypeAttributes<span class="token punctuation">.</span>Class <span class="token operator">|</span> TypeAttributes<span class="token punctuation">.</span>AutoClass <span class="token operator">|</span> TypeAttributes<span class="token punctuation">.</span>AnsiClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> clazz<span class="token punctuation">.</span>Properties<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> propName <span class="token operator">=</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> fieldName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;_</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">propName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> typee <span class="token operator">=</span> item<span class="token punctuation">.</span>Type<span class="token punctuation">;</span>

                <span class="token comment">//define field</span>
                <span class="token class-name"><span class="token keyword">var</span></span> fieldBuilder <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">DefineField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span>
                                                             typee<span class="token punctuation">,</span>
                                                            FieldAttributes<span class="token punctuation">.</span>Private<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//define property</span>
                <span class="token class-name"><span class="token keyword">var</span></span> propBuilder <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">DefineProperty</span><span class="token punctuation">(</span>propName<span class="token punctuation">,</span> PropertyAttributes<span class="token punctuation">.</span>SpecialName<span class="token punctuation">,</span> typee<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//define getter</span>
                <span class="token class-name"><span class="token keyword">var</span></span> getPropMthdBldr <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">DefineMethod</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;get</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fieldName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> getSetAttr<span class="token punctuation">,</span> typee<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> getIL <span class="token operator">=</span> getPropMthdBldr<span class="token punctuation">.</span><span class="token function">GetILGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                getIL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ldarg_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                getIL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ldfld<span class="token punctuation">,</span> fieldBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                getIL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//define setter</span>
                <span class="token class-name"><span class="token keyword">var</span></span> setPropMthdBldr <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">DefineMethod</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;set</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">fieldName</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> getSetAttr<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Type<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">{</span> typee <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name"><span class="token keyword">var</span></span> idSetIL <span class="token operator">=</span> setPropMthdBldr<span class="token punctuation">.</span><span class="token function">GetILGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                idSetIL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ldarg_0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                idSetIL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ldarg_1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                idSetIL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Stfld<span class="token punctuation">,</span> fieldBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>
                idSetIL<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>OpCodes<span class="token punctuation">.</span>Ret<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// connect prop to getter setter</span>
                propBuilder<span class="token punctuation">.</span><span class="token function">SetGetMethod</span><span class="token punctuation">(</span>getPropMthdBldr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                propBuilder<span class="token punctuation">.</span><span class="token function">SetSetMethod</span><span class="token punctuation">(</span>setPropMthdBldr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">//create type</span>
            <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">CreateType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> type<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面让我们编写一个单元测试来测试一下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> userClassDesc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                AssemblyName <span class="token operator">=</span> <span class="token string">&quot;X&quot;</span><span class="token punctuation">,</span>
                ModuleName <span class="token operator">=</span> <span class="token string">&quot;X&quot;</span><span class="token punctuation">,</span>
                ClassName <span class="token operator">=</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>
                Properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>PropertyDescription<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyDescription</span> <span class="token punctuation">{</span>
                        Type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        Name <span class="token operator">=</span> <span class="token string">&quot;Name&quot;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyDescription</span>
                    <span class="token punctuation">{</span>
                        Type <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        Name <span class="token operator">=</span> <span class="token string">&quot;Age&quot;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassGeneratorByEmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">Generate</span><span class="token punctuation">(</span>userClassDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">dynamic</span></span> user <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Assert<span class="token punctuation">.</span><span class="token function">IsNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

            user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;mj&quot;</span><span class="token punctuation">;</span>
            Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span><span class="token string">&quot;mj&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

            user<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
            Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获得 type 之后，我们使用反射来创建 User 的实例对象。然后通过 dynamic 来给属性赋值跟取值，避免了繁琐的反射代码。运行上面的测试代码，单元测试绿色，通过了。</p><h2 id="roslyn" tabindex="-1"><a class="header-anchor" href="#roslyn"><span>Roslyn</span></a></h2><p>Roslyn 是微软最新开源的代码分析，编译工具。它提供了非常多的高级 API 来让用户在运行时分析代码，生成程序集、类。所以它现在是运行时代码生成的首选项。下面让我们看看怎么使用 Roslyn 来实现动态生成一个 User class 。 在使用 Roslyn 之前我们需要安装一个 nuget 包：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>Microsoft<span class="token punctuation">.</span>CodeAnalysis<span class="token punctuation">.</span>CSharp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们平时正常编写的代码，其实就是一堆字符串，通过编译器编译后变成了 IL 代码。那么使用的 Roslyn 的时候过程也是一样的。我们首先就是要使用代码来生成这个 User class 的字符串模板。然后把这段字符串交给 Roslyn 去分析与编译。编译完后就可以获得这个 class 的 Type 了。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> <span class="token function">Generate</span><span class="token punctuation">(</span><span class="token class-name">ClassDescription</span> clazz<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> clzTemp <span class="token operator">=</span>
                <span class="token string">@&quot;
                using System;
                using System.Runtime;
                using System.IO;

                namespace WdigetEngine 
                {
                
                    public class @className 
                    {
                        @properties
                    }
                
                }
                &quot;</span><span class="token punctuation">;</span>

            <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">string</span></span> propTemp <span class="token operator">=</span>
                <span class="token string">@&quot;
                public @type @propName { get;set; }
                &quot;</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> clazz<span class="token punctuation">.</span>Properties<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">string</span></span> strProp <span class="token operator">=</span> propTemp<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;@type&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;@propName&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                properties<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span>strProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name"><span class="token keyword">string</span></span> sourceCode <span class="token operator">=</span> clzTemp<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;@className&quot;</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span>ClassName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">&quot;@properties&quot;</span><span class="token punctuation">,</span> properties<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> syntaxTree <span class="token operator">=</span> SyntaxFactory<span class="token punctuation">.</span><span class="token function">ParseSyntaxTree</span><span class="token punctuation">(</span>sourceCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> compilation <span class="token operator">=</span> CSharpCompilation<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>
            <span class="token named-parameter punctuation">syntaxTrees</span><span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> syntaxTree <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">assemblyName</span><span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">clazz<span class="token punctuation">.</span>AssemblyName</span><span class="token punctuation">}</span></span><span class="token string">.dll&quot;</span></span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">options</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CSharpCompilationOptions</span><span class="token punctuation">(</span>OutputKind<span class="token punctuation">.</span>DynamicallyLinkedLibrary<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token named-parameter punctuation">references</span><span class="token punctuation">:</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span><span class="token function">GetAssemblies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>x<span class="token operator">=&gt;</span> <span class="token operator">!</span>x<span class="token punctuation">.</span>IsDynamic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> MetadataReference<span class="token punctuation">.</span><span class="token function">CreateFromFile</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>Location<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Assembly</span> compiledAssembly<span class="token punctuation">;</span>
            <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MemoryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token class-name"><span class="token keyword">var</span></span> compileResult <span class="token operator">=</span> compilation<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>compileResult<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>
                <span class="token punctuation">{</span>
                    compiledAssembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span>
                <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Roslyn compile err .&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> compiledAssembly<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> types<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Name <span class="token operator">==</span> clazz<span class="token punctuation">.</span>ClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用同样的测试用例来测试一下 ：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>            <span class="token class-name"><span class="token keyword">var</span></span> generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ClassGeneratorByRoslyn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">var</span></span> type <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">Generate</span><span class="token punctuation">(</span>userClassDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">dynamic</span></span> user <span class="token operator">=</span> Activator<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Assert<span class="token punctuation">.</span><span class="token function">IsNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

            user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;mj&quot;</span><span class="token punctuation">;</span>
            Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span><span class="token string">&quot;mj&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>

            user<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
            Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试同样通过了。通过以上代码我们可以发现使用 Roslyn 来动态生成代码的难度其实要比 Emit 简单不少。因为使用 Roslyn 的过程更接近于我们手写代码，而 Emit 的话是手写 IL ，显然手写 IL 对于一般同学来说是更困难的。</p><h4 id="natasha" tabindex="-1"><a class="header-anchor" href="#natasha"><span>Natasha</span></a></h4><p>如果还是觉得 Roslyn 操作起来麻烦，那么还可以使用 NCC 旗下开源项目 Natasha。Natasha 做为 Roslyn 的封装，所以放到 Roslyn 下面一起讲。 什么是 Natasha ？ Natasha 是基于 Roslyn 的 C## 动态程序集构建库，该库允许开发者在运行时使用 C## 代码构建域 / 程序集 / 类 / 结构体 / 枚举 / 接口 / 方法等，使得程序在运行的时候可以增加新的模块及功能。Natasha 集成了域管理/插件管理，可以实现域隔离，域卸载，热拔插等功能。该库遵循完整的编译流程，提供完整的错误提示， 可自动添加引用，完善的数据结构构建模板让开发者只专注于程序集脚本的编写，兼容 netcoreapp3.0+, 跨平台，统一、简便的链式 API。 https://github.com/dotnetcore/Natasha 下面我们演示下使用 Natasha 来构建这个 User Class ： 首先使用 nuget 安装 natasha 类库：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>DotNetCore<span class="token punctuation">.</span>Natasha<span class="token punctuation">.</span>CSharp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写 class 生成的代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> <span class="token function">Generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">NClass</span> nClass <span class="token operator">=</span> NClass<span class="token punctuation">.</span><span class="token function">DefaultDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            nClass
              <span class="token punctuation">.</span><span class="token function">Namespace</span><span class="token punctuation">(</span><span class="token string">&quot;MyNamespace&quot;</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">Public</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>prop <span class="token operator">=&gt;</span> prop
                <span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">string</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Public</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">)</span>
              <span class="token punctuation">.</span><span class="token function">Property</span><span class="token punctuation">(</span>prop <span class="token operator">=&gt;</span> prop
                <span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token string">&quot;Age&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Public</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
              <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> nClass<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是使用 natasha 动态编译一个类型的代码，代码量直线下降，而且支持链式调用，非常的优雅。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过以上我们大概总结了 3 种方案（Emit , Roslyn （含 natasha） , CodeDom）来实现运行时代码生成。现在最推荐的是 Roslyn 方案。因为它的过程比较符合手写代码的感觉，而且他还提供了代码分析功能，能返回编写代码的语法错误等信息，非常有助于 debug 。如果你现在有动态代码生成的需求，那么 Roslyn 是你的最佳选择。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,32),r={href:"https://mp.weixin.qq.com/s/_CVjiUeWdUCMY8rz4Si6_w",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const a=p("ExternalLinkIcon");return e(),o("div",null,[u,n("p",null,[s("让代码帮我们写代码一："),n("a",r,[s("https://mp.weixin.qq.com/s/_CVjiUeWdUCMY8rz4Si6_w"),c(a)])])])}const b=t(i,[["render",k],["__file","dongtaishengchengdaima.html.vue"]]),g=JSON.parse('{"path":"/dotnet/csharp/dongtaishengchengdaima.html","title":"动态生成代码","lang":"zh-CN","frontmatter":{"title":"动态生成代码","lang":"zh-CN","date":"2023-10-22T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["csharp"],"tag":["无"],"filename":"dongtaishengchengdaima","slug":"uetywyklgbgfapgl","docsId":"110220709","description":"ClassDescription 在正式开始编写动态代码生成的核心代码之前，首先我们定义一个 ClassDescription 类来帮助描述需要生成的 class 长啥样。里面主要是描述了一些类名，属性名，属性类型等信息。 Emit 在 .NET Core 之前我们要动态生成一个 class 那么几乎 Emit 是首先技术。当然 Emit 在 .NET...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/csharp/dongtaishengchengdaima.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"动态生成代码"}],["meta",{"property":"og:description","content":"ClassDescription 在正式开始编写动态代码生成的核心代码之前，首先我们定义一个 ClassDescription 类来帮助描述需要生成的 class 长啥样。里面主要是描述了一些类名，属性名，属性类型等信息。 Emit 在 .NET Core 之前我们要动态生成一个 class 那么几乎 Emit 是首先技术。当然 Emit 在 .NET..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-17T14:50:44.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-17T14:50:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动态生成代码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-17T14:50:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"ClassDescription","slug":"classdescription","link":"#classdescription","children":[]},{"level":2,"title":"Emit","slug":"emit","link":"#emit","children":[]},{"level":2,"title":"Roslyn","slug":"roslyn","link":"#roslyn","children":[{"level":4,"title":"Natasha","slug":"natasha","link":"#natasha","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1700232644000,"updatedTime":1700232644000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":5.63,"words":1690},"filePathRelative":"dotnet/csharp/dongtaishengchengdaima.md","localizedDate":"2023年10月22日","excerpt":"<h2>ClassDescription</h2>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ClassDescription</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> ModuleName <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> AssemblyName <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> ClassName <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">List<span class=\\"token punctuation\\">&lt;</span>PropertyDescription<span class=\\"token punctuation\\">&gt;</span></span> Properties <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">PropertyDescription</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">string</span></span> Name <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token return-type class-name\\">Type</span> Type <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">get</span><span class=\\"token punctuation\\">;</span> <span class=\\"token keyword\\">set</span><span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{b as comp,g as data};
