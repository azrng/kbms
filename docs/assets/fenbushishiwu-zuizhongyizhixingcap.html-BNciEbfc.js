import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,b as n,e as s,f as i,d as c}from"./app-Bfb6-vFH.js";const u={},l=c(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>可以实现非实时、异步场景下的最终一致性分布式事务。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><p>首先需要引用的组件： 基础组件：DotNetCore.CAP.RabbitMQ 不同的数据库再使用不同的数据库组件 DotNetCore.CAP.MySql DotNetCore.CAP.SqlServer DotNetCore.CAP.PostgreSql DotNetCore.CAP.MongoDB Cap支持mssql，postgresql，mysql，mongodb用户存储操作记录       appsettings.json中进行配置参数</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token string">&quot;CAP&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;DefaultGroup&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;队列名称&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;RabbitMQ&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;HostName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;请求地址&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;VirtualHost&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;myQueue&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;UserName&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;登录名&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;Password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;登录密码&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在startup配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddCap</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
            <span class="token punctuation">{</span>
               x<span class="token punctuation">.</span><span class="token function">UseMySql</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">[</span><span class="token string">&quot;DbConfig:MQConnectionString&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                x<span class="token punctuation">.</span>DefaultGroup <span class="token operator">=</span> Configuration<span class="token punctuation">[</span><span class="token string">&quot;CAP:DefaultGroup&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                x<span class="token punctuation">.</span><span class="token function">UseRabbitMQ</span><span class="token punctuation">(</span>mqOptions <span class="token operator">=&gt;</span>
                <span class="token punctuation">{</span>
                    mqOptions<span class="token punctuation">.</span>HostName <span class="token operator">=</span> Configuration<span class="token punctuation">[</span><span class="token string">&quot;CAP:RabbitMQ:HostName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    mqOptions<span class="token punctuation">.</span>UserName <span class="token operator">=</span> Configuration<span class="token punctuation">[</span><span class="token string">&quot;CAP:RabbitMQ:UserName&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    mqOptions<span class="token punctuation">.</span>Password <span class="token operator">=</span> Configuration<span class="token punctuation">[</span><span class="token string">&quot;CAP:RabbitMQ:Password&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    mqOptions<span class="token punctuation">.</span>VirtualHost <span class="token operator">=</span> Configuration<span class="token punctuation">[</span><span class="token string">&quot;CAP:RabbitMQ:VirtualHost&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就可以在控制器注入ICapPublisher，通过该组件直接发布消息 await _capBus.PublishAsync(&quot;主题名称&quot;,&quot;要发布的内容&quot;)； 接受消息时候直接在方法的头部添加[CapSubscribe(&quot;主题名称&quot;)],这个方法可以带参数，参数格式就是发布时候参数的类型     <strong>注</strong>：</p><blockquote><p>如果订阅者在控制器，直接添加[CapSubscribe(&quot;&quot;)] 来订阅相关消息。 如果你的方法没有位于Controller 中，那么你订阅的类需要继承 ICapSubscribe，然后添加[CapSubscribe(&quot;&quot;)]标记</p></blockquote><p></p>`,10),r={href:"https://www.cnblogs.com/savorboard/p/cap.html",target:"_blank",rel:"noopener noreferrer"};function d(m,g){const a=e("ExternalLinkIcon");return o(),p("div",null,[l,n("p",null,[s("教程： netcore使用rabbitmq "),n("a",r,[s("https://www.cnblogs.com/savorboard/p/cap.html"),i(a)])])])}const h=t(u,[["render",d],["__file","fenbushishiwu-zuizhongyizhixingcap.html.vue"]]),q=JSON.parse('{"path":"/middleware/smallService/fenbushishiwu/fenbushishiwu-zuizhongyizhixingcap.html","title":"分布式事务-最终一致性Cap","lang":"zh-CN","frontmatter":{"title":"分布式事务-最终一致性Cap","lang":"zh-CN","date":"2022-10-30T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"fenbushishiwu-zuizhongyizhixingcap","slug":"ei8ymy","docsId":"29412042","description":"介绍 可以实现非实时、异步场景下的最终一致性分布式事务。 操作 首先需要引用的组件： 基础组件：DotNetCore.CAP.RabbitMQ 不同的数据库再使用不同的数据库组件 DotNetCore.CAP.MySql DotNetCore.CAP.SqlServer DotNetCore.CAP.PostgreSql DotNetCore.CAP....","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/smallService/fenbushishiwu/fenbushishiwu-zuizhongyizhixingcap.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"分布式事务-最终一致性Cap"}],["meta",{"property":"og:description","content":"介绍 可以实现非实时、异步场景下的最终一致性分布式事务。 操作 首先需要引用的组件： 基础组件：DotNetCore.CAP.RabbitMQ 不同的数据库再使用不同的数据库组件 DotNetCore.CAP.MySql DotNetCore.CAP.SqlServer DotNetCore.CAP.PostgreSql DotNetCore.CAP...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-09T14:02:29.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-10-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-09T14:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务-最终一致性Cap\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-09T14:02:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1699538549000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.1,"words":329},"filePathRelative":"middleware/smallService/fenbushishiwu/fenbushishiwu-zuizhongyizhixingcap.md","localizedDate":"2022年10月30日","excerpt":"<h2>介绍</h2>\\n<p>可以实现非实时、异步场景下的最终一致性分布式事务。</p>\\n<h2>操作</h2>\\n<p>首先需要引用的组件：\\n基础组件：DotNetCore.CAP.RabbitMQ\\n不同的数据库再使用不同的数据库组件\\nDotNetCore.CAP.MySql\\nDotNetCore.CAP.SqlServer\\nDotNetCore.CAP.PostgreSql\\nDotNetCore.CAP.MongoDB\\nCap支持mssql，postgresql，mysql，mongodb用户存储操作记录\\n&nbsp;\\n&nbsp;\\n&nbsp;\\nappsettings.json中进行配置参数</p>","autoDesc":true}');export{h as comp,q as data};
