import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as l,b as e,e as a,f as n,d as t}from"./app-CBxp4zeL.js";const p={},c=t('<h2 id="工具类库汇总" tabindex="-1"><a class="header-anchor" href="#工具类库汇总"><span>工具类库汇总</span></a></h2><p>https://gitee.com/FenRuiDangDeFuLangXiSi/CosyNest | 刘晓阳/CosyNest - 码云 - 开源中国 工具类库</p><h3 id="masuit-tools" tabindex="-1"><a class="header-anchor" href="#masuit-tools"><span>Masuit.Tools</span></a></h3><p>https://gitee.com/masuit/Masuit.Tools | 懒得勤快的码数吐司工具库</p><p>特色功能</p><ul><li>LargeMemoryStream：支持操作最大1TB的内存</li></ul><h2 id="configureawait" tabindex="-1"><a class="header-anchor" href="#configureawait"><span>ConfigureAwait</span></a></h2><h3 id="configureawaitchecker-analyzer" tabindex="-1"><a class="header-anchor" href="#configureawaitchecker-analyzer"><span>ConfigureAwaitChecker.Analyzer</span></a></h3>',8),d={href:"https://github.com/cincuranet/ConfigureAwaitChecker",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>或者通过规则文件来限制必须配置等</p><h3 id="configureawait-fody" tabindex="-1"><a class="header-anchor" href="#configureawait-fody"><span>ConfigureAwait.Fody</span></a></h3><p>用来帮助你在项目中配置ConfigureAwait，可以设置在全局级别以及类级别自动给你配置</p><p>仓库地址：https://github.com/Fody/ConfigureAwait</p><p>需要引用这两个nuget包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PM<span class="token operator">&gt;</span> Install-Package Fody
PM<span class="token operator">&gt;</span> Install-Package ConfigureAwait.Fody
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>简单使用代码</p><div class="language-c# line-numbers-mode" data-ext="c#" data-title="c#"><pre class="language-c#"><code>using Fody;

[ConfigureAwait(false)]
public class MyAsyncLibrary
{
    public async Task MyMethodAsync()
    {
        await Task.Delay(10);
        await Task.Delay(20).ConfigureAwait(true);
    }

    public async Task AnotherMethodAsync()
    {
        await Task.Delay(30);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="inshellisense" tabindex="-1"><a class="header-anchor" href="#inshellisense"><span>inshellisense</span></a></h2><p>microsoft/inshellisense：IDE风格的命令行自动完成 https://github.com/microsoft/inshellisense</p><h2 id="microsoft-aspnetcore-headerpropagation" tabindex="-1"><a class="header-anchor" href="#microsoft-aspnetcore-headerpropagation"><span>Microsoft.AspNetCore.HeaderPropagation</span></a></h2><p>请求标头传播组件，可以实现生成一个全局唯一的RequestId，然后通过存放在请求头中实现在多个服务之间传播。 引用nuget包，并配置服务后</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>services.AddHeaderPropagation();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意要使用服务</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>app.UseHeaderPropagation();// 需要在UseRouting前面
app.UseRouting();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后当你请求其他服务的时候，会默认包含一个请求头Request-Id(高版本换名字了)，该请求头在项目启动的时候生成一次。</p><h2 id="microsoft-visualstudio-web-codegeneration-design" tabindex="-1"><a class="header-anchor" href="#microsoft-visualstudio-web-codegeneration-design"><span>Microsoft.VisualStudio.Web.CodeGeneration.Design</span></a></h2><p>引用这个包默认情况下会生成一堆各个语言的资源文件，如果不想要那么多，那么就可以通过手动来指定语言，下面来编辑项目文件，增加下面的节点</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>SatelliteResourceLanguages<span class="token operator">&gt;</span>en<span class="token operator">&lt;</span><span class="token operator">/</span>SatelliteResourceLanguages<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),g={href:"https://mp.weixin.qq.com/s/bORwnPO1qDPT7vxw0eni9g",target:"_blank",rel:"noopener noreferrer"},h=e("h2",{id:"sourcelink",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sourcelink"},[e("span",null,"SourceLink")])],-1),m=e("p",null,"是一个和语言和源代码控制无关的系统，用于为二进制文件提供一流的源代码调试体验。项目的目标是让任何构建Nuget库的人都能毫不费力为用户提供源代码调试。.NET Core 和 Roslyn 等 Microsoft 库已启用。",-1),k={href:"https://github.com/dotnet/sourcelink",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="快速使用" tabindex="-1"><a class="header-anchor" href="#快速使用"><span>快速使用</span></a></h3><p>安装了该nuget包的nuget包，那么你就可以在vs中进行调试软件包的源代码。</p><p>配置如下：</p><ul><li>打开 工具 -&gt; 选项 -&gt; 调试， 勾选 启用源链接支持，取消勾选 启用仅我的代码 ，勾选启用源链接支持</li><li>设置调试=&gt;符号,勾选Microsoft符号服务器和Nuget.org符号服务器</li></ul><blockquote><p>注意：开启了以后你调试自己代码的时候也会调试nuget包的代码，所以会耗时，所以根据需要开关。</p></blockquote><h3 id="打包nuget" tabindex="-1"><a class="header-anchor" href="#打包nuget"><span>打包Nuget</span></a></h3><p>需要安装指定的nuget包并且做如下配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token operator">&lt;</span>PropertyGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>TargetFramework<span class="token operator">&gt;</span>netstandard2<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>TargetFramework<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>PublishRepositoryUrl<span class="token operator">&gt;</span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>PublishRepositoryUrl<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>IncludeSymbols<span class="token operator">&gt;</span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>IncludeSymbols<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>SymbolPackageFormat<span class="token operator">&gt;</span>snupkg<span class="token operator">&lt;</span><span class="token operator">/</span>SymbolPackageFormat<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>PropertyGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="github" tabindex="-1"><a class="header-anchor" href="#github"><span>Github</span></a></h3><p>如果项目是托管在Github或者Github Enterprise上，那么就可以安装nuget包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.SourceLink.GitHub&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.1.1&quot;</span> PrivateAssets<span class="token operator">=</span><span class="token string">&quot;All&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gitlab" tabindex="-1"><a class="header-anchor" href="#gitlab"><span>GitLab</span></a></h3><p>如果托管在GitLab上，那么就可以使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.SourceLink.GitLab&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.1.1&quot;</span> PrivateAssets<span class="token operator">=</span><span class="token string">&quot;All&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从版本 1.1.1 开始，Microsoft.SourceLink.GitLab 默认假定 GitLab 版本 12.0+。如果您的项目由低于 12.0 版的 GitLab 托管，则SourceLinkGitLabHost除了包引用之外，您还必须指定项目组：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">SourceLinkGitLabHost</span> Include<span class="token operator">=</span><span class="token string">&quot;gitlab.yourdomain.com&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;11.0&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目组SourceLinkGitLabHost指定 GitLab 主机的域和 GitLab 的版本。该版本很重要，因为用于访问文件的 URL 格式随着版本 12.0 的变化而变化。默认情况下，源链接采用新格式（版本 12.0+）。</p><h3 id="gitea" tabindex="-1"><a class="header-anchor" href="#gitea"><span>Gitea</span></a></h3><p>在gitea上托管的，使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Microsoft.SourceLink.Gitea&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;1.1.1&quot;</span> PrivateAssets<span class="token operator">=</span><span class="token string">&quot;All&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20);function b(f,y){const s=i("ExternalLinkIcon");return r(),l("div",null,[c,e("p",null,[a("检查' ConfigureAwait(false) '的使用情况。 仓库地址："),e("a",d,[a("https://github.com/cincuranet/ConfigureAwaitChecker"),n(s)])]),u,e("p",null,[a("资料 "),e("a",g,[a("https://mp.weixin.qq.com/s/bORwnPO1qDPT7vxw0eni9g"),n(s)]),a(" | [Blazor] 删除多余的Microsoft.CodeAnalysis语言资源文件")]),h,m,e("p",null,[a("资料："),e("a",k,[a("https://github.com/dotnet/sourcelink"),n(s)])]),v])}const C=o(p,[["render",b],["__file","tongyong.html.vue"]]),_=JSON.parse('{"path":"/dotnet/commonNuget/tongyong.html","title":"通用","lang":"zh-CN","frontmatter":{"title":"通用","lang":"zh-CN","date":"2023-09-10T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"tongyong","slug":"hq52kd","docsId":"84868376","description":"工具类库汇总 https://gitee.com/FenRuiDangDeFuLangXiSi/CosyNest | 刘晓阳/CosyNest - 码云 - 开源中国 工具类库 Masuit.Tools https://gitee.com/masuit/Masuit.Tools | 懒得勤快的码数吐司工具库 特色功能 LargeMemoryStream...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonNuget/tongyong.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"通用"}],["meta",{"property":"og:description","content":"工具类库汇总 https://gitee.com/FenRuiDangDeFuLangXiSi/CosyNest | 刘晓阳/CosyNest - 码云 - 开源中国 工具类库 Masuit.Tools https://gitee.com/masuit/Masuit.Tools | 懒得勤快的码数吐司工具库 特色功能 LargeMemoryStream..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"通用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"工具类库汇总","slug":"工具类库汇总","link":"#工具类库汇总","children":[{"level":3,"title":"Masuit.Tools","slug":"masuit-tools","link":"#masuit-tools","children":[]}]},{"level":2,"title":"ConfigureAwait","slug":"configureawait","link":"#configureawait","children":[{"level":3,"title":"ConfigureAwaitChecker.Analyzer","slug":"configureawaitchecker-analyzer","link":"#configureawaitchecker-analyzer","children":[]},{"level":3,"title":"ConfigureAwait.Fody","slug":"configureawait-fody","link":"#configureawait-fody","children":[]}]},{"level":2,"title":"inshellisense","slug":"inshellisense","link":"#inshellisense","children":[]},{"level":2,"title":"Microsoft.AspNetCore.HeaderPropagation","slug":"microsoft-aspnetcore-headerpropagation","link":"#microsoft-aspnetcore-headerpropagation","children":[]},{"level":2,"title":"Microsoft.VisualStudio.Web.CodeGeneration.Design","slug":"microsoft-visualstudio-web-codegeneration-design","link":"#microsoft-visualstudio-web-codegeneration-design","children":[]},{"level":2,"title":"SourceLink","slug":"sourcelink","link":"#sourcelink","children":[{"level":3,"title":"快速使用","slug":"快速使用","link":"#快速使用","children":[]},{"level":3,"title":"打包Nuget","slug":"打包nuget","link":"#打包nuget","children":[]},{"level":3,"title":"Github","slug":"github","link":"#github","children":[]},{"level":3,"title":"GitLab","slug":"gitlab","link":"#gitlab","children":[]},{"level":3,"title":"Gitea","slug":"gitea","link":"#gitea","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.92,"words":876},"filePathRelative":"dotnet/commonNuget/tongyong.md","localizedDate":"2023年9月10日","excerpt":"<h2>工具类库汇总</h2>\\n<p>https://gitee.com/FenRuiDangDeFuLangXiSi/CosyNest | 刘晓阳/CosyNest - 码云 - 开源中国   工具类库</p>\\n<h3>Masuit.Tools</h3>\\n<p>https://gitee.com/masuit/Masuit.Tools | 懒得勤快的码数吐司工具库</p>\\n<p>特色功能</p>\\n<ul>\\n<li>LargeMemoryStream：支持操作最大1TB的内存</li>\\n</ul>\\n<h2>ConfigureAwait</h2>\\n<h3>ConfigureAwaitChecker.Analyzer</h3>","autoDesc":true}');export{C as comp,_ as data};
