import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,e as s,f as t,d as p}from"./app-D8HBJYTp.js";const i="/kbms/common/1622272805433-53ec4b63-b872-43b8-9a45-b92293c43cad.png",u={},r=n("h2",{id:"概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#概述"},[n("span",null,"概述")])],-1),k=n("p",null,"是一个基于约定的对象-对象映射器。通俗地讲就是将一对象转换为另一个对象，前提是我们需要在这两个对象之间建立约定。支持框架：.Net 4.6.1+ 、.Net Standard 2.0+",-1),d={href:"https://docs.automapper.org/",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用"},[n("span",null,"使用")])],-1),v=n("blockquote",null,[n("p",null,"本次示例环境：vs2019、.net5")],-1),g=n("h3",{id:"生成代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#生成代码"},[n("span",null,"生成代码")])],-1),b={href:"https://dotnetfiddle.net/aJYTGZ",target:"_blank",rel:"noopener noreferrer"},y={href:"https://docs.automapper.org/en/latest/Understanding-your-mapping.html",target:"_blank",rel:"noopener noreferrer"},h=p(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AddUserDto<span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> executionPlan <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">BuildExecutionPlan</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AddUserDto</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//如果是操作数据库</span>
	<span class="token class-name"><span class="token keyword">var</span></span> expression <span class="token operator">=</span> context<span class="token punctuation">.</span>Entities<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ProjectTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Dto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Expression<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该代码不建议在发布后使用。</p></blockquote><h3 id="控制台操作" tabindex="-1"><a class="header-anchor" href="#控制台操作"><span>控制台操作</span></a></h3><p>通过控制台对AutoMapper简单用法来一个了解，使用vs2019新建.Net5控制台应用 引用组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>  <span class="token operator">&lt;</span>ItemGroup<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AutoMapper&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;10.1.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;Newtonsoft.Json&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;13.0.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ItemGroup<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Newtonsoft.Json是为了显示转换为效果，序列化使用</p></blockquote><h4 id="默认约定映射" tabindex="-1"><a class="header-anchor" href="#默认约定映射"><span>默认约定映射</span></a></h4><p>目标：将接收到的用户请求类转换为我们的用户实体类添加到数据库中 数据准备 用户实体类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 字符长度限制</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///图片地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 生日</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> BirthDay <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 创建时间</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加用户请求类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddUserDto</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 字符长度限制</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///图片地址</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Url <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 省</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Province <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 市</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> City <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 区</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Area <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 生日</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> BirthDay <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 创建时间</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> addUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AddUserDto</span>
    <span class="token punctuation">{</span>
        Id <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span>
        Name <span class="token operator">=</span> <span class="token string">&quot;azrng&quot;</span><span class="token punctuation">,</span>
        Province <span class="token operator">=</span> <span class="token string">&quot;河南省&quot;</span><span class="token punctuation">,</span>
        City <span class="token operator">=</span> <span class="token string">&quot;郑州市&quot;</span><span class="token punctuation">,</span>
        Area <span class="token operator">=</span> <span class="token string">&quot;金水区&quot;</span><span class="token punctuation">,</span>
        BirthDay <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;2021-05-20 13:14&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        CreateTime <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>
        Url <span class="token operator">=</span> <span class="token string">&quot;www.baidu.com/1.png&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">//创建映射规则,第一个参数为源实体,第二个为目标实体</span>
    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AddUserDto<span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//var mapper = config.CreateMapper();</span>
    <span class="token comment">//or</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mapper</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//进行转换,得到目标实体</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>addUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//{&quot;Id&quot;:&quot;123456&quot;,&quot;Name&quot;:&quot;azrng&quot;,&quot;Url&quot;:&quot;www.baidu.com/1.png&quot;,&quot;Address&quot;:null,&quot;BirthDay&quot;:&quot;2021-05-20T13:14:00&quot;,&quot;CreateTime&quot;:&quot;2021-05-20T16:09:08.6982869+08:00&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自动配置" tabindex="-1"><a class="header-anchor" href="#自动配置"><span>自动配置</span></a></h4><p>主动扫描从配置文件继承的类，并将它们加入配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        cfg<span class="token punctuation">.</span><span class="token function">AddMaps</span><span class="token punctuation">(</span>assembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mapper</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>addUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webapi" tabindex="-1"><a class="header-anchor" href="#webapi"><span>WebAPI</span></a></h3><p>安装组件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AutoMapper&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;10.1.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token class-name">PackageReference</span> Include<span class="token operator">=</span><span class="token string">&quot;AutoMapper.Extensions.Microsoft.DependencyInjection&quot;</span> Version<span class="token operator">=</span><span class="token string">&quot;8.1.1&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ConfigureServices中将Automapper注入到依赖注入容器中</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token comment">//只映射单个</span>
    <span class="token comment">//services.AddAutoMapper(typeof(UserProfile));</span>

    <span class="token comment">//映射程序集</span>
    <span class="token comment">//services.AddAutoMapper(typeof(Startup).Assembly);</span>

    <span class="token comment">//将继承于Profile的类批量映射</span>
    <span class="token class-name"><span class="token keyword">var</span></span> profiles <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>DefinedTypes
        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Profile</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span><span class="token function">AsType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    services<span class="token punctuation">.</span><span class="token function">AddAutoMapper</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建包含用户实体类的WebAPI项目并且配置连接数据库，</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IdentityBaseEntity</span></span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 字符长度限制</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token punctuation">[</span><span class="token function">Comment</span><span class="token punctuation">(</span><span class="token string">&quot;名称&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span><span class="token comment">//必填</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> MinimumLength <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//长度限制</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 生日</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token punctuation">[</span><span class="token function">Comment</span><span class="token punctuation">(</span><span class="token string">&quot;生日&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span><span class="token comment">//必填</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> BirthDay <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///头像</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token punctuation">[</span><span class="token function">Comment</span><span class="token punctuation">(</span><span class="token string">&quot;头像&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Required</span></span><span class="token punctuation">]</span><span class="token comment">//必填</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">StringLength</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//长度限制</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> HeadImg <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Comment</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;创建时间&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DataType</span><span class="token attribute-arguments"><span class="token punctuation">(</span>DataType<span class="token punctuation">.</span>Date<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token comment">//格式限制</span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> CreateTime <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认约定映射-1" tabindex="-1"><a class="header-anchor" href="#默认约定映射-1"><span>默认约定映射</span></a></h4><p>使用添加用户场景操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddUserVm</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 名称</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 生日</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> BirthDay <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">///头像</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> HeadImg <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户映射配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProfile</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Profile</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token function">UserProfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>AddUserVm<span class="token punctuation">,</span> User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认映射</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">OpenDbContext</span> _dbContext<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IMapper</span> _mapper<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span><span class="token class-name">OpenDbContext</span> dbContext<span class="token punctuation">,</span> <span class="token class-name">IMapper</span> mapper<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            _dbContext <span class="token operator">=</span> dbContext<span class="token punctuation">;</span>
            _mapper <span class="token operator">=</span> mapper<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpPost</span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">AddAsync</span><span class="token punctuation">(</span><span class="token class-name">AddUserVm</span> dto<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//自行参数校验</span>
            <span class="token class-name"><span class="token keyword">var</span></span> entity <span class="token operator">=</span> _mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token function">AddAsync</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span><span class="token function">SaveChangesAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> entity<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加成功 <img src="`+i+`" alt="image.png" loading="lazy"></p><blockquote><p>这里我们模拟存储的是头像的相对地址</p></blockquote><h4 id="自定义成员映射" tabindex="-1"><a class="header-anchor" href="#自定义成员映射"><span>自定义成员映射</span></a></h4><p>这个时候我们需要查询某一个用户的信息，那么我们先来添加用户详情返回类</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetUserResult</span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 名称</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///年</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Year <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 月</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Month <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 日</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Day <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">///头像</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> HeadImg <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建自定义成员映射</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">,</span> GetUserResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//单独配置每一个成员</span>
            <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>ur <span class="token operator">=&gt;</span> ur<span class="token punctuation">.</span>Year<span class="token punctuation">,</span> u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>BirthDay<span class="token punctuation">.</span>Year<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>ur <span class="token operator">=&gt;</span> ur<span class="token punctuation">.</span>Month<span class="token punctuation">,</span> u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>BirthDay<span class="token punctuation">.</span>Month<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>ur <span class="token operator">=&gt;</span> ur<span class="token punctuation">.</span>Day<span class="token punctuation">,</span> u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>BirthDay<span class="token punctuation">.</span>Day<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>ur <span class="token operator">=&gt;</span> ur<span class="token punctuation">.</span>HeadImg<span class="token punctuation">,</span> u <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> <span class="token string">&quot;www.baidu.com/&quot;</span> <span class="token operator">+</span> src<span class="token punctuation">.</span>HeadImg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>        <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>ActionResult<span class="token punctuation">&lt;</span>GetUserResult<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">GetDetails</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> userId<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> _dbContext<span class="token punctuation">.</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>Id <span class="token operator">==</span> userId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ProjectTo</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>GetUserResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>_mapper<span class="token punctuation">.</span>ConfigurationProvider<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefaultAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;azrng&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;year&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;1990&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;month&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;day&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;29&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;headImg&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;www.baidu.com/123456.png&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作"><span>其他操作</span></a></h3><h4 id="命名公约" tabindex="-1"><a class="header-anchor" href="#命名公约"><span>命名公约</span></a></h4><p>相互映射以下属性：property_name -&gt; PropertyName</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//源成员的命名约定</span>
        cfg<span class="token punctuation">.</span>SourceMemberNamingConvention <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">LowerUnderscoreNamingConvention</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//目标成员的命名约定</span>
        cfg<span class="token punctuation">.</span>DestinationMemberNamingConvention <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PascalCaseNamingConvention</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="替换字符" tabindex="-1"><a class="header-anchor" href="#替换字符"><span>替换字符</span></a></h4><p>替换属性名称字符  Source和Destination 的Avíator属性i不一样</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Destination<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//可能替换单个字符或者整个单词</span>
        cfg<span class="token punctuation">.</span><span class="token function">ReplaceMemberName</span><span class="token punctuation">(</span><span class="token string">&quot;í&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//cfg.ReplaceMemberName(&quot;Airlina&quot;, &quot;Airline&quot;);</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mapper</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>JsonConvert<span class="token punctuation">.</span><span class="token function">SerializeObject</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Destination<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//{&quot;Value&quot;:1,&quot;Aviator&quot;:2,&quot;SubAirlinaFlight&quot;:3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="识别前-后缀" tabindex="-1"><a class="header-anchor" href="#识别前-后缀"><span>识别前/后缀</span></a></h4><p>因为有时候源/目标属性具有前后缀，因为名称不同，所以不能直接映射</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        cfg<span class="token punctuation">.</span><span class="token function">RecognizePrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;frm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//比如前缀都是frm区别</span>
        <span class="token comment">//cfg.CreateMap&lt;a,b&gt;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="全局属性-字段过滤" tabindex="-1"><a class="header-anchor" href="#全局属性-字段过滤"><span>全局属性/字段过滤</span></a></h4><p>映射时候选择一部分进行过滤</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        cfg<span class="token punctuation">.</span>ShouldMapField <span class="token operator">=</span> fi <span class="token operator">=&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        cfg<span class="token punctuation">.</span>ShouldMapProperty <span class="token operator">=</span> pi <span class="token operator">=&gt;</span> pi<span class="token punctuation">.</span>GetMethod<span class="token punctuation">.</span>IsPublic <span class="token operator">||</span> pi<span class="token punctuation">.</span>GetMethod<span class="token punctuation">.</span>IsPrivate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="嵌套映射" tabindex="-1"><a class="header-anchor" href="#嵌套映射"><span>嵌套映射</span></a></h4><p>当映射的类里面包含嵌套的类，那么需要将这个嵌套的类也给配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OuterSource<span class="token punctuation">,</span> OuterDest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>InnerSource<span class="token punctuation">,</span> InnerDest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要将嵌套的内容也配置</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> outerSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OuterSource</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
        Inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InnerSource</span>
        <span class="token punctuation">{</span>
            OtherValue <span class="token operator">=</span> <span class="token number">5</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mapper</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> outerDest <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OuterDest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>outerSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表和数组" tabindex="-1"><a class="header-anchor" href="#列表和数组"><span>列表和数组</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Destination<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> listSourse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Source<span class="token punctuation">&gt;</span></span>
                <span class="token punctuation">{</span>
    				<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Source</span><span class="token punctuation">{</span> Value<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    				<span class="token keyword">new</span> <span class="token constructor-invocation class-name">Source</span><span class="token punctuation">{</span>  Value<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mapper</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> listDest <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span>Destination<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>listSourse<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="反向映射" tabindex="-1"><a class="header-anchor" href="#反向映射"><span>反向映射</span></a></h4><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//约定映射</span>
        <span class="token comment">//cfg.CreateMap&lt;Order, OrderDto&gt;().ReverseMap();</span>
        <span class="token comment">//自定义反向映射</span>
        cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Order<span class="token punctuation">,</span> OrderDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>od <span class="token operator">=&gt;</span> od<span class="token punctuation">.</span>CustomerName<span class="token punctuation">,</span> o <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>Customer<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ReverseMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Mapper</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Order</span>
    <span class="token punctuation">{</span>
        Customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Customer</span>
        <span class="token punctuation">{</span>
            Name <span class="token operator">=</span> <span class="token string">&quot;Bob&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        Total <span class="token operator">=</span> <span class="token number">15.8m</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> orderDto <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Map</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OrderDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="忽略成员" tabindex="-1"><a class="header-anchor" href="#忽略成员"><span>忽略成员</span></a></h4><p>使用<code>IgnoreAttribute</code>忽略映射和/或验证中的单个目标成员：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">AutoMapper<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Annotations</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoMap</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDto</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Ignore</span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">decimal</span></span> Total <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    
<span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ChatSatisfactionTemplate<span class="token punctuation">,</span> GetSatisfactionTemplateOutputDto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>PushTypeSum<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>PushType<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>PushTypeChannelSum<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>PushTypeChannel<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>PushType<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">Ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>t<span class="token operator">=&gt;</span>t<span class="token punctuation">.</span>PushTypeChannel<span class="token punctuation">,</span>opt<span class="token operator">=&gt;</span>opt<span class="token punctuation">.</span><span class="token function">Ignore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型映射配置" tabindex="-1"><a class="header-anchor" href="#类型映射配置"><span>类型映射配置</span></a></h4><p>这相当于一个配置。<code>CreateMap&lt;Order, OrderDto&gt;()</code></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoMap</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">Order</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDto</span> <span class="token punctuation">{</span>
    <span class="token comment">// destination members</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重定向到不同源成员" tabindex="-1"><a class="header-anchor" href="#重定向到不同源成员"><span>重定向到不同源成员</span></a></h4><p>SourceMemberAttribute可以重定向到单独的命名成员</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">AutoMap</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetUserResult</span>
    <span class="token punctuation">{</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 名称</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 名称2</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token punctuation">[</span><span class="token function">SourceMember</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name2 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token doc-comment comment">/// 名称3</span>
        <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
        <span class="token punctuation">[</span><span class="token function">SourceMember</span><span class="token punctuation">(</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name3 <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：必须使用AutoMap，不能和CreateMap搭配使用</p></blockquote><h4 id="枚举映射" tabindex="-1"><a class="header-anchor" href="#枚举映射"><span>枚举映射</span></a></h4><p>需要引用包</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>AutoMapper<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>EnumMapping
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Destination<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ConvertUsingEnumMapping</span><span class="token punctuation">(</span>opt <span class="token operator">=&gt;</span> opt
        <span class="token punctuation">.</span><span class="token function">MapValue</span><span class="token punctuation">(</span>Source<span class="token punctuation">.</span>First<span class="token punctuation">,</span> Destination<span class="token punctuation">.</span>Default<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">ReverseMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//支持反过来映射</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义类型转换器" tabindex="-1"><a class="header-anchor" href="#自定义类型转换器"><span>自定义类型转换器</span></a></h4><p>特殊需求，将一种类型转换为另一种类型，例如字符串的源类型到 Int32 的目标类型可以直接使用Convert.ToInt32，复杂的需要自定义类型转换器 配置以及自定义转换器</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>    <span class="token class-name"><span class="token keyword">var</span></span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConvertUsing</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConvertUsing</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ConvertUsing</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TypeTypeConverter<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Destination<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTypeConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITypeConverter<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> DateTime<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">DateTime</span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> source<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> destination<span class="token punctuation">,</span> <span class="token class-name">ResolutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> System<span class="token punctuation">.</span>Convert<span class="token punctuation">.</span><span class="token function">ToDateTime</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeTypeConverter</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ITypeConverter<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> Type<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> <span class="token function">Convert</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Type</span> destination<span class="token punctuation">,</span> <span class="token class-name">ResolutionContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
          <span class="token keyword">return</span> Assembly<span class="token punctuation">.</span><span class="token function">GetExecutingAssembly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,78),w={href:"https://docs.automapper.org/en/latest/Custom-type-converters.html",target:"_blank",rel:"noopener noreferrer"},f=p(`<h4 id="条件映射" tabindex="-1"><a class="header-anchor" href="#条件映射"><span>条件映射</span></a></h4><p>仅当源对象中的属性baz大于或等于0时，才会映射该属性</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Foo<span class="token punctuation">,</span>Bar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>baz<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">Condition</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span>baz <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过PreCondition方法，解析值之前加条件，它在映射过程中运行更快。通过先调用先决条件，决定哪些是将要映射的源，然后调用条件，最后分配给目标值</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Foo<span class="token punctuation">,</span>Bar<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>dest <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>baz<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        opt<span class="token punctuation">.</span><span class="token function">PreCondition</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span>baz <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        opt<span class="token punctuation">.</span><span class="token function">MapFrom</span><span class="token punctuation">(</span>src <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// Expensive resolution process that can be avoided with a PreCondition</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空替换" tabindex="-1"><a class="header-anchor" href="#空替换"><span>空替换</span></a></h4><p>如果源值在成员中的任何位置为空，则空替换允许您为目标成员提供替代值。这意味着它不是从 null 映射，而是从您提供的值映射。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Dest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ForMember</span><span class="token punctuation">(</span>destination <span class="token operator">=&gt;</span> destination<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span><span class="token function">NullSubstitute</span><span class="token punctuation">(</span><span class="token string">&quot;Other Value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="映射前或者映射后操作" tabindex="-1"><a class="header-anchor" href="#映射前或者映射后操作"><span>映射前或者映射后操作</span></a></h4><p>一般不这么操作</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MapperConfiguration</span><span class="token punctuation">(</span>cfg <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  cfg<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">CreateMap</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Source<span class="token punctuation">,</span> Dest<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">BeforeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span>Value <span class="token operator">=</span> src<span class="token punctuation">.</span>Value <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AfterMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> dest<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>AfterMap是 AutoMaper 完成工作后执行的代码。AutoMapper 对此一无所知（它是一个黑匣子），并且不能在其中使用任何逻辑。</p></blockquote><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2>`,13),q={href:"https://docs.automapper.org/en/latest/Getting-started.html",target:"_blank",rel:"noopener noreferrer"};function M(C,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,k,n("blockquote",null,[n("p",null,[s("官网："),n("a",d,[s("https://docs.automapper.org/"),t(a)])])]),m,v,g,n("p",null,[s("通过安装扩展或安装nuget包来更好地查看生成的代码，或者直接使用"),n("a",b,[s("在线地址查看"),t(a)])]),n("blockquote",null,[n("p",null,[s("详情："),n("a",y,[s("https://docs.automapper.org/en/latest/Understanding-your-mapping.html"),t(a)])])]),h,n("blockquote",null,[n("p",null,[s("参考文档："),n("a",w,[s("https://docs.automapper.org/en/latest/Custom-type-converters.html"),t(a)])])]),f,n("blockquote",null,[n("p",null,[n("a",q,[s("https://docs.automapper.org/en/latest/Getting-started.html"),t(a)])])])])}const D=e(u,[["render",M],["__file","automapper.html.vue"]]),_=JSON.parse('{"path":"/dotnet/commonNuget/duixiangyingshe/automapper.html","title":"AutoMapper","lang":"zh-CN","frontmatter":{"title":"AutoMapper","lang":"zh-CN","date":"2023-10-12T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"automapper","slug":"szd8fg","docsId":"42421422","description":"概述 是一个基于约定的对象-对象映射器。通俗地讲就是将一对象转换为另一个对象，前提是我们需要在这两个对象之间建立约定。支持框架：.Net 4.6.1+ 、.Net Standard 2.0+ 官网：https://docs.automapper.org/ 使用 本次示例环境：vs2019、.net5 生成代码 通过安装扩展或安装nuget包来更好地查看...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/commonNuget/duixiangyingshe/automapper.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"AutoMapper"}],["meta",{"property":"og:description","content":"概述 是一个基于约定的对象-对象映射器。通俗地讲就是将一对象转换为另一个对象，前提是我们需要在这两个对象之间建立约定。支持框架：.Net 4.6.1+ 、.Net Standard 2.0+ 官网：https://docs.automapper.org/ 使用 本次示例环境：vs2019、.net5 生成代码 通过安装扩展或安装nuget包来更好地查看..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1622272805433-53ec4b63-b872-43b8-9a45-b92293c43cad.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-06T08:01:13.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-10-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-06T08:01:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AutoMapper\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1622272805433-53ec4b63-b872-43b8-9a45-b92293c43cad.png\\"],\\"datePublished\\":\\"2023-10-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-06T08:01:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"生成代码","slug":"生成代码","link":"#生成代码","children":[]},{"level":3,"title":"控制台操作","slug":"控制台操作","link":"#控制台操作","children":[{"level":4,"title":"默认约定映射","slug":"默认约定映射","link":"#默认约定映射","children":[]},{"level":4,"title":"自动配置","slug":"自动配置","link":"#自动配置","children":[]}]},{"level":3,"title":"WebAPI","slug":"webapi","link":"#webapi","children":[{"level":4,"title":"默认约定映射","slug":"默认约定映射-1","link":"#默认约定映射-1","children":[]},{"level":4,"title":"自定义成员映射","slug":"自定义成员映射","link":"#自定义成员映射","children":[]}]},{"level":3,"title":"其他操作","slug":"其他操作","link":"#其他操作","children":[{"level":4,"title":"命名公约","slug":"命名公约","link":"#命名公约","children":[]},{"level":4,"title":"替换字符","slug":"替换字符","link":"#替换字符","children":[]},{"level":4,"title":"识别前/后缀","slug":"识别前-后缀","link":"#识别前-后缀","children":[]},{"level":4,"title":"全局属性/字段过滤","slug":"全局属性-字段过滤","link":"#全局属性-字段过滤","children":[]},{"level":4,"title":"嵌套映射","slug":"嵌套映射","link":"#嵌套映射","children":[]},{"level":4,"title":"列表和数组","slug":"列表和数组","link":"#列表和数组","children":[]},{"level":4,"title":"反向映射","slug":"反向映射","link":"#反向映射","children":[]},{"level":4,"title":"忽略成员","slug":"忽略成员","link":"#忽略成员","children":[]},{"level":4,"title":"类型映射配置","slug":"类型映射配置","link":"#类型映射配置","children":[]},{"level":4,"title":"重定向到不同源成员","slug":"重定向到不同源成员","link":"#重定向到不同源成员","children":[]},{"level":4,"title":"枚举映射","slug":"枚举映射","link":"#枚举映射","children":[]},{"level":4,"title":"自定义类型转换器","slug":"自定义类型转换器","link":"#自定义类型转换器","children":[]},{"level":4,"title":"条件映射","slug":"条件映射","link":"#条件映射","children":[]},{"level":4,"title":"空替换","slug":"空替换","link":"#空替换","children":[]},{"level":4,"title":"映射前或者映射后操作","slug":"映射前或者映射后操作","link":"#映射前或者映射后操作","children":[]}]}]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1712390473000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":7.47,"words":2242},"filePathRelative":"dotnet/commonNuget/duixiangyingshe/automapper.md","localizedDate":"2023年10月12日","excerpt":"<h2>概述</h2>\\n<p>是一个基于约定的对象-对象映射器。通俗地讲就是将一对象转换为另一个对象，前提是我们需要在这两个对象之间建立约定。支持框架：.Net 4.6.1+ 、.Net Standard 2.0+</p>\\n<blockquote>\\n<p>官网：<a href=\\"https://docs.automapper.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://docs.automapper.org/</a></p>\\n</blockquote>\\n<h2>使用</h2>\\n<blockquote>\\n<p>本次示例环境：vs2019、.net5</p>\\n</blockquote>","autoDesc":true}');export{D as comp,_ as data};
