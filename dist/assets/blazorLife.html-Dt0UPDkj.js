import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-DhDWGI3C.js";const l={};function t(p,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h4 id="问-那么在blazor里面-如果我再同一个界面进行添加然后编辑-这算是在同一个-dbcontext-生命周期内吗" tabindex="-1"><a class="header-anchor" href="#问-那么在blazor里面-如果我再同一个界面进行添加然后编辑-这算是在同一个-dbcontext-生命周期内吗"><span>问：那么在blazor里面，如果我再同一个界面进行添加然后编辑 这算是在同一个 DbContext 生命周期内吗</span></a></h4><p>答：在 Blazor 中，这个问题比较复杂。让我详细解释一下：</p><p>默认情况下，Blazor 使用范围作用域（Scoped）注册服务，包括 DbContext。这意味着：</p><ol><li>在 Blazor Server 中：</li></ol><ul><li><p>DbContext 的生命周期与 Circuit（用户连接会话）绑定</p></li><li><p>同一个用户的所有操作都在同一个 Circuit 中</p></li><li><p>所以在同一个界面进行添加和编辑操作，确实是在同一个 DbContext 生命周期内</p></li><li><p>这可能会导致一些问题，比如内存泄漏或者实体追踪冲突</p></li></ul><p>2.在 Blazor WebAssembly 中：</p><ul><li><p>每个用户的浏览器实例都有自己的 DI 容器</p></li><li><p>Scoped 服务实际上变成了类似 Singleton 的行为</p></li><li><p>同样会在同一个 DbContext 生命周期内</p></li></ul><p>为了避免潜在的问题，我建议修改服务注册和使用方式。这里有几个建议：</p><ol><li><p>修改服务注册为 Transient：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>services.AddTransient&lt;IBaseRepository&lt;Employee&gt;, BaseRepository&lt;Employee&gt;&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>2.或者在每次操作时显式地创建新的 DbContext</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public async Task UpdateAsync(UpdateEmployeeVm vm)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   using var scope = _serviceScopeFactory.CreateScope();</span></span>
<span class="line"><span>   var repository = scope.ServiceProvider.GetRequiredService&lt;IBaseRepository&lt;Employee&gt;&gt;();</span></span>
<span class="line"><span>   // ... 后续操作</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、或者在服务层明确清理上下文状态</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public async Task UpdateAsync(UpdateEmployeeVm vm)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   _employeeRep.ClearTracker(); // 假设有这样的方法</span></span>
<span class="line"><span>   var entity = await _employeeRep.Entities.FirstOrDefaultAsync(t =&gt; t.Id == vm.Id);</span></span>
<span class="line"><span>   // ... 后续操作</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议的最佳实践：</p><ol><li><p>对于查询操作，继续使用 EntitiesNoTracking</p></li><li><p>对于修改操作，可以</p></li></ol><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> async</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Task</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UpdateAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UpdateEmployeeVm</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 使用 AsNoTracking 查询，然后手动附加实体</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> entity</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> await </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">_employeeRep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">EntitiesNoTacking</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FirstOrDefaultAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =&gt; </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      throw</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArgumentException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;员工标识无效&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 手动更新属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Sex</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Sex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">City</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">City</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SetModifyer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 显式地标记实体状态</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  _employeeRep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">entity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">State</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> EntityState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Modified</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  await </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">_employeeRep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SaveChangesAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的方式可以更好地控制实体的状态，避免追踪相关的问题。您觉得这些建议中哪一个更适合您的场景？我们可以根据您的具体需求来调整实现方式。</p>`,17)]))}const r=s(l,[["render",t]]),d=JSON.parse('{"path":"/temp/blazorLife.html","title":"","lang":"zh-CN","frontmatter":{"description":"问：那么在blazor里面，如果我再同一个界面进行添加然后编辑 这算是在同一个 DbContext 生命周期内吗 答：在 Blazor 中，这个问题比较复杂。让我详细解释一下： 默认情况下，Blazor 使用范围作用域（Scoped）注册服务，包括 DbContext。这意味着： 在 Blazor Server 中： DbContext 的生命周期与 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-10T09:44:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AZRNG\\",\\"url\\":\\"https://azrng.gitee.io\\"}]}"],["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/temp/blazorLife.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:description","content":"问：那么在blazor里面，如果我再同一个界面进行添加然后编辑 这算是在同一个 DbContext 生命周期内吗 答：在 Blazor 中，这个问题比较复杂。让我详细解释一下： 默认情况下，Blazor 使用范围作用域（Scoped）注册服务，包括 DbContext。这意味着： 在 Blazor Server 中： DbContext 的生命周期与 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-10T09:44:04.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-10T09:44:04.000Z"}]]},"git":{"createdTime":1741599844000,"updatedTime":1741599844000,"contributors":[{"name":"zhangyunpeng","username":"","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":1.72,"words":517},"filePathRelative":"temp/blazorLife.md","excerpt":"<h4>问：那么在blazor里面，如果我再同一个界面进行添加然后编辑 这算是在同一个 DbContext 生命周期内吗</h4>\\n<p>答：在 Blazor 中，这个问题比较复杂。让我详细解释一下：</p>\\n<p>默认情况下，Blazor 使用范围作用域（Scoped）注册服务，包括 DbContext。这意味着：</p>\\n<ol>\\n<li>在 Blazor Server 中：</li>\\n</ol>\\n<ul>\\n<li>\\n<p>DbContext 的生命周期与 Circuit（用户连接会话）绑定</p>\\n</li>\\n<li>\\n<p>同一个用户的所有操作都在同一个 Circuit 中</p>\\n</li>\\n<li>\\n<p>所以在同一个界面进行添加和编辑操作，确实是在同一个 DbContext 生命周期内</p>\\n</li>\\n<li>\\n<p>这可能会导致一些问题，比如内存泄漏或者实体追踪冲突</p>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,d as data};
