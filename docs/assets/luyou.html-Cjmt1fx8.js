import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e as t,b as l}from"./app-DMmdIwn0.js";const d={},i=l(`<h2 id="路由注册方式" tabindex="-1"><a class="header-anchor" href="#路由注册方式"><span>路由注册方式</span></a></h2><ul><li>路由模板的方式</li><li>RouteAttribute方式</li></ul><h2 id="路由约束" tabindex="-1"><a class="header-anchor" href="#路由约束"><span>路由约束</span></a></h2><table><thead><tr><th>约束</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>{id:int}</code></td><td>匹配任何整数</td></tr><tr><td><code>bool</code></td><td><code>{active:bool}</code></td><td>匹配 <code>true</code></td></tr><tr><td>或 <code>false</code></td><td></td><td></td></tr><tr><td>。 不区分大小写</td><td></td><td></td></tr><tr><td><code>datetime</code></td><td><code>{dob:datetime}</code></td><td>在固定区域性中匹配有效的 <code>DateTime</code></td></tr><tr><td>值。</td><td></td><td></td></tr><tr><td><code>decimal</code></td><td><code>{price:decimal}</code></td><td>在固定区域性中匹配有效的 <code>decimal</code></td></tr><tr><td>值。</td><td></td><td></td></tr><tr><td><code>double</code></td><td><code>{weight:double}</code></td><td>在固定区域性中匹配有效的 <code>double</code></td></tr><tr><td>值。</td><td></td><td></td></tr><tr><td><code>float</code></td><td><code>{weight:float}</code></td><td>在固定区域性中匹配有效的 <code>float</code></td></tr><tr><td>值。</td><td></td><td></td></tr><tr><td><code>guid</code></td><td><code>{id:guid}</code></td><td>匹配有效的 <code>Guid</code></td></tr><tr><td>值</td><td></td><td></td></tr><tr><td><code>long</code></td><td><code>{ticks:long}</code></td><td>匹配有效的 <code>long</code></td></tr><tr><td>值</td><td></td><td></td></tr><tr><td><code>minlength(value)</code></td><td><code>{username:minlength(4)}</code></td><td>字符串必须至少为 4 个字符</td></tr><tr><td><code>maxlength(value)</code></td><td><code>{filename:maxlength(8)}</code></td><td>字符串不得超过 8 个字符</td></tr><tr><td><code>length(length)</code></td><td><code>{filename:length(12)}</code></td><td>字符串必须正好为 12 个字符</td></tr><tr><td><code>length(min,max)</code></td><td><code>{filename:length(8,16)}</code></td><td>字符串必须至少为 8 个字符，且不得超过 16 个字符</td></tr><tr><td><code>min(value)</code></td><td><code>{age:min(18)}</code></td><td>整数值必须至少为 18</td></tr><tr><td><code>max(value)</code></td><td><code>{age:max(120)}</code></td><td>整数值不得超过 120</td></tr><tr><td><code>range(min,max)</code></td><td><code>{age:range(18,120)}</code></td><td>整数值必须至少为 18，且不得超过 120</td></tr><tr><td><code>alpha</code></td><td><code>{name:alpha}</code></td><td>字符串必须由一个或多个字母字符组成，<code>a</code></td></tr><tr><td>-<code>z</code></td><td></td><td></td></tr><tr><td>，并区分大小写。</td><td></td><td></td></tr><tr><td><code>regex(expression)</code></td><td><code>{ssn:regex(^\\\\\\\\d{{3}}-\\\\\\\\d{{2}}-\\\\\\\\d{{4}}$)}</code></td><td>字符串必须与正则表达式匹配。 请参阅有关定义正则表达式的提示。</td></tr><tr><td><code>required</code></td><td><code>{name:required}</code></td><td>用于强制在 URL 生成过程中存在非参数值</td></tr></tbody></table><h3 id="类型约束" tabindex="-1"><a class="header-anchor" href="#类型约束"><span>类型约束</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id:int}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span>  id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="范围约束" tabindex="-1"><a class="header-anchor" href="#范围约束"><span>范围约束</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{age:range(18,120)}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetByAge</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> age<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则约束" tabindex="-1"><a class="header-anchor" href="#正则约束"><span>正则约束</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{phone:regex(^1[[3,5,7,8]]\\\\d{{9}}$)}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetByPhone</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> phone<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> phone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="是否必选" tabindex="-1"><a class="header-anchor" href="#是否必选"><span>是否必选</span></a></h3><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id:required}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> id<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> id<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义irouteconstraint" tabindex="-1"><a class="header-anchor" href="#自定义irouteconstraint"><span>自定义IRouteConstraint</span></a></h3><h4 id="示例一" tabindex="-1"><a class="header-anchor" href="#示例一"><span>示例一</span></a></h4><p>添加自定义路由约束，偶数约束</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRouteConstraint</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRouteConstraint</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// 自定义路由约束关键匹配方法  偶数约束</span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>httpContext<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>请求上下文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>route<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>路由<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>routeKey<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>对应的key，即参数名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>values<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>对应的参数和值的数据字典，count对应的值开从这里取出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>routeDirection<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>路由方向<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Match</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> httpContext<span class="token punctuation">,</span> <span class="token class-name">IRouter</span> route<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> routeKey<span class="token punctuation">,</span>
        <span class="token class-name">RouteValueDictionary</span> values<span class="token punctuation">,</span> <span class="token class-name">RouteDirection</span> routeDirection<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>routeKey<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//根据key获取value</span>
        <span class="token class-name"><span class="token keyword">var</span></span> v <span class="token operator">=</span> values<span class="token punctuation">[</span>routeKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span>
        <span class="token punctuation">{</span>
            <span class="token comment">//判断是否是偶数，级是否能够被2整除</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>满足约束时候，它返回true，否则返回false</p></blockquote><p>注入</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">//提前注入并且制定一个名称</span>
services<span class="token punctuation">.</span><span class="token function">AddRouting</span><span class="token punctuation">(</span>option <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span>ConstraintMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;CustomerRoute&quot;</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CustomRouteConstraint</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id:CustomerRoute}&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetInfo</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> id<span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例二" tabindex="-1"><a class="header-anchor" href="#示例二"><span>示例二</span></a></h4><p>添加long类型约束，必须大于0</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 自定义路由限制（必须为Ulong）</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRouteConstraint</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ULong</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IRouteConstraint</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Match</span><span class="token punctuation">(</span><span class="token class-name">HttpContext<span class="token punctuation">?</span></span> httpContext<span class="token punctuation">,</span> <span class="token class-name">IRouter<span class="token punctuation">?</span></span> route<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> routeKey<span class="token punctuation">,</span> <span class="token class-name">RouteValueDictionary</span> values<span class="token punctuation">,</span> <span class="token class-name">RouteDirection</span> routeDirection<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>values <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> values<span class="token punctuation">.</span>Count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>routeKey<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">ulong</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>routeKey<span class="token punctuation">]</span><span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注入该配置</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span>Services<span class="token punctuation">.</span><span class="token function">AddRouting</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>ConstraintMap<span class="token punctuation">[</span><span class="token string">&quot;ulong&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyRouteConstraint<span class="token punctuation">.</span>ULong</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用该自定义约束</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/user/{userId:ulong}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> userId<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;用户信息&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> userId<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithTags</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制器路由" tabindex="-1"><a class="header-anchor" href="#控制器路由"><span>控制器路由</span></a></h2><p>动态控制器路由</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 设置匹配路由配置</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SettingMatchRouteAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span><span class="token punctuation">,</span> <span class="token class-name">IRouteTemplateProvider</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Template <span class="token operator">=&gt;</span> ServiceCollectionExtensions<span class="token punctuation">.</span>injectUIOptions<span class="token punctuation">.</span>ApiRoutePrefix <span class="token operator">+</span> <span class="token string">&quot;/[controller]&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span><span class="token punctuation">?</span></span> Order <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SettingMatchRoute</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigSettingController</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ControllerBase</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h2><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">HttpGet</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;{id}&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;GetTodo&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name">IActionResult</span> <span class="token function">GetById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;{id}&quot; 是 todo 项 的 ID 的占位符变量。 调用 GetById 时，它会将 URL 中“{id}”的值分配给方法的 id 参数。Name = &quot;GetTodo&quot; 创建一个命名的路由，使你能够 HTTP 响应中链接到此路由。</p><h3 id="route约束" tabindex="-1"><a class="header-anchor" href="#route约束"><span>Route约束</span></a></h3><p>单个约束 示例：[HttpGet(&quot;TestRequiredConstraint/{name:required}&quot;)] 多个约束：限定id是整数并且最小值为1 示例：[HttpGet(&quot;TestMultiConstraint/{id:int:range(8,18)}&quot;)]</p><p>[Route(&quot;&quot;)] [Route(&quot;Default&quot;)] [Route(&quot;Default/Index&quot;)] 真实请求地址</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">11277</span>
http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">11277</span><span class="token operator">/</span><span class="token class-name">home</span>
http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">11277</span><span class="token operator">/</span>home<span class="token operator">/</span>index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="路由的配置" tabindex="-1"><a class="header-anchor" href="#路由的配置"><span>路由的配置</span></a></h3><p>路由的两个功能离不开一个基本的操作:路由的基本配置。在stratup中默认routes.MapRoute(name: &quot;default&quot;,template: &quot;{controller=Home}/{action=Index}/{id?}&quot;)定义，当然我们还可以继续routes.MapRoute(…);这样子就定义了一系列的路由匹配方式组成的一个路由表，例如这样子</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>app<span class="token punctuation">.</span><span class="token function">UseMvc</span><span class="token punctuation">(</span>routes <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    routes<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">template</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    routes<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span><span class="token string">&quot;flylolo/{code}/{name}&quot;</span><span class="token punctuation">,</span> MyRouteHandler<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    routes<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">name</span><span class="token punctuation">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">template</span><span class="token punctuation">:</span> <span class="token string">&quot;{controller=Home}/{action=Index}/{id?}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个MapRoute会生成一个route，第二个看起来有点特殊，我们可以传入一个自定义的requestdelegate来处理flylolo/{code}/{name}”这样的请求，</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRouteHandler</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token class-name">HttpContext</span> context<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span><span class="token string">&quot;MyRouteHandler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="url全小写模式" tabindex="-1"><a class="header-anchor" href="#url全小写模式"><span>Url全小写模式</span></a></h3><p>默认接口风格是大驼峰，所以会存在大小写混在一起的情况，如果想让接口URL全部小写需要增加</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 采用小写的 URL 路由模式</span>
    services<span class="token punctuation">.</span><span class="token function">AddRouting</span><span class="token punctuation">(</span>options <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        options<span class="token punctuation">.</span>LowercaseUrls <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,49),u={href:"https://docs.microsoft.com/zh-cn/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-3.0",target:"_blank",rel:"noopener noreferrer"},r={href:"https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/url-rewriting?view=aspnetcore-3.0",target:"_blank",rel:"noopener noreferrer"},k={href:"https://mp.weixin.qq.com/s/YMiYnhVYDD4x1UwQGWjKow",target:"_blank",rel:"noopener noreferrer"};function m(v,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[n("a",u,[s("ASP.NET Core 中的自定义模型绑定（IModelBinder）"),t(a)]),n("a",r,[s("ASP.NET Core 中的 URL 重写中间件"),t(a)]),s(" .netcore路由最佳实现："),n("a",k,[s("https://mp.weixin.qq.com/s/YMiYnhVYDD4x1UwQGWjKow"),t(a)])])])}const y=e(d,[["render",m],["__file","luyou.html.vue"]]),f=JSON.parse('{"path":"/dotnet/base/luyou/luyou.html","title":"路由","lang":"zh-CN","frontmatter":{"title":"路由","lang":"zh-CN","date":"2023-04-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"luyou","slug":"sygtr9","docsId":"29808000","description":"路由注册方式 路由模板的方式 RouteAttribute方式 路由约束 类型约束 范围约束 正则约束 是否必选 自定义IRouteConstraint 示例一 添加自定义路由约束，偶数约束 满足约束时候，它返回true，否则返回false 注入 使用 示例二 添加long类型约束，必须大于0 注入该配置 使用该自定义约束 控制器路由 动态控制器路由 ...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/base/luyou/luyou.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"路由"}],["meta",{"property":"og:description","content":"路由注册方式 路由模板的方式 RouteAttribute方式 路由约束 类型约束 范围约束 正则约束 是否必选 自定义IRouteConstraint 示例一 添加自定义路由约束，偶数约束 满足约束时候，它返回true，否则返回false 注入 使用 示例二 添加long类型约束，必须大于0 注入该配置 使用该自定义约束 控制器路由 动态控制器路由 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-25T13:23:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T13:23:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路由\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T13:23:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"路由注册方式","slug":"路由注册方式","link":"#路由注册方式","children":[]},{"level":2,"title":"路由约束","slug":"路由约束","link":"#路由约束","children":[{"level":3,"title":"类型约束","slug":"类型约束","link":"#类型约束","children":[]},{"level":3,"title":"范围约束","slug":"范围约束","link":"#范围约束","children":[]},{"level":3,"title":"正则约束","slug":"正则约束","link":"#正则约束","children":[]},{"level":3,"title":"是否必选","slug":"是否必选","link":"#是否必选","children":[]},{"level":3,"title":"自定义IRouteConstraint","slug":"自定义irouteconstraint","link":"#自定义irouteconstraint","children":[{"level":4,"title":"示例一","slug":"示例一","link":"#示例一","children":[]},{"level":4,"title":"示例二","slug":"示例二","link":"#示例二","children":[]}]}]},{"level":2,"title":"控制器路由","slug":"控制器路由","link":"#控制器路由","children":[]},{"level":2,"title":"基础使用","slug":"基础使用","link":"#基础使用","children":[{"level":3,"title":"Route约束","slug":"route约束","link":"#route约束","children":[]},{"level":3,"title":"路由的配置","slug":"路由的配置","link":"#路由的配置","children":[]},{"level":3,"title":"Url全小写模式","slug":"url全小写模式","link":"#url全小写模式","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1698240217000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":4.2,"words":1260},"filePathRelative":"dotnet/base/luyou/luyou.md","localizedDate":"2023年4月14日","excerpt":"<h2>路由注册方式</h2>\\n<ul>\\n<li>路由模板的方式</li>\\n<li>RouteAttribute方式</li>\\n</ul>\\n<h2>路由约束</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>约束</th>\\n<th>示例</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>int</code></td>\\n<td><code>{id:int}</code></td>\\n<td>匹配任何整数</td>\\n</tr>\\n<tr>\\n<td><code>bool</code></td>\\n<td><code>{active:bool}</code></td>\\n<td>匹配 <code>true</code></td>\\n</tr>\\n<tr>\\n<td>或 <code>false</code></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>。 不区分大小写</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>datetime</code></td>\\n<td><code>{dob:datetime}</code></td>\\n<td>在固定区域性中匹配有效的 <code>DateTime</code></td>\\n</tr>\\n<tr>\\n<td>值。</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>decimal</code></td>\\n<td><code>{price:decimal}</code></td>\\n<td>在固定区域性中匹配有效的 <code>decimal</code></td>\\n</tr>\\n<tr>\\n<td>值。</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>double</code></td>\\n<td><code>{weight:double}</code></td>\\n<td>在固定区域性中匹配有效的 <code>double</code></td>\\n</tr>\\n<tr>\\n<td>值。</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>float</code></td>\\n<td><code>{weight:float}</code></td>\\n<td>在固定区域性中匹配有效的 <code>float</code></td>\\n</tr>\\n<tr>\\n<td>值。</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>guid</code></td>\\n<td><code>{id:guid}</code></td>\\n<td>匹配有效的 <code>Guid</code></td>\\n</tr>\\n<tr>\\n<td>值</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>long</code></td>\\n<td><code>{ticks:long}</code></td>\\n<td>匹配有效的 <code>long</code></td>\\n</tr>\\n<tr>\\n<td>值</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>minlength(value)</code></td>\\n<td><code>{username:minlength(4)}</code></td>\\n<td>字符串必须至少为 4 个字符</td>\\n</tr>\\n<tr>\\n<td><code>maxlength(value)</code></td>\\n<td><code>{filename:maxlength(8)}</code></td>\\n<td>字符串不得超过 8 个字符</td>\\n</tr>\\n<tr>\\n<td><code>length(length)</code></td>\\n<td><code>{filename:length(12)}</code></td>\\n<td>字符串必须正好为 12 个字符</td>\\n</tr>\\n<tr>\\n<td><code>length(min,max)</code></td>\\n<td><code>{filename:length(8,16)}</code></td>\\n<td>字符串必须至少为 8 个字符，且不得超过 16 个字符</td>\\n</tr>\\n<tr>\\n<td><code>min(value)</code></td>\\n<td><code>{age:min(18)}</code></td>\\n<td>整数值必须至少为 18</td>\\n</tr>\\n<tr>\\n<td><code>max(value)</code></td>\\n<td><code>{age:max(120)}</code></td>\\n<td>整数值不得超过 120</td>\\n</tr>\\n<tr>\\n<td><code>range(min,max)</code></td>\\n<td><code>{age:range(18,120)}</code></td>\\n<td>整数值必须至少为 18，且不得超过 120</td>\\n</tr>\\n<tr>\\n<td><code>alpha</code></td>\\n<td><code>{name:alpha}</code></td>\\n<td>字符串必须由一个或多个字母字符组成，<code>a</code></td>\\n</tr>\\n<tr>\\n<td>-<code>z</code></td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>，并区分大小写。</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td><code>regex(expression)</code></td>\\n<td><code>{ssn:regex(^\\\\\\\\\\\\\\\\d{{3}}-\\\\\\\\\\\\\\\\d{{2}}-\\\\\\\\\\\\\\\\d{{4}}$)}</code></td>\\n<td>字符串必须与正则表达式匹配。 请参阅有关定义正则表达式的提示。</td>\\n</tr>\\n<tr>\\n<td><code>required</code></td>\\n<td><code>{name:required}</code></td>\\n<td>用于强制在 URL 生成过程中存在非参数值</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{y as comp,f as data};
