import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,o as t,d as n}from"./app-mrI7cTrN.js";const o="/kbms/common/1642519842434-6a3c7771-9f17-4abc-9242-828cd2a2385b.png",a="/kbms/common/1642519842318-61f9a571-d9e2-4680-b75f-c78b37957fac.png",l="/kbms/common/1642519842465-6b402cda-bef4-4830-ab75-648a13212cc6.png",p="/kbms/common/1642519842516-0bd5b960-036d-4ff8-8250-795ee6257a7c.png",s={},i=n('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>来自网络，内容是否过时自行判断</p></div><h2 id="深入-net" tabindex="-1"><a class="header-anchor" href="#深入-net"><span>深入.NET</span></a></h2><p>#、.NET Core跨平台解读 <a href="http://www.cnblogs.com/artech/p/how-to-cross-platform-01.html" target="_blank" rel="noopener noreferrer">.NET Core跨平台的奥秘[上篇]：历史的枷锁</a><a href="http://www.cnblogs.com/artech/p/how-to-cross-platform-02.html" target="_blank" rel="noopener noreferrer">.NET Core跨平台的奥秘[中篇]：复用之殇</a><a href="http://www.cnblogs.com/artech/p/how-to-cross-platform-03.html" target="_blank" rel="noopener noreferrer">.NET Core跨平台的奥秘[下篇]：全新的布局（.NET Standard）</a></p><p>#、.NET Standard 与 .NET 5+ <a href="https://zhuanlan.zhihu.com/p/24267356" target="_blank" rel="noopener noreferrer">【译】介绍 .NET Standard</a><a href="https://github.com/dotnet/standard/blob/master/docs/versions.md" target="_blank" rel="noopener noreferrer">.NET Standard Versions（版本对应图）</a><a href="https://github.com/dotnet/standard" target="_blank" rel="noopener noreferrer">[github]dotnet/standard</a><a href="https://www.oschina.net/news/118690/the-future-of-net-standard?from=20200920" target="_blank" rel="noopener noreferrer">微软停止更新.NET Standard，.NET 5 取而代之</a> 选择建议：</p><ol><li>用于在.NET Framework 和所有其他平台之间共享代码，使用netstandard2.0</li><li>用于在Mono，Xamarin 和.NET Core 3.x 之间共享代码，使用netstandard2.1</li><li>向后共享代码，使用net5.0 <a href="https://docs.microsoft.com/en-us/dotnet/api/?view=netstandard-2.0" target="_blank" rel="noopener noreferrer">.NET API 一览表</a></li></ol><p>#、运行机制 <a href="https://www.cnblogs.com/willick/p/15117222.html" target="_blank" rel="noopener noreferrer">.NET 的执行模型（CoreCLR 执行模型和Native AOT执行模型）</a><a href="https://www.cnblogs.com/artech/p/inside-asp-net-core-framework.html" target="_blank" rel="noopener noreferrer">200行代码，7个对象——让你了解ASP.NET Core框架的本质（带源码）</a> (HttpContext，RequestDelegate，Middleware，ApplicationBuilder，Server，HttpListenerServer，WebHost) <a href="https://www.cnblogs.com/FlyLolo/p/ASPNETCore2_5.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 服务是如何启动、配置并运行的</a>（IWebHost、Create­DefaultBuilder） <a href="https://www.cnblogs.com/lwqlun/p/9704702.html" target="_blank" rel="noopener noreferrer">深入理解.NET Core的基元: deps.json, runtimeconfig.json, dll文件</a> 补充：在vs中编译core项目时，在bin下面会生成deps.json记录nuget包依赖关系，并不会把依赖的nuget包拷贝到bin文件夹下。但执行dotnet publish命令发布core项目时，会将依赖的nuget包拷贝到发布目录 <a href="https://docs.microsoft.com/zh-cn/dotnet/core/run-time-config/" target="_blank" rel="noopener noreferrer">.NET Core 运行时配置设置</a>（小节包含几篇文章，配置：依赖的包，加载路径，网络设置、线程设置等） <a href="https://cloud.tencent.com/developer/article/1342410?from=14588" target="_blank" rel="noopener noreferrer">使用Directory.Build.props 文件管理多个csproj项目的配置</a></p><p>#、.NET Web 服务器 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/?view=aspnetcore-5.0&amp;tabs=windows" target="_blank" rel="noopener noreferrer">ASP.NET Core web服务器实现( kestrel&amp;HTTP.sys )</a><a href="https://mp.weixin.qq.com/s/2MV6-Q5XDkntonjevOtZrg" target="_blank" rel="noopener noreferrer">为什么Linux 上的Asp.NET 5 需要 Kestrel ?</a><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">ASP.NET Core 的Kestrel Web 服务器</a><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/httpsys?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">ASP.NET Core 的HTTP.sys Web 服务器</a></p><p>#、性能分析方案 性能分析 <a href="https://mp.weixin.qq.com/s/7M18VhTz5y0W620sCEvXYQ" target="_blank" rel="noopener noreferrer">使用MiniProfiler 分析ASP.NET Core 、EF Core 性能</a><a href="https://www.cnblogs.com/h82258652/p/8748345.html" target="_blank" rel="noopener noreferrer">使用 BenchmarkDotnet 测试代码性能</a> 分析快照堆栈、线程信息、异常信息、内存信息、GC信息等 <a href="https://www.cnblogs.com/zhenglisai/p/14751677.html" target="_blank" rel="noopener noreferrer">分析.net core在linux下内存占用过高问题</a>（dotnet-counters，dotnet-dump） <a href="https://mp.weixin.qq.com/s/-H1PMAQuEy0FGQ1QMwgK-g" target="_blank" rel="noopener noreferrer">如何排查.NET 内存泄漏</a>（dotnet-counters，dotnet-dump） <a href="https://www.cnblogs.com/tianqing/p/11307049.html" target="_blank" rel="noopener noreferrer">Windbg程序调试系列（内存泄露、线程阻塞、高CPU等）</a><a href="https://www.cnblogs.com/huangxincheng/category/1967355.html" target="_blank" rel="noopener noreferrer">【一线码农】Windbg分析案例</a><a href="https://www.cnblogs.com/myshowtime/p/15587070.html" target="_blank" rel="noopener noreferrer">.NET GC 实时监控 dotnet-gcmon</a></p><h3 id="架构相关理论" tabindex="-1"><a class="header-anchor" href="#架构相关理论"><span>架构相关理论</span></a></h3><p>#、设计理论 <a href="http://c.biancheng.net/view/8508.html" target="_blank" rel="noopener noreferrer">一句话总结软件设计七大原则</a><a href="http://c.biancheng.net/view/8462.html" target="_blank" rel="noopener noreferrer">一句话归纳23种设计模式</a><a href="https://www.cnblogs.com/printN/p/6822333.html" target="_blank" rel="noopener noreferrer">网站系统架构层次</a><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures#clean-architecture" target="_blank" rel="noopener noreferrer">The Clean Architecture（干净体系架构）</a><a href="https://mp.weixin.qq.com/s/ta57G3kLbxpNZ1tZK7XS-w" target="_blank" rel="noopener noreferrer">技术架构的战略和战术原则</a><a href="https://segmentfault.com/a/1190000018626163" target="_blank" rel="noopener noreferrer">服务端高并发分布式架构15次演进之路</a> API设计 <a href="https://www.cnblogs.com/jurendage/p/12653865.html" target="_blank" rel="noopener noreferrer">四连问：API 接口应该如何设计？如何保证安全？如何签名？如何防重？</a><a href="https://blog.csdn.net/justyman/article/details/103221939" target="_blank" rel="noopener noreferrer">API接口设计最佳实践</a> 缓存 <a href="https://www.cnblogs.com/wzh2010/p/13874211.html" target="_blank" rel="noopener noreferrer">一次缓存雪崩的灾难复盘（并讲解：缓存雪崩、缓存穿透、缓存击穿）</a><a href="https://www.cnblogs.com/wzh2010/p/13874206.html" target="_blank" rel="noopener noreferrer">系统架构设计：进程缓存和缓存服务，如何抉择？</a><a href="https://www.cnblogs.com/rjzheng/p/9041659.html" target="_blank" rel="noopener noreferrer">分布式之数据库和缓存双写一致性方案解析</a><a href="https://www.cnblogs.com/littlecharacter/p/9084291.html" target="_blank" rel="noopener noreferrer">MySQL数据库之互联网常用架构方案</a><a href="https://blog.51cto.com/lizhenliang/2400452" target="_blank" rel="noopener noreferrer">一文搞懂蓝绿发布、灰度发布和滚动发布</a><a href="https://mp.weixin.qq.com/s/aWGEOID5vEUoOy4tnLft8w" target="_blank" rel="noopener noreferrer">秒杀系统怎么设计？</a></p><p>#、领域驱动设计（DDD） 领域驱动涉及的主要概念：领域、界限上下文、领域模型、统一建模语言（UML）、模块、实体、值对象、应用服务&amp;领域服务、领域事件、聚合、聚合根、仓储、工作单元（Uow）等等 <a href="https://mp.weixin.qq.com/s/NPyMO8ydGR7Eyrx7GK06sA" target="_blank" rel="noopener noreferrer">一文理解DDD 领域驱动设计！</a><a href="https://www.jianshu.com/p/6e2917551e63" target="_blank" rel="noopener noreferrer">[圣杰]DDD理论学习系列——案例及目录</a><a href="https://mp.weixin.qq.com/s/S72vrneBBcRQUyge3UNolg" target="_blank" rel="noopener noreferrer">DDD 领域驱动设计：贫血模型、充血模型的深入解读</a><a href="https://www.cnblogs.com/dlhjw/p/15211689.html" target="_blank" rel="noopener noreferrer">《微服务架构设计模式》读书笔记：微服务架构中的业务逻辑设计</a> DDD中重要且难理解部分的摘抄：</p><ol><li>领域：一个领域本质上可以理解为就是一个问题域，只要是同一个领域，那问题域就相同。所以，只要我们确定了系统所属的领域，那这个系统的核心业务，即要解决的关键问题、问题的范围边界就基本确定了。</li><li>领域模型：就是将业务中涉及到的概念以面向对象的思想进行抽象，抽象出实体对象，确定实体所对应的方法和属性，以及实体之间的关系。然后将这些实体和实体之间的关系以某种形式（比如UML、图形、代码、文字描述等）展现出来。</li><li>模块： l 模块通过分解领域模型为不同的模块，以降低领域模型的复杂性，提高领域模型的可读性。 l 模块的设计要符合高内聚低耦合的设计思想。 <a href="https://img2020.cnblogs.com/blog/106337/202111/106337-20211109153417874-113303678.jpg" target="_blank" rel="noopener noreferrer"><img src="'+o+'" alt="image.png" loading="lazy"></a></li><li>领域事件= 事件发布+ 事件存储+ 事件分发+ 事件处理</li><li>领域服务 l 领域服务是无状态的，它存在的意义就是协调多个领域对象完成某个操作，所有的状态还是都保存在相应的领域对象中。 l 领域服务还有一个很重要的功能就是可以避免领域逻辑泄露到应用层。因为如果没有领域服务，那么应用层会直接调用领域对象完成本该是属于领域服务该做的操作，这样一来，领域层可能会把一部分领域知识泄露到应用层。因为应用层需要了解每个领域对象的业务功能，具有哪些信息，以及它可能会与哪些其他领域对象交互，怎么交互等一系列领域知识。因此，引入领域服务可以有效的防治领域层的逻辑泄露到应用层。</li><li>聚合和聚合根 l 聚合的一些特点：</li></ol><ol><li>每个聚合有一个根和一个边界，边界定义了一个聚合内部有哪些实体或值对象，根是聚合内的某个实体；</li><li>聚合内实现事务一致性，聚合外实现最终一致性（使用领域事件进行事务拆分，实现最终一致性）。在一个事务中，只能创建或更新一个聚合。</li><li>聚合内部的对象之间可以相互引用，但是聚合外部如果要访问聚合内部的对象时，必须通过聚合根开始导航，绝对不能绕过聚合根直接访问聚合内的对象，也就是说聚合根是外部访问聚合的网关；</li><li>聚合内除根以外的其他实体的唯一标识都是本地标识，也就是只要在聚合内部保持唯一即可，因为它们总是从属于这个聚合的；</li><li>基于聚合的以上概念，我们可以推论出从数据库查询时的单元也是以聚合为一个单元，也就是说我们不能直接查询聚合内部的某个非根的对象；</li><li>使用小聚合（大聚合会影响性能；大聚合容易导致并发冲突；大聚合扩展性差）</li><li>聚合内部的对象可以保持对其他聚合根的引用；</li><li>删除一个聚合根时必须同时删除该聚合内的所有相关对象，因为他们都同属于一个聚合，是一个完整的概念；</li><li>停下来重构模型。寻找模型中觉得有些疑问或者是蹩脚的地方，比如思考一些对象应该通过关联导航获得到还是应该从仓储获取？聚合设计的是否正确？考虑模型的性能怎样，等等； l 如何识别聚合： 先从业务的角度深入思考，然后慢慢分析出有哪些对象是：</li><li>有独立存在的意义，即它是不依赖于其他对象的存在它才有意义的；</li><li>可以被独立访问的，还是必须通过某个其他对象导航得到的； 有分析报告显示，通常在大部分领域模型中，有70%的聚合通常只有一个实体，即聚合根，该实体内部没有包含其他实体，只包含一些值对象；另外30%的聚合中，基本上也只包含两到三个实体。 l 如何识别聚合根： 如果一个聚合只有一个实体，那么这个实体就是聚合根；如果有多个实体，那么我们可以思考聚合内哪个对象有独立存在的意义并且可以和外部直接进行交互。</li></ol><ol start="7"><li>仓储 l 仓储里面存放的对象一定是聚合，原因是领域模型中是以聚合的概念去划分边界的；聚合是我们更新对象的一个边界，事实上我们把整个聚合看成是一个整体概念，要么一起被取出来，要么一起被删除。我们永远不会单独对某个聚合内的子对象进行单独查询或做更新操作。因此，我们只对聚合设计仓储 l 仓储还有一个重要的特征就是分为仓储定义部分和仓储实现部分，在领域模型中我们定义仓储的接口，而在基础设施层实现具体的仓储。这样做的原因是：由于仓储背后的实现都是在和数据库打交道，但是我们又不希望客户（如应用层）把重点放在如何从数据库获取数据的问题上，因为这样做会导致客户（应用层）代码很混乱，很可能会因此而忽略了领域模型的存在。 l 仓储定义的接口要有具体领域意义，不能是一个模糊的通用的接口。通用接口会导致取数据逻辑泄露到应用层或领域层。</li></ol><p>#、微服务 <a href="http://www.360doc.com/content/18/0408/13/40043863_743769502.shtml" target="_blank" rel="noopener noreferrer">微服务介绍</a><a href="https://www.cnblogs.com/wzh2010/p/14940280.html" target="_blank" rel="noopener noreferrer">微服务及其演进史</a><a href="https://www.cnblogs.com/jackyfei/p/10856427.html" target="_blank" rel="noopener noreferrer">微服务划分的姿势</a><a href="https://www.jianshu.com/p/18284ef827a4?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener noreferrer">分布式系统架构的冰与火</a><a href="https://blog.csdn.net/weixin_33705053/article/details/86720945" target="_blank" rel="noopener noreferrer">从亚马逊的实践，谈分布式系统的难点</a><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/" target="_blank" rel="noopener noreferrer">.NET 微服务：适用于容器化.NET 应用程序的体系结构- 电子书</a></p><p>#、中台 <a href="https://blog.csdn.net/weixin_42674359/article/details/85099971" target="_blank" rel="noopener noreferrer">阿里大中台小前台解读</a><a href="https://www.cnblogs.com/edisonchou/p/an_introduction_to_middle_end.html" target="_blank" rel="noopener noreferrer">企业级中台建设</a><a href="https://mp.weixin.qq.com/s/qup2r_jly4lrxVgxW5SsCQ" target="_blank" rel="noopener noreferrer">头部电商的中台实践血泪总结</a></p><h3 id="net-微服务架构" tabindex="-1"><a class="header-anchor" href="#net-微服务架构"><span>.NET 微服务架构</span></a></h3><p>#、ABP基础开发框架 官网：<a href="https://cn.abp.io/" target="_blank" rel="noopener noreferrer">https://cn.abp.io/</a> github：<a href="https://github.com/abpframework/abp" target="_blank" rel="noopener noreferrer">https://github.com/abpframework/abp</a> 官方教程：<a href="https://docs.abp.io/zh-Hans/abp/latest" target="_blank" rel="noopener noreferrer">https://docs.abp.io/zh-Hans/abp/latest</a> 商业版demo：<a href="https://commercial.abp.io/demo" target="_blank" rel="noopener noreferrer">https://commercial.abp.io/demo</a> 使用 get-started：<a href="https://www.abp.io/get-started" target="_blank" rel="noopener noreferrer">https://www.abp.io/get-started</a> (使用Volo.Abp.Cli下载项目有时会失败，可以在get-started网站上直接创建项目模板) <a href="https://mp.weixin.qq.com/s/bjLISCULMCOV7rKiGhSJXw" target="_blank" rel="noopener noreferrer">基于abp vnext制作项目脚手架</a> AbpHelper.CLI <a href="https://github.com/EasyAbp/AbpHelper.CLI" target="_blank" rel="noopener noreferrer">使用ABPHelper自动生成代码 （CRUD演示）</a><a href="https://github.com/EasyAbp/AbpHelper.CLI/blob/develop/docs/images/crud.gif" target="_blank" rel="noopener noreferrer">CRUD演示</a> 示例 <a href="https://docs.abp.io/zh-Hans/abp/latest/Samples/Index" target="_blank" rel="noopener noreferrer">Abp官方所有示例</a><a href="https://docs.abp.io/zh-Hans/abp/latest/Samples/Microservice-Demo" target="_blank" rel="noopener noreferrer">Abp官方微服务解决方案示例</a> 最佳实践 <a href="https://blog.csdn.net/kaixincheng2009/article/details/104981315" target="_blank" rel="noopener noreferrer">跟着“土牛”学架构知识</a><a href="https://docs.abp.io/zh-Hans/abp/latest/Best-Practices/Index" target="_blank" rel="noopener noreferrer">[Abp官方]模块开发最佳实践&amp; 约定</a><a href="https://www.cnblogs.com/YGYH/p/14922609.html" target="_blank" rel="noopener noreferrer">基于ABP落地领域驱动设计-01.全景图</a><a href="https://www.cnblogs.com/YGYH/p/14927599.html" target="_blank" rel="noopener noreferrer">基于ABP落地领域驱动设计-02.聚合和聚合根的最佳实践和原则</a><a href="https://www.cnblogs.com/YGYH/p/14931390.html" target="_blank" rel="noopener noreferrer">基于ABP落地领域驱动设计-03.仓储和规约最佳实践和原则</a><a href="https://www.cnblogs.com/YGYH/p/14934791.html" target="_blank" rel="noopener noreferrer">基于ABP落地领域驱动设计-04.领域服务和应用服务的最佳实践和原则</a><a href="https://www.cnblogs.com/YGYH/p/14934804.html" target="_blank" rel="noopener noreferrer">基于ABP落地领域驱动设计-05.实体创建和更新最佳实践</a><a href="https://www.cnblogs.com/YGYH/p/14934819.html" target="_blank" rel="noopener noreferrer">基于ABP落地领域驱动设计-06.正确区分领域逻辑和应用逻辑</a> 其他： Abp官方(<a href="https://www.abp.io/get-started" target="_blank" rel="noopener noreferrer">https://www.abp.io/get-started</a>)有提供社区版前端客户端：Razor Pages、Blazor、Angular、ReactNative。暂时没有提供Vue前端客户端。这边给出几个vue-admin的社区资源： <a href="https://github.com/colinin/abp-vue-admin-element-typescript" target="_blank" rel="noopener noreferrer">abp+vue-element-admin</a><a href="https://github.com/colinin/vue-vben-admin-abp-vnext" target="_blank" rel="noopener noreferrer">abp+vue-vben-admin(vue3+typescript+ant design)</a><a href="https://github.com/WangJunZzz/abp-vnext-pro" target="_blank" rel="noopener noreferrer">abp-vnext-pro + vben</a></p><p>模板项目图： <a href="https://img2020.cnblogs.com/blog/106337/202111/106337-20211109153418895-1141899126.png" target="_blank" rel="noopener noreferrer"><img src="'+a+'" alt="image.png" loading="lazy"></a> 项目依赖图： <a href="https://img2020.cnblogs.com/blog/106337/202111/106337-20211109153419779-1572559697.png" target="_blank" rel="noopener noreferrer"><img src="'+l+'" alt="image.png" loading="lazy"></a> 因本人使用过ABP，所以文中以ABP基础开发框架为例 在DotNet Core中还有很多其他的优秀基础开发框架，如： <a href="https://github.com/dotnetcore/WTM" target="_blank" rel="noopener noreferrer">WTM</a>、<a href="https://github.com/dotnetcore/OSharp" target="_blank" rel="noopener noreferrer">Osharp</a>、<a href="https://github.com/anjoy8/Blog.Core" target="_blank" rel="noopener noreferrer">Blog.Core</a>、<a href="https://github.com/monksoul/Furion" target="_blank" rel="noopener noreferrer">Furioin</a>、<a href="https://github.com/liuhll/silky" target="_blank" rel="noopener noreferrer">Silky</a> 等等</p><p>#、.NET 微服务相关的技术 API网关：Kong、Ocelot、Nginx 服务注册与发现：Consul（Consul Tamplate+nginx）、etcd、ZooKeeper 身份认证中心：IdentityServer4 服务调用：WebAPI、gRPC 消息事件总线：本地消息总线（进程内存缓存）、分布式消息总线（RabbitMQ、Kafka） 瞬态故障处理：Polly 分布式追踪：SkyWalking、Cat、Zipkin、Elastc.APM 分布式系统监控：Prometheus、（App.Metrics+InfluxDB+Grafana） 分布式事务：CAP、MassTransit 分布式日志：ExceptionLess、ELK 分布式缓存：StackExchange.Redis 分布式锁：RedLock.NET 消息队列：RabbitMQ、Kafka 配置中心：Apollo DevOps：Jenkins、Docker、K8S、GitLab-ci、Azure Pipelines</p><p>相关资料推荐 API网关 <a href="https://www.cnblogs.com/viter/p/11142940.html" target="_blank" rel="noopener noreferrer">高性能微服务网关.NETCore客户端Kong.Net开源发布</a><a href="https://www.cnblogs.com/cxt618/p/14682628.html" target="_blank" rel="noopener noreferrer">Ocelot简易教程（简介、配置、负载、认证、限流、聚合等）</a> 认证授权 <a href="https://www.cnblogs.com/haolb123/p/15152124.html" target="_blank" rel="noopener noreferrer">RBAC权限系统分析、设计与实现</a><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener noreferrer">[阮一峰]理解OAuth 2.0</a><a href="https://www.cnblogs.com/wwcom123/p/11600463.html" target="_blank" rel="noopener noreferrer">OAuth2.0授权登录四种模式时序图</a><a href="https://www.jianshu.com/p/78d2bb18439c" target="_blank" rel="noopener noreferrer">IdentityServer4实现了OAuth和OpenId Connect</a> OAuth只负责Authorization（授权）. 那么谁来负责Authentication（认证）呢?那就是OpenId Connect, OpenId Connect是对OAuth的一种补充, 因为它能进行Authentication. OAuth通常有以下几种endpoint：authorize，token，revocation等 OpenId Connect 通常有以下几种endpoints：userinfo，checksession，endsession，.well-known/openid-configuration，.well-known/jwks等 <a href="https://www.cnblogs.com/stulzq/p/8119928.html" target="_blank" rel="noopener noreferrer">[晓晨Master]IdentityServer4 中文文档与实战</a><a href="https://www.cnblogs.com/jlion/p/12501195.html" target="_blank" rel="noopener noreferrer">Asp.Net Core 中IdentityServer4 授权原理及刷新Token的应用</a><a href="https://www.bilibili.com/video/av42364337" target="_blank" rel="noopener noreferrer">[免费视频]IdentityServer4 教程视频</a> 分布式事务 <a href="https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html" target="_blank" rel="noopener noreferrer">聊聊分布式事务</a>（ACID、CAP、BASE、2PC、TCC、本地消息表（异步确保）、MQ 事务消息） <a href="https://www.cnblogs.com/CKExp/p/14710976.html" target="_blank" rel="noopener noreferrer">Asp.Net Core&amp;CAP实现分布式事务</a> 配置中心 Apollo Apollo github：<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener noreferrer">https://github.com/ctripcorp/apollo</a> Apollo官方Demo：<a href="http://106.54.227.205/" target="_blank" rel="noopener noreferrer">http://106.54.227.205/</a>（账户密码：apollo admin） AgileConfig AgileConfig github：<a href="https://github.com/dotnetcore/AgileConfig" target="_blank" rel="noopener noreferrer">https://github.com/dotnetcore/AgileConfig</a> AgileConfig 官方Demo：<a href="http://agileconfig_server.xbaby.xyz/ui" target="_blank" rel="noopener noreferrer">http://agileconfig_server.xbaby.xyz/ui</a> （账户密码：admin 123456） Redis Redis，全称是Remote Dictionary Service,翻译过来就是，远程字典服务。 Redis属于nosql非关系型数据库。Nosql常见的数据关系，基本上是以key-value键值对形式存在的。 <a href="https://www.cnblogs.com/xiaoxiaotank/p/14982602.html" target="_blank" rel="noopener noreferrer">基于Redis的分布式锁设计（RedLock.net）</a> 监控 <a href="https://www.cnblogs.com/xiandnc/p/11480624.html" target="_blank" rel="noopener noreferrer">使用Elastic APM监控你的.NET Core应用</a><a href="http://www.cnblogs.com/GuZhenYin/p/7170010.html" target="_blank" rel="noopener noreferrer">ASP.NET Core之跨平台的实时性能监控（App.Metrics+InfluxDB+Grafana）</a> 其他 <a href="https://blog.csdn.net/qq_32828253/article/details/110450249" target="_blank" rel="noopener noreferrer">RabbitMQ 七种队列模式应用场景案例分析（通俗易懂）</a></p><p>应用示例： eShopOnContainers项目 <a href="https://github.com/dotnet-architecture/eShopOnContainers" target="_blank" rel="noopener noreferrer">[github]eShopOnContainers</a><a href="https://www.cnblogs.com/sheng-jie/p/9789180.html" target="_blank" rel="noopener noreferrer">[圣杰]eShopOnContainers 分析文章系列</a><a href="https://github.com/abpframework/abp-samples/tree/master/MicroserviceDemo" target="_blank" rel="noopener noreferrer">[github]abp-samples/MicroserviceDemo项目</a></p><h3 id="云原生" tabindex="-1"><a class="header-anchor" href="#云原生"><span>云原生</span></a></h3><p>TVP腾讯云最具价值专家张善友，他给到的解释是——“云原生的本质是一系列最佳实践的结合；云原生是云这种环境下的一种开发的理念、一种模式，无服务器、微服务、容器、DevOps都是云原生理念里面的子集。 <a href="https://mp.weixin.qq.com/s/2qExl8hr5PN_C--jI6hxow" target="_blank" rel="noopener noreferrer">什么是云原生</a> 云是和本地相对的，传统的应用必须跑在本地服务器上，现在流行的应用都跑在云端，云包含了IaaS,、PaaS和SaaS。 原生就是土生土长的意思，我们在开始设计应用的时候就考虑到应用将来是运行云环境里面的，要充分利用云资源的优点，比如️云服务的弹性和分布式优势。 可以简单地把云原生理解为：云原生= 微服务+ DevOps + 容器化+ 持续交付 <a href="https://landscape.cncf.io/?selected=iguazio" target="_blank" rel="noopener noreferrer">云原生全景图谱</a><a href="https://mp.weixin.qq.com/s/cgkkflioTiepIUyEwVbxkg" target="_blank" rel="noopener noreferrer">云原生全景图详解</a><a href="https://www.cnblogs.com/shanyou/p/11566850.html" target="_blank" rel="noopener noreferrer">进击的.NET 在云原生时代的蜕变</a><a href="https://blog.csdn.net/wufaliang003/article/details/79533345" target="_blank" rel="noopener noreferrer">云原生应用的12要素</a> 给各种云服务一个灵活度排序：IaaS（各种云主机）&gt; CaaS（Docker 等容器服务）&gt; PaaS（BAE、SAE、GAE 等APP Engine）&gt; FaaS &gt; BaaS &gt; SaaS（各种Web APP，如Google Doc）。（<a href="https://kb.cnblogs.com/page/651941/" target="_blank" rel="noopener noreferrer">查看更多=&gt;</a>） <a href="https://img2020.cnblogs.com/blog/106337/202111/106337-20211109153420865-1229092781.png" target="_blank" rel="noopener noreferrer"><img src="'+p+'" alt="image.png" loading="lazy"></a></p><p>#、Docker 与Kubernetes（K8S） <a href="https://www.cnblogs.com/chenqionghe/p/11454248.html" target="_blank" rel="noopener noreferrer">极简Docker和Kubernetes发展史</a><a href="https://www.cnblogs.com/powertoolsteam/p/14980851.html" target="_blank" rel="noopener noreferrer">Docker与k8s的恩怨情仇</a><a href="https://mp.weixin.qq.com/s/tCABfqicCYQXVSa5hVMXvA" target="_blank" rel="noopener noreferrer">Docker员工自述：我们为什么“输”给了Kubernetes？</a></p><p>Docker <a href="https://www.cnblogs.com/heyuquan/p/docker-cmd-and-dotnetcore.html" target="_blank" rel="noopener noreferrer">一文掌握 Docker 常用命令</a></p><p>K8S <a href="https://www.kubernetes.org.cn/k8s" target="_blank" rel="noopener noreferrer">kubernetes中文社区、中文文档</a><a href="https://www.cnblogs.com/alisystemsoftware/p/11526534.html" target="_blank" rel="noopener noreferrer">8 分钟了解 Kubernetes</a><a href="https://www.cnblogs.com/edisonchou/p/aspnet_core_on_k8s_foundation_artcles_index.html" target="_blank" rel="noopener noreferrer">[Edison Zhou]ASP.NET Core on K8s 入门学习系列文章目录</a><a href="https://mp.weixin.qq.com/s/14DLVLzIt7lCoURuXZrpRQ" target="_blank" rel="noopener noreferrer">Kubernetes + .NET Core 的落地实践（案例：本来生活网）</a></p><p>实例 <a href="https://www.cnblogs.com/fanshaoO/p/10571503.html" target="_blank" rel="noopener noreferrer">如何使用vs将asp.net core项目添加容器支持并发布docker镜像到私有dockerhub和添加k8s/helm管理</a><a href="https://mp.weixin.qq.com/s/ZBFdIO5scyFRA45yVUcEDA" target="_blank" rel="noopener noreferrer">从零开始在Windows 上部署.NET Core 到 Kubernetes</a></p><p>#、自动化集成与部署 流程：编码-&gt; 构建-&gt; 集成-&gt; 测试-&gt; 交付-&gt; 部署 <a href="https://mp.weixin.qq.com/s/kzxKoRawrxY95t-DMQwyhg" target="_blank" rel="noopener noreferrer">一文看懂持续部署按需发布！DevOps部署和发布方法大全</a><a href="https://www.cnblogs.com/heyuquan/p/jenkins-use-guide.html" target="_blank" rel="noopener noreferrer">[CI&amp;CD]jenkins自动化工具使用教程</a> 持续集成（Continuous Integration）简称CI 持续交付（Continuous Delivery）简称CD GitHub Actions <a href="https://docs.github.com/cn/actions/quickstart" target="_blank" rel="noopener noreferrer">GitHub Actions 快速入门</a><a href="https://www.cnblogs.com/pual13/p/15224138.html" target="_blank" rel="noopener noreferrer">两种github action 打包.Net Core 项目docker镜像推送到阿里云镜像仓库</a> Azure Pipeline <a href="https://www.cnblogs.com/kklldog/p/azure-devops-pipeline.html" target="_blank" rel="noopener noreferrer">使用Azure DevOps Pipeline实现.Net Core程序的CI</a> 示例：<a href="https://github.com/dotnetcore/WTM/tree/develop/.azure/pipelines" target="_blank" rel="noopener noreferrer">WTM-pipelines</a></p><h3 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h3><p><a href="https://www.cnblogs.com/heyuquan/p/dotnet-architecture-learning-resource.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/heyuquan/p/dotnet-architecture-learning-resource.html</a></p>',31),h=[i];function c(g,m){return t(),r("div",null,h)}const w=e(s,[["render",c],["__file","ziliaojingshuajiagoupian.html.vue"]]),d=JSON.parse('{"path":"/dotnet/jiaocheng/ziliaojingshuajiagoupian.html","title":"资料精选架构篇","lang":"zh-CN","frontmatter":{"title":"资料精选架构篇","lang":"zh-CN","date":"2022-01-27T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"ziliaojingshuajiagoupian","slug":"mvbfy3","docsId":"65198453","description":"提示 来自网络，内容是否过时自行判断 深入.NET #、.NET Core跨平台解读 .NET Core跨平台的奥秘[上篇]：历史的枷锁 .NET Core跨平台的奥秘[中篇]：复用之殇 .NET Core跨平台的奥秘[下篇]：全新的布局（.NET Standard） #、.NET Standard 与 .NET 5+ 【译】介绍 .NET Stand...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/jiaocheng/ziliaojingshuajiagoupian.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"资料精选架构篇"}],["meta",{"property":"og:description","content":"提示 来自网络，内容是否过时自行判断 深入.NET #、.NET Core跨平台解读 .NET Core跨平台的奥秘[上篇]：历史的枷锁 .NET Core跨平台的奥秘[中篇]：复用之殇 .NET Core跨平台的奥秘[下篇]：全新的布局（.NET Standard） #、.NET Standard 与 .NET 5+ 【译】介绍 .NET Stand..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://azrng.gitee.io/kbms/kbms/common/1642519842434-6a3c7771-9f17-4abc-9242-828cd2a2385b.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-13T15:17:37.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-01-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-13T15:17:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"资料精选架构篇\\",\\"image\\":[\\"https://azrng.gitee.io/kbms/kbms/common/1642519842434-6a3c7771-9f17-4abc-9242-828cd2a2385b.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1642519842318-61f9a571-d9e2-4680-b75f-c78b37957fac.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1642519842465-6b402cda-bef4-4830-ab75-648a13212cc6.png\\",\\"https://azrng.gitee.io/kbms/kbms/common/1642519842516-0bd5b960-036d-4ff8-8250-795ee6257a7c.png\\"],\\"datePublished\\":\\"2022-01-27T00:00:00.000Z\\",\\"dateModified\\":\\"2023-11-13T15:17:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"深入.NET","slug":"深入-net","link":"#深入-net","children":[{"level":3,"title":"架构相关理论","slug":"架构相关理论","link":"#架构相关理论","children":[]},{"level":3,"title":".NET 微服务架构","slug":"net-微服务架构","link":"#net-微服务架构","children":[]},{"level":3,"title":"云原生","slug":"云原生","link":"#云原生","children":[]},{"level":3,"title":"资料","slug":"资料","link":"#资料","children":[]}]}],"git":{"createdTime":1697962303000,"updatedTime":1699888657000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":15.08,"words":4525},"filePathRelative":"dotnet/jiaocheng/ziliaojingshuajiagoupian.md","localizedDate":"2022年1月27日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>来自网络，内容是否过时自行判断</p>\\n</div>\\n<h2>深入.NET</h2>\\n<p>#、.NET Core跨平台解读\\n<a href=\\"http://www.cnblogs.com/artech/p/how-to-cross-platform-01.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">.NET Core跨平台的奥秘[上篇]：历史的枷锁</a>\\n<a href=\\"http://www.cnblogs.com/artech/p/how-to-cross-platform-02.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">.NET Core跨平台的奥秘[中篇]：复用之殇</a>\\n<a href=\\"http://www.cnblogs.com/artech/p/how-to-cross-platform-03.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">.NET Core跨平台的奥秘[下篇]：全新的布局（.NET Standard）</a></p>","autoDesc":true}');export{w as comp,d as data};
