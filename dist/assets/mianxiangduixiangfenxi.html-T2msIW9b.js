import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as i,o as a}from"./app-pTjtTAfI.js";const p={};function o(r,e){return a(),n("div",null,e[0]||(e[0]=[i('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>面向对象分析就是要搞清楚做什么，面向对象设计就是要搞 清楚怎么做，面向对象编程就是将分析和设计的的结果翻译成代码的过程。</p><p>需求不明确<br> 面向对象分析主要的分析对象是需求。<br> 将笼统的需求细化到足够清洗、可执行。<br> 具体需求有哪些 哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑的。</p><p>缺乏锻炼<br> 平时很少做一些方面的代码，对某些模块锻炼少。</p><p>如何设置一个在各个系统之间的鉴权系统</p><p>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算 法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。 微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。 微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果 已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。 如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密 码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进 行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用</p><p>总结：需求一般都比较抽象、模糊，需要自己去挖掘，将抽象问题具象化，最终产生清洗的、可落地的需求定义。</p><p>不要尝试一下子就给出一个完美的解决方案，而是先给出一个粗糙的、基础的方案，有一个迭代的基础，然后慢慢优化。</p><p>面向对象分析产出需求</p><p>面向对象设计<br> 产出的是类</p><ul><li>划分职责进而识别出来有哪些类，列出涉及的功能点，根据职责相近归类。</li><li>定义类以及属性和方法。将需求中的动词作为候选的方法，进一步筛选出来真正的的方法，把功能中涉及的名字，作为候选属性，再同样进行过滤筛选。</li><li>定义类与类之间的交互关系。定义类与类之间的交互关系。</li><li>将类组装起来并提供执行入口。</li></ul><p>类与类之间的关系</p><ul><li>泛化：简单的继承关系</li><li>实现：接口和实现类之间的关系</li><li>组合(组合、聚合、关联)：只要b类对象是a类对象的成员变量，那么我们就称a类和b类是组合关系。</li><li>依赖：只要b类对象和a类对象有任何使用关系都称为有依赖关系。比如b类对象是a类对象的成员变量，或者a类方法使用b类对象作为参数或者返回值、局部变量。</li></ul>',13)]))}const g=t(p,[["render",o],["__file","mianxiangduixiangfenxi.html.vue"]]),c=JSON.parse('{"path":"/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiangfenxi.html","title":"面向对象分析","lang":"zh-CN","frontmatter":{"title":"面向对象分析","lang":"zh-CN","date":"2023-09-05T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"mianxiangduixiangfenxi","slug":"qlx7vx","docsId":"68551971","description":"概述 面向对象分析就是要搞清楚做什么，面向对象设计就是要搞 清楚怎么做，面向对象编程就是将分析和设计的的结果翻译成代码的过程。 需求不明确 面向对象分析主要的分析对象是需求。 将笼统的需求细化到足够清洗、可执行。 具体需求有哪些 哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑的。 缺乏锻炼 平时很少做一些方面的代码，对某些模块锻炼少。 如何设置...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiangfenxi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"面向对象分析"}],["meta",{"property":"og:description","content":"概述 面向对象分析就是要搞清楚做什么，面向对象设计就是要搞 清楚怎么做，面向对象编程就是将分析和设计的的结果翻译成代码的过程。 需求不明确 面向对象分析主要的分析对象是需求。 将笼统的需求细化到足够清洗、可执行。 具体需求有哪些 哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑的。 缺乏锻炼 平时很少做一些方面的代码，对某些模块锻炼少。 如何设置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","username":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1},{"name":"azrng","username":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":2.72,"words":815},"filePathRelative":"softwareDesign/highQualityCode/mianxiangduixiang/mianxiangduixiangfenxi.md","localizedDate":"2023年9月5日","excerpt":"<h2>概述</h2>\\n<p>面向对象分析就是要搞清楚做什么，面向对象设计就是要搞 清楚怎么做，面向对象编程就是将分析和设计的的结果翻译成代码的过程。</p>\\n<p>需求不明确<br>\\n面向对象分析主要的分析对象是需求。<br>\\n将笼统的需求细化到足够清洗、可执行。<br>\\n具体需求有哪些 哪些是现在要做的，哪些是未来可能要做的，哪些是不用考虑的。</p>\\n<p>缺乏锻炼<br>\\n平时很少做一些方面的代码，对某些模块锻炼少。</p>\\n<p>如何设置一个在各个系统之间的鉴权系统</p>\\n<p>调用方进行接口请求的时候，将 URL、AppID、密码、时间戳拼接在一起，通过加密算 法生成 token，并且将 token、AppID、时间戳拼接在 URL 中，一并发送到微服务端。 微服务端在接收到调用方的接口请求之后，从请求中拆解出 token、AppID、时间戳。 微服务端首先检查传递过来的时间戳跟当前时间，是否在 token 失效时间窗口内。如果 已经超过失效时间，那就算接口调用鉴权失败，拒绝接口调用请求。 如果 token 验证没有过期失效，微服务端再从自己的存储中，取出 AppID 对应的密 码，通过同样的 token 生成算法，生成另外一个 token，与调用方传递过来的 token 进 行匹配；如果一致，则鉴权成功，允许接口调用，否则就拒绝接口调用</p>","autoDesc":true}');export{g as comp,c as data};
