import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c as l,a as n,b as s,d as t,e as c}from"./app-vSdX8vi3.js";const r={},i=n("h2",{id:"postman",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#postman"},[n("span",null,"Postman")])],-1),u=n("blockquote",null,[n("p",null,"选择请求方式为POST ，设置headers为：Content-Type text/xml;charset=utf-8")],-1),k={href:"http://localhost:5000/FileWebService.asmx",target:"_blank",rel:"noopener noreferrer"},d=c(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span><span class="token class-name">Envelope</span> xmlns<span class="token punctuation">:</span>soapenv<span class="token operator">=</span><span class="token string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> xmlns<span class="token punctuation">:</span>tem<span class="token operator">=</span><span class="token string">&quot;http://tempuri.org/&quot;</span><span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Header<span class="token operator">/</span><span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span>soapenv<span class="token punctuation">:</span>Body<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>tem<span class="token punctuation">:</span>GetFileUrl<span class="token operator">&gt;</span>
         <span class="token operator">&lt;</span>tem<span class="token punctuation">:</span>fileId<span class="token operator">&gt;</span>805a9826<span class="token operator">-</span>afb7<span class="token operator">-</span><span class="token number">4375</span><span class="token operator">-</span>aec6<span class="token operator">-</span>0e7c91a8faa9<span class="token operator">&lt;</span><span class="token operator">/</span>tem<span class="token punctuation">:</span>fileId<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>tem<span class="token punctuation">:</span>GetFileUrl<span class="token operator">&gt;</span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>soapenv<span class="token punctuation">:</span>Envelope<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>GetFileUrl是webserver的方法，fileId是入参</p></blockquote><p>获取其他示例</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span><span class="token punctuation">?</span><span class="token class-name">xml</span> version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>soap12<span class="token punctuation">:</span><span class="token class-name">Envelope</span>
    xmlns<span class="token punctuation">:</span>xsi<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
    xmlns<span class="token punctuation">:</span>xsd<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>
    xmlns<span class="token punctuation">:</span>soap12<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2003/05/soap-envelope&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>soap12<span class="token punctuation">:</span>Body<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>SendMessageInfo<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>messageCode<span class="token operator">&gt;</span>
                MES0054
            <span class="token operator">&lt;</span><span class="token operator">/</span>messageCode<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>inputContent<span class="token operator">&gt;</span>
             <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span><span class="token operator">&lt;</span>randpsw<span class="token operator">&gt;</span>7242e1712a6c285d2f6ce1f136572be8<span class="token operator">&lt;</span><span class="token operator">/</span>randpsw<span class="token operator">&gt;</span><span class="token operator">&lt;</span>to_mobile<span class="token operator">&gt;</span><span class="token number">18838940825</span><span class="token operator">&lt;</span><span class="token operator">/</span>to_mobile<span class="token operator">&gt;</span><span class="token operator">&lt;</span>s_content<span class="token operator">&gt;</span>【香港大学深圳医院】您的手机验证码为<span class="token punctuation">:</span><span class="token number">221137</span><span class="token operator">&lt;</span><span class="token operator">/</span>s_content<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Request<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>inputContent<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>SendMessageInfo<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>soap12<span class="token punctuation">:</span>Body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>soap12<span class="token punctuation">:</span>Envelope<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="netcore" tabindex="-1"><a class="header-anchor" href="#netcore"><span>.NetCore</span></a></h2><p>调用的方法是HIPMessageServerAsync</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token comment">// 创建 HTTP 绑定对象         </span>
<span class="token class-name"><span class="token keyword">var</span></span> binding <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">TextMessageEncodingBindingElement</span>
<span class="token punctuation">{</span>
    <span class="token comment">//我们调用的soap是1.2，这里要选用Soap12，若不指定 默认是1.2 Soap12</span>
    MessageVersion <span class="token operator">=</span> MessageVersion<span class="token punctuation">.</span>Soap12WSAddressing10
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpTransportBindingElement</span>
<span class="token punctuation">{</span>
    <span class="token comment">//认证模式</span>
    AuthenticationScheme <span class="token operator">=</span> AuthenticationSchemes<span class="token punctuation">.</span>Anonymous<span class="token punctuation">,</span>
    MaxReceivedMessageSize <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span>MaxValue
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据 WebService 的 URL 构建终端点对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> endpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EndpointAddress</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">url</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建调用接口的工厂，注意这里泛型只能传入接口</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ChannelFactory<span class="token punctuation">&lt;</span>HIPServicePortType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>binding<span class="token punctuation">,</span> endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从工厂获取具体的调用实例</span>
<span class="token class-name"><span class="token keyword">var</span></span> callClient <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 调用具体的方法</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> callClient<span class="token punctuation">.</span><span class="token function">HIPMessageServerAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http方式去请求" tabindex="-1"><a class="header-anchor" href="#http方式去请求"><span>HTTP方式去请求</span></a></h2><p>通过http的方式请求webservice服务，传入action和message，然后返回字符串，再通过xml的方式去解析拿到对应的响应内容，再去处理响应的内容</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> requestContent <span class="token operator">=</span> <span class="token string">@&quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;
&lt;soap12:Envelope
xmlns:xsi=&quot;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&quot;
xmlns:xsd=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot;
xmlns:soap12=&quot;&quot;http://www.w3.org/2003/05/soap-envelope&quot;&quot;&gt;
&lt;soap12:Body&gt;
&lt;HIPMessageServer
xmlns=&quot;&quot;urn:hl7-org:v3&quot;&quot;&gt;
&lt;action&gt;{0}&lt;/action&gt;
&lt;message&gt;
    &lt;![CDATA[{1}]]&gt;
&lt;/message&gt;
&lt;/HIPMessageServer&gt;
&lt;/soap12:Body&gt;
&lt;/soap12:Envelope&gt;&quot;</span><span class="token punctuation">;</span>

requestContent <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>requestContent<span class="token punctuation">,</span> textBox2<span class="token punctuation">.</span>Text<span class="token punctuation">,</span> textBox3<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建 HttpClient 对象</span>
<span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 创建 HttpRequestMessage 对象</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">HttpRequestMessage</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>Post<span class="token punctuation">,</span> textBox1<span class="token punctuation">.</span>Text<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringContent</span><span class="token punctuation">(</span>requestContent<span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">,</span> <span class="token string">&quot;text/xml&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 发送请求并获取响应</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">SendAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 读取响应内容</span>
<span class="token class-name"><span class="token keyword">var</span></span> responseContent <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析 XML 响应数据</span>
<span class="token class-name"><span class="token keyword">var</span></span> xmlDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xmlDoc<span class="token punctuation">.</span><span class="token function">LoadXml</span><span class="token punctuation">(</span>responseContent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置命名空间前缀和 URI</span>
<span class="token class-name"><span class="token keyword">var</span></span> nsManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XmlNamespaceManager</span><span class="token punctuation">(</span>xmlDoc<span class="token punctuation">.</span>NameTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
nsManager<span class="token punctuation">.</span><span class="token function">AddNamespace</span><span class="token punctuation">(</span><span class="token string">&quot;urn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;urn:hl7-org:v3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 &lt;urn:payload&gt; 节点</span>
<span class="token class-name"><span class="token keyword">var</span></span> payloadNode <span class="token operator">=</span> xmlDoc<span class="token punctuation">.</span><span class="token function">SelectSingleNode</span><span class="token punctuation">(</span><span class="token string">&quot;//urn:payload&quot;</span><span class="token punctuation">,</span> nsManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 处理返回结果</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> payloadNode<span class="token punctuation">.</span>InnerText<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,11),m={href:"https://www.cnblogs.com/nuoxin/p/15060905.html",target:"_blank",rel:"noopener noreferrer"};function v(g,b){const a=o("ExternalLinkIcon");return p(),l("div",null,[i,u,n("p",null,[s("示例一：代码中只需要一个参数 请求url:"),n("a",k,[s("http://localhost:5000/FileWebService.asmx"),t(a)])]),d,n("p",null,[n("a",m,[s("https://www.cnblogs.com/nuoxin/p/15060905.html"),t(a)]),s("：使用PostMan测试WebService服务")])])}const q=e(r,[["render",v],["__file","qingqiushili.html.vue"]]),x=JSON.parse('{"path":"/dotnet/api/webservice/qingqiushili.html","title":"请求示例","lang":"zh-CN","frontmatter":{"title":"请求示例","lang":"zh-CN","date":"2023-09-01T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"qingqiushili","slug":"cth3lo","docsId":"65232158","description":"Postman 选择请求方式为POST ，设置headers为：Content-Type text/xml;charset=utf-8 示例一：代码中只需要一个参数 请求url:http://localhost:5000/FileWebService.asmx GetFileUrl是webserver的方法，fileId是入参 获取其他示例 .NetC...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/webservice/qingqiushili.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"请求示例"}],["meta",{"property":"og:description","content":"Postman 选择请求方式为POST ，设置headers为：Content-Type text/xml;charset=utf-8 示例一：代码中只需要一个参数 请求url:http://localhost:5000/FileWebService.asmx GetFileUrl是webserver的方法，fileId是入参 获取其他示例 .NetC..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"请求示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"Postman","slug":"postman","link":"#postman","children":[]},{"level":2,"title":".NetCore","slug":"netcore","link":"#netcore","children":[]},{"level":2,"title":"HTTP方式去请求","slug":"http方式去请求","link":"#http方式去请求","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.85,"words":554},"filePathRelative":"dotnet/api/webservice/qingqiushili.md","localizedDate":"2023年9月1日","excerpt":"<h2>Postman</h2>\\n<blockquote>\\n<p>选择请求方式为POST ，设置headers为：Content-Type text/xml;charset=utf-8</p>\\n</blockquote>\\n<p>示例一：代码中只需要一个参数\\n请求url:<a href=\\"http://localhost:5000/FileWebService.asmx\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">http://localhost:5000/FileWebService.asmx</a></p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token operator\\">&lt;</span>soapenv<span class=\\"token punctuation\\">:</span><span class=\\"token class-name\\">Envelope</span> xmlns<span class=\\"token punctuation\\">:</span>soapenv<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"http://schemas.xmlsoap.org/soap/envelope/\\"</span> xmlns<span class=\\"token punctuation\\">:</span>tem<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"http://tempuri.org/\\"</span><span class=\\"token operator\\">&gt;</span>\\n   <span class=\\"token operator\\">&lt;</span>soapenv<span class=\\"token punctuation\\">:</span>Header<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n   <span class=\\"token operator\\">&lt;</span>soapenv<span class=\\"token punctuation\\">:</span>Body<span class=\\"token operator\\">&gt;</span>\\n      <span class=\\"token operator\\">&lt;</span>tem<span class=\\"token punctuation\\">:</span>GetFileUrl<span class=\\"token operator\\">&gt;</span>\\n         <span class=\\"token operator\\">&lt;</span>tem<span class=\\"token punctuation\\">:</span>fileId<span class=\\"token operator\\">&gt;</span>805a9826<span class=\\"token operator\\">-</span>afb7<span class=\\"token operator\\">-</span><span class=\\"token number\\">4375</span><span class=\\"token operator\\">-</span>aec6<span class=\\"token operator\\">-</span>0e7c91a8faa9<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>tem<span class=\\"token punctuation\\">:</span>fileId<span class=\\"token operator\\">&gt;</span>\\n      <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>tem<span class=\\"token punctuation\\">:</span>GetFileUrl<span class=\\"token operator\\">&gt;</span>\\n   <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>soapenv<span class=\\"token punctuation\\">:</span>Body<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>soapenv<span class=\\"token punctuation\\">:</span>Envelope<span class=\\"token operator\\">&gt;</span>\\n</code></pre></div>","autoDesc":true}');export{q as comp,x as data};
