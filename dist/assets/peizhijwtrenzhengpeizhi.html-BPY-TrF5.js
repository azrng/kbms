import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-vSdX8vi3.js";const e={},p=t(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>services<span class="token punctuation">.</span><span class="token function">AddAuthentication</span><span class="token punctuation">(</span>JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddJwtBearer</span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span><span class="token comment">//认证</span>
<span class="token punctuation">{</span>
    o<span class="token punctuation">.</span>Challenge <span class="token operator">=</span> JwtBearerDefaults<span class="token punctuation">.</span>AuthenticationScheme<span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>RequireHttpsMetadata <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    o<span class="token punctuation">.</span>TokenValidationParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TokenValidationParameters</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//3+2</span>

        <span class="token comment">// 发行人验证，这里要和token类中Claim类型的发行人保持一致</span>
        <span class="token comment">//是否验证发行人</span>
        ValidateIssuer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidIssuer <span class="token operator">=</span> config<span class="token punctuation">.</span>JwtIssuer<span class="token punctuation">,</span><span class="token comment">//发行人</span>

        <span class="token comment">// 是否验证接收人</span>
        ValidateAudience <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ValidAudience <span class="token operator">=</span> config<span class="token punctuation">.</span>JwtAudience<span class="token punctuation">,</span><span class="token comment">//验证人</span>
        <span class="token comment">//或者</span>
        <span class="token comment">//AudienceValidator = (m, n, z) =&gt;</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    //m:Audience集合  n:解析后的jwt  z: token验证参数</span>
        <span class="token comment">//    return m != null &amp;&amp; (m.FirstOrDefault()?.Equals(config.JwtAudience, StringComparison.Ordinal) ?? false);</span>
        <span class="token comment">//},</span>

        <span class="token comment">// 是否开启密钥去验证token</span>
        ValidateIssuerSigningKey <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        IssuerSigningKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SymmetricSecurityKey</span><span class="token punctuation">(</span>Encoding<span class="token punctuation">.</span>ASCII<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>JwtSecretKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

        RequireExpirationTime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">//是否验证token有效期，使用当前时间与token 的claim中的notbefore和expires对比</span>
        ValidateLifetime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        ClockSkew <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span>Zero<span class="token punctuation">,</span><span class="token comment">//校验时间是否过期时， token验证间隔默认是300s验证一次   TimeSpan.Zero代表是0间隔</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//2021年2月7日 13:49:04  增加token验证过期的时候给返回头设置提示</span>
    o<span class="token punctuation">.</span>Events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JwtBearerEvents</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//如果jwt过期  那么就先走这个失败的方法，再走OnChallenge</span>
        OnAuthenticationFailed <span class="token operator">=</span> content <span class="token operator">=&gt;</span><span class="token comment">//过期时候的场景，会给返回头增加标识</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span>Exception<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">SecurityTokenExpiredException</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                content<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;Token-Expired&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//验证失败自定义返回类</span>
        OnChallenge <span class="token operator">=</span> <span class="token keyword">async</span> context <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 跳过默认的处理逻辑，返回下面的模型数据</span>
            context<span class="token punctuation">.</span><span class="token function">HandleResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">&quot;application/json;charset=utf-8&quot;</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> StatusCodes<span class="token punctuation">.</span>Status401Unauthorized<span class="token punctuation">;</span>

            <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ResultModel</span>
            <span class="token punctuation">{</span>
                IsSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                Message <span class="token operator">=</span> <span class="token string">&quot;UnAuthorized&quot;</span><span class="token punctuation">,</span>
                Code <span class="token operator">=</span> <span class="token string">&quot;401&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//实例化返回类</span>
            <span class="token keyword">await</span> context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span><span class="token function">WriteAsync</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//当消息被收到时候  实现目的可能是如果是signalr请求的，那么就把请求参数里面的token放到正常的token上进行处理</span>
        <span class="token comment">//OnMessageReceived = context =&gt;</span>
        <span class="token comment">//{</span>
        <span class="token comment">//    var accessToken = context.Request.Query[&quot;access_token&quot;];</span>

        <span class="token comment">//    //如果请求的是signalr</span>
        <span class="token comment">//    var path = context.HttpContext.Request.Path;</span>
        <span class="token comment">//    if (!string.IsNullOrEmpty(accessToken) &amp;&amp; (path.StartsWithSegments(&quot;/api/xxxhub&quot;)))</span>
        <span class="token comment">//    {</span>
        <span class="token comment">//        //从查询字符串中读取令牌</span>
        <span class="token comment">//        context.Token = accessToken;</span>
        <span class="token comment">//    }</span>
        <span class="token comment">//    return Task.CompletedTask;</span>
        <span class="token comment">//}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","peizhijwtrenzhengpeizhi.html.vue"]]),m=JSON.parse('{"path":"/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/peizhijwtrenzhengpeizhi.html","title":"配置Jwt认证配置","lang":"zh-CN","frontmatter":{"title":"配置Jwt认证配置","lang":"zh-CN","date":"2023-09-14T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"peizhijwtrenzhengpeizhi","slug":"kgll59","docsId":"75191758","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/peizhijwtrenzhengpeizhi.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"配置Jwt认证配置"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-22T08:11:43.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-22T08:11:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"配置Jwt认证配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-22T08:11:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[],"git":{"createdTime":1697962303000,"updatedTime":1697962303000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":1.52,"words":455},"filePathRelative":"dotnet/anquanhebiaoshi/shenfenrenzhengheshouquan/jwtrenzheng/peizhijwtrenzhengpeizhi.md","localizedDate":"2023年9月14日","excerpt":"<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code>services<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddAuthentication</span><span class=\\"token punctuation\\">(</span>JwtBearerDefaults<span class=\\"token punctuation\\">.</span>AuthenticationScheme<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddJwtBearer</span><span class=\\"token punctuation\\">(</span>o <span class=\\"token operator\\">=&gt;</span><span class=\\"token comment\\">//认证</span>\\n<span class=\\"token punctuation\\">{</span>\\n    o<span class=\\"token punctuation\\">.</span>Challenge <span class=\\"token operator\\">=</span> JwtBearerDefaults<span class=\\"token punctuation\\">.</span>AuthenticationScheme<span class=\\"token punctuation\\">;</span>\\n    o<span class=\\"token punctuation\\">.</span>RequireHttpsMetadata <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    o<span class=\\"token punctuation\\">.</span>TokenValidationParameters <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">TokenValidationParameters</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//3+2</span>\\n\\n        <span class=\\"token comment\\">// 发行人验证，这里要和token类中Claim类型的发行人保持一致</span>\\n        <span class=\\"token comment\\">//是否验证发行人</span>\\n        ValidateIssuer <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        ValidIssuer <span class=\\"token operator\\">=</span> config<span class=\\"token punctuation\\">.</span>JwtIssuer<span class=\\"token punctuation\\">,</span><span class=\\"token comment\\">//发行人</span>\\n\\n        <span class=\\"token comment\\">// 是否验证接收人</span>\\n        ValidateAudience <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        ValidAudience <span class=\\"token operator\\">=</span> config<span class=\\"token punctuation\\">.</span>JwtAudience<span class=\\"token punctuation\\">,</span><span class=\\"token comment\\">//验证人</span>\\n        <span class=\\"token comment\\">//或者</span>\\n        <span class=\\"token comment\\">//AudienceValidator = (m, n, z) =&gt;</span>\\n        <span class=\\"token comment\\">//{</span>\\n        <span class=\\"token comment\\">//    //m:Audience集合  n:解析后的jwt  z: token验证参数</span>\\n        <span class=\\"token comment\\">//    return m != null &amp;&amp; (m.FirstOrDefault()?.Equals(config.JwtAudience, StringComparison.Ordinal) ?? false);</span>\\n        <span class=\\"token comment\\">//},</span>\\n\\n        <span class=\\"token comment\\">// 是否开启密钥去验证token</span>\\n        ValidateIssuerSigningKey <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        IssuerSigningKey <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">SymmetricSecurityKey</span><span class=\\"token punctuation\\">(</span>Encoding<span class=\\"token punctuation\\">.</span>ASCII<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetBytes</span><span class=\\"token punctuation\\">(</span>config<span class=\\"token punctuation\\">.</span>JwtSecretKey<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\n        RequireExpirationTime <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">//是否验证token有效期，使用当前时间与token 的claim中的notbefore和expires对比</span>\\n        ValidateLifetime <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n        ClockSkew <span class=\\"token operator\\">=</span> TimeSpan<span class=\\"token punctuation\\">.</span>Zero<span class=\\"token punctuation\\">,</span><span class=\\"token comment\\">//校验时间是否过期时， token验证间隔默认是300s验证一次   TimeSpan.Zero代表是0间隔</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">//2021年2月7日 13:49:04  增加token验证过期的时候给返回头设置提示</span>\\n    o<span class=\\"token punctuation\\">.</span>Events <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">JwtBearerEvents</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//如果jwt过期  那么就先走这个失败的方法，再走OnChallenge</span>\\n        OnAuthenticationFailed <span class=\\"token operator\\">=</span> content <span class=\\"token operator\\">=&gt;</span><span class=\\"token comment\\">//过期时候的场景，会给返回头增加标识</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>content<span class=\\"token punctuation\\">.</span>Exception<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetType</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">typeof</span><span class=\\"token punctuation\\">(</span><span class=\\"token type-expression class-name\\">SecurityTokenExpiredException</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                content<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>Headers<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Token-Expired\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"true\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">return</span> Task<span class=\\"token punctuation\\">.</span>CompletedTask<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">//验证失败自定义返回类</span>\\n        OnChallenge <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">async</span> context <span class=\\"token operator\\">=&gt;</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 跳过默认的处理逻辑，返回下面的模型数据</span>\\n            context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">HandleResponse</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            context<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>ContentType <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"application/json;charset=utf-8\\"</span><span class=\\"token punctuation\\">;</span>\\n            context<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span>StatusCode <span class=\\"token operator\\">=</span> StatusCodes<span class=\\"token punctuation\\">.</span>Status401Unauthorized<span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token class-name\\"><span class=\\"token keyword\\">var</span></span> result <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token constructor-invocation class-name\\">ResultModel</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                IsSuccess <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">,</span>\\n                Message <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"UnAuthorized\\"</span><span class=\\"token punctuation\\">,</span>\\n                Code <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"401\\"</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//实例化返回类</span>\\n            <span class=\\"token keyword\\">await</span> context<span class=\\"token punctuation\\">.</span>Response<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WriteAsync</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ToJson</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n        <span class=\\"token comment\\">//当消息被收到时候  实现目的可能是如果是signalr请求的，那么就把请求参数里面的token放到正常的token上进行处理</span>\\n        <span class=\\"token comment\\">//OnMessageReceived = context =&gt;</span>\\n        <span class=\\"token comment\\">//{</span>\\n        <span class=\\"token comment\\">//    var accessToken = context.Request.Query[\\"access_token\\"];</span>\\n\\n        <span class=\\"token comment\\">//    //如果请求的是signalr</span>\\n        <span class=\\"token comment\\">//    var path = context.HttpContext.Request.Path;</span>\\n        <span class=\\"token comment\\">//    if (!string.IsNullOrEmpty(accessToken) &amp;&amp; (path.StartsWithSegments(\\"/api/xxxhub\\")))</span>\\n        <span class=\\"token comment\\">//    {</span>\\n        <span class=\\"token comment\\">//        //从查询字符串中读取令牌</span>\\n        <span class=\\"token comment\\">//        context.Token = accessToken;</span>\\n        <span class=\\"token comment\\">//    }</span>\\n        <span class=\\"token comment\\">//    return Task.CompletedTask;</span>\\n        <span class=\\"token comment\\">//}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}');export{r as comp,m as data};
