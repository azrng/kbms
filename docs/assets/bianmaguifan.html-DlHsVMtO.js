import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as t}from"./app-S-drW72G.js";const l={},i=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>编码规范主要解决的是代码的可读性问题。相对于设计原则、设计模式，更加具体、更加偏重代码细节。即便你可能对设计原则不熟悉、对设计模式不了解，但是你最起码要掌握基本的编码规范，比如，如何给变量、类、函数命名，如何写代码注释，函数不宜过长、参数不能过多等。</p><h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h2><p>项目名、模块名、包名、对外暴露的接口，小到类名、函数名、变量名、参数名。</p><h3 id="命名长度" tabindex="-1"><a class="header-anchor" href="#命名长度"><span>命名长度</span></a></h3><p>在足够表达其含义的情况下，命名越短越好。对于一些默认的、大家都比较熟知的词，更推荐使用缩写。</p><p>对于作用于比较大的，更推荐使用长的命名方式，比如类名。</p><p>换位思考，从代码阅读者的角度去考量命名是否足够直观。</p><h3 id="利用上下文简化命名" tabindex="-1"><a class="header-anchor" href="#利用上下文简化命名"><span>利用上下文简化命名</span></a></h3><p>比如用户表的名称和密码等，就没有必要写成userName和userPassword(根据当前作用域已经限定了范围)，因此我们借助user这个上下文，直接使用name和password表达的意思已经足够明确。</p><p>还可以借助函数的上下文来简化命名，比如UpdateUserAvatarImagerUrlToAliyun(string imageUrl)，这里参数直接使用imageUrl就可以直观的看出来要想表达的意思。</p><h3 id="命名要可读、可搜索" tabindex="-1"><a class="header-anchor" href="#命名要可读、可搜索"><span>命名要可读、可搜索</span></a></h3><p>不要使用一些比较生僻、难发音的英文单词来命名。</p><h3 id="对于接口和抽象类命名" tabindex="-1"><a class="header-anchor" href="#对于接口和抽象类命名"><span>对于接口和抽象类命名</span></a></h3><p>对于接口名称增加前缀“I”，表示一个Interface。 对于抽象类，可以考虑带上前缀“Abstract”，比如AbstractConfiguration。</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><p>虽然有些说是好的代码命名都不需要注释，这种有点极端，所以该写注释的时候还是要写注释的。</p><h3 id="写什么" tabindex="-1"><a class="header-anchor" href="#写什么"><span>写什么？</span></a></h3><p>注释的目的就是让代码更容易看懂。 注释的内容主要包含这三个方面：做什么？为什么？怎么做？</p><h3 id="注释是不是越多越好" tabindex="-1"><a class="header-anchor" href="#注释是不是越多越好"><span>注释是不是越多越好？</span></a></h3><p>太多有可能意味着代码写的不够可读，需要写很多注释来补充，也可能会对代码本身的阅读起到干扰作用，并且后期的维护成本也会提高。</p><p>如果代码中一行代码也没有，也不行。</p><p>类和函数一定要写注释，而且要尽可能写的全面详细，函数内部的注释相对要少一点，然后靠着好的命名、提炼函数、解释性变量、总结性注释来提高代码的可读性。</p><h2 id="代码风格" tabindex="-1"><a class="header-anchor" href="#代码风格"><span>代码风格</span></a></h2><h3 id="一个函数多少行" tabindex="-1"><a class="header-anchor" href="#一个函数多少行"><span>一个函数多少行？</span></a></h3><p>比如函数不要超过一个显示屏的垂直高度。</p><h3 id="一行代码多长" tabindex="-1"><a class="header-anchor" href="#一行代码多长"><span>一行代码多长？</span></a></h3><p>不要超过编辑器显示的宽度，需要滚动才能看一行的全部代码，显然不利于代码的阅读。</p><h3 id="善用空行分割单元块" tabindex="-1"><a class="header-anchor" href="#善用空行分割单元块"><span>善用空行分割单元块</span></a></h3><p>对于比较长的函数，可以逻辑上分为几个独立的代码块，在不方便将这些独立代码块抽取成小函数的情况下，为了逻辑清晰，可以使用空格来分割。</p><h2 id="编码规范" tabindex="-1"><a class="header-anchor" href="#编码规范"><span>编码规范</span></a></h2><h3 id="将代码分割成更小的单元块" tabindex="-1"><a class="header-anchor" href="#将代码分割成更小的单元块"><span>将代码分割成更小的单元块</span></a></h3><p>善于将大块的复杂逻辑提炼成类或者函数，屏蔽掉细节，让阅读代码的人不至于迷失在细节中，增强代码的可读性。</p><blockquote><p>只有代码逻辑比较复杂的时候，才建议提炼类或者函数，如果提炼出的函数只包含两三行代码，那么就没有必要了。</p></blockquote><h3 id="避免函数参数过多" tabindex="-1"><a class="header-anchor" href="#避免函数参数过多"><span>避免函数参数过多</span></a></h3><p>当一个方法/函数的参数大于5个的时候，就应该考虑是不是参数有点多了，影响到了可读性。 处理方案： 1.考虑函数是否职责单一，是否可以拆分成多个函数来减少参数。 2.将函数的参数封装为对象。</p><blockquote><p>如果是对外提供的接口，那么更推荐将参数封装为对象，还可以提到接口的兼容性，比如要增加新的参数，改动量也不大。</p></blockquote><h3 id="勿用函数参数来控制逻辑" tabindex="-1"><a class="header-anchor" href="#勿用函数参数来控制逻辑"><span>勿用函数参数来控制逻辑</span></a></h3><p>不应该使用布尔类型的标识参数来控制内部的逻辑，比如true的时候走这块，false 的时候走另一块，这样子是违背单一职责原则的，应该拆分为两个函数。</p><h3 id="函数设计职责单一" tabindex="-1"><a class="header-anchor" href="#函数设计职责单一"><span>函数设计职责单一</span></a></h3><p>类和模块应该符合单一原则，函数更应该能多单一就多单一。</p><h3 id="移除过深的嵌套层次" tabindex="-1"><a class="header-anchor" href="#移除过深的嵌套层次"><span>移除过深的嵌套层次</span></a></h3><p>嵌套多了理解起来比较费劲，并且代码经过多次嵌套缩进，导致有些超过一行变成两行，影响代码的整洁。</p><h3 id="使用解释性变量" tabindex="-1"><a class="header-anchor" href="#使用解释性变量"><span>使用解释性变量</span></a></h3><p>比如需要计算圆的面积，这个时候不应该直接写3.1415而是应该使用PI来代替。</p><h2 id="推荐书籍" tabindex="-1"><a class="header-anchor" href="#推荐书籍"><span>推荐书籍</span></a></h2><ul><li>重构</li><li>代码大全</li><li>代码整洁之道</li></ul>',47),r=[i];function h(s,p){return n(),a("div",null,r)}const o=e(l,[["render",h],["__file","bianmaguifan.html.vue"]]),g=JSON.parse('{"path":"/softwareDesign/highQualityCode/guifanyuchonggou/bianmaguifan.html","title":"编码规范","lang":"zh-CN","frontmatter":{"title":"编码规范","lang":"zh-CN","date":"2022-06-11T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["软件设计"],"tag":["无"],"filename":"bianmaguifan","slug":"tzz30b","docsId":"67107863","description":"概述 编码规范主要解决的是代码的可读性问题。相对于设计原则、设计模式，更加具体、更加偏重代码细节。即便你可能对设计原则不熟悉、对设计模式不了解，但是你最起码要掌握基本的编码规范，比如，如何给变量、类、函数命名，如何写代码注释，函数不宜过长、参数不能过多等。 命名 项目名、模块名、包名、对外暴露的接口，小到类名、函数名、变量名、参数名。 命名长度 在足够...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/softwareDesign/highQualityCode/guifanyuchonggou/bianmaguifan.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"编码规范"}],["meta",{"property":"og:description","content":"概述 编码规范主要解决的是代码的可读性问题。相对于设计原则、设计模式，更加具体、更加偏重代码细节。即便你可能对设计原则不熟悉、对设计模式不了解，但是你最起码要掌握基本的编码规范，比如，如何给变量、类、函数命名，如何写代码注释，函数不宜过长、参数不能过多等。 命名 项目名、模块名、包名、对外暴露的接口，小到类名、函数名、变量名、参数名。 命名长度 在足够..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-23T01:45:31.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2022-06-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-23T01:45:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编码规范\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-06-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-23T01:45:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"命名","slug":"命名","link":"#命名","children":[{"level":3,"title":"命名长度","slug":"命名长度","link":"#命名长度","children":[]},{"level":3,"title":"利用上下文简化命名","slug":"利用上下文简化命名","link":"#利用上下文简化命名","children":[]},{"level":3,"title":"命名要可读、可搜索","slug":"命名要可读、可搜索","link":"#命名要可读、可搜索","children":[]},{"level":3,"title":"对于接口和抽象类命名","slug":"对于接口和抽象类命名","link":"#对于接口和抽象类命名","children":[]}]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[{"level":3,"title":"写什么？","slug":"写什么","link":"#写什么","children":[]},{"level":3,"title":"注释是不是越多越好？","slug":"注释是不是越多越好","link":"#注释是不是越多越好","children":[]}]},{"level":2,"title":"代码风格","slug":"代码风格","link":"#代码风格","children":[{"level":3,"title":"一个函数多少行？","slug":"一个函数多少行","link":"#一个函数多少行","children":[]},{"level":3,"title":"一行代码多长？","slug":"一行代码多长","link":"#一行代码多长","children":[]},{"level":3,"title":"善用空行分割单元块","slug":"善用空行分割单元块","link":"#善用空行分割单元块","children":[]}]},{"level":2,"title":"编码规范","slug":"编码规范","link":"#编码规范","children":[{"level":3,"title":"将代码分割成更小的单元块","slug":"将代码分割成更小的单元块","link":"#将代码分割成更小的单元块","children":[]},{"level":3,"title":"避免函数参数过多","slug":"避免函数参数过多","link":"#避免函数参数过多","children":[]},{"level":3,"title":"勿用函数参数来控制逻辑","slug":"勿用函数参数来控制逻辑","link":"#勿用函数参数来控制逻辑","children":[]},{"level":3,"title":"函数设计职责单一","slug":"函数设计职责单一","link":"#函数设计职责单一","children":[]},{"level":3,"title":"移除过深的嵌套层次","slug":"移除过深的嵌套层次","link":"#移除过深的嵌套层次","children":[]},{"level":3,"title":"使用解释性变量","slug":"使用解释性变量","link":"#使用解释性变量","children":[]}]},{"level":2,"title":"推荐书籍","slug":"推荐书籍","link":"#推荐书籍","children":[]}],"git":{"createdTime":1693926838000,"updatedTime":1698025531000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":4.3,"words":1289},"filePathRelative":"softwareDesign/highQualityCode/guifanyuchonggou/bianmaguifan.md","localizedDate":"2022年6月11日","excerpt":"<h2>概述</h2>\\n<p>编码规范主要解决的是代码的可读性问题。相对于设计原则、设计模式，更加具体、更加偏重代码细节。即便你可能对设计原则不熟悉、对设计模式不了解，但是你最起码要掌握基本的编码规范，比如，如何给变量、类、函数命名，如何写代码注释，函数不宜过长、参数不能过多等。</p>\\n<h2>命名</h2>\\n<p>项目名、模块名、包名、对外暴露的接口，小到类名、函数名、变量名、参数名。</p>\\n<h3>命名长度</h3>\\n<p>在足够表达其含义的情况下，命名越短越好。对于一些默认的、大家都比较熟知的词，更推荐使用缩写。</p>\\n<p>对于作用于比较大的，更推荐使用长的命名方式，比如类名。</p>","autoDesc":true}');export{o as comp,g as data};
