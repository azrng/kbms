import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c as e,b as n,e as s,f as c,d as l}from"./app-D8HBJYTp.js";const u={},i=l(`<h2 id="词云简介" tabindex="-1"><a class="header-anchor" href="#词云简介"><span>词云简介</span></a></h2><p>“词云”由美国西北大学新闻学副教授、新媒体专业主任里奇·戈登（Rich Gordon）于2006年最先使用，是通过形成“关键词云层”或“关键词渲染”，对文本中出现频率较高的“关键词”的视觉上的突出。 网上大部分文章介绍的是使用Python的jieba、wordcloud的库生成词云图，本文则介绍在C#中如何使用jieba.NET、WordCloudSharp库生成词云图，后者是前者的.NET实现。</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h2><p>创建一个C#的控制台项目，通过NuGet添加引用对jieba.NET、WordCloudSharp的引用，使用方法可以参考以下链接：</p><ul><li>jieba.NET：https://github.com/anderscui/jieba.NET</li><li>WordCloudSharp：https://github.com/AmmRage/WordCloudSharp</li></ul><p>安装之后，在packages\\jieba.NET目录下找到Resources目录，将整个Resources目录拷贝到程序集所在目录，这里面是jieba.NET运行所需的词典及其它数据文件。</p><h2 id="基本算法" tabindex="-1"><a class="header-anchor" href="#基本算法"><span>基本算法</span></a></h2><p>算法主要步骤如下：</p><ul><li>提取关键词：基于TF-IDF算法、TextRank算法提取文本的关键词，按权重大小选取部分关键词。</li><li>统计关键词词频：先将文本分词，统计每个词的词频，再筛选出关键词的词频。</li><li>生成词云图：根据关键词及其词频信息在蒙版图片的基础上生成词图。</li></ul><p>注：本文采用TF-IDF算法提取关键词，蒙版图目前只支持黑白图片。 TF-IDF（词频-逆文档频率）算法是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。</p><h2 id="算法实现" tabindex="-1"><a class="header-anchor" href="#算法实现"><span>算法实现</span></a></h2><p>使用JiebaNet.Analyser.TfidfExtractor.ExtractTagsWithWeight(string text, int count = 20, IEnumerable allowPos = null)从指定文本中抽取关键词的同时得到其权重，代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 从指定文本中抽取关键词的同时得到其权重</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">static</span> <span class="token return-type class-name">WordWeightPair<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">ExtractTagsWithWeight</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> extractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TfidfExtractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> wordWeight <span class="token operator">=</span> extractor<span class="token punctuation">.</span><span class="token function">ExtractTagsWithWeight</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> sbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;词语&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;权重&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> item <span class="token keyword">in</span> wordWeight<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Word<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>Weight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sbr<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name"><span class="token keyword">string</span></span> filename <span class="token operator">=</span> <span class="token string">&quot;关键词权重统计.csv&quot;</span><span class="token punctuation">;</span>
    File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;关键词提取完成：&quot;</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> wordWeight<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<strong>JiebaNet.Segmenter.Common</strong>下的<strong>Counter类</strong>统计词频，其实现来自Python标准库的Counter类（具体接口和实现细节略有不同），代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 分词并统计词频：默认为精确模式，同时也使用HMM模型</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wordWeightAry<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">static</span> <span class="token return-type class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">,</span> <span class="token class-name">WordWeightPair<span class="token punctuation">[</span><span class="token punctuation">]</span></span> wordWeightAry<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> segmenter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">JiebaSegmenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> segments <span class="token operator">=</span> segmenter<span class="token punctuation">.</span><span class="token function">Cut</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> freqs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Counter<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>segments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> countAry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>wordWeightAry<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordWeightAry<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">string</span></span> key <span class="token operator">=</span> wordWeightAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Word<span class="token punctuation">;</span>
        countAry<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> freqs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">StringBuilder</span> sbr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;词语&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;词频&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sbr<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> pair <span class="token keyword">in</span> countAry<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sbr<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sbr<span class="token punctuation">.</span><span class="token function">AppendLine</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name"><span class="token keyword">string</span></span> filename <span class="token operator">=</span> <span class="token string">&quot;词频统计结果.csv&quot;</span><span class="token punctuation">;</span>
    File<span class="token punctuation">.</span><span class="token function">WriteAllText</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> sbr<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;词频统计完成：&quot;</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> countAry<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<strong>WordCloudSharp</strong>生成词云图，蒙版图必须使用黑白图片，记得手动引用<strong>System.Drawing</strong>，代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 创建词云图</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>countAry<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CreateWordCloud</span><span class="token punctuation">(</span><span class="token class-name">KeyValuePair<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> countAry<span class="token punctuation">)</span>
<span class="token punctuation">{</span>            
    <span class="token class-name"><span class="token keyword">string</span></span> markPath <span class="token operator">=</span> <span class="token string">&quot;mask.jpg&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">string</span></span> resultPath <span class="token operator">=</span> <span class="token string">&quot;result.jpg&quot;</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;开始生成图片，读取蒙版：&quot;</span> <span class="token operator">+</span> markPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Image</span> mask <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">FromFile</span><span class="token punctuation">(</span>markPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//使用蒙版图片</span>
    <span class="token class-name"><span class="token keyword">var</span></span> wordCloud <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WordCloud</span><span class="token punctuation">(</span>mask<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> mask<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token named-parameter punctuation">mask</span><span class="token punctuation">:</span> mask<span class="token punctuation">,</span> <span class="token named-parameter punctuation">allowVerical</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">fontname</span><span class="token punctuation">:</span> <span class="token string">&quot;YouYuan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//不使用蒙版图片</span>
    <span class="token comment">//var wordCloud = new WordCloud(1000, 1000,false, null,-1,1,null, false);</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> wordCloud<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span>countAry<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>it <span class="token operator">=&gt;</span> it<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> countAry<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>it <span class="token operator">=&gt;</span> it<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;图片生成完成，保存图片：&quot;</span> <span class="token operator">+</span> resultPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试"><span>运行测试</span></a></h2><p>以本文为分析文本生成词云图，代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">ReadAllText</span><span class="token punctuation">(</span><span class="token string">&quot;待处理数据.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> wordWeight <span class="token operator">=</span> <span class="token function">ExtractTagsWithWeight</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> wordFreqs <span class="token operator">=</span> <span class="token function">Counter</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> wordWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CreateWordCloud</span><span class="token punctuation">(</span>wordFreqs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Console<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在得到关键词的词频信息后，通<strong>过在线工具网站生成词云图片会更加方便一点</strong>，如词云文字、图悦等。</p><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料"><span>资料</span></a></h2>`,22),k={href:"https://mp.weixin.qq.com/s/bqKGfiKG7jWsT-IlUjmG0w",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const a=p("ExternalLinkIcon");return o(),e("div",null,[i,n("p",null,[n("a",k,[s("https://mp.weixin.qq.com/s/bqKGfiKG7jWsT-IlUjmG0w"),c(a)]),s(" | C#中使用jieba.NET、WordCloudSharp制作词云图")])])}const b=t(u,[["render",r],["__file","zhizuociyuntu.html.vue"]]),h=JSON.parse('{"path":"/middleware/fenci/zhizuociyuntu.html","title":"制作词云图","lang":"zh-CN","frontmatter":{"title":"制作词云图","lang":"zh-CN","date":"2023-09-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["middleware"],"tag":["无"],"filename":"zhizuociyuntu","slug":"tpnbk6","docsId":"66006295","description":"词云简介 “词云”由美国西北大学新闻学副教授、新媒体专业主任里奇·戈登（Rich Gordon）于2006年最先使用，是通过形成“关键词云层”或“关键词渲染”，对文本中出现频率较高的“关键词”的视觉上的突出。 网上大部分文章介绍的是使用Python的jieba、wordcloud的库生成词云图，本文则介绍在C#中如何使用jieba.NET、WordCl...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/middleware/fenci/zhizuociyuntu.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"制作词云图"}],["meta",{"property":"og:description","content":"词云简介 “词云”由美国西北大学新闻学副教授、新媒体专业主任里奇·戈登（Rich Gordon）于2006年最先使用，是通过形成“关键词云层”或“关键词渲染”，对文本中出现频率较高的“关键词”的视觉上的突出。 网上大部分文章介绍的是使用Python的jieba、wordcloud的库生成词云图，本文则介绍在C#中如何使用jieba.NET、WordCl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-19T14:00:28.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-09-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-19T14:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"制作词云图\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-24T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-19T14:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"词云简介","slug":"词云简介","link":"#词云简介","children":[]},{"level":2,"title":"准备工作","slug":"准备工作","link":"#准备工作","children":[]},{"level":2,"title":"基本算法","slug":"基本算法","link":"#基本算法","children":[]},{"level":2,"title":"算法实现","slug":"算法实现","link":"#算法实现","children":[]},{"level":2,"title":"运行测试","slug":"运行测试","link":"#运行测试","children":[]},{"level":2,"title":"资料","slug":"资料","link":"#资料","children":[]}],"git":{"createdTime":1697724028000,"updatedTime":1697724028000,"contributors":[{"name":"azrng","email":"itzhangyunpeng@163.com","commits":1}]},"readingTime":{"minutes":3.47,"words":1042},"filePathRelative":"middleware/fenci/zhizuociyuntu.md","localizedDate":"2023年9月24日","excerpt":"<h2>词云简介</h2>\\n<p>“词云”由美国西北大学新闻学副教授、新媒体专业主任里奇·戈登（Rich Gordon）于2006年最先使用，是通过形成“关键词云层”或“关键词渲染”，对文本中出现频率较高的“关键词”的视觉上的突出。\\n网上大部分文章介绍的是使用Python的jieba、wordcloud的库生成词云图，本文则介绍在C#中如何使用jieba.NET、WordCloudSharp库生成词云图，后者是前者的.NET实现。</p>\\n<h2>准备工作</h2>\\n<p>创建一个C#的控制台项目，通过NuGet添加引用对jieba.NET、WordCloudSharp的引用，使用方法可以参考以下链接：</p>","autoDesc":true}');export{b as comp,h as data};
