import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o,c,a as n,d as s,e as t,b as l}from"./app-Bw62I61B.js";const i={},u=n("h2",{id:"refit",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#refit"},[n("span",null,"ReFit")])],-1),r={href:"https://github.com/reactiveui/refit",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.cnblogs.com/tx1185498724/p/15737061.html",target:"_blank",rel:"noopener noreferrer"},d=n("h2",{id:"webapiclientcore",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webapiclientcore"},[n("span",null,"WebApiClientCore")])],-1),m=n("p",null,"声明式调用的请求方式。",-1),v={href:"https://github.com/dotnetcore/WebApiClient",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/kewei/p/12939866.html",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"restsharp",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#restsharp"},[n("span",null,"RestSharp")])],-1),g={href:"https://restsharp.dev/",target:"_blank",rel:"noopener noreferrer"},y=l(`<div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RestClient</span><span class="token punctuation">(</span><span class="token string">&quot;http://example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// client.Authenticator = new HttpBasicAuthenticator(username, password);</span>
 <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RestRequest</span><span class="token punctuation">(</span><span class="token string">&quot;resource/{id}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 request<span class="token punctuation">.</span><span class="token function">AddParameter</span><span class="token punctuation">(</span><span class="token string">&quot;thing1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 request<span class="token punctuation">.</span><span class="token function">AddParameter</span><span class="token punctuation">(</span><span class="token string">&quot;thing2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 request<span class="token punctuation">.</span><span class="token function">AddHeader</span><span class="token punctuation">(</span><span class="token string">&quot;header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 request<span class="token punctuation">.</span><span class="token function">AddFile</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name"><span class="token keyword">var</span></span> content <span class="token operator">=</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">;</span> <span class="token comment">// Raw content as string</span>
 <span class="token class-name"><span class="token keyword">var</span></span> response2 <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Post</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name"><span class="token keyword">var</span></span> name <span class="token operator">=</span> response2<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FormData上传文件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RestClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RestRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> Method<span class="token punctuation">.</span>Post<span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">AddFile</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> stream<span class="token punctuation">,</span> <span class="token string">&quot;file.zip&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Content<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="flurl-http" tabindex="-1"><a class="header-anchor" href="#flurl-http"><span>Flurl.Http</span></a></h2><p>拥有便捷易用的API接口，底层使用的是HttpClient，而且支持移植，可以在Nuget上获取</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> responseString <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">&quot;http://www.example.com/recepticle.aspx&quot;</span>
    <span class="token punctuation">.</span><span class="token function">PostUrlEncodedAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">{</span> thing1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> thing2 <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ReceiveString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> responseString <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">&quot;http://www.example.com/recepticle.aspx&quot;</span>
    <span class="token punctuation">.</span><span class="token function">GetStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FormData 上传文件</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">SendPostFileBytesByFormDataAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">,</span>
     <span class="token class-name"><span class="token keyword">string</span></span> formParamKey <span class="token operator">=</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> headKey <span class="token operator">=</span> <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span>
     <span class="token class-name"><span class="token keyword">string</span></span> headKeyValue <span class="token operator">=</span> <span class="token string">&quot;multipart/form-data&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultipartFormDataContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> byteContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ByteArrayContent</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    byteContent<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentDisposition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContentDispositionHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;form-data&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> formParamKey<span class="token punctuation">,</span>
        FileName <span class="token operator">=</span> fileName
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    formData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>byteContent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span>headKey<span class="token punctuation">,</span> headKeyValue<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReceiveString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> <span class="token function">SendPostFileStreamByFormDataAsync</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> url<span class="token punctuation">,</span> <span class="token class-name">Stream</span> bytes<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> fileName<span class="token punctuation">,</span>
     <span class="token class-name"><span class="token keyword">string</span></span> formParamKey <span class="token operator">=</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> headKey <span class="token operator">=</span> <span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span>
     <span class="token class-name"><span class="token keyword">string</span></span> headKeyValue <span class="token operator">=</span> <span class="token string">&quot;multipart/form-data&quot;</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultipartFormDataContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> byteContent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StreamContent</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    byteContent<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>ContentDisposition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ContentDispositionHeaderValue</span><span class="token punctuation">(</span><span class="token string">&quot;form-data&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Name <span class="token operator">=</span> formParamKey<span class="token punctuation">,</span>
        FileName <span class="token operator">=</span> fileName
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    formData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>byteContent<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">await</span> url<span class="token punctuation">.</span><span class="token function">WithHeader</span><span class="token punctuation">(</span>headKey<span class="token punctuation">,</span> headKeyValue<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromMinutes</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReceiveString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这个文件名必须传，很重要</p></blockquote>`,9);function f(w,q){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("Refit 是一个类型安全的 REST 开源库，是一套基于 RESTful 架构的 .NET 客户端实现，内部使用 HttpClient 类封装，可通过 Refit 更加简单安全地访问 Web API 接口，要使用Refit 框架，只需要在项目中通过 NuGet 包安装器安装即可。声明式调用 github："),n("a",r,[s("https://github.com/reactiveui/refit"),t(a)])]),n("p",null,[s("参考示例："),n("a",k,[s("https://www.cnblogs.com/tx1185498724/p/15737061.html"),t(a)])]),d,m,n("p",null,[s("仓库地址："),n("a",v,[s("https://github.com/dotnetcore/WebApiClient"),t(a)]),s(" 参考文档："),n("a",h,[s("https://www.cnblogs.com/kewei/p/12939866.html"),t(a)])]),b,n("p",null,[s("官网："),n("a",g,[s("https://restsharp.dev/"),t(a)]),s(" 调用api接口的组件")]),y])}const C=e(i,[["render",f],["__file","restkaiyuanku.html.vue"]]),T=JSON.parse('{"path":"/dotnet/api/remoteProcedureCall/restkaiyuanku.html","title":"REST 开源库","lang":"zh-CN","frontmatter":{"title":"REST 开源库","lang":"zh-CN","date":"2023-06-24T00:00:00.000Z","publish":true,"author":"azrng","isOriginal":true,"category":["dotNET"],"tag":["无"],"filename":"restkaiyuanku","slug":"zhnfuf","docsId":"32029763","description":"ReFit Refit 是一个类型安全的 REST 开源库，是一套基于 RESTful 架构的 .NET 客户端实现，内部使用 HttpClient 类封装，可通过 Refit 更加简单安全地访问 Web API 接口，要使用Refit 框架，只需要在项目中通过 NuGet 包安装器安装即可。声明式调用 github：https://github.co...","head":[["meta",{"property":"og:url","content":"https://azrng.gitee.io/kbms/kbms/dotnet/api/remoteProcedureCall/restkaiyuanku.html"}],["meta",{"property":"og:site_name","content":"知识库"}],["meta",{"property":"og:title","content":"REST 开源库"}],["meta",{"property":"og:description","content":"ReFit Refit 是一个类型安全的 REST 开源库，是一套基于 RESTful 架构的 .NET 客户端实现，内部使用 HttpClient 类封装，可通过 Refit 更加简单安全地访问 Web API 接口，要使用Refit 框架，只需要在项目中通过 NuGet 包安装器安装即可。声明式调用 github：https://github.co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-09T07:25:08.000Z"}],["meta",{"property":"article:author","content":"azrng"}],["meta",{"property":"article:tag","content":"无"}],["meta",{"property":"article:published_time","content":"2023-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-09T07:25:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"REST 开源库\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-09T07:25:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"azrng\\"}]}"]]},"headers":[{"level":2,"title":"ReFit","slug":"refit","link":"#refit","children":[]},{"level":2,"title":"WebApiClientCore","slug":"webapiclientcore","link":"#webapiclientcore","children":[]},{"level":2,"title":"RestSharp","slug":"restsharp","link":"#restsharp","children":[]},{"level":2,"title":"Flurl.Http","slug":"flurl-http","link":"#flurl-http","children":[]}],"git":{"createdTime":1697962303000,"updatedTime":1709969108000,"contributors":[{"name":"zhangyunpeng","email":"zhang.yunpeng@synyi.com","commits":1}]},"readingTime":{"minutes":1.42,"words":427},"filePathRelative":"dotnet/api/remoteProcedureCall/restkaiyuanku.md","localizedDate":"2023年6月24日","excerpt":"<h2>ReFit</h2>\\n<p>Refit 是一个类型安全的 REST 开源库，是一套基于 RESTful 架构的 .NET 客户端实现，内部使用 HttpClient 类封装，可通过 Refit 更加简单安全地访问 Web API 接口，要使用Refit 框架，只需要在项目中通过 NuGet 包安装器安装即可。声明式调用\\ngithub：<a href=\\"https://github.com/reactiveui/refit\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/reactiveui/refit</a></p>","autoDesc":true}');export{C as comp,T as data};
